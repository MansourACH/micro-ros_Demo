
uROS_F407_DISC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001044  0801a1b0  0801a1b0  0002a1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b1f4  0801b1f4  0003043c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b1f4  0801b1f4  0002b1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b1fc  0801b1fc  0003043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801b1fc  0801b1fc  0002b1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b208  0801b208  0002b208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  0801b20c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003043c  2**0
                  CONTENTS
 10 .bss          0000f57c  20000440  20000440  00030440  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000f9bc  2000f9bc  00030440  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003043c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f740  00000000  00000000  0003046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005dfb  00000000  00000000  0005fbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d30  00000000  00000000  000659a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b08  00000000  00000000  000676d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c106  00000000  00000000  000691e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e53  00000000  00000000  000752e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4a4c  00000000  00000000  0009a139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0017eb85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088b8  00000000  00000000  0017ec0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  001874c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000440 	.word	0x20000440
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a198 	.word	0x0801a198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000444 	.word	0x20000444
 80001cc:	0801a198 	.word	0x0801a198

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__gedf2>:
 80002a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80002a4:	e006      	b.n	80002b4 <__cmpdf2+0x4>
 80002a6:	bf00      	nop

080002a8 <__ledf2>:
 80002a8:	f04f 0c01 	mov.w	ip, #1
 80002ac:	e002      	b.n	80002b4 <__cmpdf2+0x4>
 80002ae:	bf00      	nop

080002b0 <__cmpdf2>:
 80002b0:	f04f 0c01 	mov.w	ip, #1
 80002b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80002b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80002bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80002c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80002c4:	bf18      	it	ne
 80002c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80002ca:	d01b      	beq.n	8000304 <__cmpdf2+0x54>
 80002cc:	b001      	add	sp, #4
 80002ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80002d2:	bf0c      	ite	eq
 80002d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80002d8:	ea91 0f03 	teqne	r1, r3
 80002dc:	bf02      	ittt	eq
 80002de:	ea90 0f02 	teqeq	r0, r2
 80002e2:	2000      	moveq	r0, #0
 80002e4:	4770      	bxeq	lr
 80002e6:	f110 0f00 	cmn.w	r0, #0
 80002ea:	ea91 0f03 	teq	r1, r3
 80002ee:	bf58      	it	pl
 80002f0:	4299      	cmppl	r1, r3
 80002f2:	bf08      	it	eq
 80002f4:	4290      	cmpeq	r0, r2
 80002f6:	bf2c      	ite	cs
 80002f8:	17d8      	asrcs	r0, r3, #31
 80002fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80002fe:	f040 0001 	orr.w	r0, r0, #1
 8000302:	4770      	bx	lr
 8000304:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000308:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800030c:	d102      	bne.n	8000314 <__cmpdf2+0x64>
 800030e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000312:	d107      	bne.n	8000324 <__cmpdf2+0x74>
 8000314:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000318:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800031c:	d1d6      	bne.n	80002cc <__cmpdf2+0x1c>
 800031e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000322:	d0d3      	beq.n	80002cc <__cmpdf2+0x1c>
 8000324:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop

0800032c <__aeabi_cdrcmple>:
 800032c:	4684      	mov	ip, r0
 800032e:	4610      	mov	r0, r2
 8000330:	4662      	mov	r2, ip
 8000332:	468c      	mov	ip, r1
 8000334:	4619      	mov	r1, r3
 8000336:	4663      	mov	r3, ip
 8000338:	e000      	b.n	800033c <__aeabi_cdcmpeq>
 800033a:	bf00      	nop

0800033c <__aeabi_cdcmpeq>:
 800033c:	b501      	push	{r0, lr}
 800033e:	f7ff ffb7 	bl	80002b0 <__cmpdf2>
 8000342:	2800      	cmp	r0, #0
 8000344:	bf48      	it	mi
 8000346:	f110 0f00 	cmnmi.w	r0, #0
 800034a:	bd01      	pop	{r0, pc}

0800034c <__aeabi_dcmpeq>:
 800034c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000350:	f7ff fff4 	bl	800033c <__aeabi_cdcmpeq>
 8000354:	bf0c      	ite	eq
 8000356:	2001      	moveq	r0, #1
 8000358:	2000      	movne	r0, #0
 800035a:	f85d fb08 	ldr.w	pc, [sp], #8
 800035e:	bf00      	nop

08000360 <__aeabi_dcmplt>:
 8000360:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000364:	f7ff ffea 	bl	800033c <__aeabi_cdcmpeq>
 8000368:	bf34      	ite	cc
 800036a:	2001      	movcc	r0, #1
 800036c:	2000      	movcs	r0, #0
 800036e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000372:	bf00      	nop

08000374 <__aeabi_dcmple>:
 8000374:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000378:	f7ff ffe0 	bl	800033c <__aeabi_cdcmpeq>
 800037c:	bf94      	ite	ls
 800037e:	2001      	movls	r0, #1
 8000380:	2000      	movhi	r0, #0
 8000382:	f85d fb08 	ldr.w	pc, [sp], #8
 8000386:	bf00      	nop

08000388 <__aeabi_dcmpge>:
 8000388:	f84d ed08 	str.w	lr, [sp, #-8]!
 800038c:	f7ff ffce 	bl	800032c <__aeabi_cdrcmple>
 8000390:	bf94      	ite	ls
 8000392:	2001      	movls	r0, #1
 8000394:	2000      	movhi	r0, #0
 8000396:	f85d fb08 	ldr.w	pc, [sp], #8
 800039a:	bf00      	nop

0800039c <__aeabi_dcmpgt>:
 800039c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80003a0:	f7ff ffc4 	bl	800032c <__aeabi_cdrcmple>
 80003a4:	bf34      	ite	cc
 80003a6:	2001      	movcc	r0, #1
 80003a8:	2000      	movcs	r0, #0
 80003aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003ce:	f000 b9b9 	b.w	8000744 <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000464:	f000 b96e 	b.w	8000744 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	468c      	mov	ip, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	f040 8083 	bne.w	8000596 <__udivmoddi4+0x116>
 8000490:	428a      	cmp	r2, r1
 8000492:	4617      	mov	r7, r2
 8000494:	d947      	bls.n	8000526 <__udivmoddi4+0xa6>
 8000496:	fab2 f282 	clz	r2, r2
 800049a:	b142      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049c:	f1c2 0020 	rsb	r0, r2, #32
 80004a0:	fa24 f000 	lsr.w	r0, r4, r0
 80004a4:	4091      	lsls	r1, r2
 80004a6:	4097      	lsls	r7, r2
 80004a8:	ea40 0c01 	orr.w	ip, r0, r1
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbbc f6f8 	udiv	r6, ip, r8
 80004b8:	fa1f fe87 	uxth.w	lr, r7
 80004bc:	fb08 c116 	mls	r1, r8, r6, ip
 80004c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c4:	fb06 f10e 	mul.w	r1, r6, lr
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004d2:	f080 8119 	bcs.w	8000708 <__udivmoddi4+0x288>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8116 	bls.w	8000708 <__udivmoddi4+0x288>
 80004dc:	3e02      	subs	r6, #2
 80004de:	443b      	add	r3, r7
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	193c      	adds	r4, r7, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004fe:	f080 8105 	bcs.w	800070c <__udivmoddi4+0x28c>
 8000502:	45a6      	cmp	lr, r4
 8000504:	f240 8102 	bls.w	800070c <__udivmoddi4+0x28c>
 8000508:	3802      	subs	r0, #2
 800050a:	443c      	add	r4, r7
 800050c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000510:	eba4 040e 	sub.w	r4, r4, lr
 8000514:	2600      	movs	r6, #0
 8000516:	b11d      	cbz	r5, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c5 4300 	strd	r4, r3, [r5]
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	b902      	cbnz	r2, 800052a <__udivmoddi4+0xaa>
 8000528:	deff      	udf	#255	; 0xff
 800052a:	fab2 f282 	clz	r2, r2
 800052e:	2a00      	cmp	r2, #0
 8000530:	d150      	bne.n	80005d4 <__udivmoddi4+0x154>
 8000532:	1bcb      	subs	r3, r1, r7
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	fa1f f887 	uxth.w	r8, r7
 800053c:	2601      	movs	r6, #1
 800053e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000542:	0c21      	lsrs	r1, r4, #16
 8000544:	fb0e 331c 	mls	r3, lr, ip, r3
 8000548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054c:	fb08 f30c 	mul.w	r3, r8, ip
 8000550:	428b      	cmp	r3, r1
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000554:	1879      	adds	r1, r7, r1
 8000556:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800055a:	d202      	bcs.n	8000562 <__udivmoddi4+0xe2>
 800055c:	428b      	cmp	r3, r1
 800055e:	f200 80e9 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 8000562:	4684      	mov	ip, r0
 8000564:	1ac9      	subs	r1, r1, r3
 8000566:	b2a3      	uxth	r3, r4
 8000568:	fbb1 f0fe 	udiv	r0, r1, lr
 800056c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000570:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000574:	fb08 f800 	mul.w	r8, r8, r0
 8000578:	45a0      	cmp	r8, r4
 800057a:	d907      	bls.n	800058c <__udivmoddi4+0x10c>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x10a>
 8000584:	45a0      	cmp	r8, r4
 8000586:	f200 80d9 	bhi.w	800073c <__udivmoddi4+0x2bc>
 800058a:	4618      	mov	r0, r3
 800058c:	eba4 0408 	sub.w	r4, r4, r8
 8000590:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000594:	e7bf      	b.n	8000516 <__udivmoddi4+0x96>
 8000596:	428b      	cmp	r3, r1
 8000598:	d909      	bls.n	80005ae <__udivmoddi4+0x12e>
 800059a:	2d00      	cmp	r5, #0
 800059c:	f000 80b1 	beq.w	8000702 <__udivmoddi4+0x282>
 80005a0:	2600      	movs	r6, #0
 80005a2:	e9c5 0100 	strd	r0, r1, [r5]
 80005a6:	4630      	mov	r0, r6
 80005a8:	4631      	mov	r1, r6
 80005aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ae:	fab3 f683 	clz	r6, r3
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d14a      	bne.n	800064c <__udivmoddi4+0x1cc>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d302      	bcc.n	80005c0 <__udivmoddi4+0x140>
 80005ba:	4282      	cmp	r2, r0
 80005bc:	f200 80b8 	bhi.w	8000730 <__udivmoddi4+0x2b0>
 80005c0:	1a84      	subs	r4, r0, r2
 80005c2:	eb61 0103 	sbc.w	r1, r1, r3
 80005c6:	2001      	movs	r0, #1
 80005c8:	468c      	mov	ip, r1
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0a8      	beq.n	8000520 <__udivmoddi4+0xa0>
 80005ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80005d2:	e7a5      	b.n	8000520 <__udivmoddi4+0xa0>
 80005d4:	f1c2 0320 	rsb	r3, r2, #32
 80005d8:	fa20 f603 	lsr.w	r6, r0, r3
 80005dc:	4097      	lsls	r7, r2
 80005de:	fa01 f002 	lsl.w	r0, r1, r2
 80005e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005e6:	40d9      	lsrs	r1, r3
 80005e8:	4330      	orrs	r0, r6
 80005ea:	0c03      	lsrs	r3, r0, #16
 80005ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80005f0:	fa1f f887 	uxth.w	r8, r7
 80005f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80005f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005fc:	fb06 f108 	mul.w	r1, r6, r8
 8000600:	4299      	cmp	r1, r3
 8000602:	fa04 f402 	lsl.w	r4, r4, r2
 8000606:	d909      	bls.n	800061c <__udivmoddi4+0x19c>
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800060e:	f080 808d 	bcs.w	800072c <__udivmoddi4+0x2ac>
 8000612:	4299      	cmp	r1, r3
 8000614:	f240 808a 	bls.w	800072c <__udivmoddi4+0x2ac>
 8000618:	3e02      	subs	r6, #2
 800061a:	443b      	add	r3, r7
 800061c:	1a5b      	subs	r3, r3, r1
 800061e:	b281      	uxth	r1, r0
 8000620:	fbb3 f0fe 	udiv	r0, r3, lr
 8000624:	fb0e 3310 	mls	r3, lr, r0, r3
 8000628:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062c:	fb00 f308 	mul.w	r3, r0, r8
 8000630:	428b      	cmp	r3, r1
 8000632:	d907      	bls.n	8000644 <__udivmoddi4+0x1c4>
 8000634:	1879      	adds	r1, r7, r1
 8000636:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800063a:	d273      	bcs.n	8000724 <__udivmoddi4+0x2a4>
 800063c:	428b      	cmp	r3, r1
 800063e:	d971      	bls.n	8000724 <__udivmoddi4+0x2a4>
 8000640:	3802      	subs	r0, #2
 8000642:	4439      	add	r1, r7
 8000644:	1acb      	subs	r3, r1, r3
 8000646:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800064a:	e778      	b.n	800053e <__udivmoddi4+0xbe>
 800064c:	f1c6 0c20 	rsb	ip, r6, #32
 8000650:	fa03 f406 	lsl.w	r4, r3, r6
 8000654:	fa22 f30c 	lsr.w	r3, r2, ip
 8000658:	431c      	orrs	r4, r3
 800065a:	fa20 f70c 	lsr.w	r7, r0, ip
 800065e:	fa01 f306 	lsl.w	r3, r1, r6
 8000662:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000666:	fa21 f10c 	lsr.w	r1, r1, ip
 800066a:	431f      	orrs	r7, r3
 800066c:	0c3b      	lsrs	r3, r7, #16
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fa1f f884 	uxth.w	r8, r4
 8000676:	fb0e 1119 	mls	r1, lr, r9, r1
 800067a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800067e:	fb09 fa08 	mul.w	sl, r9, r8
 8000682:	458a      	cmp	sl, r1
 8000684:	fa02 f206 	lsl.w	r2, r2, r6
 8000688:	fa00 f306 	lsl.w	r3, r0, r6
 800068c:	d908      	bls.n	80006a0 <__udivmoddi4+0x220>
 800068e:	1861      	adds	r1, r4, r1
 8000690:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000694:	d248      	bcs.n	8000728 <__udivmoddi4+0x2a8>
 8000696:	458a      	cmp	sl, r1
 8000698:	d946      	bls.n	8000728 <__udivmoddi4+0x2a8>
 800069a:	f1a9 0902 	sub.w	r9, r9, #2
 800069e:	4421      	add	r1, r4
 80006a0:	eba1 010a 	sub.w	r1, r1, sl
 80006a4:	b2bf      	uxth	r7, r7
 80006a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80006aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80006ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80006b2:	fb00 f808 	mul.w	r8, r0, r8
 80006b6:	45b8      	cmp	r8, r7
 80006b8:	d907      	bls.n	80006ca <__udivmoddi4+0x24a>
 80006ba:	19e7      	adds	r7, r4, r7
 80006bc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80006c0:	d22e      	bcs.n	8000720 <__udivmoddi4+0x2a0>
 80006c2:	45b8      	cmp	r8, r7
 80006c4:	d92c      	bls.n	8000720 <__udivmoddi4+0x2a0>
 80006c6:	3802      	subs	r0, #2
 80006c8:	4427      	add	r7, r4
 80006ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006ce:	eba7 0708 	sub.w	r7, r7, r8
 80006d2:	fba0 8902 	umull	r8, r9, r0, r2
 80006d6:	454f      	cmp	r7, r9
 80006d8:	46c6      	mov	lr, r8
 80006da:	4649      	mov	r1, r9
 80006dc:	d31a      	bcc.n	8000714 <__udivmoddi4+0x294>
 80006de:	d017      	beq.n	8000710 <__udivmoddi4+0x290>
 80006e0:	b15d      	cbz	r5, 80006fa <__udivmoddi4+0x27a>
 80006e2:	ebb3 020e 	subs.w	r2, r3, lr
 80006e6:	eb67 0701 	sbc.w	r7, r7, r1
 80006ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006ee:	40f2      	lsrs	r2, r6
 80006f0:	ea4c 0202 	orr.w	r2, ip, r2
 80006f4:	40f7      	lsrs	r7, r6
 80006f6:	e9c5 2700 	strd	r2, r7, [r5]
 80006fa:	2600      	movs	r6, #0
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	462e      	mov	r6, r5
 8000704:	4628      	mov	r0, r5
 8000706:	e70b      	b.n	8000520 <__udivmoddi4+0xa0>
 8000708:	4606      	mov	r6, r0
 800070a:	e6e9      	b.n	80004e0 <__udivmoddi4+0x60>
 800070c:	4618      	mov	r0, r3
 800070e:	e6fd      	b.n	800050c <__udivmoddi4+0x8c>
 8000710:	4543      	cmp	r3, r8
 8000712:	d2e5      	bcs.n	80006e0 <__udivmoddi4+0x260>
 8000714:	ebb8 0e02 	subs.w	lr, r8, r2
 8000718:	eb69 0104 	sbc.w	r1, r9, r4
 800071c:	3801      	subs	r0, #1
 800071e:	e7df      	b.n	80006e0 <__udivmoddi4+0x260>
 8000720:	4608      	mov	r0, r1
 8000722:	e7d2      	b.n	80006ca <__udivmoddi4+0x24a>
 8000724:	4660      	mov	r0, ip
 8000726:	e78d      	b.n	8000644 <__udivmoddi4+0x1c4>
 8000728:	4681      	mov	r9, r0
 800072a:	e7b9      	b.n	80006a0 <__udivmoddi4+0x220>
 800072c:	4666      	mov	r6, ip
 800072e:	e775      	b.n	800061c <__udivmoddi4+0x19c>
 8000730:	4630      	mov	r0, r6
 8000732:	e74a      	b.n	80005ca <__udivmoddi4+0x14a>
 8000734:	f1ac 0c02 	sub.w	ip, ip, #2
 8000738:	4439      	add	r1, r7
 800073a:	e713      	b.n	8000564 <__udivmoddi4+0xe4>
 800073c:	3802      	subs	r0, #2
 800073e:	443c      	add	r4, r7
 8000740:	e724      	b.n	800058c <__udivmoddi4+0x10c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000754:	f009 f928 	bl	80099a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000758:	4b58      	ldr	r3, [pc, #352]	; (80008bc <pvPortMallocMicroROS+0x174>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d101      	bne.n	8000764 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000760:	f000 f980 	bl	8000a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000764:	4b56      	ldr	r3, [pc, #344]	; (80008c0 <pvPortMallocMicroROS+0x178>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4013      	ands	r3, r2
 800076c:	2b00      	cmp	r3, #0
 800076e:	f040 808e 	bne.w	800088e <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d01d      	beq.n	80007b4 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000778:	2208      	movs	r2, #8
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	2b00      	cmp	r3, #0
 8000788:	d014      	beq.n	80007b4 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f023 0307 	bic.w	r3, r3, #7
 8000790:	3308      	adds	r3, #8
 8000792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	2b00      	cmp	r3, #0
 800079c:	d00a      	beq.n	80007b4 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007b0:	bf00      	nop
 80007b2:	e7fe      	b.n	80007b2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d069      	beq.n	800088e <pvPortMallocMicroROS+0x146>
 80007ba:	4b42      	ldr	r3, [pc, #264]	; (80008c4 <pvPortMallocMicroROS+0x17c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d864      	bhi.n	800088e <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007c4:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <pvPortMallocMicroROS+0x180>)
 80007c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007c8:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <pvPortMallocMicroROS+0x180>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007ce:	e004      	b.n	80007da <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d903      	bls.n	80007ec <pvPortMallocMicroROS+0xa4>
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f1      	bne.n	80007d0 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <pvPortMallocMicroROS+0x174>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d04b      	beq.n	800088e <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2208      	movs	r2, #8
 80007fc:	4413      	add	r3, r2
 80007fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	1ad2      	subs	r2, r2, r3
 8000810:	2308      	movs	r3, #8
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	429a      	cmp	r2, r3
 8000816:	d91f      	bls.n	8000858 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00a      	beq.n	8000840 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800082a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082e:	f383 8811 	msr	BASEPRI, r3
 8000832:	f3bf 8f6f 	isb	sy
 8000836:	f3bf 8f4f 	dsb	sy
 800083a:	613b      	str	r3, [r7, #16]
}
 800083c:	bf00      	nop
 800083e:	e7fe      	b.n	800083e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1ad2      	subs	r2, r2, r3
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000852:	69b8      	ldr	r0, [r7, #24]
 8000854:	f000 f968 	bl	8000b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <pvPortMallocMicroROS+0x17c>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <pvPortMallocMicroROS+0x17c>)
 8000864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <pvPortMallocMicroROS+0x17c>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <pvPortMallocMicroROS+0x184>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d203      	bcs.n	800087a <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <pvPortMallocMicroROS+0x17c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <pvPortMallocMicroROS+0x184>)
 8000878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <pvPortMallocMicroROS+0x178>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	431a      	orrs	r2, r3
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800088e:	f009 f899 	bl	80099c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00a      	beq.n	80008b2 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 800089c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a0:	f383 8811 	msr	BASEPRI, r3
 80008a4:	f3bf 8f6f 	isb	sy
 80008a8:	f3bf 8f4f 	dsb	sy
 80008ac:	60fb      	str	r3, [r7, #12]
}
 80008ae:	bf00      	nop
 80008b0:	e7fe      	b.n	80008b0 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80008b2:	69fb      	ldr	r3, [r7, #28]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20004064 	.word	0x20004064
 80008c0:	20004070 	.word	0x20004070
 80008c4:	20004068 	.word	0x20004068
 80008c8:	2000405c 	.word	0x2000405c
 80008cc:	2000406c 	.word	0x2000406c

080008d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d048      	beq.n	8000974 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008e2:	2308      	movs	r3, #8
 80008e4:	425b      	negs	r3, r3
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <vPortFreeMicroROS+0xac>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10a      	bne.n	8000914 <vPortFreeMicroROS+0x44>
	__asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	60fb      	str	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	e7fe      	b.n	8000912 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00a      	beq.n	8000932 <vPortFreeMicroROS+0x62>
	__asm volatile
 800091c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000920:	f383 8811 	msr	BASEPRI, r3
 8000924:	f3bf 8f6f 	isb	sy
 8000928:	f3bf 8f4f 	dsb	sy
 800092c:	60bb      	str	r3, [r7, #8]
}
 800092e:	bf00      	nop
 8000930:	e7fe      	b.n	8000930 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	685a      	ldr	r2, [r3, #4]
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <vPortFreeMicroROS+0xac>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4013      	ands	r3, r2
 800093c:	2b00      	cmp	r3, #0
 800093e:	d019      	beq.n	8000974 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d115      	bne.n	8000974 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <vPortFreeMicroROS+0xac>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	43db      	mvns	r3, r3
 8000952:	401a      	ands	r2, r3
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000958:	f009 f826 	bl	80099a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <vPortFreeMicroROS+0xb0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4413      	add	r3, r2
 8000966:	4a06      	ldr	r2, [pc, #24]	; (8000980 <vPortFreeMicroROS+0xb0>)
 8000968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800096a:	6938      	ldr	r0, [r7, #16]
 800096c:	f000 f8dc 	bl	8000b28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000970:	f009 f828 	bl	80099c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20004070 	.word	0x20004070
 8000980:	20004068 	.word	0x20004068

08000984 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000990:	2308      	movs	r3, #8
 8000992:	425b      	negs	r3, r3
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	4413      	add	r3, r2
 8000998:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <getBlockSize+0x38>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	43db      	mvns	r3, r3
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]

	return count;
 80009ac:	68fb      	ldr	r3, [r7, #12]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20004070 	.word	0x20004070

080009c0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009ca:	f008 ffed 	bl	80099a8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f7ff feba 	bl	8000748 <pvPortMallocMicroROS>
 80009d4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d017      	beq.n	8000a0c <pvPortReallocMicroROS+0x4c>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d014      	beq.n	8000a0c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffce 	bl	8000984 <getBlockSize>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2208      	movs	r2, #8
 80009ec:	1a9b      	subs	r3, r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d201      	bcs.n	80009fc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	68b8      	ldr	r0, [r7, #8]
 8000a02:	f018 f879 	bl	8018af8 <memcpy>

		vPortFreeMicroROS(pv);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ff62 	bl	80008d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a0c:	f008 ffda 	bl	80099c4 <xTaskResumeAll>

	return newmem;
 8000a10:	68bb      	ldr	r3, [r7, #8]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a24:	f008 ffc0 	bl	80099a8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	fb02 f303 	mul.w	r3, r2, r3
 8000a30:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a32:	6978      	ldr	r0, [r7, #20]
 8000a34:	f7ff fe88 	bl	8000748 <pvPortMallocMicroROS>
 8000a38:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a3e:	e004      	b.n	8000a4a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	613a      	str	r2, [r7, #16]
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	617a      	str	r2, [r7, #20]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1f5      	bne.n	8000a40 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a54:	f008 ffb6 	bl	80099c4 <xTaskResumeAll>
  	return mem;
 8000a58:	68fb      	ldr	r3, [r7, #12]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <prvHeapInit+0xac>)
 8000a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00c      	beq.n	8000a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3307      	adds	r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f023 0307 	bic.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <prvHeapInit+0xac>)
 8000a94:	4413      	add	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <prvHeapInit+0xb0>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <prvHeapInit+0xb0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	4413      	add	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	1a9b      	subs	r3, r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f023 0307 	bic.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <prvHeapInit+0xb4>)
 8000ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <prvHeapInit+0xb4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <prvHeapInit+0xb4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	1ad2      	subs	r2, r2, r3
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <prvHeapInit+0xb4>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <prvHeapInit+0xb8>)
 8000af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <prvHeapInit+0xbc>)
 8000afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <prvHeapInit+0xc0>)
 8000afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	2000045c 	.word	0x2000045c
 8000b14:	2000405c 	.word	0x2000405c
 8000b18:	20004064 	.word	0x20004064
 8000b1c:	2000406c 	.word	0x2000406c
 8000b20:	20004068 	.word	0x20004068
 8000b24:	20004070 	.word	0x20004070

08000b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <prvInsertBlockIntoFreeList+0xac>)
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e002      	b.n	8000b3c <prvInsertBlockIntoFreeList+0x14>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d8f7      	bhi.n	8000b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	4413      	add	r3, r2
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d108      	bne.n	8000b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	441a      	add	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	441a      	add	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d118      	bne.n	8000bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d00d      	beq.n	8000ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	441a      	add	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e008      	b.n	8000bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e003      	b.n	8000bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d002      	beq.n	8000bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000405c 	.word	0x2000405c
 8000bd8:	20004064 	.word	0x20004064

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 ffd4 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f81a 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f000 f8d4 	bl	8000d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bec:	f000 f8aa 	bl	8000d44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bf0:	f000 f87e 	bl	8000cf0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bf4:	f007 fdd0 	bl	8008798 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bf8:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <main+0x34>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <main+0x38>)
 8000bfe:	f007 fe15 	bl	800882c <osThreadNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <main+0x3c>)
 8000c06:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c08:	f007 fdea 	bl	80087e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <main+0x30>
 8000c0e:	bf00      	nop
 8000c10:	0801a2a8 	.word	0x0801a2a8
 8000c14:	08000f79 	.word	0x08000f79
 8000c18:	2000df40 	.word	0x2000df40

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b094      	sub	sp, #80	; 0x50
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0320 	add.w	r3, r7, #32
 8000c26:	2230      	movs	r2, #48	; 0x30
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f017 ff8c 	bl	8018b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <SystemClock_Config+0xcc>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <SystemClock_Config+0xcc>)
 8000c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <SystemClock_Config+0xcc>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <SystemClock_Config+0xd0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a21      	ldr	r2, [pc, #132]	; (8000cec <SystemClock_Config+0xd0>)
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <SystemClock_Config+0xd0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 ff6e 	bl	8003b84 <HAL_RCC_OscConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cae:	f000 fa39 	bl	8001124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	2105      	movs	r1, #5
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f003 f9cf 	bl	8004074 <HAL_RCC_ClockConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cdc:	f000 fa22 	bl	8001124 <Error_Handler>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3750      	adds	r7, #80	; 0x50
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40007000 	.word	0x40007000

08000cf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MX_USART2_UART_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d28:	f003 fe80 	bl	8004a2c <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d32:	f000 f9f7 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000e004 	.word	0x2000e004
 8000d40:	40004400 	.word	0x40004400

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_DMA_Init+0x4c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <MX_DMA_Init+0x4c>)
 8000d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_DMA_Init+0x4c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2105      	movs	r1, #5
 8000d6a:	2010      	movs	r0, #16
 8000d6c:	f001 f82c 	bl	8001dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d70:	2010      	movs	r0, #16
 8000d72:	f001 f845 	bl	8001e00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2105      	movs	r1, #5
 8000d7a:	2011      	movs	r0, #17
 8000d7c:	f001 f824 	bl	8001dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d80:	2011      	movs	r0, #17
 8000d82:	f001 f83d 	bl	8001e00 <HAL_NVIC_EnableIRQ>

}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <MX_GPIO_Init+0x9c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <MX_GPIO_Init+0x9c>)
 8000db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_GPIO_Init+0x9c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_GPIO_Init+0x9c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <MX_GPIO_Init+0x9c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_GPIO_Init+0x9c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_GPIO_Init+0x9c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <MX_GPIO_Init+0x9c>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_GPIO_Init+0x9c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <MX_GPIO_Init+0xa0>)
 8000e06:	f001 fd21 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED5_Pin|LED6_Pin;
 8000e0a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_GPIO_Init+0xa0>)
 8000e24:	f001 fb76 	bl	8002514 <HAL_GPIO_Init>

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <subscription_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

//twist message cb
void subscription_callback(const void *msgin) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	60fb      	str	r3, [r7, #12]

  // if velocity in x direction is 0 turn off LED, if 1 turn on LED
  if (msg->linear.x > 0){
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	f7ff faa3 	bl	800039c <__aeabi_dcmpgt>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d018      	beq.n	8000e8e <subscription_callback+0x56>
	  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin,1);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e62:	4844      	ldr	r0, [pc, #272]	; (8000f74 <subscription_callback+0x13c>)
 8000e64:	f001 fcf2 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6e:	4841      	ldr	r0, [pc, #260]	; (8000f74 <subscription_callback+0x13c>)
 8000e70:	f001 fcec 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e7a:	483e      	ldr	r0, [pc, #248]	; (8000f74 <subscription_callback+0x13c>)
 8000e7c:	f001 fce6 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e86:	483b      	ldr	r0, [pc, #236]	; (8000f74 <subscription_callback+0x13c>)
 8000e88:	f001 fce0 	bl	800284c <HAL_GPIO_WritePin>
 8000e8c:	e023      	b.n	8000ed6 <subscription_callback+0x9e>
  	  }
	  else if (msg->linear.x < 0){
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	f7ff fa60 	bl	8000360 <__aeabi_dcmplt>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d017      	beq.n	8000ed6 <subscription_callback+0x9e>
	  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin,0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eac:	4831      	ldr	r0, [pc, #196]	; (8000f74 <subscription_callback+0x13c>)
 8000eae:	f001 fccd 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb8:	482e      	ldr	r0, [pc, #184]	; (8000f74 <subscription_callback+0x13c>)
 8000eba:	f001 fcc7 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec4:	482b      	ldr	r0, [pc, #172]	; (8000f74 <subscription_callback+0x13c>)
 8000ec6:	f001 fcc1 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed0:	4828      	ldr	r0, [pc, #160]	; (8000f74 <subscription_callback+0x13c>)
 8000ed2:	f001 fcbb 	bl	800284c <HAL_GPIO_WritePin>

	  }

  if (msg->linear.y > 0){
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	f7ff fa5a 	bl	800039c <__aeabi_dcmpgt>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d018      	beq.n	8000f20 <subscription_callback+0xe8>
	  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin,0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef4:	481f      	ldr	r0, [pc, #124]	; (8000f74 <subscription_callback+0x13c>)
 8000ef6:	f001 fca9 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f00:	481c      	ldr	r0, [pc, #112]	; (8000f74 <subscription_callback+0x13c>)
 8000f02:	f001 fca3 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0c:	4819      	ldr	r0, [pc, #100]	; (8000f74 <subscription_callback+0x13c>)
 8000f0e:	f001 fc9d 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f18:	4816      	ldr	r0, [pc, #88]	; (8000f74 <subscription_callback+0x13c>)
 8000f1a:	f001 fc97 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);

  }


}
 8000f1e:	e024      	b.n	8000f6a <subscription_callback+0x132>
  } else if (msg->linear.y < 0){
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	f7ff fa17 	bl	8000360 <__aeabi_dcmplt>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d100      	bne.n	8000f3a <subscription_callback+0x102>
}
 8000f38:	e017      	b.n	8000f6a <subscription_callback+0x132>
	  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin,0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <subscription_callback+0x13c>)
 8000f42:	f001 fc83 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <subscription_callback+0x13c>)
 8000f4e:	f001 fc7d 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <subscription_callback+0x13c>)
 8000f5a:	f001 fc77 	bl	800284c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <subscription_callback+0x13c>)
 8000f66:	f001 fc71 	bl	800284c <HAL_GPIO_WritePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b0d6      	sub	sp, #344	; 0x158
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000f84:	f00a f982 	bl	800b28c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

    rmw_uros_set_custom_transport(
 8000f88:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <StartDefaultTask+0x148>)
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <StartDefaultTask+0x14c>)
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <StartDefaultTask+0x150>)
 8000f92:	4a4e      	ldr	r2, [pc, #312]	; (80010cc <StartDefaultTask+0x154>)
 8000f94:	494e      	ldr	r1, [pc, #312]	; (80010d0 <StartDefaultTask+0x158>)
 8000f96:	2001      	movs	r0, #1
 8000f98:	f00d fac2 	bl	800e520 <rmw_uros_set_custom_transport>
      cubemx_transport_open,
      cubemx_transport_close,
      cubemx_transport_write,
      cubemx_transport_read);

    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000f9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00d f9ef 	bl	800e384 <rcutils_get_zero_initialized_allocator>
    freeRTOS_allocator.allocate = microros_allocate;
 8000fa6:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <StartDefaultTask+0x15c>)
 8000fa8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    freeRTOS_allocator.deallocate = microros_deallocate;
 8000fac:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <StartDefaultTask+0x160>)
 8000fae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    freeRTOS_allocator.reallocate = microros_reallocate;
 8000fb2:	4b4a      	ldr	r3, [pc, #296]	; (80010dc <StartDefaultTask+0x164>)
 8000fb4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000fb8:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <StartDefaultTask+0x168>)
 8000fba:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000fbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00d f9ec 	bl	800e3a0 <rcutils_set_default_allocator>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f083 0301 	eor.w	r3, r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <StartDefaultTask+0x66>
        printf("Error on default allocators (line %d)\n", __LINE__);
 8000fd4:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8000fd8:	4842      	ldr	r0, [pc, #264]	; (80010e4 <StartDefaultTask+0x16c>)
 8000fda:	f017 fe77 	bl	8018ccc <iprintf>
rcl_subscription_t subscriber; // Subscriber object
geometry_msgs__msg__Twist msg_sub; // Message object for receiving velocity commands
rclc_executor_t executor;  // Executor for managing callbacks

// Initialize the default allocator
allocator = rcl_get_default_allocator();
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00d f9fb 	bl	800e3dc <rcutils_get_default_allocator>
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8000fec:	461d      	mov	r5, r3
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	682b      	ldr	r3, [r5, #0]
 8000ff4:	6023      	str	r3, [r4, #0]

// Initialize the support structure with default options
rclc_support_init(&support, 0, NULL, &allocator);
 8000ff6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ffa:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	f00d f8c9 	bl	800e198 <rclc_support_init>

// Create a micro-ROS node with the name "TPE_Publisher"
rclc_node_init_default(&node, "TPE_Publisher", "", &support);
 8001006:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800100a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800100e:	4a36      	ldr	r2, [pc, #216]	; (80010e8 <StartDefaultTask+0x170>)
 8001010:	4936      	ldr	r1, [pc, #216]	; (80010ec <StartDefaultTask+0x174>)
 8001012:	f00d f90b 	bl	800e22c <rclc_node_init_default>

// Initialize the publisher to send messages of type std_msgs/Int32 on the "stm32_publisher" topic
rclc_publisher_init_default(
 8001016:	f00d ffdd 	bl	800efd4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800101a:	4602      	mov	r2, r0
 800101c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001020:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <StartDefaultTask+0x178>)
 8001026:	f00d f93d 	bl	800e2a4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "stm32_publisher"
);

// Initialize the subscriber to receive messages of type geometry_msgs/Twist on the "cmd_vel" topic
rclc_subscription_init_default(
 800102a:	f00a fe49 	bl	800bcc0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800102e:	4602      	mov	r2, r0
 8001030:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001034:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8001038:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <StartDefaultTask+0x17c>)
 800103a:	f00d f967 	bl	800e30c <rclc_subscription_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
    "cmd_vel"
);

// Initialize the executor to handle callbacks and link it to the context
rclc_executor_init(&executor, &support.context, 1, &allocator);
 800103e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001042:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8001046:	f107 0020 	add.w	r0, r7, #32
 800104a:	2201      	movs	r2, #1
 800104c:	f00c fddc 	bl	800dc08 <rclc_executor_init>

// Add the subscriber to the executor, linking it with a callback function
rclc_executor_add_subscription(&executor, &subscriber, &msg_sub, &subscription_callback, ON_NEW_DATA);
 8001050:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001054:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8001058:	f107 0020 	add.w	r0, r7, #32
 800105c:	2300      	movs	r3, #0
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <StartDefaultTask+0x180>)
 8001062:	f00c fe41 	bl	800dce8 <rclc_executor_add_subscription>

// Initialize the message data
msg.data = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

// Infinite loop for processing ROS2 communication
for (;;)
{
    // Spin the executor to process incoming subscriptions and callbacks
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800106c:	f107 0120 	add.w	r1, r7, #32
 8001070:	a311      	add	r3, pc, #68	; (adr r3, 80010b8 <StartDefaultTask+0x140>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	4608      	mov	r0, r1
 8001078:	f00d f856 	bl	800e128 <rclc_executor_spin_some>

    // Publish the message on the "stm32_publisher" topic
    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 800107c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001080:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001084:	2200      	movs	r2, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f00c fa30 	bl	800d4ec <rcl_publish>
 800108c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
    if (ret != RCL_RET_OK)
 8001090:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <StartDefaultTask+0x12a>
    {
        // Print an error message if publishing fails
        printf("Error publishing (line %d)\n", __LINE__);
 8001098:	f240 11a7 	movw	r1, #423	; 0x1a7
 800109c:	4817      	ldr	r0, [pc, #92]	; (80010fc <StartDefaultTask+0x184>)
 800109e:	f017 fe15 	bl	8018ccc <iprintf>
    }

    // Increment the message data for the next publish cycle
    msg.data++;
 80010a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010a6:	3301      	adds	r3, #1
 80010a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    // Delay for 10 ms
    osDelay(10);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f007 fc4f 	bl	8008950 <osDelay>
{
 80010b2:	e7db      	b.n	800106c <StartDefaultTask+0xf4>
 80010b4:	f3af 8000 	nop.w
 80010b8:	05f5e100 	.word	0x05f5e100
 80010bc:	00000000 	.word	0x00000000
 80010c0:	08001a95 	.word	0x08001a95
 80010c4:	08001a0d 	.word	0x08001a0d
 80010c8:	080019f5 	.word	0x080019f5
 80010cc:	080019a5 	.word	0x080019a5
 80010d0:	2000e004 	.word	0x2000e004
 80010d4:	08001131 	.word	0x08001131
 80010d8:	08001175 	.word	0x08001175
 80010dc:	080011ad 	.word	0x080011ad
 80010e0:	08001219 	.word	0x08001219
 80010e4:	0801a1bc 	.word	0x0801a1bc
 80010e8:	0801a1e4 	.word	0x0801a1e4
 80010ec:	0801a1e8 	.word	0x0801a1e8
 80010f0:	0801a1f8 	.word	0x0801a1f8
 80010f4:	0801a208 	.word	0x0801a208
 80010f8:	08000e39 	.word	0x08000e39
 80010fc:	0801a210 	.word	0x0801a210

08001100 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001112:	f000 fd5d 	bl	8001bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40010000 	.word	0x40010000

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>
	...

08001130 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <microros_allocate+0x3c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <microros_allocate+0x3c>)
 8001148:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <microros_allocate+0x40>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <microros_allocate+0x40>)
 8001158:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff faf4 	bl	8000748 <pvPortMallocMicroROS>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20004074 	.word	0x20004074
 8001170:	20004078 	.word	0x20004078

08001174 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00c      	beq.n	800119e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fbfd 	bl	8000984 <getBlockSize>
 800118a:	4603      	mov	r3, r0
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <microros_deallocate+0x34>)
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	461a      	mov	r2, r3
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <microros_deallocate+0x34>)
 8001196:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fb99 	bl	80008d0 <vPortFreeMicroROS>
  }
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20004078 	.word	0x20004078

080011ac <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <microros_reallocate+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4413      	add	r3, r2
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <microros_reallocate+0x64>)
 80011c6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <microros_reallocate+0x68>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	4413      	add	r3, r2
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <microros_reallocate+0x68>)
 80011d6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d104      	bne.n	80011e8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80011de:	68b8      	ldr	r0, [r7, #8]
 80011e0:	f7ff fab2 	bl	8000748 <pvPortMallocMicroROS>
 80011e4:	4603      	mov	r3, r0
 80011e6:	e00e      	b.n	8001206 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff fbcb 	bl	8000984 <getBlockSize>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <microros_reallocate+0x68>)
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <microros_reallocate+0x68>)
 80011fa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fbde 	bl	80009c0 <pvPortReallocMicroROS>
 8001204:	4603      	mov	r3, r0
  }
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20004074 	.word	0x20004074
 8001214:	20004078 	.word	0x20004078

08001218 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <microros_zero_allocate+0x48>)
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	4413      	add	r3, r2
 8001232:	461a      	mov	r2, r3
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <microros_zero_allocate+0x48>)
 8001236:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <microros_zero_allocate+0x4c>)
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	4413      	add	r3, r2
 8001246:	461a      	mov	r2, r3
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <microros_zero_allocate+0x4c>)
 800124a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff fbe3 	bl	8000a1a <pvPortCallocMicroROS>
 8001254:	4603      	mov	r3, r0
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20004074 	.word	0x20004074
 8001264:	20004078 	.word	0x20004078

08001268 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001278:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800127c:	a320      	add	r3, pc, #128	; (adr r3, 8001300 <UTILS_NanosecondsToTimespec+0x98>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f895 	bl	80003b0 <__aeabi_ldivmod>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001290:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001294:	a31a      	add	r3, pc, #104	; (adr r3, 8001300 <UTILS_NanosecondsToTimespec+0x98>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f889 	bl	80003b0 <__aeabi_ldivmod>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da1f      	bge.n	80012ea <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <UTILS_NanosecondsToTimespec+0x90>)
 80012b0:	fb82 1203 	smull	r1, r2, r2, r3
 80012b4:	1712      	asrs	r2, r2, #28
 80012b6:	17db      	asrs	r3, r3, #31
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	461a      	mov	r2, r3
 80012c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012cc:	1a84      	subs	r4, r0, r2
 80012ce:	eb61 0503 	sbc.w	r5, r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	4907      	ldr	r1, [pc, #28]	; (80012fc <UTILS_NanosecondsToTimespec+0x94>)
 80012e0:	fb01 f303 	mul.w	r3, r1, r3
 80012e4:	441a      	add	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	609a      	str	r2, [r3, #8]
    }
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	f3af 8000 	nop.w
 80012f8:	44b82fa1 	.word	0x44b82fa1
 80012fc:	3b9aca00 	.word	0x3b9aca00
 8001300:	3b9aca00 	.word	0x3b9aca00
 8001304:	00000000 	.word	0x00000000

08001308 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4618      	mov	r0, r3
 8001330:	f008 fdc2 	bl	8009eb8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4618      	mov	r0, r3
 8001338:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	0003      	movs	r3, r0
 8001346:	2200      	movs	r2, #0
 8001348:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	461a      	mov	r2, r3
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001358:	1884      	adds	r4, r0, r2
 800135a:	eb41 0503 	adc.w	r5, r1, r3
 800135e:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001362:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001366:	4622      	mov	r2, r4
 8001368:	462b      	mov	r3, r5
 800136a:	f04f 0000 	mov.w	r0, #0
 800136e:	f04f 0100 	mov.w	r1, #0
 8001372:	0159      	lsls	r1, r3, #5
 8001374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001378:	0150      	lsls	r0, r2, #5
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	1b12      	subs	r2, r2, r4
 8001380:	eb63 0305 	sbc.w	r3, r3, r5
 8001384:	f04f 0000 	mov.w	r0, #0
 8001388:	f04f 0100 	mov.w	r1, #0
 800138c:	0259      	lsls	r1, r3, #9
 800138e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001392:	0250      	lsls	r0, r2, #9
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	1912      	adds	r2, r2, r4
 800139a:	eb45 0303 	adc.w	r3, r5, r3
 800139e:	f04f 0000 	mov.w	r0, #0
 80013a2:	f04f 0100 	mov.w	r1, #0
 80013a6:	0199      	lsls	r1, r3, #6
 80013a8:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80013ac:	0190      	lsls	r0, r2, #6
 80013ae:	1a80      	subs	r0, r0, r2
 80013b0:	eb61 0103 	sbc.w	r1, r1, r3
 80013b4:	eb10 0804 	adds.w	r8, r0, r4
 80013b8:	eb41 0905 	adc.w	r9, r1, r5
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	4640      	mov	r0, r8
 80013c0:	4649      	mov	r1, r9
 80013c2:	f7ff ff51 	bl	8001268 <UTILS_NanosecondsToTimespec>

    return 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_MspInit+0x54>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a11      	ldr	r2, [pc, #68]	; (8001428 <HAL_MspInit+0x54>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_MspInit+0x54>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_MspInit+0x54>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_MspInit+0x54>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_MspInit+0x54>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	210f      	movs	r1, #15
 8001416:	f06f 0001 	mvn.w	r0, #1
 800141a:	f000 fcd5 	bl	8001dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a4d      	ldr	r2, [pc, #308]	; (8001580 <HAL_UART_MspInit+0x154>)
 800144a:	4293      	cmp	r3, r2
 800144c:	f040 8093 	bne.w	8001576 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HAL_UART_MspInit+0x158>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a4a      	ldr	r2, [pc, #296]	; (8001584 <HAL_UART_MspInit+0x158>)
 800145a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b48      	ldr	r3, [pc, #288]	; (8001584 <HAL_UART_MspInit+0x158>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_UART_MspInit+0x158>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a43      	ldr	r2, [pc, #268]	; (8001584 <HAL_UART_MspInit+0x158>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_UART_MspInit+0x158>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001488:	230c      	movs	r3, #12
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001498:	2307      	movs	r3, #7
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4839      	ldr	r0, [pc, #228]	; (8001588 <HAL_UART_MspInit+0x15c>)
 80014a4:	f001 f836 	bl	8002514 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80014a8:	4b38      	ldr	r3, [pc, #224]	; (800158c <HAL_UART_MspInit+0x160>)
 80014aa:	4a39      	ldr	r2, [pc, #228]	; (8001590 <HAL_UART_MspInit+0x164>)
 80014ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_UART_MspInit+0x160>)
 80014b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b6:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_UART_MspInit+0x160>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <HAL_UART_MspInit+0x160>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <HAL_UART_MspInit+0x160>)
 80014c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_UART_MspInit+0x160>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <HAL_UART_MspInit+0x160>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_UART_MspInit+0x160>)
 80014d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_UART_MspInit+0x160>)
 80014e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_UART_MspInit+0x160>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014ec:	4827      	ldr	r0, [pc, #156]	; (800158c <HAL_UART_MspInit+0x160>)
 80014ee:	f000 fc95 	bl	8001e1c <HAL_DMA_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80014f8:	f7ff fe14 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a23      	ldr	r2, [pc, #140]	; (800158c <HAL_UART_MspInit+0x160>)
 8001500:	639a      	str	r2, [r3, #56]	; 0x38
 8001502:	4a22      	ldr	r2, [pc, #136]	; (800158c <HAL_UART_MspInit+0x160>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <HAL_UART_MspInit+0x168>)
 800150a:	4a23      	ldr	r2, [pc, #140]	; (8001598 <HAL_UART_MspInit+0x16c>)
 800150c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_UART_MspInit+0x168>)
 8001510:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001514:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_UART_MspInit+0x168>)
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_UART_MspInit+0x168>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_UART_MspInit+0x168>)
 8001524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001528:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_UART_MspInit+0x168>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_UART_MspInit+0x168>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_UART_MspInit+0x168>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_UART_MspInit+0x168>)
 800153e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001542:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <HAL_UART_MspInit+0x168>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800154a:	4812      	ldr	r0, [pc, #72]	; (8001594 <HAL_UART_MspInit+0x168>)
 800154c:	f000 fc66 	bl	8001e1c <HAL_DMA_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001556:	f7ff fde5 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_UART_MspInit+0x168>)
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
 8001560:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <HAL_UART_MspInit+0x168>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2105      	movs	r1, #5
 800156a:	2026      	movs	r0, #38	; 0x26
 800156c:	f000 fc2c 	bl	8001dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001570:	2026      	movs	r0, #38	; 0x26
 8001572:	f000 fc45 	bl	8001e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40004400 	.word	0x40004400
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	2000df44 	.word	0x2000df44
 8001590:	40026088 	.word	0x40026088
 8001594:	2000dfa4 	.word	0x2000dfa4
 8001598:	400260a0 	.word	0x400260a0

0800159c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	2019      	movs	r0, #25
 80015b2:	f000 fc09 	bl	8001dc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015b6:	2019      	movs	r0, #25
 80015b8:	f000 fc22 	bl	8001e00 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_InitTick+0xa4>)
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_InitTick+0xa4>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6453      	str	r3, [r2, #68]	; 0x44
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_InitTick+0xa4>)
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d8:	f107 0210 	add.w	r2, r7, #16
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 ff42 	bl	800446c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80015e8:	f002 ff2c 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 80015ec:	4603      	mov	r3, r0
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	4a13      	ldr	r2, [pc, #76]	; (8001644 <HAL_InitTick+0xa8>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0c9b      	lsrs	r3, r3, #18
 80015fc:	3b01      	subs	r3, #1
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_InitTick+0xac>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_InitTick+0xb0>)
 8001604:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_InitTick+0xac>)
 8001608:	f240 32e7 	movw	r2, #999	; 0x3e7
 800160c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_InitTick+0xac>)
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_InitTick+0xac>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_InitTick+0xac>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <HAL_InitTick+0xac>)
 8001622:	f002 ff55 	bl	80044d0 <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d104      	bne.n	8001636 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <HAL_InitTick+0xac>)
 800162e:	f002 ffa9 	bl	8004584 <HAL_TIM_Base_Start_IT>
 8001632:	4603      	mov	r3, r0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3730      	adds	r7, #48	; 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	431bde83 	.word	0x431bde83
 8001648:	2000e048 	.word	0x2000e048
 800164c:	40010000 	.word	0x40010000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Stream5_IRQHandler+0x10>)
 8001682:	f000 fd0b 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000df44 	.word	0x2000df44

08001690 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <DMA1_Stream6_IRQHandler+0x10>)
 8001696:	f000 fd01 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000dfa4 	.word	0x2000dfa4

080016a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016aa:	f002 ffdb 	bl	8004664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000e048 	.word	0x2000e048

080016b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <USART2_IRQHandler+0x10>)
 80016be:	f003 fa03 	bl	8004ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000e004 	.word	0x2000e004

080016cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <OTG_FS_IRQHandler+0x10>)
 80016d2:	f001 fa24 	bl	8002b1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000f5a4 	.word	0x2000f5a4

080016e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
	return 1;
 80016e4:	2301      	movs	r3, #1
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_kill>:

int _kill(int pid, int sig)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016fa:	f017 f96f 	bl	80189dc <__errno>
 80016fe:	4603      	mov	r3, r0
 8001700:	2216      	movs	r2, #22
 8001702:	601a      	str	r2, [r3, #0]
	return -1;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_exit>:

void _exit (int status)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001718:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ffe7 	bl	80016f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001722:	e7fe      	b.n	8001722 <_exit+0x12>

08001724 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e00a      	b.n	800174c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001736:	f3af 8000 	nop.w
 800173a:	4601      	mov	r1, r0
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	b2ca      	uxtb	r2, r1
 8001744:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	dbf0      	blt.n	8001736 <_read+0x12>
	}

return len;
 8001754:	687b      	ldr	r3, [r7, #4]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e009      	b.n	8001784 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	60ba      	str	r2, [r7, #8]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf1      	blt.n	8001770 <_write+0x12>
	}
	return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_close>:

int _close(int file)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
	return -1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017be:	605a      	str	r2, [r3, #4]
	return 0;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_isatty>:

int _isatty(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	return 1;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	return 0;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <_sbrk+0x5c>)
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <_sbrk+0x60>)
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <_sbrk+0x64>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <_sbrk+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001830:	f017 f8d4 	bl	80189dc <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	220c      	movs	r2, #12
 8001838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183e:	e009      	b.n	8001854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <_sbrk+0x64>)
 8001850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20020000 	.word	0x20020000
 8001860:	00000400 	.word	0x00000400
 8001864:	20004080 	.word	0x20004080
 8001868:	2000f9c0 	.word	0x2000f9c0

0800186c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <SystemInit+0x20>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <SystemInit+0x20>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <CDC_TransmitCplt_FS>:
volatile bool g_write_complete = false;
bool initialized = false;

// Transmission completed callback
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	71fb      	strb	r3, [r7, #7]
    (void) Buf;
    (void) Len;
    (void) epnum;

    g_write_complete = true;
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <CDC_TransmitCplt_FS+0x24>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
    return USBD_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000488c 	.word	0x2000488c

080018b8 <CDC_Control_FS>:

// USB CDC requests callback
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	80bb      	strh	r3, [r7, #4]
    switch(cmd)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d002      	beq.n	80018d4 <CDC_Control_FS+0x1c>
 80018ce:	2b21      	cmp	r3, #33	; 0x21
 80018d0:	d009      	beq.n	80018e6 <CDC_Control_FS+0x2e>
        case CDC_GET_COMM_FEATURE:
        case CDC_CLEAR_COMM_FEATURE:
        case CDC_SET_CONTROL_LINE_STATE:
        case CDC_SEND_BREAK:
        default:
            break;
 80018d2:	e011      	b.n	80018f8 <CDC_Control_FS+0x40>
        memcpy(line_coding, pbuf, sizeof(line_coding));
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <CDC_Control_FS+0x50>)
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	6810      	ldr	r0, [r2, #0]
 80018da:	6018      	str	r0, [r3, #0]
 80018dc:	8891      	ldrh	r1, [r2, #4]
 80018de:	7992      	ldrb	r2, [r2, #6]
 80018e0:	8099      	strh	r1, [r3, #4]
 80018e2:	719a      	strb	r2, [r3, #6]
        break;
 80018e4:	e008      	b.n	80018f8 <CDC_Control_FS+0x40>
        memcpy(pbuf, line_coding, sizeof(line_coding));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <CDC_Control_FS+0x50>)
 80018ea:	6810      	ldr	r0, [r2, #0]
 80018ec:	6018      	str	r0, [r3, #0]
 80018ee:	8891      	ldrh	r1, [r2, #4]
 80018f0:	7992      	ldrb	r2, [r2, #6]
 80018f2:	8099      	strh	r1, [r3, #4]
 80018f4:	719a      	strb	r2, [r3, #6]
        break;
 80018f6:	bf00      	nop
    }

    return USBD_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008

0800190c <CDC_Receive_FS>:

// Data received callback
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	481f      	ldr	r0, [pc, #124]	; (8001998 <CDC_Receive_FS+0x8c>)
 800191a:	f005 fd1c 	bl	8007356 <USBD_CDC_SetRxBuffer>

    // Circular buffer
    if ((it_tail + *Len) > USB_BUFFER_SIZE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <CDC_Receive_FS+0x90>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800192c:	d91b      	bls.n	8001966 <CDC_Receive_FS+0x5a>
	{
        size_t first_section = USB_BUFFER_SIZE - it_tail;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <CDC_Receive_FS+0x90>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001936:	60fb      	str	r3, [r7, #12]
        size_t second_section = *Len - first_section;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	60bb      	str	r3, [r7, #8]

		memcpy((void*) &storage_buffer[it_tail] , Buf, first_section);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <CDC_Receive_FS+0x90>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <CDC_Receive_FS+0x94>)
 8001948:	4413      	add	r3, r2
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4618      	mov	r0, r3
 8001950:	f017 f8d2 	bl	8018af8 <memcpy>
		memcpy((void*) &storage_buffer[0] , Buf, second_section);
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4811      	ldr	r0, [pc, #68]	; (80019a0 <CDC_Receive_FS+0x94>)
 800195a:	f017 f8cd 	bl	8018af8 <memcpy>
        it_tail = second_section;
 800195e:	4a0f      	ldr	r2, [pc, #60]	; (800199c <CDC_Receive_FS+0x90>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e010      	b.n	8001988 <CDC_Receive_FS+0x7c>
	}
    else
    {
		memcpy((void*) &storage_buffer[it_tail] , Buf, *Len);
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <CDC_Receive_FS+0x90>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <CDC_Receive_FS+0x94>)
 800196c:	1898      	adds	r0, r3, r2
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	f017 f8bf 	bl	8018af8 <memcpy>
		it_tail += *Len;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <CDC_Receive_FS+0x90>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a05      	ldr	r2, [pc, #20]	; (800199c <CDC_Receive_FS+0x90>)
 8001986:	6013      	str	r3, [r2, #0]
    }

	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <CDC_Receive_FS+0x8c>)
 800198a:	f005 fd2d 	bl	80073e8 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000e0d4 	.word	0x2000e0d4
 800199c:	20004888 	.word	0x20004888
 80019a0:	20004084 	.word	0x20004084

080019a4 <cubemx_transport_open>:

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

    if (!initialized)
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <cubemx_transport_open+0x3c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <cubemx_transport_open+0x2e>
    {
        // USB is initialized on generated main code: Replace default callbacks here
        USBD_Interface_fops_FS.Control = CDC_Control_FS;
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <cubemx_transport_open+0x40>)
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <cubemx_transport_open+0x44>)
 80019be:	609a      	str	r2, [r3, #8]
        USBD_Interface_fops_FS.Receive = CDC_Receive_FS;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <cubemx_transport_open+0x40>)
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <cubemx_transport_open+0x48>)
 80019c4:	60da      	str	r2, [r3, #12]
        USBD_Interface_fops_FS.TransmitCplt = CDC_TransmitCplt_FS;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <cubemx_transport_open+0x40>)
 80019c8:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <cubemx_transport_open+0x4c>)
 80019ca:	611a      	str	r2, [r3, #16]
        initialized = true;
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <cubemx_transport_open+0x3c>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
    }

    return true;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	2000488d 	.word	0x2000488d
 80019e4:	2000012c 	.word	0x2000012c
 80019e8:	080018b9 	.word	0x080018b9
 80019ec:	0800190d 	.word	0x0800190d
 80019f0:	08001891 	.word	0x08001891

080019f4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    return true;
 80019fc:	2301      	movs	r3, #1
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
	uint8_t ret = CDC_Transmit_FS(buf, len);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f009 fcf1 	bl	800b408 <CDC_Transmit_FS>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (USBD_OK != ret)
 8001a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <cubemx_transport_write+0x2c>
	{
		return 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e027      	b.n	8001a88 <cubemx_transport_write+0x7c>
	}

    int64_t start = uxr_millis();
 8001a38:	f00b fc5e 	bl	800d2f8 <uxr_millis>
 8001a3c:	e9c7 0106 	strd	r0, r1, [r7, #24]
    while(!g_write_complete && (uxr_millis() -  start) < WRITE_TIMEOUT_MS)
 8001a40:	e002      	b.n	8001a48 <cubemx_transport_write+0x3c>
    {
    	vTaskDelay( 1 / portTICK_PERIOD_MS);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f007 ff16 	bl	8009874 <vTaskDelay>
    while(!g_write_complete && (uxr_millis() -  start) < WRITE_TIMEOUT_MS)
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <cubemx_transport_write+0x84>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f083 0301 	eor.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00a      	beq.n	8001a6e <cubemx_transport_write+0x62>
 8001a58:	f00b fc4e 	bl	800d2f8 <uxr_millis>
 8001a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a60:	1a84      	subs	r4, r0, r2
 8001a62:	eb61 0503 	sbc.w	r5, r1, r3
 8001a66:	2c64      	cmp	r4, #100	; 0x64
 8001a68:	f175 0300 	sbcs.w	r3, r5, #0
 8001a6c:	dbe9      	blt.n	8001a42 <cubemx_transport_write+0x36>
    }

    size_t writed = g_write_complete ? len : 0;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <cubemx_transport_write+0x84>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <cubemx_transport_write+0x70>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	e000      	b.n	8001a7e <cubemx_transport_write+0x72>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
    g_write_complete = false;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <cubemx_transport_write+0x84>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]

	return writed;
 8001a86:	697b      	ldr	r3, [r7, #20]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a90:	2000488c 	.word	0x2000488c

08001a94 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]

    int64_t start = uxr_millis();
 8001aa2:	f00b fc29 	bl	800d2f8 <uxr_millis>
 8001aa6:	e9c7 0104 	strd	r0, r1, [r7, #16]
    size_t readed = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]

    do
    {
        if (it_head != it_tail)
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <cubemx_transport_read+0x98>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <cubemx_transport_read+0x9c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d01e      	beq.n	8001af8 <cubemx_transport_read+0x64>
        {
            while ((it_head != it_tail) && (readed < len)){
 8001aba:	e012      	b.n	8001ae2 <cubemx_transport_read+0x4e>
                buf[readed] = storage_buffer[it_head];
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <cubemx_transport_read+0x98>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	440b      	add	r3, r1
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <cubemx_transport_read+0xa0>)
 8001ac8:	5c8a      	ldrb	r2, [r1, r2]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]
                it_head = (it_head + 1) % USB_BUFFER_SIZE;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <cubemx_transport_read+0x98>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <cubemx_transport_read+0x98>)
 8001ada:	6013      	str	r3, [r2, #0]
                readed++;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
            while ((it_head != it_tail) && (readed < len)){
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <cubemx_transport_read+0x98>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <cubemx_transport_read+0x9c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d017      	beq.n	8001b1e <cubemx_transport_read+0x8a>
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d3e2      	bcc.n	8001abc <cubemx_transport_read+0x28>
            }

            break;
 8001af6:	e012      	b.n	8001b1e <cubemx_transport_read+0x8a>
        }

       vTaskDelay( 1 / portTICK_PERIOD_MS );
 8001af8:	2001      	movs	r0, #1
 8001afa:	f007 febb 	bl	8009874 <vTaskDelay>
    } while ((uxr_millis() -  start) < timeout);
 8001afe:	f00b fbfb 	bl	800d2f8 <uxr_millis>
 8001b02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b06:	1a84      	subs	r4, r0, r2
 8001b08:	eb61 0503 	sbc.w	r5, r1, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b14:	4294      	cmp	r4, r2
 8001b16:	eb75 0303 	sbcs.w	r3, r5, r3
 8001b1a:	dbc8      	blt.n	8001aae <cubemx_transport_read+0x1a>
 8001b1c:	e000      	b.n	8001b20 <cubemx_transport_read+0x8c>
            break;
 8001b1e:	bf00      	nop

    return readed;
 8001b20:	69fb      	ldr	r3, [r7, #28]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20004884 	.word	0x20004884
 8001b30:	20004888 	.word	0x20004888
 8001b34:	20004084 	.word	0x20004084

08001b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b3e:	490e      	ldr	r1, [pc, #56]	; (8001b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b54:	4c0b      	ldr	r4, [pc, #44]	; (8001b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b62:	f7ff fe83 	bl	800186c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f016 ff85 	bl	8018a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6a:	f7ff f837 	bl	8000bdc <main>
  bx  lr    
 8001b6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8001b7c:	0801b20c 	.word	0x0801b20c
  ldr r2, =_sbss
 8001b80:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8001b84:	2000f9bc 	.word	0x2000f9bc

08001b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <HAL_Init+0x40>)
 8001b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_Init+0x40>)
 8001ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_Init+0x40>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f8fc 	bl	8001db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	200f      	movs	r0, #15
 8001bbc:	f7ff fcee 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc0:	f7ff fc08 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000014 	.word	0x20000014
 8001bf4:	2000e090 	.word	0x2000e090

08001bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	2000e090 	.word	0x2000e090

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff ffee 	bl	8001bf8 <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_Delay+0x44>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000014 	.word	0x20000014

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff4c 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dda:	f7ff ff61 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f7ff ffb1 	bl	8001d4c <NVIC_EncodePriority>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff80 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff54 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff fee6 	bl	8001bf8 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e099      	b.n	8001f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e58:	e00f      	b.n	8001e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e5a:	f7ff fecd 	bl	8001bf8 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d908      	bls.n	8001e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2203      	movs	r2, #3
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e078      	b.n	8001f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e8      	bne.n	8001e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <HAL_DMA_Init+0x158>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d107      	bne.n	8001ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	4313      	orrs	r3, r2
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f023 0307 	bic.w	r3, r3, #7
 8001efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d117      	bne.n	8001f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00e      	beq.n	8001f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fa7b 	bl	800241c <DMA_CheckFifoParam>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2240      	movs	r2, #64	; 0x40
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e016      	b.n	8001f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fa32 	bl	80023b0 <DMA_CalcBaseAndBitshift>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	223f      	movs	r2, #63	; 0x3f
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	f010803f 	.word	0xf010803f

08001f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f86:	f7ff fe37 	bl	8001bf8 <HAL_GetTick>
 8001f8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d008      	beq.n	8001faa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e052      	b.n	8002050 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0216 	bic.w	r2, r2, #22
 8001fb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <HAL_DMA_Abort+0x62>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0208 	bic.w	r2, r2, #8
 8001fe8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	e013      	b.n	8002024 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffc:	f7ff fdfc 	bl	8001bf8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b05      	cmp	r3, #5
 8002008:	d90c      	bls.n	8002024 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e015      	b.n	8002050 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e4      	bne.n	8001ffc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	223f      	movs	r2, #63	; 0x3f
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00c      	b.n	8002090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2205      	movs	r2, #5
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020a8:	4b92      	ldr	r3, [pc, #584]	; (80022f4 <HAL_DMA_IRQHandler+0x258>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a92      	ldr	r2, [pc, #584]	; (80022f8 <HAL_DMA_IRQHandler+0x25c>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a9b      	lsrs	r3, r3, #10
 80020b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2208      	movs	r2, #8
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01a      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0204 	bic.w	r2, r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2208      	movs	r2, #8
 80020f6:	409a      	lsls	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2201      	movs	r2, #1
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	2201      	movs	r2, #1
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0202 	orr.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2204      	movs	r2, #4
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d012      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	2204      	movs	r2, #4
 8002162:	409a      	lsls	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2210      	movs	r2, #16
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d043      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03c      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2210      	movs	r2, #16
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d018      	beq.n	80021de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d024      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	e01f      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e016      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0208 	bic.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2220      	movs	r2, #32
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 808e 	beq.w	800233a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8086 	beq.w	800233a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2220      	movs	r2, #32
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d136      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0216 	bic.w	r2, r2, #22
 8002254:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002264:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_DMA_IRQHandler+0x1da>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0208 	bic.w	r2, r2, #8
 8002284:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	223f      	movs	r2, #63	; 0x3f
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d07d      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4798      	blx	r3
        }
        return;
 80022b2:	e078      	b.n	80023a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01c      	beq.n	80022fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d108      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d030      	beq.n	800233a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e02b      	b.n	800233a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d027      	beq.n	800233a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
 80022f2:	e022      	b.n	800233a <HAL_DMA_IRQHandler+0x29e>
 80022f4:	20000004 	.word	0x20000004
 80022f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0210 	bic.w	r2, r2, #16
 8002318:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	2b00      	cmp	r3, #0
 8002340:	d032      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d022      	beq.n	8002394 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2205      	movs	r2, #5
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	429a      	cmp	r2, r3
 8002370:	d307      	bcc.n	8002382 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f2      	bne.n	8002366 <HAL_DMA_IRQHandler+0x2ca>
 8002380:	e000      	b.n	8002384 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002382:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e000      	b.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80023a6:	bf00      	nop
    }
  }
}
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop

080023b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	3b10      	subs	r3, #16
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <DMA_CalcBaseAndBitshift+0x64>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <DMA_CalcBaseAndBitshift+0x68>)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d909      	bls.n	80023f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023e6:	f023 0303 	bic.w	r3, r3, #3
 80023ea:	1d1a      	adds	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	659a      	str	r2, [r3, #88]	; 0x58
 80023f0:	e007      	b.n	8002402 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	aaaaaaab 	.word	0xaaaaaaab
 8002418:	0801a2e4 	.word	0x0801a2e4

0800241c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d11f      	bne.n	8002476 <DMA_CheckFifoParam+0x5a>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d856      	bhi.n	80024ea <DMA_CheckFifoParam+0xce>
 800243c:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <DMA_CheckFifoParam+0x28>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	08002455 	.word	0x08002455
 8002448:	08002467 	.word	0x08002467
 800244c:	08002455 	.word	0x08002455
 8002450:	080024eb 	.word	0x080024eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d046      	beq.n	80024ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002464:	e043      	b.n	80024ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800246e:	d140      	bne.n	80024f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002474:	e03d      	b.n	80024f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247e:	d121      	bne.n	80024c4 <DMA_CheckFifoParam+0xa8>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d837      	bhi.n	80024f6 <DMA_CheckFifoParam+0xda>
 8002486:	a201      	add	r2, pc, #4	; (adr r2, 800248c <DMA_CheckFifoParam+0x70>)
 8002488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248c:	0800249d 	.word	0x0800249d
 8002490:	080024a3 	.word	0x080024a3
 8002494:	0800249d 	.word	0x0800249d
 8002498:	080024b5 	.word	0x080024b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      break;
 80024a0:	e030      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d025      	beq.n	80024fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b2:	e022      	b.n	80024fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024bc:	d11f      	bne.n	80024fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024c2:	e01c      	b.n	80024fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d903      	bls.n	80024d2 <DMA_CheckFifoParam+0xb6>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d003      	beq.n	80024d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024d0:	e018      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      break;
 80024d6:	e015      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00e      	beq.n	8002502 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	e00b      	b.n	8002502 <DMA_CheckFifoParam+0xe6>
      break;
 80024ea:	bf00      	nop
 80024ec:	e00a      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e008      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 80024f2:	bf00      	nop
 80024f4:	e006      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e004      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
 80024fc:	e002      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;   
 80024fe:	bf00      	nop
 8002500:	e000      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 8002502:	bf00      	nop
    }
  } 
  
  return status; 
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e16b      	b.n	8002808 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	f040 815a 	bne.w	8002802 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d005      	beq.n	8002566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002562:	2b02      	cmp	r3, #2
 8002564:	d130      	bne.n	80025c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800259c:	2201      	movs	r2, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 0201 	and.w	r2, r3, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d017      	beq.n	8002604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d123      	bne.n	8002658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	220f      	movs	r2, #15
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3208      	adds	r2, #8
 8002652:	69b9      	ldr	r1, [r7, #24]
 8002654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80b4 	beq.w	8002802 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b60      	ldr	r3, [pc, #384]	; (8002820 <HAL_GPIO_Init+0x30c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4a5f      	ldr	r2, [pc, #380]	; (8002820 <HAL_GPIO_Init+0x30c>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	; 0x44
 80026aa:	4b5d      	ldr	r3, [pc, #372]	; (8002820 <HAL_GPIO_Init+0x30c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b6:	4a5b      	ldr	r2, [pc, #364]	; (8002824 <HAL_GPIO_Init+0x310>)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_GPIO_Init+0x314>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d02b      	beq.n	800273a <HAL_GPIO_Init+0x226>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a51      	ldr	r2, [pc, #324]	; (800282c <HAL_GPIO_Init+0x318>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d025      	beq.n	8002736 <HAL_GPIO_Init+0x222>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a50      	ldr	r2, [pc, #320]	; (8002830 <HAL_GPIO_Init+0x31c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01f      	beq.n	8002732 <HAL_GPIO_Init+0x21e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4f      	ldr	r2, [pc, #316]	; (8002834 <HAL_GPIO_Init+0x320>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d019      	beq.n	800272e <HAL_GPIO_Init+0x21a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4e      	ldr	r2, [pc, #312]	; (8002838 <HAL_GPIO_Init+0x324>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_GPIO_Init+0x216>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4d      	ldr	r2, [pc, #308]	; (800283c <HAL_GPIO_Init+0x328>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00d      	beq.n	8002726 <HAL_GPIO_Init+0x212>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4c      	ldr	r2, [pc, #304]	; (8002840 <HAL_GPIO_Init+0x32c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x20e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4b      	ldr	r2, [pc, #300]	; (8002844 <HAL_GPIO_Init+0x330>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_GPIO_Init+0x20a>
 800271a:	2307      	movs	r3, #7
 800271c:	e00e      	b.n	800273c <HAL_GPIO_Init+0x228>
 800271e:	2308      	movs	r3, #8
 8002720:	e00c      	b.n	800273c <HAL_GPIO_Init+0x228>
 8002722:	2306      	movs	r3, #6
 8002724:	e00a      	b.n	800273c <HAL_GPIO_Init+0x228>
 8002726:	2305      	movs	r3, #5
 8002728:	e008      	b.n	800273c <HAL_GPIO_Init+0x228>
 800272a:	2304      	movs	r3, #4
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x228>
 800272e:	2303      	movs	r3, #3
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x228>
 8002732:	2302      	movs	r3, #2
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x228>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x228>
 800273a:	2300      	movs	r3, #0
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f002 0203 	and.w	r2, r2, #3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4093      	lsls	r3, r2
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274c:	4935      	ldr	r1, [pc, #212]	; (8002824 <HAL_GPIO_Init+0x310>)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275a:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <HAL_GPIO_Init+0x334>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277e:	4a32      	ldr	r2, [pc, #200]	; (8002848 <HAL_GPIO_Init+0x334>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002784:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_GPIO_Init+0x334>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a8:	4a27      	ldr	r2, [pc, #156]	; (8002848 <HAL_GPIO_Init+0x334>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ae:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_GPIO_Init+0x334>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d2:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <HAL_GPIO_Init+0x334>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_GPIO_Init+0x334>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_GPIO_Init+0x334>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	f67f ae90 	bls.w	8002530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40013800 	.word	0x40013800
 8002828:	40020000 	.word	0x40020000
 800282c:	40020400 	.word	0x40020400
 8002830:	40020800 	.word	0x40020800
 8002834:	40020c00 	.word	0x40020c00
 8002838:	40021000 	.word	0x40021000
 800283c:	40021400 	.word	0x40021400
 8002840:	40021800 	.word	0x40021800
 8002844:	40021c00 	.word	0x40021c00
 8002848:	40013c00 	.word	0x40013c00

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002868:	e003      	b.n	8002872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800287e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002880:	b08f      	sub	sp, #60	; 0x3c
 8002882:	af0a      	add	r7, sp, #40	; 0x28
 8002884:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e10f      	b.n	8002ab0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f008 fef4 	bl	800b698 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 f829 	bl	8005926 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	687e      	ldr	r6, [r7, #4]
 80028dc:	466d      	mov	r5, sp
 80028de:	f106 0410 	add.w	r4, r6, #16
 80028e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f2:	1d33      	adds	r3, r6, #4
 80028f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	f002 ff00 	bl	80056fc <USB_CoreInit>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0d0      	b.n	8002ab0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f003 f817 	bl	8005948 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e04a      	b.n	80029b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	333d      	adds	r3, #61	; 0x3d
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	333c      	adds	r3, #60	; 0x3c
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	b298      	uxth	r0, r3
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	3342      	adds	r3, #66	; 0x42
 800295c:	4602      	mov	r2, r0
 800295e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	333f      	adds	r3, #63	; 0x3f
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3344      	adds	r3, #68	; 0x44
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3348      	adds	r3, #72	; 0x48
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3350      	adds	r3, #80	; 0x50
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	3301      	adds	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3af      	bcc.n	8002920 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e044      	b.n	8002a50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d3b5      	bcc.n	80029c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	687e      	ldr	r6, [r7, #4]
 8002a62:	466d      	mov	r5, sp
 8002a64:	f106 0410 	add.w	r4, r6, #16
 8002a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a74:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a78:	1d33      	adds	r3, r6, #4
 8002a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7c:	6838      	ldr	r0, [r7, #0]
 8002a7e:	f002 ffaf 	bl	80059e0 <USB_DevInit>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e00d      	b.n	8002ab0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 f82b 	bl	8006b04 <USB_DevDisconnect>

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ab8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_PCD_Start+0x1c>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e020      	b.n	8002b16 <HAL_PCD_Start+0x5e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d109      	bne.n	8002af8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d005      	beq.n	8002af8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 ff01 	bl	8005904 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 ffdb 	bl	8006ac2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b1e:	b590      	push	{r4, r7, lr}
 8002b20:	b08d      	sub	sp, #52	; 0x34
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 f899 	bl	8006c6c <USB_GetMode>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 839d 	bne.w	800327c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fffd 	bl	8006b46 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8393 	beq.w	800327a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fff4 	bl	8006b46 <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d107      	bne.n	8002b78 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f002 0202 	and.w	r2, r2, #2
 8002b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 ffe2 	bl	8006b46 <USB_ReadInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d161      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0210 	bic.w	r2, r2, #16
 8002b9a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f003 020f 	and.w	r2, r3, #15
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3304      	adds	r3, #4
 8002bba:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	0c5b      	lsrs	r3, r3, #17
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d124      	bne.n	8002c12 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d035      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	6a38      	ldr	r0, [r7, #32]
 8002be8:	f003 fe19 	bl	800681e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf8:	441a      	add	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c0a:	441a      	add	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	619a      	str	r2, [r3, #24]
 8002c10:	e016      	b.n	8002c40 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	0c5b      	lsrs	r3, r3, #17
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d110      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c24:	2208      	movs	r2, #8
 8002c26:	4619      	mov	r1, r3
 8002c28:	6a38      	ldr	r0, [r7, #32]
 8002c2a:	f003 fdf8 	bl	800681e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c3a:	441a      	add	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0210 	orr.w	r2, r2, #16
 8002c4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 ff76 	bl	8006b46 <USB_ReadInterrupts>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c64:	d16e      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 ff7c 	bl	8006b6c <USB_ReadDevAllOutEpInterrupt>
 8002c74:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c76:	e062      	b.n	8002d3e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d057      	beq.n	8002d32 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 ffa1 	bl	8006bd4 <USB_ReadDevOutEPInterrupt>
 8002c92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002caa:	461a      	mov	r2, r3
 8002cac:	2301      	movs	r3, #1
 8002cae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fdb0 	bl	8003818 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 feaa 	bl	8003a30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2320      	movs	r3, #32
 8002d12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d30:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	3301      	adds	r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d199      	bne.n	8002c78 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f003 fefc 	bl	8006b46 <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d58:	f040 80c0 	bne.w	8002edc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 ff1d 	bl	8006ba0 <USB_ReadDevAllInEpInterrupt>
 8002d66:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d6c:	e0b2      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a7 	beq.w	8002ec8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 ff43 	bl	8006c10 <USB_ReadDevInEPInterrupt>
 8002d8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d057      	beq.n	8002e46 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69f9      	ldr	r1, [r7, #28]
 8002db2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002db6:	4013      	ands	r3, r2
 8002db8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2301      	movs	r3, #1
 8002dca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d132      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	3348      	adds	r3, #72	; 0x48
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4403      	add	r3, r0
 8002df4:	3344      	adds	r3, #68	; 0x44
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4419      	add	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfe:	4613      	mov	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4403      	add	r3, r0
 8002e08:	3348      	adds	r3, #72	; 0x48
 8002e0a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d113      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x31c>
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	3350      	adds	r3, #80	; 0x50
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d108      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e32:	461a      	mov	r2, r3
 8002e34:	2101      	movs	r1, #1
 8002e36:	f003 ff4b 	bl	8006cd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f008 fcaa 	bl	800b79a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2308      	movs	r3, #8
 8002e60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e94:	461a      	mov	r2, r3
 8002e96:	2340      	movs	r3, #64	; 0x40
 8002e98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fc1b 	bl	80036fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	3301      	adds	r3, #1
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f47f af49 	bne.w	8002d6e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 fe30 	bl	8006b46 <USB_ReadInterrupts>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ef0:	d122      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d108      	bne.n	8002f22 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fe26 	bl	8003b6c <HAL_PCDEx_LPM_Callback>
 8002f20:	e002      	b.n	8002f28 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f008 fcb0 	bl	800b888 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fe02 	bl	8006b46 <USB_ReadInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4c:	d112      	bne.n	8002f74 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d102      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f008 fc6c 	bl	800b83c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f72:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 fde4 	bl	8006b46 <USB_ReadInterrupts>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f88:	f040 80c7 	bne.w	800311a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2110      	movs	r1, #16
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fe7e 	bl	8005ca8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb0:	e056      	b.n	8003060 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fc4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd6:	0151      	lsls	r1, r2, #5
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	440a      	add	r2, r1
 8002fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fe0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fe4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff6:	0151      	lsls	r1, r2, #5
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	440a      	add	r2, r1
 8002ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003000:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003004:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	461a      	mov	r2, r3
 8003014:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003018:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302a:	0151      	lsls	r1, r2, #5
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	440a      	add	r2, r1
 8003030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003034:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003038:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800304a:	0151      	lsls	r1, r2, #5
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	440a      	add	r2, r1
 8003050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003054:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003058:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	3301      	adds	r3, #1
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003066:	429a      	cmp	r2, r3
 8003068:	d3a3      	bcc.n	8002fb2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003078:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800307c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003096:	f043 030b 	orr.w	r3, r3, #11
 800309a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ac:	f043 030b 	orr.w	r3, r3, #11
 80030b0:	6453      	str	r3, [r2, #68]	; 0x44
 80030b2:	e015      	b.n	80030e0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030da:	f043 030b 	orr.w	r3, r3, #11
 80030de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003104:	461a      	mov	r2, r3
 8003106:	f003 fde3 	bl	8006cd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fd11 	bl	8006b46 <USB_ReadInterrupts>
 8003124:	4603      	mov	r3, r0
 8003126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312e:	d124      	bne.n	800317a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f003 fda7 	bl	8006c88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fe0f 	bl	8005d62 <USB_GetDevSpeed>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681c      	ldr	r4, [r3, #0]
 8003150:	f001 f958 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8003154:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	4620      	mov	r0, r4
 8003160:	f002 fb2e 	bl	80057c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f008 fb40 	bl	800b7ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003178:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f003 fce1 	bl	8006b46 <USB_ReadInterrupts>
 8003184:	4603      	mov	r3, r0
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b08      	cmp	r3, #8
 800318c:	d10a      	bne.n	80031a4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f008 fb1d 	bl	800b7ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f002 0208 	and.w	r2, r2, #8
 80031a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 fccc 	bl	8006b46 <USB_ReadInterrupts>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b8:	d10f      	bne.n	80031da <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f008 fb7f 	bl	800b8c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80031d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fcb1 	bl	8006b46 <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ee:	d10f      	bne.n	8003210 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f008 fb52 	bl	800b8a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800320e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fc96 	bl	8006b46 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d10a      	bne.n	800323c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f008 fb60 	bl	800b8ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800323a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 fc80 	bl	8006b46 <USB_ReadInterrupts>
 8003246:	4603      	mov	r3, r0
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b04      	cmp	r3, #4
 800324e:	d115      	bne.n	800327c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f008 fb50 	bl	800b908 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	e000      	b.n	800327c <HAL_PCD_IRQHandler+0x75e>
      return;
 800327a:	bf00      	nop
    }
  }
}
 800327c:	3734      	adds	r7, #52	; 0x34
 800327e:	46bd      	mov	sp, r7
 8003280:	bd90      	pop	{r4, r7, pc}

08003282 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_PCD_SetAddress+0x1a>
 8003298:	2302      	movs	r3, #2
 800329a:	e013      	b.n	80032c4 <HAL_PCD_SetAddress+0x42>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 fbde 	bl	8006a76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	4608      	mov	r0, r1
 80032d6:	4611      	mov	r1, r2
 80032d8:	461a      	mov	r2, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	70fb      	strb	r3, [r7, #3]
 80032de:	460b      	mov	r3, r1
 80032e0:	803b      	strh	r3, [r7, #0]
 80032e2:	4613      	mov	r3, r2
 80032e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	da0f      	bge.n	8003312 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 020f 	and.w	r2, r3, #15
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	3338      	adds	r3, #56	; 0x38
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	3304      	adds	r3, #4
 8003308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	705a      	strb	r2, [r3, #1]
 8003310:	e00f      	b.n	8003332 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	3304      	adds	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800333e:	883a      	ldrh	r2, [r7, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	78ba      	ldrb	r2, [r7, #2]
 8003348:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d004      	beq.n	800335c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800335c:	78bb      	ldrb	r3, [r7, #2]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d102      	bne.n	8003368 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_PCD_EP_Open+0xaa>
 8003372:	2302      	movs	r3, #2
 8003374:	e00e      	b.n	8003394 <HAL_PCD_EP_Open+0xc8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	4618      	mov	r0, r3
 8003386:	f002 fd11 	bl	8005dac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003392:	7afb      	ldrb	r3, [r7, #11]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	da0f      	bge.n	80033d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	3338      	adds	r3, #56	; 0x38
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	3304      	adds	r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	705a      	strb	r2, [r3, #1]
 80033ce:	e00f      	b.n	80033f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	3304      	adds	r3, #4
 80033e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_PCD_EP_Close+0x6e>
 8003406:	2302      	movs	r3, #2
 8003408:	e00e      	b.n	8003428 <HAL_PCD_EP_Close+0x8c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68f9      	ldr	r1, [r7, #12]
 8003418:	4618      	mov	r0, r3
 800341a:	f002 fd4f 	bl	8005ebc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	460b      	mov	r3, r1
 800343e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003440:	7afb      	ldrb	r3, [r7, #11]
 8003442:	f003 020f 	and.w	r2, r3, #15
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	3304      	adds	r3, #4
 8003458:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2200      	movs	r2, #0
 800346a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2200      	movs	r2, #0
 8003470:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003472:	7afb      	ldrb	r3, [r7, #11]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	b2da      	uxtb	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800348c:	7afb      	ldrb	r3, [r7, #11]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	6979      	ldr	r1, [r7, #20]
 80034a4:	f003 f82a 	bl	80064fc <USB_EP0StartXfer>
 80034a8:	e008      	b.n	80034bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	6979      	ldr	r1, [r7, #20]
 80034b8:	f002 fddc 	bl	8006074 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034e8:	681b      	ldr	r3, [r3, #0]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	460b      	mov	r3, r1
 8003504:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003506:	7afb      	ldrb	r3, [r7, #11]
 8003508:	f003 020f 	and.w	r2, r3, #15
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	3338      	adds	r3, #56	; 0x38
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2201      	movs	r2, #1
 8003534:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	b2da      	uxtb	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d102      	bne.n	8003550 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003550:	7afb      	ldrb	r3, [r7, #11]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	f002 ffc8 	bl	80064fc <USB_EP0StartXfer>
 800356c:	e008      	b.n	8003580 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	6979      	ldr	r1, [r7, #20]
 800357c:	f002 fd7a 	bl	8006074 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 020f 	and.w	r2, r3, #15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d901      	bls.n	80035a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e050      	b.n	800364a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da0f      	bge.n	80035d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	f003 020f 	and.w	r2, r3, #15
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	3338      	adds	r3, #56	; 0x38
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	3304      	adds	r3, #4
 80035c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	705a      	strb	r2, [r3, #1]
 80035ce:	e00d      	b.n	80035ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_PCD_EP_SetStall+0x82>
 8003608:	2302      	movs	r3, #2
 800360a:	e01e      	b.n	800364a <HAL_PCD_EP_SetStall+0xc0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	4618      	mov	r0, r3
 800361c:	f003 f957 	bl	80068ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	b2d9      	uxtb	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800363a:	461a      	mov	r2, r3
 800363c:	f003 fb48 	bl	8006cd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d901      	bls.n	8003670 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e042      	b.n	80036f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003674:	2b00      	cmp	r3, #0
 8003676:	da0f      	bge.n	8003698 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	3338      	adds	r3, #56	; 0x38
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	705a      	strb	r2, [r3, #1]
 8003696:	e00f      	b.n	80036b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	f003 020f 	and.w	r2, r3, #15
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	3304      	adds	r3, #4
 80036b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_PCD_EP_ClrStall+0x86>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e00e      	b.n	80036f6 <HAL_PCD_EP_ClrStall+0xa4>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68f9      	ldr	r1, [r7, #12]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 f95f 	bl	80069aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b08a      	sub	sp, #40	; 0x28
 8003702:	af02      	add	r7, sp, #8
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3338      	adds	r3, #56	; 0x38
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	429a      	cmp	r2, r3
 8003730:	d901      	bls.n	8003736 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06c      	b.n	8003810 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	429a      	cmp	r2, r3
 800374a:	d902      	bls.n	8003752 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3303      	adds	r3, #3
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800375a:	e02b      	b.n	80037b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	429a      	cmp	r2, r3
 8003770:	d902      	bls.n	8003778 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3303      	adds	r3, #3
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68d9      	ldr	r1, [r3, #12]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003790:	b2db      	uxtb	r3, r3
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4603      	mov	r3, r0
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f003 f803 	bl	80067a2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	441a      	add	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	441a      	add	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d809      	bhi.n	80037de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d203      	bcs.n	80037de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1be      	bne.n	800375c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d811      	bhi.n	800380e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	2201      	movs	r2, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	43db      	mvns	r3, r3
 8003804:	6939      	ldr	r1, [r7, #16]
 8003806:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800380a:	4013      	ands	r3, r2
 800380c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	333c      	adds	r3, #60	; 0x3c
 8003830:	3304      	adds	r3, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b01      	cmp	r3, #1
 800384c:	f040 80a0 	bne.w	8003990 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d015      	beq.n	8003886 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a72      	ldr	r2, [pc, #456]	; (8003a28 <PCD_EP_OutXfrComplete_int+0x210>)
 800385e:	4293      	cmp	r3, r2
 8003860:	f240 80dd 	bls.w	8003a1e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80d7 	beq.w	8003a1e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387c:	461a      	mov	r2, r3
 800387e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003882:	6093      	str	r3, [r2, #8]
 8003884:	e0cb      	b.n	8003a1e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389c:	461a      	mov	r2, r3
 800389e:	2320      	movs	r3, #32
 80038a0:	6093      	str	r3, [r2, #8]
 80038a2:	e0bc      	b.n	8003a1e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 80b7 	bne.w	8003a1e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a5d      	ldr	r2, [pc, #372]	; (8003a28 <PCD_EP_OutXfrComplete_int+0x210>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d90f      	bls.n	80038d8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ce:	461a      	mov	r2, r3
 80038d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d4:	6093      	str	r3, [r2, #8]
 80038d6:	e0a2      	b.n	8003a1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038ea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	0159      	lsls	r1, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80038fe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4403      	add	r3, r0
 800390e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003912:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4403      	add	r3, r0
 8003936:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4419      	add	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4403      	add	r3, r0
 800394c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003950:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d114      	bne.n	8003982 <PCD_EP_OutXfrComplete_int+0x16a>
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800397a:	461a      	mov	r2, r3
 800397c:	2101      	movs	r1, #1
 800397e:	f003 f9a7 	bl	8006cd0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4619      	mov	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f007 feeb 	bl	800b764 <HAL_PCD_DataOutStageCallback>
 800398e:	e046      	b.n	8003a1e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <PCD_EP_OutXfrComplete_int+0x214>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d124      	bne.n	80039e2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ae:	461a      	mov	r2, r3
 80039b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b4:	6093      	str	r3, [r2, #8]
 80039b6:	e032      	b.n	8003a1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	461a      	mov	r2, r3
 80039d0:	2320      	movs	r3, #32
 80039d2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f007 fec2 	bl	800b764 <HAL_PCD_DataOutStageCallback>
 80039e0:	e01d      	b.n	8003a1e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d114      	bne.n	8003a12 <PCD_EP_OutXfrComplete_int+0x1fa>
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d108      	bne.n	8003a12 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f003 f95f 	bl	8006cd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f007 fea3 	bl	800b764 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	4f54300a 	.word	0x4f54300a
 8003a2c:	4f54310a 	.word	0x4f54310a

08003a30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	333c      	adds	r3, #60	; 0x3c
 8003a48:	3304      	adds	r3, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d90e      	bls.n	8003a84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f007 fe5b 	bl	800b740 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d90c      	bls.n	8003aac <PCD_EP_OutSetupPacket_int+0x7c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d108      	bne.n	8003aac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	f003 f912 	bl	8006cd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	4f54300a 	.word	0x4f54300a

08003abc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ada:	883b      	ldrh	r3, [r7, #0]
 8003adc:	0419      	lsls	r1, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae8:	e028      	b.n	8003b3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	4413      	add	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e00d      	b.n	8003b1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	3340      	adds	r3, #64	; 0x40
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4413      	add	r3, r2
 8003b12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	3301      	adds	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d3ec      	bcc.n	8003afe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b24:	883b      	ldrh	r3, [r7, #0]
 8003b26:	0418      	lsls	r0, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6819      	ldr	r1, [r3, #0]
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4302      	orrs	r2, r0
 8003b34:	3340      	adds	r3, #64	; 0x40
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e264      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d075      	beq.n	8003c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba2:	4ba3      	ldr	r3, [pc, #652]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d00c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bae:	4ba0      	ldr	r3, [pc, #640]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d112      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b9d      	ldr	r3, [pc, #628]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	4b99      	ldr	r3, [pc, #612]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05b      	beq.n	8003c8c <HAL_RCC_OscConfig+0x108>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d157      	bne.n	8003c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e23f      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x74>
 8003bea:	4b91      	ldr	r3, [pc, #580]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a90      	ldr	r2, [pc, #576]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xb0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x98>
 8003c02:	4b8b      	ldr	r3, [pc, #556]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a8a      	ldr	r2, [pc, #552]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b88      	ldr	r3, [pc, #544]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a87      	ldr	r2, [pc, #540]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xb0>
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a83      	ldr	r2, [pc, #524]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b81      	ldr	r3, [pc, #516]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a80      	ldr	r2, [pc, #512]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fd ffdc 	bl	8001bf8 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fd ffd8 	bl	8001bf8 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e204      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xc0>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fd ffc8 	bl	8001bf8 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fd ffc4 	bl	8001bf8 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1f0      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b6c      	ldr	r3, [pc, #432]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0xe8>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9a:	4b65      	ldr	r3, [pc, #404]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b62      	ldr	r3, [pc, #392]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b5f      	ldr	r3, [pc, #380]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b5c      	ldr	r3, [pc, #368]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x152>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1c4      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4952      	ldr	r1, [pc, #328]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e03a      	b.n	8003d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <HAL_RCC_OscConfig+0x2b0>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fd ff7d 	bl	8001bf8 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fd ff79 	bl	8001bf8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1a5      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4940      	ldr	r1, [pc, #256]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d36:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <HAL_RCC_OscConfig+0x2b0>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd ff5c 	bl	8001bf8 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fd ff58 	bl	8001bf8 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e184      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d030      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <HAL_RCC_OscConfig+0x2b4>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fd ff3c 	bl	8001bf8 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fd ff38 	bl	8001bf8 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e164      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x200>
 8003da2:	e015      	b.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x2b4>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003daa:	f7fd ff25 	bl	8001bf8 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fd ff21 	bl	8001bf8 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e14d      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80a0 	beq.w	8003f1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de2:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_OscConfig+0x2b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d121      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_RCC_OscConfig+0x2b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_RCC_OscConfig+0x2b8>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fd fee7 	bl	8001bf8 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e011      	b.n	8003e52 <HAL_RCC_OscConfig+0x2ce>
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	42470000 	.word	0x42470000
 8003e38:	42470e80 	.word	0x42470e80
 8003e3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fd feda 	bl	8001bf8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e106      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e52:	4b85      	ldr	r3, [pc, #532]	; (8004068 <HAL_RCC_OscConfig+0x4e4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x2f0>
 8003e66:	4b81      	ldr	r3, [pc, #516]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a80      	ldr	r2, [pc, #512]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	e01c      	b.n	8003eae <HAL_RCC_OscConfig+0x32a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x312>
 8003e7c:	4b7b      	ldr	r3, [pc, #492]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a7a      	ldr	r2, [pc, #488]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	4b78      	ldr	r3, [pc, #480]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a77      	ldr	r2, [pc, #476]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
 8003e94:	e00b      	b.n	8003eae <HAL_RCC_OscConfig+0x32a>
 8003e96:	4b75      	ldr	r3, [pc, #468]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	4a74      	ldr	r2, [pc, #464]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea2:	4b72      	ldr	r3, [pc, #456]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a71      	ldr	r2, [pc, #452]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d015      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fe9f 	bl	8001bf8 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fd fe9b 	bl	8001bf8 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0c5      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	4b65      	ldr	r3, [pc, #404]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ee      	beq.n	8003ebe <HAL_RCC_OscConfig+0x33a>
 8003ee0:	e014      	b.n	8003f0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee2:	f7fd fe89 	bl	8001bf8 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd fe85 	bl	8001bf8 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0af      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	4b5a      	ldr	r3, [pc, #360]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ee      	bne.n	8003eea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d105      	bne.n	8003f1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f12:	4b56      	ldr	r3, [pc, #344]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	4a55      	ldr	r2, [pc, #340]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 809b 	beq.w	800405e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f28:	4b50      	ldr	r3, [pc, #320]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d05c      	beq.n	8003fee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d141      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b4c      	ldr	r3, [pc, #304]	; (8004070 <HAL_RCC_OscConfig+0x4ec>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fd fe59 	bl	8001bf8 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fd fe55 	bl	8001bf8 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e081      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5c:	4b43      	ldr	r3, [pc, #268]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	019b      	lsls	r3, r3, #6
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	061b      	lsls	r3, r3, #24
 8003f8c:	4937      	ldr	r1, [pc, #220]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f92:	4b37      	ldr	r3, [pc, #220]	; (8004070 <HAL_RCC_OscConfig+0x4ec>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fd fe2e 	bl	8001bf8 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd fe2a 	bl	8001bf8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e056      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b2e      	ldr	r3, [pc, #184]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x41c>
 8003fbe:	e04e      	b.n	800405e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <HAL_RCC_OscConfig+0x4ec>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fe17 	bl	8001bf8 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fd fe13 	bl	8001bf8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e03f      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe0:	4b22      	ldr	r3, [pc, #136]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <HAL_RCC_OscConfig+0x44a>
 8003fec:	e037      	b.n	800405e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e032      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <HAL_RCC_OscConfig+0x4e8>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d028      	beq.n	800405a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d121      	bne.n	800405a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d11a      	bne.n	800405a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800402a:	4013      	ands	r3, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004030:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004032:	4293      	cmp	r3, r2
 8004034:	d111      	bne.n	800405a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	3b01      	subs	r3, #1
 8004044:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d107      	bne.n	800405a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40007000 	.word	0x40007000
 800406c:	40023800 	.word	0x40023800
 8004070:	42470060 	.word	0x42470060

08004074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0cc      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d90c      	bls.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0b8      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a58      	ldr	r2, [pc, #352]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e0:	4b53      	ldr	r3, [pc, #332]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a52      	ldr	r2, [pc, #328]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	494d      	ldr	r1, [pc, #308]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d044      	beq.n	8004194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d119      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e07f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e067      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4934      	ldr	r1, [pc, #208]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fd fd48 	bl	8001bf8 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fd fd44 	bl	8001bf8 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e04f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d20c      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e032      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4916      	ldr	r1, [pc, #88]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	490e      	ldr	r1, [pc, #56]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fa:	f000 f821 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041fe:	4602      	mov	r2, r0
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	490a      	ldr	r1, [pc, #40]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	5ccb      	ldrb	r3, [r1, r3]
 800420e:	fa22 f303 	lsr.w	r3, r2, r3
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd f9be 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023c00 	.word	0x40023c00
 8004230:	40023800 	.word	0x40023800
 8004234:	0801a2cc 	.word	0x0801a2cc
 8004238:	20000004 	.word	0x20000004
 800423c:	20000010 	.word	0x20000010

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	2300      	movs	r3, #0
 8004252:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004258:	4b67      	ldr	r3, [pc, #412]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d00d      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x40>
 8004264:	2b08      	cmp	r3, #8
 8004266:	f200 80bd 	bhi.w	80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x34>
 800426e:	2b04      	cmp	r3, #4
 8004270:	d003      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0x3a>
 8004272:	e0b7      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b61      	ldr	r3, [pc, #388]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004276:	60bb      	str	r3, [r7, #8]
       break;
 8004278:	e0b7      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800427a:	4b61      	ldr	r3, [pc, #388]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800427c:	60bb      	str	r3, [r7, #8]
      break;
 800427e:	e0b4      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004280:	4b5d      	ldr	r3, [pc, #372]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004288:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800428a:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d04d      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004296:	4b58      	ldr	r3, [pc, #352]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	461a      	mov	r2, r3
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042a6:	f04f 0100 	mov.w	r1, #0
 80042aa:	ea02 0800 	and.w	r8, r2, r0
 80042ae:	ea03 0901 	and.w	r9, r3, r1
 80042b2:	4640      	mov	r0, r8
 80042b4:	4649      	mov	r1, r9
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	014b      	lsls	r3, r1, #5
 80042c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042c4:	0142      	lsls	r2, r0, #5
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	ebb0 0008 	subs.w	r0, r0, r8
 80042ce:	eb61 0109 	sbc.w	r1, r1, r9
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	018b      	lsls	r3, r1, #6
 80042dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042e0:	0182      	lsls	r2, r0, #6
 80042e2:	1a12      	subs	r2, r2, r0
 80042e4:	eb63 0301 	sbc.w	r3, r3, r1
 80042e8:	f04f 0000 	mov.w	r0, #0
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	00d9      	lsls	r1, r3, #3
 80042f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042f6:	00d0      	lsls	r0, r2, #3
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	eb12 0208 	adds.w	r2, r2, r8
 8004300:	eb43 0309 	adc.w	r3, r3, r9
 8004304:	f04f 0000 	mov.w	r0, #0
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	0259      	lsls	r1, r3, #9
 800430e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004312:	0250      	lsls	r0, r2, #9
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	461a      	mov	r2, r3
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	f7fc f894 	bl	8000450 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4613      	mov	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e04a      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004332:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	099b      	lsrs	r3, r3, #6
 8004338:	461a      	mov	r2, r3
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	ea02 0400 	and.w	r4, r2, r0
 800434a:	ea03 0501 	and.w	r5, r3, r1
 800434e:	4620      	mov	r0, r4
 8004350:	4629      	mov	r1, r5
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	014b      	lsls	r3, r1, #5
 800435c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004360:	0142      	lsls	r2, r0, #5
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	1b00      	subs	r0, r0, r4
 8004368:	eb61 0105 	sbc.w	r1, r1, r5
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	018b      	lsls	r3, r1, #6
 8004376:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800437a:	0182      	lsls	r2, r0, #6
 800437c:	1a12      	subs	r2, r2, r0
 800437e:	eb63 0301 	sbc.w	r3, r3, r1
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	00d9      	lsls	r1, r3, #3
 800438c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004390:	00d0      	lsls	r0, r2, #3
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	1912      	adds	r2, r2, r4
 8004398:	eb45 0303 	adc.w	r3, r5, r3
 800439c:	f04f 0000 	mov.w	r0, #0
 80043a0:	f04f 0100 	mov.w	r1, #0
 80043a4:	0299      	lsls	r1, r3, #10
 80043a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043aa:	0290      	lsls	r0, r2, #10
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f7fc f848 	bl	8000450 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	3301      	adds	r3, #1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	60bb      	str	r3, [r7, #8]
      break;
 80043e2:	e002      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043e6:	60bb      	str	r3, [r7, #8]
      break;
 80043e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ea:	68bb      	ldr	r3, [r7, #8]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	007a1200 	.word	0x007a1200

08004404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_RCC_GetHCLKFreq+0x14>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000004 	.word	0x20000004

0800441c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004420:	f7ff fff0 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0a9b      	lsrs	r3, r3, #10
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4903      	ldr	r1, [pc, #12]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	0801a2dc 	.word	0x0801a2dc

08004444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004448:	f7ff ffdc 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0b5b      	lsrs	r3, r3, #13
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4903      	ldr	r1, [pc, #12]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	0801a2dc 	.word	0x0801a2dc

0800446c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	220f      	movs	r2, #15
 800447a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800447c:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <HAL_RCC_GetClockConfig+0x5c>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0203 	and.w	r2, r3, #3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <HAL_RCC_GetClockConfig+0x5c>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_RCC_GetClockConfig+0x5c>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <HAL_RCC_GetClockConfig+0x60>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0207 	and.w	r2, r3, #7
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40023c00 	.word	0x40023c00

080044d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e041      	b.n	8004566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f839 	bl	800456e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f000 f9d8 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d001      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e04e      	b.n	800463a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a23      	ldr	r2, [pc, #140]	; (8004648 <HAL_TIM_Base_Start_IT+0xc4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d022      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c6:	d01d      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1f      	ldr	r2, [pc, #124]	; (800464c <HAL_TIM_Base_Start_IT+0xc8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d018      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <HAL_TIM_Base_Start_IT+0xcc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d013      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_TIM_Base_Start_IT+0xd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00e      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <HAL_TIM_Base_Start_IT+0xd4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a19      	ldr	r2, [pc, #100]	; (800465c <HAL_TIM_Base_Start_IT+0xd8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_TIM_Base_Start_IT+0xdc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d111      	bne.n	8004628 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b06      	cmp	r3, #6
 8004614:	d010      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004626:	e007      	b.n	8004638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	40010400 	.word	0x40010400
 800465c:	40014000 	.word	0x40014000
 8004660:	40001800 	.word	0x40001800

08004664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b02      	cmp	r3, #2
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b02      	cmp	r3, #2
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0202 	mvn.w	r2, #2
 8004690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8ee 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f8e0 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f8f1 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d122      	bne.n	8004714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d11b      	bne.n	8004714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0204 	mvn.w	r2, #4
 80046e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8c4 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 8004700:	e005      	b.n	800470e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f8b6 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8c7 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b08      	cmp	r3, #8
 8004720:	d122      	bne.n	8004768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b08      	cmp	r3, #8
 800472e:	d11b      	bne.n	8004768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0208 	mvn.w	r2, #8
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2204      	movs	r2, #4
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f89a 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f88c 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f89d 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b10      	cmp	r3, #16
 8004774:	d122      	bne.n	80047bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b10      	cmp	r3, #16
 8004782:	d11b      	bne.n	80047bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0210 	mvn.w	r2, #16
 800478c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2208      	movs	r2, #8
 8004792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f870 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 80047a8:	e005      	b.n	80047b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f862 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f873 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10e      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0201 	mvn.w	r2, #1
 80047e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fc fc8c 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d10e      	bne.n	8004814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b80      	cmp	r3, #128	; 0x80
 8004802:	d107      	bne.n	8004814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f902 	bl	8004a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d10e      	bne.n	8004840 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d107      	bne.n	8004840 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f838 	bl	80048b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b20      	cmp	r3, #32
 800484c:	d10e      	bne.n	800486c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b20      	cmp	r3, #32
 800485a:	d107      	bne.n	800486c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0220 	mvn.w	r2, #32
 8004864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f8cc 	bl	8004a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a40      	ldr	r2, [pc, #256]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e2:	d00f      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3d      	ldr	r2, [pc, #244]	; (80049dc <TIM_Base_SetConfig+0x118>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3c      	ldr	r2, [pc, #240]	; (80049e0 <TIM_Base_SetConfig+0x11c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3b      	ldr	r2, [pc, #236]	; (80049e4 <TIM_Base_SetConfig+0x120>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3a      	ldr	r2, [pc, #232]	; (80049e8 <TIM_Base_SetConfig+0x124>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d108      	bne.n	8004916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2f      	ldr	r2, [pc, #188]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d02b      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d027      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <TIM_Base_SetConfig+0x118>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d023      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <TIM_Base_SetConfig+0x11c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01f      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <TIM_Base_SetConfig+0x120>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01b      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a29      	ldr	r2, [pc, #164]	; (80049e8 <TIM_Base_SetConfig+0x124>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d017      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a28      	ldr	r2, [pc, #160]	; (80049ec <TIM_Base_SetConfig+0x128>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a27      	ldr	r2, [pc, #156]	; (80049f0 <TIM_Base_SetConfig+0x12c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00f      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <TIM_Base_SetConfig+0x130>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a25      	ldr	r2, [pc, #148]	; (80049f8 <TIM_Base_SetConfig+0x134>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a24      	ldr	r2, [pc, #144]	; (80049fc <TIM_Base_SetConfig+0x138>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a23      	ldr	r2, [pc, #140]	; (8004a00 <TIM_Base_SetConfig+0x13c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d108      	bne.n	8004988 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a0c      	ldr	r2, [pc, #48]	; (80049e8 <TIM_Base_SetConfig+0x124>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d103      	bne.n	80049c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	615a      	str	r2, [r3, #20]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40010400 	.word	0x40010400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800
 80049f8:	40001800 	.word	0x40001800
 80049fc:	40001c00 	.word	0x40001c00
 8004a00:	40002000 	.word	0x40002000

08004a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e03f      	b.n	8004abe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fc fcea 	bl	800142c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	; 0x24
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fc7b 	bl	800536c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b0ba      	sub	sp, #232	; 0xe8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_UART_IRQHandler+0x66>
 8004b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fb65 	bl	80051f6 <UART_Receive_IT>
      return;
 8004b2c:	e256      	b.n	8004fdc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80de 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x22c>
 8004b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80d1 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_UART_IRQHandler+0xae>
 8004b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f043 0201 	orr.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <HAL_UART_IRQHandler+0xd2>
 8004b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f043 0202 	orr.w	r2, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <HAL_UART_IRQHandler+0xf6>
 8004ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0204 	orr.w	r2, r3, #4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d011      	beq.n	8004bee <HAL_UART_IRQHandler+0x126>
 8004bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f043 0208 	orr.w	r2, r3, #8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 81ed 	beq.w	8004fd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_UART_IRQHandler+0x14e>
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 faf0 	bl	80051f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <HAL_UART_IRQHandler+0x17a>
 8004c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04f      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f9f8 	bl	8005038 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d141      	bne.n	8004cda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1d9      	bne.n	8004c56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d013      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	4a7d      	ldr	r2, [pc, #500]	; (8004ea4 <HAL_UART_IRQHandler+0x3dc>)
 8004cb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd f9ce 	bl	8002058 <HAL_DMA_Abort_IT>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	e00e      	b.n	8004cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f99a 	bl	800500c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	e00a      	b.n	8004cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f996 	bl	800500c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	e006      	b.n	8004cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f992 	bl	800500c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cee:	e170      	b.n	8004fd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	bf00      	nop
    return;
 8004cf2:	e16e      	b.n	8004fd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	f040 814a 	bne.w	8004f92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8143 	beq.w	8004f92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 813c 	beq.w	8004f92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	f040 80b4 	bne.w	8004ea8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8140 	beq.w	8004fd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	f080 8139 	bcs.w	8004fd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d76:	f000 8088 	beq.w	8004e8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004da6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1d9      	bne.n	8004d7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3314      	adds	r3, #20
 8004de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004df2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e1      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3314      	adds	r3, #20
 8004e08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3314      	adds	r3, #20
 8004e22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e3      	bne.n	8004e02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5a:	f023 0310 	bic.w	r3, r3, #16
 8004e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e3      	bne.n	8004e48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fd f877 	bl	8001f78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f8c0 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ea0:	e099      	b.n	8004fd6 <HAL_UART_IRQHandler+0x50e>
 8004ea2:	bf00      	nop
 8004ea4:	080050ff 	.word	0x080050ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 808b 	beq.w	8004fda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8086 	beq.w	8004fda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ef2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ef4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e3      	bne.n	8004ece <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	623b      	str	r3, [r7, #32]
   return(result);
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e3      	bne.n	8004f06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0310 	bic.w	r3, r3, #16
 8004f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f70:	61fa      	str	r2, [r7, #28]
 8004f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	69b9      	ldr	r1, [r7, #24]
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e3      	bne.n	8004f4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f848 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f90:	e023      	b.n	8004fda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x4ea>
 8004f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8bb 	bl	8005126 <UART_Transmit_IT>
    return;
 8004fb0:	e014      	b.n	8004fdc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <HAL_UART_IRQHandler+0x514>
 8004fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8fb 	bl	80051c6 <UART_EndTransmit_IT>
    return;
 8004fd0:	e004      	b.n	8004fdc <HAL_UART_IRQHandler+0x514>
    return;
 8004fd2:	bf00      	nop
 8004fd4:	e002      	b.n	8004fdc <HAL_UART_IRQHandler+0x514>
      return;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <HAL_UART_IRQHandler+0x514>
      return;
 8004fda:	bf00      	nop
  }
}
 8004fdc:	37e8      	adds	r7, #232	; 0xe8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop

08004fe4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b095      	sub	sp, #84	; 0x54
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005060:	643a      	str	r2, [r7, #64]	; 0x40
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005066:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e5      	bne.n	8005040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3314      	adds	r3, #20
 800507a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	61fb      	str	r3, [r7, #28]
   return(result);
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f023 0301 	bic.w	r3, r3, #1
 800508a:	64bb      	str	r3, [r7, #72]	; 0x48
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005094:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800509a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e5      	bne.n	8005074 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d119      	bne.n	80050e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f023 0310 	bic.w	r3, r3, #16
 80050c6:	647b      	str	r3, [r7, #68]	; 0x44
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d0:	61ba      	str	r2, [r7, #24]
 80050d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6979      	ldr	r1, [r7, #20]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	613b      	str	r3, [r7, #16]
   return(result);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050f2:	bf00      	nop
 80050f4:	3754      	adds	r7, #84	; 0x54
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ff77 	bl	800500c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b21      	cmp	r3, #33	; 0x21
 8005138:	d13e      	bne.n	80051b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005142:	d114      	bne.n	800516e <UART_Transmit_IT+0x48>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d110      	bne.n	800516e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005160:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	621a      	str	r2, [r3, #32]
 800516c:	e008      	b.n	8005180 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6211      	str	r1, [r2, #32]
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29b      	uxth	r3, r3
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4619      	mov	r1, r3
 800518e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10f      	bne.n	80051b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e000      	b.n	80051ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051b8:	2302      	movs	r3, #2
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff fefc 	bl	8004fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b08c      	sub	sp, #48	; 0x30
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b22      	cmp	r3, #34	; 0x22
 8005208:	f040 80ab 	bne.w	8005362 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005214:	d117      	bne.n	8005246 <UART_Receive_IT+0x50>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d113      	bne.n	8005246 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005234:	b29a      	uxth	r2, r3
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	1c9a      	adds	r2, r3, #2
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
 8005244:	e026      	b.n	8005294 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800524c:	2300      	movs	r3, #0
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005258:	d007      	beq.n	800526a <UART_Receive_IT+0x74>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <UART_Receive_IT+0x82>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	b2da      	uxtb	r2, r3
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e008      	b.n	800528a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005284:	b2da      	uxtb	r2, r3
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29b      	uxth	r3, r3
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	4619      	mov	r1, r3
 80052a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d15a      	bne.n	800535e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0220 	bic.w	r2, r2, #32
 80052b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0201 	bic.w	r2, r2, #1
 80052d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d135      	bne.n	8005354 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	613b      	str	r3, [r7, #16]
   return(result);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f023 0310 	bic.w	r3, r3, #16
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530e:	623a      	str	r2, [r7, #32]
 8005310:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	69f9      	ldr	r1, [r7, #28]
 8005314:	6a3a      	ldr	r2, [r7, #32]
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	61bb      	str	r3, [r7, #24]
   return(result);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e5      	bne.n	80052ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b10      	cmp	r3, #16
 800532e:	d10a      	bne.n	8005346 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff fe67 	bl	8005020 <HAL_UARTEx_RxEventCallback>
 8005352:	e002      	b.n	800535a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fe4f 	bl	8004ff8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	e002      	b.n	8005364 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3730      	adds	r7, #48	; 0x30
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005370:	b09f      	sub	sp, #124	; 0x7c
 8005372:	af00      	add	r7, sp, #0
 8005374:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005382:	68d9      	ldr	r1, [r3, #12]
 8005384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	ea40 0301 	orr.w	r3, r0, r1
 800538c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800538e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	431a      	orrs	r2, r3
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	431a      	orrs	r2, r3
 800539e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053b0:	f021 010c 	bic.w	r1, r1, #12
 80053b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ba:	430b      	orrs	r3, r1
 80053bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ca:	6999      	ldr	r1, [r3, #24]
 80053cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	ea40 0301 	orr.w	r3, r0, r1
 80053d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4bc5      	ldr	r3, [pc, #788]	; (80056f0 <UART_SetConfig+0x384>)
 80053dc:	429a      	cmp	r2, r3
 80053de:	d004      	beq.n	80053ea <UART_SetConfig+0x7e>
 80053e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4bc3      	ldr	r3, [pc, #780]	; (80056f4 <UART_SetConfig+0x388>)
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d103      	bne.n	80053f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053ea:	f7ff f82b 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 80053ee:	6778      	str	r0, [r7, #116]	; 0x74
 80053f0:	e002      	b.n	80053f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053f2:	f7ff f813 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 80053f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005400:	f040 80b6 	bne.w	8005570 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005406:	461c      	mov	r4, r3
 8005408:	f04f 0500 	mov.w	r5, #0
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	1891      	adds	r1, r2, r2
 8005412:	6439      	str	r1, [r7, #64]	; 0x40
 8005414:	415b      	adcs	r3, r3
 8005416:	647b      	str	r3, [r7, #68]	; 0x44
 8005418:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800541c:	1912      	adds	r2, r2, r4
 800541e:	eb45 0303 	adc.w	r3, r5, r3
 8005422:	f04f 0000 	mov.w	r0, #0
 8005426:	f04f 0100 	mov.w	r1, #0
 800542a:	00d9      	lsls	r1, r3, #3
 800542c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005430:	00d0      	lsls	r0, r2, #3
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	1911      	adds	r1, r2, r4
 8005438:	6639      	str	r1, [r7, #96]	; 0x60
 800543a:	416b      	adcs	r3, r5
 800543c:	667b      	str	r3, [r7, #100]	; 0x64
 800543e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	461a      	mov	r2, r3
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	1891      	adds	r1, r2, r2
 800544a:	63b9      	str	r1, [r7, #56]	; 0x38
 800544c:	415b      	adcs	r3, r3
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005454:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005458:	f7fa fffa 	bl	8000450 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4ba5      	ldr	r3, [pc, #660]	; (80056f8 <UART_SetConfig+0x38c>)
 8005462:	fba3 2302 	umull	r2, r3, r3, r2
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	011e      	lsls	r6, r3, #4
 800546a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546c:	461c      	mov	r4, r3
 800546e:	f04f 0500 	mov.w	r5, #0
 8005472:	4622      	mov	r2, r4
 8005474:	462b      	mov	r3, r5
 8005476:	1891      	adds	r1, r2, r2
 8005478:	6339      	str	r1, [r7, #48]	; 0x30
 800547a:	415b      	adcs	r3, r3
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
 800547e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005482:	1912      	adds	r2, r2, r4
 8005484:	eb45 0303 	adc.w	r3, r5, r3
 8005488:	f04f 0000 	mov.w	r0, #0
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	00d9      	lsls	r1, r3, #3
 8005492:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005496:	00d0      	lsls	r0, r2, #3
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	1911      	adds	r1, r2, r4
 800549e:	65b9      	str	r1, [r7, #88]	; 0x58
 80054a0:	416b      	adcs	r3, r5
 80054a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	1891      	adds	r1, r2, r2
 80054b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80054b2:	415b      	adcs	r3, r3
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80054be:	f7fa ffc7 	bl	8000450 <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4b8c      	ldr	r3, [pc, #560]	; (80056f8 <UART_SetConfig+0x38c>)
 80054c8:	fba3 1302 	umull	r1, r3, r3, r2
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	2164      	movs	r1, #100	; 0x64
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	3332      	adds	r3, #50	; 0x32
 80054da:	4a87      	ldr	r2, [pc, #540]	; (80056f8 <UART_SetConfig+0x38c>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054e8:	441e      	add	r6, r3
 80054ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ec:	4618      	mov	r0, r3
 80054ee:	f04f 0100 	mov.w	r1, #0
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	1894      	adds	r4, r2, r2
 80054f8:	623c      	str	r4, [r7, #32]
 80054fa:	415b      	adcs	r3, r3
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
 80054fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005502:	1812      	adds	r2, r2, r0
 8005504:	eb41 0303 	adc.w	r3, r1, r3
 8005508:	f04f 0400 	mov.w	r4, #0
 800550c:	f04f 0500 	mov.w	r5, #0
 8005510:	00dd      	lsls	r5, r3, #3
 8005512:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005516:	00d4      	lsls	r4, r2, #3
 8005518:	4622      	mov	r2, r4
 800551a:	462b      	mov	r3, r5
 800551c:	1814      	adds	r4, r2, r0
 800551e:	653c      	str	r4, [r7, #80]	; 0x50
 8005520:	414b      	adcs	r3, r1
 8005522:	657b      	str	r3, [r7, #84]	; 0x54
 8005524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	461a      	mov	r2, r3
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	1891      	adds	r1, r2, r2
 8005530:	61b9      	str	r1, [r7, #24]
 8005532:	415b      	adcs	r3, r3
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800553a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800553e:	f7fa ff87 	bl	8000450 <__aeabi_uldivmod>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4b6c      	ldr	r3, [pc, #432]	; (80056f8 <UART_SetConfig+0x38c>)
 8005548:	fba3 1302 	umull	r1, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	2164      	movs	r1, #100	; 0x64
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	3332      	adds	r3, #50	; 0x32
 800555a:	4a67      	ldr	r2, [pc, #412]	; (80056f8 <UART_SetConfig+0x38c>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	f003 0207 	and.w	r2, r3, #7
 8005566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4432      	add	r2, r6
 800556c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800556e:	e0b9      	b.n	80056e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005572:	461c      	mov	r4, r3
 8005574:	f04f 0500 	mov.w	r5, #0
 8005578:	4622      	mov	r2, r4
 800557a:	462b      	mov	r3, r5
 800557c:	1891      	adds	r1, r2, r2
 800557e:	6139      	str	r1, [r7, #16]
 8005580:	415b      	adcs	r3, r3
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005588:	1912      	adds	r2, r2, r4
 800558a:	eb45 0303 	adc.w	r3, r5, r3
 800558e:	f04f 0000 	mov.w	r0, #0
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	00d9      	lsls	r1, r3, #3
 8005598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800559c:	00d0      	lsls	r0, r2, #3
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	eb12 0804 	adds.w	r8, r2, r4
 80055a6:	eb43 0905 	adc.w	r9, r3, r5
 80055aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f04f 0100 	mov.w	r1, #0
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	008b      	lsls	r3, r1, #2
 80055be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055c2:	0082      	lsls	r2, r0, #2
 80055c4:	4640      	mov	r0, r8
 80055c6:	4649      	mov	r1, r9
 80055c8:	f7fa ff42 	bl	8000450 <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4b49      	ldr	r3, [pc, #292]	; (80056f8 <UART_SetConfig+0x38c>)
 80055d2:	fba3 2302 	umull	r2, r3, r3, r2
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	011e      	lsls	r6, r3, #4
 80055da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055dc:	4618      	mov	r0, r3
 80055de:	f04f 0100 	mov.w	r1, #0
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	1894      	adds	r4, r2, r2
 80055e8:	60bc      	str	r4, [r7, #8]
 80055ea:	415b      	adcs	r3, r3
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055f2:	1812      	adds	r2, r2, r0
 80055f4:	eb41 0303 	adc.w	r3, r1, r3
 80055f8:	f04f 0400 	mov.w	r4, #0
 80055fc:	f04f 0500 	mov.w	r5, #0
 8005600:	00dd      	lsls	r5, r3, #3
 8005602:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005606:	00d4      	lsls	r4, r2, #3
 8005608:	4622      	mov	r2, r4
 800560a:	462b      	mov	r3, r5
 800560c:	1814      	adds	r4, r2, r0
 800560e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005610:	414b      	adcs	r3, r1
 8005612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4618      	mov	r0, r3
 800561a:	f04f 0100 	mov.w	r1, #0
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	008b      	lsls	r3, r1, #2
 8005628:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800562c:	0082      	lsls	r2, r0, #2
 800562e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005632:	f7fa ff0d 	bl	8000450 <__aeabi_uldivmod>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4b2f      	ldr	r3, [pc, #188]	; (80056f8 <UART_SetConfig+0x38c>)
 800563c:	fba3 1302 	umull	r1, r3, r3, r2
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	2164      	movs	r1, #100	; 0x64
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	3332      	adds	r3, #50	; 0x32
 800564e:	4a2a      	ldr	r2, [pc, #168]	; (80056f8 <UART_SetConfig+0x38c>)
 8005650:	fba2 2303 	umull	r2, r3, r2, r3
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800565a:	441e      	add	r6, r3
 800565c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800565e:	4618      	mov	r0, r3
 8005660:	f04f 0100 	mov.w	r1, #0
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	1894      	adds	r4, r2, r2
 800566a:	603c      	str	r4, [r7, #0]
 800566c:	415b      	adcs	r3, r3
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005674:	1812      	adds	r2, r2, r0
 8005676:	eb41 0303 	adc.w	r3, r1, r3
 800567a:	f04f 0400 	mov.w	r4, #0
 800567e:	f04f 0500 	mov.w	r5, #0
 8005682:	00dd      	lsls	r5, r3, #3
 8005684:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005688:	00d4      	lsls	r4, r2, #3
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	eb12 0a00 	adds.w	sl, r2, r0
 8005692:	eb43 0b01 	adc.w	fp, r3, r1
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4618      	mov	r0, r3
 800569c:	f04f 0100 	mov.w	r1, #0
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	008b      	lsls	r3, r1, #2
 80056aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056ae:	0082      	lsls	r2, r0, #2
 80056b0:	4650      	mov	r0, sl
 80056b2:	4659      	mov	r1, fp
 80056b4:	f7fa fecc 	bl	8000450 <__aeabi_uldivmod>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <UART_SetConfig+0x38c>)
 80056be:	fba3 1302 	umull	r1, r3, r3, r2
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	2164      	movs	r1, #100	; 0x64
 80056c6:	fb01 f303 	mul.w	r3, r1, r3
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	3332      	adds	r3, #50	; 0x32
 80056d0:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <UART_SetConfig+0x38c>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	f003 020f 	and.w	r2, r3, #15
 80056dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4432      	add	r2, r6
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	bf00      	nop
 80056e6:	377c      	adds	r7, #124	; 0x7c
 80056e8:	46bd      	mov	sp, r7
 80056ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ee:	bf00      	nop
 80056f0:	40011000 	.word	0x40011000
 80056f4:	40011400 	.word	0x40011400
 80056f8:	51eb851f 	.word	0x51eb851f

080056fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056fc:	b084      	sub	sp, #16
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	f107 001c 	add.w	r0, r7, #28
 800570a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	2b01      	cmp	r3, #1
 8005712:	d122      	bne.n	800575a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800573c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d105      	bne.n	800574e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 fb1c 	bl	8006d8c <USB_CoreReset>
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
 8005758:	e01a      	b.n	8005790 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f001 fb10 	bl	8006d8c <USB_CoreReset>
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
 8005782:	e005      	b.n	8005790 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	2b01      	cmp	r3, #1
 8005794:	d10b      	bne.n	80057ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f043 0206 	orr.w	r2, r3, #6
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ba:	b004      	add	sp, #16
 80057bc:	4770      	bx	lr
	...

080057c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d165      	bne.n	80058a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4a41      	ldr	r2, [pc, #260]	; (80058dc <USB_SetTurnaroundTime+0x11c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d906      	bls.n	80057ea <USB_SetTurnaroundTime+0x2a>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4a40      	ldr	r2, [pc, #256]	; (80058e0 <USB_SetTurnaroundTime+0x120>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d202      	bcs.n	80057ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057e4:	230f      	movs	r3, #15
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	e062      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4a3c      	ldr	r2, [pc, #240]	; (80058e0 <USB_SetTurnaroundTime+0x120>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d306      	bcc.n	8005800 <USB_SetTurnaroundTime+0x40>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4a3b      	ldr	r2, [pc, #236]	; (80058e4 <USB_SetTurnaroundTime+0x124>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d202      	bcs.n	8005800 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057fa:	230e      	movs	r3, #14
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	e057      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4a38      	ldr	r2, [pc, #224]	; (80058e4 <USB_SetTurnaroundTime+0x124>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d306      	bcc.n	8005816 <USB_SetTurnaroundTime+0x56>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4a37      	ldr	r2, [pc, #220]	; (80058e8 <USB_SetTurnaroundTime+0x128>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d202      	bcs.n	8005816 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005810:	230d      	movs	r3, #13
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e04c      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4a33      	ldr	r2, [pc, #204]	; (80058e8 <USB_SetTurnaroundTime+0x128>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d306      	bcc.n	800582c <USB_SetTurnaroundTime+0x6c>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4a32      	ldr	r2, [pc, #200]	; (80058ec <USB_SetTurnaroundTime+0x12c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d802      	bhi.n	800582c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005826:	230c      	movs	r3, #12
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e041      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4a2f      	ldr	r2, [pc, #188]	; (80058ec <USB_SetTurnaroundTime+0x12c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d906      	bls.n	8005842 <USB_SetTurnaroundTime+0x82>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4a2e      	ldr	r2, [pc, #184]	; (80058f0 <USB_SetTurnaroundTime+0x130>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d802      	bhi.n	8005842 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800583c:	230b      	movs	r3, #11
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	e036      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4a2a      	ldr	r2, [pc, #168]	; (80058f0 <USB_SetTurnaroundTime+0x130>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d906      	bls.n	8005858 <USB_SetTurnaroundTime+0x98>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4a29      	ldr	r2, [pc, #164]	; (80058f4 <USB_SetTurnaroundTime+0x134>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d802      	bhi.n	8005858 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005852:	230a      	movs	r3, #10
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e02b      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4a26      	ldr	r2, [pc, #152]	; (80058f4 <USB_SetTurnaroundTime+0x134>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d906      	bls.n	800586e <USB_SetTurnaroundTime+0xae>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4a25      	ldr	r2, [pc, #148]	; (80058f8 <USB_SetTurnaroundTime+0x138>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d202      	bcs.n	800586e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005868:	2309      	movs	r3, #9
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e020      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <USB_SetTurnaroundTime+0x138>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d306      	bcc.n	8005884 <USB_SetTurnaroundTime+0xc4>
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4a20      	ldr	r2, [pc, #128]	; (80058fc <USB_SetTurnaroundTime+0x13c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d802      	bhi.n	8005884 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800587e:	2308      	movs	r3, #8
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e015      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <USB_SetTurnaroundTime+0x13c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d906      	bls.n	800589a <USB_SetTurnaroundTime+0xda>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <USB_SetTurnaroundTime+0x140>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d202      	bcs.n	800589a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005894:	2307      	movs	r3, #7
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e00a      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800589a:	2306      	movs	r3, #6
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e007      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058a6:	2309      	movs	r3, #9
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	e001      	b.n	80058b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058ac:	2309      	movs	r3, #9
 80058ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	029b      	lsls	r3, r3, #10
 80058c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058c8:	431a      	orrs	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	00d8acbf 	.word	0x00d8acbf
 80058e0:	00e4e1c0 	.word	0x00e4e1c0
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	01067380 	.word	0x01067380
 80058ec:	011a499f 	.word	0x011a499f
 80058f0:	01312cff 	.word	0x01312cff
 80058f4:	014ca43f 	.word	0x014ca43f
 80058f8:	016e3600 	.word	0x016e3600
 80058fc:	01a6ab1f 	.word	0x01a6ab1f
 8005900:	01e84800 	.word	0x01e84800

08005904 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f043 0201 	orr.w	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f023 0201 	bic.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d115      	bne.n	8005996 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005976:	2001      	movs	r0, #1
 8005978:	f7fc f94a 	bl	8001c10 <HAL_Delay>
      ms++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 f972 	bl	8006c6c <USB_GetMode>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d01e      	beq.n	80059cc <USB_SetCurrentMode+0x84>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b31      	cmp	r3, #49	; 0x31
 8005992:	d9f0      	bls.n	8005976 <USB_SetCurrentMode+0x2e>
 8005994:	e01a      	b.n	80059cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d115      	bne.n	80059c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059a8:	2001      	movs	r0, #1
 80059aa:	f7fc f931 	bl	8001c10 <HAL_Delay>
      ms++;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f959 	bl	8006c6c <USB_GetMode>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <USB_SetCurrentMode+0x84>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b31      	cmp	r3, #49	; 0x31
 80059c4:	d9f0      	bls.n	80059a8 <USB_SetCurrentMode+0x60>
 80059c6:	e001      	b.n	80059cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e005      	b.n	80059d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b32      	cmp	r3, #50	; 0x32
 80059d0:	d101      	bne.n	80059d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e0:	b084      	sub	sp, #16
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b086      	sub	sp, #24
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e009      	b.n	8005a14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	3340      	adds	r3, #64	; 0x40
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3301      	adds	r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b0e      	cmp	r3, #14
 8005a18:	d9f2      	bls.n	8005a00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d11c      	bne.n	8005a5a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2e:	f043 0302 	orr.w	r3, r3, #2
 8005a32:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38
 8005a58:	e00b      	b.n	8005a72 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a78:	461a      	mov	r2, r3
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a84:	4619      	mov	r1, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	680b      	ldr	r3, [r1, #0]
 8005a90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d10c      	bne.n	8005ab2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d104      	bne.n	8005aa8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f945 	bl	8005d30 <USB_SetDevSpeed>
 8005aa6:	e008      	b.n	8005aba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f940 	bl	8005d30 <USB_SetDevSpeed>
 8005ab0:	e003      	b.n	8005aba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ab2:	2103      	movs	r1, #3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f93b 	bl	8005d30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aba:	2110      	movs	r1, #16
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f8f3 	bl	8005ca8 <USB_FlushTxFifo>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f90f 	bl	8005cf0 <USB_FlushRxFifo>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	461a      	mov	r2, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afa:	461a      	mov	r2, r3
 8005afc:	2300      	movs	r3, #0
 8005afe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	e043      	b.n	8005b8e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b1c:	d118      	bne.n	8005b50 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	461a      	mov	r2, r3
 8005b32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	e013      	b.n	8005b62 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	461a      	mov	r2, r3
 8005b48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e008      	b.n	8005b62 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2300      	movs	r3, #0
 8005b72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	461a      	mov	r2, r3
 8005b82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d3b7      	bcc.n	8005b06 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	e043      	b.n	8005c24 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb2:	d118      	bne.n	8005be6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	e013      	b.n	8005bf8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	e008      	b.n	8005bf8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	461a      	mov	r2, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	461a      	mov	r2, r3
 8005c18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	3301      	adds	r3, #1
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d3b7      	bcc.n	8005b9c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d105      	bne.n	8005c60 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f043 0210 	orr.w	r2, r3, #16
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <USB_DevInit+0x2c4>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f043 0208 	orr.w	r2, r3, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d107      	bne.n	8005c94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c8c:	f043 0304 	orr.w	r3, r3, #4
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ca0:	b004      	add	sp, #16
 8005ca2:	4770      	bx	lr
 8005ca4:	803c3800 	.word	0x803c3800

08005ca8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	019b      	lsls	r3, r3, #6
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	4a08      	ldr	r2, [pc, #32]	; (8005cec <USB_FlushTxFifo+0x44>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e006      	b.n	8005ce0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d0f1      	beq.n	8005cc2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	00030d40 	.word	0x00030d40

08005cf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2210      	movs	r2, #16
 8005d00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <USB_FlushRxFifo+0x3c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e006      	b.n	8005d20 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d0f1      	beq.n	8005d02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	00030d40 	.word	0x00030d40

08005d30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	68f9      	ldr	r1, [r7, #12]
 8005d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d50:	4313      	orrs	r3, r2
 8005d52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b087      	sub	sp, #28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 0306 	and.w	r3, r3, #6
 8005d7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
 8005d86:	e00a      	b.n	8005d9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d002      	beq.n	8005d94 <USB_GetDevSpeed+0x32>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b06      	cmp	r3, #6
 8005d92:	d102      	bne.n	8005d9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d94:	2302      	movs	r3, #2
 8005d96:	75fb      	strb	r3, [r7, #23]
 8005d98:	e001      	b.n	8005d9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d9a:	230f      	movs	r3, #15
 8005d9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d13a      	bne.n	8005e3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	2101      	movs	r1, #1
 8005dda:	fa01 f303 	lsl.w	r3, r1, r3
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de6:	4313      	orrs	r3, r2
 8005de8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d155      	bne.n	8005eac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	78db      	ldrb	r3, [r3, #3]
 8005e1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	059b      	lsls	r3, r3, #22
 8005e22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e24:	4313      	orrs	r3, r2
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	e036      	b.n	8005eac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e44:	69da      	ldr	r2, [r3, #28]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	2101      	movs	r1, #1
 8005e50:	fa01 f303 	lsl.w	r3, r1, r3
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d11a      	bne.n	8005eac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	78db      	ldrb	r3, [r3, #3]
 8005e90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e92:	430b      	orrs	r3, r1
 8005e94:	4313      	orrs	r3, r2
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d161      	bne.n	8005f9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eee:	d11f      	bne.n	8005f30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	2101      	movs	r1, #1
 8005f42:	fa01 f303 	lsl.w	r3, r1, r3
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f50:	4013      	ands	r3, r2
 8005f52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	2101      	movs	r1, #1
 8005f66:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f74:	4013      	ands	r3, r2
 8005f76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	0159      	lsls	r1, r3, #5
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	440b      	add	r3, r1
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	4619      	mov	r1, r3
 8005f94:	4b35      	ldr	r3, [pc, #212]	; (800606c <USB_DeactivateEndpoint+0x1b0>)
 8005f96:	4013      	ands	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]
 8005f9a:	e060      	b.n	800605e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb2:	d11f      	bne.n	8005ff4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	2101      	movs	r1, #1
 8006006:	fa01 f303 	lsl.w	r3, r1, r3
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	43db      	mvns	r3, r3
 800600e:	68f9      	ldr	r1, [r7, #12]
 8006010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006014:	4013      	ands	r3, r2
 8006016:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	2101      	movs	r1, #1
 800602a:	fa01 f303 	lsl.w	r3, r1, r3
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	43db      	mvns	r3, r3
 8006032:	68f9      	ldr	r1, [r7, #12]
 8006034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006038:	4013      	ands	r3, r2
 800603a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	0159      	lsls	r1, r3, #5
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	440b      	add	r3, r1
 8006052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006056:	4619      	mov	r1, r3
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <USB_DeactivateEndpoint+0x1b4>)
 800605a:	4013      	ands	r3, r2
 800605c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	ec337800 	.word	0xec337800
 8006070:	eff37800 	.word	0xeff37800

08006074 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08a      	sub	sp, #40	; 0x28
 8006078:	af02      	add	r7, sp, #8
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	785b      	ldrb	r3, [r3, #1]
 8006090:	2b01      	cmp	r3, #1
 8006092:	f040 815c 	bne.w	800634e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d132      	bne.n	8006104 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fc:	0cdb      	lsrs	r3, r3, #19
 80060fe:	04db      	lsls	r3, r3, #19
 8006100:	6113      	str	r3, [r2, #16]
 8006102:	e074      	b.n	80061ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611e:	0cdb      	lsrs	r3, r3, #19
 8006120:	04db      	lsls	r3, r3, #19
 8006122:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006142:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6959      	ldr	r1, [r3, #20]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	440b      	add	r3, r1
 8006160:	1e59      	subs	r1, r3, #1
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	fbb1 f3f3 	udiv	r3, r1, r3
 800616a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800616c:	4b9d      	ldr	r3, [pc, #628]	; (80063e4 <USB_EPStartXfer+0x370>)
 800616e:	400b      	ands	r3, r1
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	0148      	lsls	r0, r1, #5
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	4401      	add	r1, r0
 8006178:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800617c:	4313      	orrs	r3, r2
 800617e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006196:	69b9      	ldr	r1, [r7, #24]
 8006198:	0148      	lsls	r0, r1, #5
 800619a:	69f9      	ldr	r1, [r7, #28]
 800619c:	4401      	add	r1, r0
 800619e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061a2:	4313      	orrs	r3, r2
 80061a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d11f      	bne.n	80061ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d14b      	bne.n	800628c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	461a      	mov	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	78db      	ldrb	r3, [r3, #3]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d128      	bne.n	800626a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006224:	2b00      	cmp	r3, #0
 8006226:	d110      	bne.n	800624a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	440a      	add	r2, r1
 800623e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	e00f      	b.n	800626a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006268:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006284:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e12f      	b.n	80064ec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	78db      	ldrb	r3, [r3, #3]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d015      	beq.n	80062e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8117 	beq.w	80064ec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	2101      	movs	r1, #1
 80062d0:	fa01 f303 	lsl.w	r3, r1, r3
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062da:	4313      	orrs	r3, r2
 80062dc:	634b      	str	r3, [r1, #52]	; 0x34
 80062de:	e105      	b.n	80064ec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d110      	bne.n	8006312 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	440a      	add	r2, r1
 8006306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	e00f      	b.n	8006332 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006330:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	68d9      	ldr	r1, [r3, #12]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	b298      	uxth	r0, r3
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	4603      	mov	r3, r0
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fa2b 	bl	80067a2 <USB_WritePacket>
 800634c:	e0ce      	b.n	80064ec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006368:	0cdb      	lsrs	r3, r3, #19
 800636a:	04db      	lsls	r3, r3, #19
 800636c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006388:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800638c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006390:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d126      	bne.n	80063e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b0:	69b9      	ldr	r1, [r7, #24]
 80063b2:	0148      	lsls	r0, r1, #5
 80063b4:	69f9      	ldr	r1, [r7, #28]
 80063b6:	4401      	add	r1, r0
 80063b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063bc:	4313      	orrs	r3, r2
 80063be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063de:	6113      	str	r3, [r2, #16]
 80063e0:	e036      	b.n	8006450 <USB_EPStartXfer+0x3dc>
 80063e2:	bf00      	nop
 80063e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	695a      	ldr	r2, [r3, #20]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	1e5a      	subs	r2, r3, #1
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	8afb      	ldrh	r3, [r7, #22]
 800640e:	04d9      	lsls	r1, r3, #19
 8006410:	4b39      	ldr	r3, [pc, #228]	; (80064f8 <USB_EPStartXfer+0x484>)
 8006412:	400b      	ands	r3, r1
 8006414:	69b9      	ldr	r1, [r7, #24]
 8006416:	0148      	lsls	r0, r1, #5
 8006418:	69f9      	ldr	r1, [r7, #28]
 800641a:	4401      	add	r1, r0
 800641c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006420:	4313      	orrs	r3, r2
 8006422:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	8af9      	ldrh	r1, [r7, #22]
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006440:	69b9      	ldr	r1, [r7, #24]
 8006442:	0148      	lsls	r0, r1, #5
 8006444:	69f9      	ldr	r1, [r7, #28]
 8006446:	4401      	add	r1, r0
 8006448:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800644c:	4313      	orrs	r3, r2
 800644e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d10d      	bne.n	8006472 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	68d9      	ldr	r1, [r3, #12]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	460a      	mov	r2, r1
 8006470:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	78db      	ldrb	r3, [r3, #3]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d128      	bne.n	80064cc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d110      	bne.n	80064ac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e00f      	b.n	80064cc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	0151      	lsls	r1, r2, #5
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	440a      	add	r2, r1
 80064c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	0151      	lsls	r1, r2, #5
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	440a      	add	r2, r1
 80064e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	1ff80000 	.word	0x1ff80000

080064fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b01      	cmp	r3, #1
 800651a:	f040 80cd 	bne.w	80066b8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d132      	bne.n	800658c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	0151      	lsls	r1, r2, #5
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	440a      	add	r2, r1
 800653c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006540:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006544:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006548:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	440a      	add	r2, r1
 8006560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006568:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006584:	0cdb      	lsrs	r3, r3, #19
 8006586:	04db      	lsls	r3, r3, #19
 8006588:	6113      	str	r3, [r2, #16]
 800658a:	e04e      	b.n	800662a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a6:	0cdb      	lsrs	r3, r3, #19
 80065a8:	04db      	lsls	r3, r3, #19
 80065aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	695a      	ldr	r2, [r3, #20]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d903      	bls.n	80065e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006602:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800661a:	6939      	ldr	r1, [r7, #16]
 800661c:	0148      	lsls	r0, r1, #5
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	4401      	add	r1, r0
 8006622:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006626:	4313      	orrs	r3, r2
 8006628:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d11e      	bne.n	800666e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	461a      	mov	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006666:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800666a:	6013      	str	r3, [r2, #0]
 800666c:	e092      	b.n	8006794 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	440a      	add	r2, r1
 8006684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800668c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d07e      	beq.n	8006794 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	2101      	movs	r1, #1
 80066a8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ac:	6979      	ldr	r1, [r7, #20]
 80066ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066b2:	4313      	orrs	r3, r2
 80066b4:	634b      	str	r3, [r1, #52]	; 0x34
 80066b6:	e06d      	b.n	8006794 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d2:	0cdb      	lsrs	r3, r3, #19
 80066d4:	04db      	lsls	r3, r3, #19
 80066d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066fa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	440a      	add	r2, r1
 8006722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006726:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800672a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006742:	6939      	ldr	r1, [r7, #16]
 8006744:	0148      	lsls	r0, r1, #5
 8006746:	6979      	ldr	r1, [r7, #20]
 8006748:	4401      	add	r1, r0
 800674a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800674e:	4313      	orrs	r3, r2
 8006750:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d10d      	bne.n	8006774 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d009      	beq.n	8006774 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	68d9      	ldr	r1, [r3, #12]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	460a      	mov	r2, r1
 8006772:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	440a      	add	r2, r1
 800678a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b089      	sub	sp, #36	; 0x24
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	4611      	mov	r1, r2
 80067ae:	461a      	mov	r2, r3
 80067b0:	460b      	mov	r3, r1
 80067b2:	71fb      	strb	r3, [r7, #7]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d123      	bne.n	8006810 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067c8:	88bb      	ldrh	r3, [r7, #4]
 80067ca:	3303      	adds	r3, #3
 80067cc:	089b      	lsrs	r3, r3, #2
 80067ce:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	61bb      	str	r3, [r7, #24]
 80067d4:	e018      	b.n	8006808 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	031a      	lsls	r2, r3, #12
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e2:	461a      	mov	r2, r3
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3301      	adds	r3, #1
 80067ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	3301      	adds	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	3301      	adds	r3, #1
 80067fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	3301      	adds	r3, #1
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	429a      	cmp	r2, r3
 800680e:	d3e2      	bcc.n	80067d6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3724      	adds	r7, #36	; 0x24
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800681e:	b480      	push	{r7}
 8006820:	b08b      	sub	sp, #44	; 0x2c
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	4613      	mov	r3, r2
 800682a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	b29b      	uxth	r3, r3
 800683a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006844:	2300      	movs	r3, #0
 8006846:	623b      	str	r3, [r7, #32]
 8006848:	e014      	b.n	8006874 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	601a      	str	r2, [r3, #0]
    pDest++;
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	3301      	adds	r3, #1
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	3301      	adds	r3, #1
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	3301      	adds	r3, #1
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	3301      	adds	r3, #1
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	3301      	adds	r3, #1
 8006872:	623b      	str	r3, [r7, #32]
 8006874:	6a3a      	ldr	r2, [r7, #32]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3e6      	bcc.n	800684a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800687c:	8bfb      	ldrh	r3, [r7, #30]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01e      	beq.n	80068c0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688c:	461a      	mov	r2, r3
 800688e:	f107 0310 	add.w	r3, r7, #16
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	fa22 f303 	lsr.w	r3, r2, r3
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	701a      	strb	r2, [r3, #0]
      i++;
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	3301      	adds	r3, #1
 80068ac:	623b      	str	r3, [r7, #32]
      pDest++;
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	3301      	adds	r3, #1
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80068b4:	8bfb      	ldrh	r3, [r7, #30]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068ba:	8bfb      	ldrh	r3, [r7, #30]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1ea      	bne.n	8006896 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	372c      	adds	r7, #44	; 0x2c
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d12c      	bne.n	8006944 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	db12      	blt.n	8006922 <USB_EPSetStall+0x54>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00f      	beq.n	8006922 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006920:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	e02b      	b.n	800699c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	db12      	blt.n	800697c <USB_EPSetStall+0xae>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00f      	beq.n	800697c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006976:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800697a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800699a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b085      	sub	sp, #20
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d128      	bne.n	8006a18 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	78db      	ldrb	r3, [r3, #3]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d003      	beq.n	80069f6 <USB_EPClearStall+0x4c>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	78db      	ldrb	r3, [r3, #3]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d138      	bne.n	8006a68 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	e027      	b.n	8006a68 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	78db      	ldrb	r3, [r3, #3]
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d003      	beq.n	8006a48 <USB_EPClearStall+0x9e>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	78db      	ldrb	r3, [r3, #3]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d10f      	bne.n	8006a68 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a66:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a98:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b085      	sub	sp, #20
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006adc:	f023 0303 	bic.w	r3, r3, #3
 8006ae0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006af0:	f023 0302 	bic.w	r3, r3, #2
 8006af4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b1e:	f023 0303 	bic.w	r3, r3, #3
 8006b22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b32:	f043 0302 	orr.w	r3, r3, #2
 8006b36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	0c1b      	lsrs	r3, r3, #16
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	b29b      	uxth	r3, r3
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c02:	68bb      	ldr	r3, [r7, #8]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	01db      	lsls	r3, r3, #7
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	f003 0301 	and.w	r3, r3, #1
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ca6:	f023 0307 	bic.w	r3, r3, #7
 8006caa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	333c      	adds	r3, #60	; 0x3c
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <USB_EP0_OutStart+0xb8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d90a      	bls.n	8006d0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d04:	d101      	bne.n	8006d0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e037      	b.n	8006d7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d10:	461a      	mov	r2, r3
 8006d12:	2300      	movs	r3, #0
 8006d14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d38:	f043 0318 	orr.w	r3, r3, #24
 8006d3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d10f      	bne.n	8006d78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5e:	461a      	mov	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	4f54300a 	.word	0x4f54300a

08006d8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	4a13      	ldr	r2, [pc, #76]	; (8006dec <USB_CoreReset+0x60>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d901      	bls.n	8006da8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e01a      	b.n	8006dde <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	daf3      	bge.n	8006d98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f043 0201 	orr.w	r2, r3, #1
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	4a09      	ldr	r2, [pc, #36]	; (8006dec <USB_CoreReset+0x60>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e006      	b.n	8006dde <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d0f1      	beq.n	8006dc0 <USB_CoreReset+0x34>

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	00030d40 	.word	0x00030d40

08006df0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006dfc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e00:	f004 ff1a 	bl	800bc38 <USBD_static_malloc>
 8006e04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d105      	bne.n	8006e18 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006e14:	2302      	movs	r3, #2
 8006e16:	e066      	b.n	8006ee6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	7c1b      	ldrb	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d119      	bne.n	8006e5c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	2181      	movs	r1, #129	; 0x81
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f004 fdde 	bl	800b9f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e40:	2202      	movs	r2, #2
 8006e42:	2101      	movs	r1, #1
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f004 fdd4 	bl	800b9f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2210      	movs	r2, #16
 8006e56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006e5a:	e016      	b.n	8006e8a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e5c:	2340      	movs	r3, #64	; 0x40
 8006e5e:	2202      	movs	r2, #2
 8006e60:	2181      	movs	r1, #129	; 0x81
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f004 fdc5 	bl	800b9f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e6e:	2340      	movs	r3, #64	; 0x40
 8006e70:	2202      	movs	r2, #2
 8006e72:	2101      	movs	r1, #1
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f004 fdbc 	bl	800b9f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2210      	movs	r2, #16
 8006e86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e8a:	2308      	movs	r3, #8
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	2182      	movs	r1, #130	; 0x82
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f004 fdae 	bl	800b9f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	7c1b      	ldrb	r3, [r3, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d109      	bne.n	8006ed4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eca:	2101      	movs	r1, #1
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f004 fe7f 	bl	800bbd0 <USBD_LL_PrepareReceive>
 8006ed2:	e007      	b.n	8006ee4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eda:	2340      	movs	r3, #64	; 0x40
 8006edc:	2101      	movs	r1, #1
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f004 fe76 	bl	800bbd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006efa:	2181      	movs	r1, #129	; 0x81
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f004 fd9e 	bl	800ba3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f08:	2101      	movs	r1, #1
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f004 fd97 	bl	800ba3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f18:	2182      	movs	r1, #130	; 0x82
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f004 fd8f 	bl	800ba3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00e      	beq.n	8006f58 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f004 fe82 	bl	800bc54 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e0af      	b.n	80070ec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d03f      	beq.n	8007018 <USBD_CDC_Setup+0xb4>
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	f040 809f 	bne.w	80070dc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	88db      	ldrh	r3, [r3, #6]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d02e      	beq.n	8007004 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	b25b      	sxtb	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	da16      	bge.n	8006fde <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006fbc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	88d2      	ldrh	r2, [r2, #6]
 8006fc2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	88db      	ldrh	r3, [r3, #6]
 8006fc8:	2b07      	cmp	r3, #7
 8006fca:	bf28      	it	cs
 8006fcc:	2307      	movcs	r3, #7
 8006fce:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	89fa      	ldrh	r2, [r7, #14]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fb19 	bl	800860e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006fdc:	e085      	b.n	80070ea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	785a      	ldrb	r2, [r3, #1]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	88db      	ldrh	r3, [r3, #6]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ff4:	6939      	ldr	r1, [r7, #16]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	88db      	ldrh	r3, [r3, #6]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 fb32 	bl	8008666 <USBD_CtlPrepareRx>
      break;
 8007002:	e072      	b.n	80070ea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	7850      	ldrb	r0, [r2, #1]
 8007010:	2200      	movs	r2, #0
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	4798      	blx	r3
      break;
 8007016:	e068      	b.n	80070ea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	2b0b      	cmp	r3, #11
 800701e:	d852      	bhi.n	80070c6 <USBD_CDC_Setup+0x162>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <USBD_CDC_Setup+0xc4>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	08007059 	.word	0x08007059
 800702c:	080070d5 	.word	0x080070d5
 8007030:	080070c7 	.word	0x080070c7
 8007034:	080070c7 	.word	0x080070c7
 8007038:	080070c7 	.word	0x080070c7
 800703c:	080070c7 	.word	0x080070c7
 8007040:	080070c7 	.word	0x080070c7
 8007044:	080070c7 	.word	0x080070c7
 8007048:	080070c7 	.word	0x080070c7
 800704c:	080070c7 	.word	0x080070c7
 8007050:	08007083 	.word	0x08007083
 8007054:	080070ad 	.word	0x080070ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b03      	cmp	r3, #3
 8007062:	d107      	bne.n	8007074 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007064:	f107 030a 	add.w	r3, r7, #10
 8007068:	2202      	movs	r2, #2
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 face 	bl	800860e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007072:	e032      	b.n	80070da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fa58 	bl	800852c <USBD_CtlError>
            ret = USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	75fb      	strb	r3, [r7, #23]
          break;
 8007080:	e02b      	b.n	80070da <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b03      	cmp	r3, #3
 800708c:	d107      	bne.n	800709e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800708e:	f107 030d 	add.w	r3, r7, #13
 8007092:	2201      	movs	r2, #1
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fab9 	bl	800860e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800709c:	e01d      	b.n	80070da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 fa43 	bl	800852c <USBD_CtlError>
            ret = USBD_FAIL;
 80070a6:	2303      	movs	r3, #3
 80070a8:	75fb      	strb	r3, [r7, #23]
          break;
 80070aa:	e016      	b.n	80070da <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d00f      	beq.n	80070d8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 fa36 	bl	800852c <USBD_CtlError>
            ret = USBD_FAIL;
 80070c0:	2303      	movs	r3, #3
 80070c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070c4:	e008      	b.n	80070d8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 fa2f 	bl	800852c <USBD_CtlError>
          ret = USBD_FAIL;
 80070ce:	2303      	movs	r3, #3
 80070d0:	75fb      	strb	r3, [r7, #23]
          break;
 80070d2:	e002      	b.n	80070da <USBD_CDC_Setup+0x176>
          break;
 80070d4:	bf00      	nop
 80070d6:	e008      	b.n	80070ea <USBD_CDC_Setup+0x186>
          break;
 80070d8:	bf00      	nop
      }
      break;
 80070da:	e006      	b.n	80070ea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fa24 	bl	800852c <USBD_CtlError>
      ret = USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	75fb      	strb	r3, [r7, #23]
      break;
 80070e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007106:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007112:	2303      	movs	r3, #3
 8007114:	e04f      	b.n	80071b6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800711c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	3318      	adds	r3, #24
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d029      	beq.n	8007188 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007134:	78fa      	ldrb	r2, [r7, #3]
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	3318      	adds	r3, #24
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	78f9      	ldrb	r1, [r7, #3]
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	460b      	mov	r3, r1
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	1a5b      	subs	r3, r3, r1
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4403      	add	r3, r0
 8007154:	3344      	adds	r3, #68	; 0x44
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	fbb2 f1f3 	udiv	r1, r2, r3
 800715c:	fb03 f301 	mul.w	r3, r3, r1
 8007160:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007162:	2b00      	cmp	r3, #0
 8007164:	d110      	bne.n	8007188 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	3318      	adds	r3, #24
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800717a:	78f9      	ldrb	r1, [r7, #3]
 800717c:	2300      	movs	r3, #0
 800717e:	2200      	movs	r2, #0
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f004 fd04 	bl	800bb8e <USBD_LL_Transmit>
 8007186:	e015      	b.n	80071b4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00b      	beq.n	80071b4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80071b0:	78fa      	ldrb	r2, [r7, #3]
 80071b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	460b      	mov	r3, r1
 80071c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071dc:	2303      	movs	r3, #3
 80071de:	e015      	b.n	800720c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f004 fd14 	bl	800bc12 <USBD_LL_GetRxDataSize>
 80071ea:	4602      	mov	r2, r0
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007206:	4611      	mov	r1, r2
 8007208:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007222:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800722a:	2303      	movs	r3, #3
 800722c:	e01b      	b.n	8007266 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d015      	beq.n	8007264 <USBD_CDC_EP0_RxReady+0x50>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800723e:	2bff      	cmp	r3, #255	; 0xff
 8007240:	d010      	beq.n	8007264 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007250:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007258:	b292      	uxth	r2, r2
 800725a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	22ff      	movs	r2, #255	; 0xff
 8007260:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2243      	movs	r2, #67	; 0x43
 800727c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800727e:	4b03      	ldr	r3, [pc, #12]	; (800728c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	200000a0 	.word	0x200000a0

08007290 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2243      	movs	r2, #67	; 0x43
 800729c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800729e:	4b03      	ldr	r3, [pc, #12]	; (80072ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	2000005c 	.word	0x2000005c

080072b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2243      	movs	r2, #67	; 0x43
 80072bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80072be:	4b03      	ldr	r3, [pc, #12]	; (80072cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	200000e4 	.word	0x200000e4

080072d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	220a      	movs	r2, #10
 80072dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80072de:	4b03      	ldr	r3, [pc, #12]	; (80072ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	20000018 	.word	0x20000018

080072f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007300:	2303      	movs	r3, #3
 8007302:	e004      	b.n	800730e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800731a:	b480      	push	{r7}
 800731c:	b087      	sub	sp, #28
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800732c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007334:	2303      	movs	r3, #3
 8007336:	e008      	b.n	800734a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	371c      	adds	r7, #28
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007366:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800736e:	2303      	movs	r3, #3
 8007370:	e004      	b.n	800737c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007396:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007398:	2301      	movs	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e01a      	b.n	80073e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d114      	bne.n	80073de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80073d2:	2181      	movs	r1, #129	; 0x81
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f004 fbda 	bl	800bb8e <USBD_LL_Transmit>

    ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007402:	2303      	movs	r3, #3
 8007404:	e016      	b.n	8007434 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	7c1b      	ldrb	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007418:	2101      	movs	r1, #1
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f004 fbd8 	bl	800bbd0 <USBD_LL_PrepareReceive>
 8007420:	e007      	b.n	8007432 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007428:	2340      	movs	r3, #64	; 0x40
 800742a:	2101      	movs	r1, #1
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f004 fbcf 	bl	800bbd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	4613      	mov	r3, r2
 8007448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007450:	2303      	movs	r3, #3
 8007452:	e01f      	b.n	8007494 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	79fa      	ldrb	r2, [r7, #7]
 8007486:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f004 fa4b 	bl	800b924 <USBD_LL_Init>
 800748e:	4603      	mov	r3, r0
 8007490:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e016      	b.n	80074e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	f107 020e 	add.w	r2, r7, #14
 80074d4:	4610      	mov	r0, r2
 80074d6:	4798      	blx	r3
 80074d8:	4602      	mov	r2, r0
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f004 fa62 	bl	800b9bc <USBD_LL_Start>
 80074f8:	4603      	mov	r3, r0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007524:	2303      	movs	r3, #3
 8007526:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	78fa      	ldrb	r2, [r7, #3]
 800753c:	4611      	mov	r1, r2
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
 8007542:	4603      	mov	r3, r0
 8007544:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	78fa      	ldrb	r2, [r7, #3]
 8007570:	4611      	mov	r1, r2
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	4798      	blx	r3
  }

  return USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 ff90 	bl	80084b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d01a      	beq.n	80075f2 <USBD_LL_SetupStage+0x72>
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d822      	bhi.n	8007606 <USBD_LL_SetupStage+0x86>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <USBD_LL_SetupStage+0x4a>
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d00a      	beq.n	80075de <USBD_LL_SetupStage+0x5e>
 80075c8:	e01d      	b.n	8007606 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa62 	bl	8007a9c <USBD_StdDevReq>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
      break;
 80075dc:	e020      	b.n	8007620 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fac6 	bl	8007b78 <USBD_StdItfReq>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]
      break;
 80075f0:	e016      	b.n	8007620 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fb05 	bl	8007c0a <USBD_StdEPReq>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]
      break;
 8007604:	e00c      	b.n	8007620 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800760c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007610:	b2db      	uxtb	r3, r3
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f004 fa31 	bl	800ba7c <USBD_LL_StallEP>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]
      break;
 800761e:	bf00      	nop
  }

  return ret;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b086      	sub	sp, #24
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	460b      	mov	r3, r1
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007638:	7afb      	ldrb	r3, [r7, #11]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d138      	bne.n	80076b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007644:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800764c:	2b03      	cmp	r3, #3
 800764e:	d14a      	bne.n	80076e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	429a      	cmp	r2, r3
 800765a:	d913      	bls.n	8007684 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	1ad2      	subs	r2, r2, r3
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	4293      	cmp	r3, r2
 8007674:	bf28      	it	cs
 8007676:	4613      	movcs	r3, r2
 8007678:	461a      	mov	r2, r3
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f001 f80f 	bl	80086a0 <USBD_CtlContinueRx>
 8007682:	e030      	b.n	80076e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b03      	cmp	r3, #3
 800768e:	d10b      	bne.n	80076a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d005      	beq.n	80076a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f001 f80a 	bl	80086c2 <USBD_CtlSendStatus>
 80076ae:	e01a      	b.n	80076e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d114      	bne.n	80076e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00e      	beq.n	80076e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	7afa      	ldrb	r2, [r7, #11]
 80076d2:	4611      	mov	r1, r2
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	4798      	blx	r3
 80076d8:	4603      	mov	r3, r0
 80076da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	e000      	b.n	80076e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	460b      	mov	r3, r1
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d16b      	bne.n	80077dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3314      	adds	r3, #20
 8007708:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007710:	2b02      	cmp	r3, #2
 8007712:	d156      	bne.n	80077c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	d914      	bls.n	800774a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	1ad2      	subs	r2, r2, r3
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	461a      	mov	r2, r3
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 ff84 	bl	8008644 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800773c:	2300      	movs	r3, #0
 800773e:	2200      	movs	r2, #0
 8007740:	2100      	movs	r1, #0
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f004 fa44 	bl	800bbd0 <USBD_LL_PrepareReceive>
 8007748:	e03b      	b.n	80077c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	429a      	cmp	r2, r3
 8007754:	d11c      	bne.n	8007790 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800775e:	429a      	cmp	r2, r3
 8007760:	d316      	bcc.n	8007790 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800776c:	429a      	cmp	r2, r3
 800776e:	d20f      	bcs.n	8007790 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007770:	2200      	movs	r2, #0
 8007772:	2100      	movs	r1, #0
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 ff65 	bl	8008644 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007782:	2300      	movs	r3, #0
 8007784:	2200      	movs	r2, #0
 8007786:	2100      	movs	r1, #0
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f004 fa21 	bl	800bbd0 <USBD_LL_PrepareReceive>
 800778e:	e018      	b.n	80077c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b03      	cmp	r3, #3
 800779a:	d10b      	bne.n	80077b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077b4:	2180      	movs	r1, #128	; 0x80
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f004 f960 	bl	800ba7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 ff93 	bl	80086e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d122      	bne.n	8007812 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f7ff fe98 	bl	8007502 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80077da:	e01a      	b.n	8007812 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d114      	bne.n	8007812 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00e      	beq.n	8007812 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	7afa      	ldrb	r2, [r7, #11]
 80077fe:	4611      	mov	r1, r2
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	4798      	blx	r3
 8007804:	4603      	mov	r3, r0
 8007806:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	e000      	b.n	8007814 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800784c:	2303      	movs	r3, #3
 800784e:	e02f      	b.n	80078b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00f      	beq.n	800787a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d009      	beq.n	800787a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6852      	ldr	r2, [r2, #4]
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	4611      	mov	r1, r2
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800787a:	2340      	movs	r3, #64	; 0x40
 800787c:	2200      	movs	r2, #0
 800787e:	2100      	movs	r1, #0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f004 f8b6 	bl	800b9f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2240      	movs	r2, #64	; 0x40
 8007892:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007896:	2340      	movs	r3, #64	; 0x40
 8007898:	2200      	movs	r2, #0
 800789a:	2180      	movs	r1, #128	; 0x80
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f004 f8a8 	bl	800b9f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2240      	movs	r2, #64	; 0x40
 80078ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	78fa      	ldrb	r2, [r7, #3]
 80078c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2204      	movs	r2, #4
 80078f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b04      	cmp	r3, #4
 8007916:	d106      	bne.n	8007926 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800791e:	b2da      	uxtb	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007946:	2303      	movs	r3, #3
 8007948:	e012      	b.n	8007970 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b03      	cmp	r3, #3
 8007954:	d10b      	bne.n	800796e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800798e:	2303      	movs	r3, #3
 8007990:	e014      	b.n	80079bc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b03      	cmp	r3, #3
 800799c:	d10d      	bne.n	80079ba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	4611      	mov	r1, r2
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80079da:	2303      	movs	r3, #3
 80079dc:	e014      	b.n	8007a08 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d10d      	bne.n	8007a06 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	78fa      	ldrb	r2, [r7, #3]
 8007a00:	4611      	mov	r1, r2
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6852      	ldr	r2, [r2, #4]
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	4611      	mov	r1, r2
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	4798      	blx	r3
  }

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b087      	sub	sp, #28
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	3301      	adds	r3, #1
 8007a74:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a7c:	8a3b      	ldrh	r3, [r7, #16]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	b21a      	sxth	r2, r3
 8007a82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	b21b      	sxth	r3, r3
 8007a8a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a8c:	89fb      	ldrh	r3, [r7, #14]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
	...

08007a9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ab2:	2b40      	cmp	r3, #64	; 0x40
 8007ab4:	d005      	beq.n	8007ac2 <USBD_StdDevReq+0x26>
 8007ab6:	2b40      	cmp	r3, #64	; 0x40
 8007ab8:	d853      	bhi.n	8007b62 <USBD_StdDevReq+0xc6>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00b      	beq.n	8007ad6 <USBD_StdDevReq+0x3a>
 8007abe:	2b20      	cmp	r3, #32
 8007ac0:	d14f      	bne.n	8007b62 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad4:	e04a      	b.n	8007b6c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b09      	cmp	r3, #9
 8007adc:	d83b      	bhi.n	8007b56 <USBD_StdDevReq+0xba>
 8007ade:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <USBD_StdDevReq+0x48>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007b4d 	.word	0x08007b4d
 8007aec:	08007b57 	.word	0x08007b57
 8007af0:	08007b43 	.word	0x08007b43
 8007af4:	08007b57 	.word	0x08007b57
 8007af8:	08007b17 	.word	0x08007b17
 8007afc:	08007b0d 	.word	0x08007b0d
 8007b00:	08007b57 	.word	0x08007b57
 8007b04:	08007b2f 	.word	0x08007b2f
 8007b08:	08007b21 	.word	0x08007b21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f9de 	bl	8007ed0 <USBD_GetDescriptor>
          break;
 8007b14:	e024      	b.n	8007b60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fb43 	bl	80081a4 <USBD_SetAddress>
          break;
 8007b1e:	e01f      	b.n	8007b60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fb82 	bl	800822c <USBD_SetConfig>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]
          break;
 8007b2c:	e018      	b.n	8007b60 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fc21 	bl	8008378 <USBD_GetConfig>
          break;
 8007b36:	e013      	b.n	8007b60 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fc52 	bl	80083e4 <USBD_GetStatus>
          break;
 8007b40:	e00e      	b.n	8007b60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc81 	bl	800844c <USBD_SetFeature>
          break;
 8007b4a:	e009      	b.n	8007b60 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fc90 	bl	8008474 <USBD_ClrFeature>
          break;
 8007b54:	e004      	b.n	8007b60 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fce7 	bl	800852c <USBD_CtlError>
          break;
 8007b5e:	bf00      	nop
      }
      break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fce1 	bl	800852c <USBD_CtlError>
      break;
 8007b6a:	bf00      	nop
  }

  return ret;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop

08007b78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d005      	beq.n	8007b9e <USBD_StdItfReq+0x26>
 8007b92:	2b40      	cmp	r3, #64	; 0x40
 8007b94:	d82f      	bhi.n	8007bf6 <USBD_StdItfReq+0x7e>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <USBD_StdItfReq+0x26>
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d12b      	bne.n	8007bf6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d81d      	bhi.n	8007be8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	889b      	ldrh	r3, [r3, #4]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d813      	bhi.n	8007bde <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	4798      	blx	r3
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	88db      	ldrh	r3, [r3, #6]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d110      	bne.n	8007bf2 <USBD_StdItfReq+0x7a>
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fd73 	bl	80086c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bdc:	e009      	b.n	8007bf2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fca3 	bl	800852c <USBD_CtlError>
          break;
 8007be6:	e004      	b.n	8007bf2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fc9e 	bl	800852c <USBD_CtlError>
          break;
 8007bf0:	e000      	b.n	8007bf4 <USBD_StdItfReq+0x7c>
          break;
 8007bf2:	bf00      	nop
      }
      break;
 8007bf4:	e004      	b.n	8007c00 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fc97 	bl	800852c <USBD_CtlError>
      break;
 8007bfe:	bf00      	nop
  }

  return ret;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	889b      	ldrh	r3, [r3, #4]
 8007c1c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c26:	2b40      	cmp	r3, #64	; 0x40
 8007c28:	d007      	beq.n	8007c3a <USBD_StdEPReq+0x30>
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	f200 8145 	bhi.w	8007eba <USBD_StdEPReq+0x2b0>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00c      	beq.n	8007c4e <USBD_StdEPReq+0x44>
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	f040 8140 	bne.w	8007eba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4c:	e13a      	b.n	8007ec4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	785b      	ldrb	r3, [r3, #1]
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d007      	beq.n	8007c66 <USBD_StdEPReq+0x5c>
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	f300 8129 	bgt.w	8007eae <USBD_StdEPReq+0x2a4>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d07f      	beq.n	8007d60 <USBD_StdEPReq+0x156>
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d03c      	beq.n	8007cde <USBD_StdEPReq+0xd4>
 8007c64:	e123      	b.n	8007eae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d002      	beq.n	8007c78 <USBD_StdEPReq+0x6e>
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d016      	beq.n	8007ca4 <USBD_StdEPReq+0x9a>
 8007c76:	e02c      	b.n	8007cd2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00d      	beq.n	8007c9a <USBD_StdEPReq+0x90>
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	2b80      	cmp	r3, #128	; 0x80
 8007c82:	d00a      	beq.n	8007c9a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f003 fef7 	bl	800ba7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c8e:	2180      	movs	r1, #128	; 0x80
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f003 fef3 	bl	800ba7c <USBD_LL_StallEP>
 8007c96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c98:	e020      	b.n	8007cdc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fc45 	bl	800852c <USBD_CtlError>
              break;
 8007ca2:	e01b      	b.n	8007cdc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	885b      	ldrh	r3, [r3, #2]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10e      	bne.n	8007cca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <USBD_StdEPReq+0xc0>
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b80      	cmp	r3, #128	; 0x80
 8007cb6:	d008      	beq.n	8007cca <USBD_StdEPReq+0xc0>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d104      	bne.n	8007cca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f003 fed9 	bl	800ba7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fcf9 	bl	80086c2 <USBD_CtlSendStatus>

              break;
 8007cd0:	e004      	b.n	8007cdc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fc29 	bl	800852c <USBD_CtlError>
              break;
 8007cda:	bf00      	nop
          }
          break;
 8007cdc:	e0ec      	b.n	8007eb8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d002      	beq.n	8007cf0 <USBD_StdEPReq+0xe6>
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d016      	beq.n	8007d1c <USBD_StdEPReq+0x112>
 8007cee:	e030      	b.n	8007d52 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <USBD_StdEPReq+0x108>
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	2b80      	cmp	r3, #128	; 0x80
 8007cfa:	d00a      	beq.n	8007d12 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f003 febb 	bl	800ba7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d06:	2180      	movs	r1, #128	; 0x80
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f003 feb7 	bl	800ba7c <USBD_LL_StallEP>
 8007d0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d10:	e025      	b.n	8007d5e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fc09 	bl	800852c <USBD_CtlError>
              break;
 8007d1a:	e020      	b.n	8007d5e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d11b      	bne.n	8007d5c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f003 fec1 	bl	800baba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fcc2 	bl	80086c2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	4798      	blx	r3
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007d50:	e004      	b.n	8007d5c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fbe9 	bl	800852c <USBD_CtlError>
              break;
 8007d5a:	e000      	b.n	8007d5e <USBD_StdEPReq+0x154>
              break;
 8007d5c:	bf00      	nop
          }
          break;
 8007d5e:	e0ab      	b.n	8007eb8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d002      	beq.n	8007d72 <USBD_StdEPReq+0x168>
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d032      	beq.n	8007dd6 <USBD_StdEPReq+0x1cc>
 8007d70:	e097      	b.n	8007ea2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <USBD_StdEPReq+0x17e>
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b80      	cmp	r3, #128	; 0x80
 8007d7c:	d004      	beq.n	8007d88 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fbd3 	bl	800852c <USBD_CtlError>
                break;
 8007d86:	e091      	b.n	8007eac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da0b      	bge.n	8007da8 <USBD_StdEPReq+0x19e>
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d96:	4613      	mov	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	3310      	adds	r3, #16
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	3304      	adds	r3, #4
 8007da6:	e00b      	b.n	8007dc0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fc1d 	bl	800860e <USBD_CtlSendData>
              break;
 8007dd4:	e06a      	b.n	8007eac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	da11      	bge.n	8007e02 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	f003 020f 	and.w	r2, r3, #15
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	3324      	adds	r3, #36	; 0x24
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d117      	bne.n	8007e28 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fb96 	bl	800852c <USBD_CtlError>
                  break;
 8007e00:	e054      	b.n	8007eac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	f003 020f 	and.w	r2, r3, #15
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d104      	bne.n	8007e28 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fb83 	bl	800852c <USBD_CtlError>
                  break;
 8007e26:	e041      	b.n	8007eac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	da0b      	bge.n	8007e48 <USBD_StdEPReq+0x23e>
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	3310      	adds	r3, #16
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	4413      	add	r3, r2
 8007e44:	3304      	adds	r3, #4
 8007e46:	e00b      	b.n	8007e60 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3304      	adds	r3, #4
 8007e60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <USBD_StdEPReq+0x264>
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2b80      	cmp	r3, #128	; 0x80
 8007e6c:	d103      	bne.n	8007e76 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	e00e      	b.n	8007e94 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f003 fe3c 	bl	800baf8 <USBD_LL_IsStallEP>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e002      	b.n	8007e94 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2202      	movs	r2, #2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fbb7 	bl	800860e <USBD_CtlSendData>
              break;
 8007ea0:	e004      	b.n	8007eac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fb41 	bl	800852c <USBD_CtlError>
              break;
 8007eaa:	bf00      	nop
          }
          break;
 8007eac:	e004      	b.n	8007eb8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fb3b 	bl	800852c <USBD_CtlError>
          break;
 8007eb6:	bf00      	nop
      }
      break;
 8007eb8:	e004      	b.n	8007ec4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fb35 	bl	800852c <USBD_CtlError>
      break;
 8007ec2:	bf00      	nop
  }

  return ret;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	885b      	ldrh	r3, [r3, #2]
 8007eea:	0a1b      	lsrs	r3, r3, #8
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b06      	cmp	r3, #6
 8007ef2:	f200 8128 	bhi.w	8008146 <USBD_GetDescriptor+0x276>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <USBD_GetDescriptor+0x2c>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f31 	.word	0x08007f31
 8007f04:	08007f71 	.word	0x08007f71
 8007f08:	08008147 	.word	0x08008147
 8007f0c:	08008147 	.word	0x08008147
 8007f10:	080080e7 	.word	0x080080e7
 8007f14:	08008113 	.word	0x08008113
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	7c12      	ldrb	r2, [r2, #16]
 8007f24:	f107 0108 	add.w	r1, r7, #8
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	60f8      	str	r0, [r7, #12]
      break;
 8007f2e:	e112      	b.n	8008156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	7c1b      	ldrb	r3, [r3, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10d      	bne.n	8007f54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	f107 0208 	add.w	r2, r7, #8
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
 8007f48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	2202      	movs	r2, #2
 8007f50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f52:	e100      	b.n	8008156 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	f107 0208 	add.w	r2, r7, #8
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	701a      	strb	r2, [r3, #0]
      break;
 8007f6e:	e0f2      	b.n	8008156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	885b      	ldrh	r3, [r3, #2]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b05      	cmp	r3, #5
 8007f78:	f200 80ac 	bhi.w	80080d4 <USBD_GetDescriptor+0x204>
 8007f7c:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <USBD_GetDescriptor+0xb4>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08007f9d 	.word	0x08007f9d
 8007f88:	08007fd1 	.word	0x08007fd1
 8007f8c:	08008005 	.word	0x08008005
 8007f90:	08008039 	.word	0x08008039
 8007f94:	0800806d 	.word	0x0800806d
 8007f98:	080080a1 	.word	0x080080a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00b      	beq.n	8007fc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	7c12      	ldrb	r2, [r2, #16]
 8007fb4:	f107 0108 	add.w	r1, r7, #8
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4798      	blx	r3
 8007fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fbe:	e091      	b.n	80080e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fab2 	bl	800852c <USBD_CtlError>
            err++;
 8007fc8:	7afb      	ldrb	r3, [r7, #11]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fce:	e089      	b.n	80080e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00b      	beq.n	8007ff4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	7c12      	ldrb	r2, [r2, #16]
 8007fe8:	f107 0108 	add.w	r1, r7, #8
 8007fec:	4610      	mov	r0, r2
 8007fee:	4798      	blx	r3
 8007ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ff2:	e077      	b.n	80080e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fa98 	bl	800852c <USBD_CtlError>
            err++;
 8007ffc:	7afb      	ldrb	r3, [r7, #11]
 8007ffe:	3301      	adds	r3, #1
 8008000:	72fb      	strb	r3, [r7, #11]
          break;
 8008002:	e06f      	b.n	80080e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	7c12      	ldrb	r2, [r2, #16]
 800801c:	f107 0108 	add.w	r1, r7, #8
 8008020:	4610      	mov	r0, r2
 8008022:	4798      	blx	r3
 8008024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008026:	e05d      	b.n	80080e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fa7e 	bl	800852c <USBD_CtlError>
            err++;
 8008030:	7afb      	ldrb	r3, [r7, #11]
 8008032:	3301      	adds	r3, #1
 8008034:	72fb      	strb	r3, [r7, #11]
          break;
 8008036:	e055      	b.n	80080e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	7c12      	ldrb	r2, [r2, #16]
 8008050:	f107 0108 	add.w	r1, r7, #8
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
 8008058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800805a:	e043      	b.n	80080e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fa64 	bl	800852c <USBD_CtlError>
            err++;
 8008064:	7afb      	ldrb	r3, [r7, #11]
 8008066:	3301      	adds	r3, #1
 8008068:	72fb      	strb	r3, [r7, #11]
          break;
 800806a:	e03b      	b.n	80080e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	7c12      	ldrb	r2, [r2, #16]
 8008084:	f107 0108 	add.w	r1, r7, #8
 8008088:	4610      	mov	r0, r2
 800808a:	4798      	blx	r3
 800808c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800808e:	e029      	b.n	80080e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fa4a 	bl	800852c <USBD_CtlError>
            err++;
 8008098:	7afb      	ldrb	r3, [r7, #11]
 800809a:	3301      	adds	r3, #1
 800809c:	72fb      	strb	r3, [r7, #11]
          break;
 800809e:	e021      	b.n	80080e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00b      	beq.n	80080c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	7c12      	ldrb	r2, [r2, #16]
 80080b8:	f107 0108 	add.w	r1, r7, #8
 80080bc:	4610      	mov	r0, r2
 80080be:	4798      	blx	r3
 80080c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080c2:	e00f      	b.n	80080e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fa30 	bl	800852c <USBD_CtlError>
            err++;
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	3301      	adds	r3, #1
 80080d0:	72fb      	strb	r3, [r7, #11]
          break;
 80080d2:	e007      	b.n	80080e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa28 	bl	800852c <USBD_CtlError>
          err++;
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	3301      	adds	r3, #1
 80080e0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80080e2:	bf00      	nop
      }
      break;
 80080e4:	e037      	b.n	8008156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7c1b      	ldrb	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	f107 0208 	add.w	r2, r7, #8
 80080fa:	4610      	mov	r0, r2
 80080fc:	4798      	blx	r3
 80080fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008100:	e029      	b.n	8008156 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fa11 	bl	800852c <USBD_CtlError>
        err++;
 800810a:	7afb      	ldrb	r3, [r7, #11]
 800810c:	3301      	adds	r3, #1
 800810e:	72fb      	strb	r3, [r7, #11]
      break;
 8008110:	e021      	b.n	8008156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	7c1b      	ldrb	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10d      	bne.n	8008136 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008122:	f107 0208 	add.w	r2, r7, #8
 8008126:	4610      	mov	r0, r2
 8008128:	4798      	blx	r3
 800812a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	2207      	movs	r2, #7
 8008132:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008134:	e00f      	b.n	8008156 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f9f7 	bl	800852c <USBD_CtlError>
        err++;
 800813e:	7afb      	ldrb	r3, [r7, #11]
 8008140:	3301      	adds	r3, #1
 8008142:	72fb      	strb	r3, [r7, #11]
      break;
 8008144:	e007      	b.n	8008156 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f9ef 	bl	800852c <USBD_CtlError>
      err++;
 800814e:	7afb      	ldrb	r3, [r7, #11]
 8008150:	3301      	adds	r3, #1
 8008152:	72fb      	strb	r3, [r7, #11]
      break;
 8008154:	bf00      	nop
  }

  if (err != 0U)
 8008156:	7afb      	ldrb	r3, [r7, #11]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d11e      	bne.n	800819a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	88db      	ldrh	r3, [r3, #6]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d016      	beq.n	8008192 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008164:	893b      	ldrh	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00e      	beq.n	8008188 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	88da      	ldrh	r2, [r3, #6]
 800816e:	893b      	ldrh	r3, [r7, #8]
 8008170:	4293      	cmp	r3, r2
 8008172:	bf28      	it	cs
 8008174:	4613      	movcs	r3, r2
 8008176:	b29b      	uxth	r3, r3
 8008178:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800817a:	893b      	ldrh	r3, [r7, #8]
 800817c:	461a      	mov	r2, r3
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fa44 	bl	800860e <USBD_CtlSendData>
 8008186:	e009      	b.n	800819c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f9ce 	bl	800852c <USBD_CtlError>
 8008190:	e004      	b.n	800819c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa95 	bl	80086c2 <USBD_CtlSendStatus>
 8008198:	e000      	b.n	800819c <USBD_GetDescriptor+0x2cc>
    return;
 800819a:	bf00      	nop
  }
}
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop

080081a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	889b      	ldrh	r3, [r3, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d131      	bne.n	800821a <USBD_SetAddress+0x76>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	88db      	ldrh	r3, [r3, #6]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d12d      	bne.n	800821a <USBD_SetAddress+0x76>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	885b      	ldrh	r3, [r3, #2]
 80081c2:	2b7f      	cmp	r3, #127	; 0x7f
 80081c4:	d829      	bhi.n	800821a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	885b      	ldrh	r3, [r3, #2]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d104      	bne.n	80081e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f9a3 	bl	800852c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e6:	e01d      	b.n	8008224 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7bfa      	ldrb	r2, [r7, #15]
 80081ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f003 fcab 	bl	800bb50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fa61 	bl	80086c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008200:	7bfb      	ldrb	r3, [r7, #15]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d004      	beq.n	8008210 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820e:	e009      	b.n	8008224 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008218:	e004      	b.n	8008224 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f985 	bl	800852c <USBD_CtlError>
  }
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	b2da      	uxtb	r2, r3
 8008240:	4b4c      	ldr	r3, [pc, #304]	; (8008374 <USBD_SetConfig+0x148>)
 8008242:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008244:	4b4b      	ldr	r3, [pc, #300]	; (8008374 <USBD_SetConfig+0x148>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d905      	bls.n	8008258 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f96c 	bl	800852c <USBD_CtlError>
    return USBD_FAIL;
 8008254:	2303      	movs	r3, #3
 8008256:	e088      	b.n	800836a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b02      	cmp	r3, #2
 8008262:	d002      	beq.n	800826a <USBD_SetConfig+0x3e>
 8008264:	2b03      	cmp	r3, #3
 8008266:	d025      	beq.n	80082b4 <USBD_SetConfig+0x88>
 8008268:	e071      	b.n	800834e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800826a:	4b42      	ldr	r3, [pc, #264]	; (8008374 <USBD_SetConfig+0x148>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01c      	beq.n	80082ac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008272:	4b40      	ldr	r3, [pc, #256]	; (8008374 <USBD_SetConfig+0x148>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800827c:	4b3d      	ldr	r3, [pc, #244]	; (8008374 <USBD_SetConfig+0x148>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff f948 	bl	8007518 <USBD_SetClassConfig>
 8008288:	4603      	mov	r3, r0
 800828a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f949 	bl	800852c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800829a:	e065      	b.n	8008368 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fa10 	bl	80086c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2203      	movs	r2, #3
 80082a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082aa:	e05d      	b.n	8008368 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fa08 	bl	80086c2 <USBD_CtlSendStatus>
      break;
 80082b2:	e059      	b.n	8008368 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082b4:	4b2f      	ldr	r3, [pc, #188]	; (8008374 <USBD_SetConfig+0x148>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d112      	bne.n	80082e2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80082c4:	4b2b      	ldr	r3, [pc, #172]	; (8008374 <USBD_SetConfig+0x148>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082ce:	4b29      	ldr	r3, [pc, #164]	; (8008374 <USBD_SetConfig+0x148>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff f93b 	bl	8007550 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f9f1 	bl	80086c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082e0:	e042      	b.n	8008368 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80082e2:	4b24      	ldr	r3, [pc, #144]	; (8008374 <USBD_SetConfig+0x148>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d02a      	beq.n	8008346 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff f929 	bl	8007550 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80082fe:	4b1d      	ldr	r3, [pc, #116]	; (8008374 <USBD_SetConfig+0x148>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008308:	4b1a      	ldr	r3, [pc, #104]	; (8008374 <USBD_SetConfig+0x148>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff f902 	bl	8007518 <USBD_SetClassConfig>
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00f      	beq.n	800833e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f903 	bl	800852c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff f90e 	bl	8007550 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800833c:	e014      	b.n	8008368 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9bf 	bl	80086c2 <USBD_CtlSendStatus>
      break;
 8008344:	e010      	b.n	8008368 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f9bb 	bl	80086c2 <USBD_CtlSendStatus>
      break;
 800834c:	e00c      	b.n	8008368 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f8eb 	bl	800852c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008356:	4b07      	ldr	r3, [pc, #28]	; (8008374 <USBD_SetConfig+0x148>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff f8f7 	bl	8007550 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008362:	2303      	movs	r3, #3
 8008364:	73fb      	strb	r3, [r7, #15]
      break;
 8008366:	bf00      	nop
  }

  return ret;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	2000488e 	.word	0x2000488e

08008378 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	88db      	ldrh	r3, [r3, #6]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d004      	beq.n	8008394 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f8cd 	bl	800852c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008392:	e023      	b.n	80083dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	dc02      	bgt.n	80083a6 <USBD_GetConfig+0x2e>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dc03      	bgt.n	80083ac <USBD_GetConfig+0x34>
 80083a4:	e015      	b.n	80083d2 <USBD_GetConfig+0x5a>
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d00b      	beq.n	80083c2 <USBD_GetConfig+0x4a>
 80083aa:	e012      	b.n	80083d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3308      	adds	r3, #8
 80083b6:	2201      	movs	r2, #1
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f927 	bl	800860e <USBD_CtlSendData>
        break;
 80083c0:	e00c      	b.n	80083dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3304      	adds	r3, #4
 80083c6:	2201      	movs	r2, #1
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f91f 	bl	800860e <USBD_CtlSendData>
        break;
 80083d0:	e004      	b.n	80083dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f8a9 	bl	800852c <USBD_CtlError>
        break;
 80083da:	bf00      	nop
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d81e      	bhi.n	800843a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	88db      	ldrh	r3, [r3, #6]
 8008400:	2b02      	cmp	r3, #2
 8008402:	d004      	beq.n	800840e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f890 	bl	800852c <USBD_CtlError>
        break;
 800840c:	e01a      	b.n	8008444 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800841a:	2b00      	cmp	r3, #0
 800841c:	d005      	beq.n	800842a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f043 0202 	orr.w	r2, r3, #2
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	330c      	adds	r3, #12
 800842e:	2202      	movs	r2, #2
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f8eb 	bl	800860e <USBD_CtlSendData>
      break;
 8008438:	e004      	b.n	8008444 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f875 	bl	800852c <USBD_CtlError>
      break;
 8008442:	bf00      	nop
  }
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	885b      	ldrh	r3, [r3, #2]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d106      	bne.n	800846c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f92b 	bl	80086c2 <USBD_CtlSendStatus>
  }
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008484:	b2db      	uxtb	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	2b02      	cmp	r3, #2
 800848a:	d80b      	bhi.n	80084a4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	885b      	ldrh	r3, [r3, #2]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d10c      	bne.n	80084ae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f910 	bl	80086c2 <USBD_CtlSendStatus>
      }
      break;
 80084a2:	e004      	b.n	80084ae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f840 	bl	800852c <USBD_CtlError>
      break;
 80084ac:	e000      	b.n	80084b0 <USBD_ClrFeature+0x3c>
      break;
 80084ae:	bf00      	nop
  }
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	781a      	ldrb	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3301      	adds	r3, #1
 80084d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	781a      	ldrb	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3301      	adds	r3, #1
 80084e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f7ff fabb 	bl	8007a5e <SWAPBYTE>
 80084e8:	4603      	mov	r3, r0
 80084ea:	461a      	mov	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3301      	adds	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f7ff faae 	bl	8007a5e <SWAPBYTE>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3301      	adds	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7ff faa1 	bl	8007a5e <SWAPBYTE>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	80da      	strh	r2, [r3, #6]
}
 8008524:	bf00      	nop
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f003 fa9f 	bl	800ba7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800853e:	2100      	movs	r1, #0
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f003 fa9b 	bl	800ba7c <USBD_LL_StallEP>
}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b086      	sub	sp, #24
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d036      	beq.n	80085d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008568:	6938      	ldr	r0, [r7, #16]
 800856a:	f000 f836 	bl	80085da <USBD_GetLen>
 800856e:	4603      	mov	r3, r0
 8008570:	3301      	adds	r3, #1
 8008572:	b29b      	uxth	r3, r3
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	b29a      	uxth	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800857c:	7dfb      	ldrb	r3, [r7, #23]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	4413      	add	r3, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	701a      	strb	r2, [r3, #0]
  idx++;
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	3301      	adds	r3, #1
 800858c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	4413      	add	r3, r2
 8008594:	2203      	movs	r2, #3
 8008596:	701a      	strb	r2, [r3, #0]
  idx++;
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	3301      	adds	r3, #1
 800859c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800859e:	e013      	b.n	80085c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	4413      	add	r3, r2
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	7812      	ldrb	r2, [r2, #0]
 80085aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	3301      	adds	r3, #1
 80085b0:	613b      	str	r3, [r7, #16]
    idx++;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	3301      	adds	r3, #1
 80085b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	4413      	add	r3, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	701a      	strb	r2, [r3, #0]
    idx++;
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	3301      	adds	r3, #1
 80085c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e7      	bne.n	80085a0 <USBD_GetString+0x52>
 80085d0:	e000      	b.n	80085d4 <USBD_GetString+0x86>
    return;
 80085d2:	bf00      	nop
  }
}
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80085ea:	e005      	b.n	80085f8 <USBD_GetLen+0x1e>
  {
    len++;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	3301      	adds	r3, #1
 80085f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	3301      	adds	r3, #1
 80085f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1f5      	bne.n	80085ec <USBD_GetLen+0x12>
  }

  return len;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2202      	movs	r2, #2
 800861e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	2100      	movs	r1, #0
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f003 faaa 	bl	800bb8e <USBD_LL_Transmit>

  return USBD_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	2100      	movs	r1, #0
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f003 fa99 	bl	800bb8e <USBD_LL_Transmit>

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2203      	movs	r2, #3
 8008676:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	2100      	movs	r1, #0
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f003 fa9d 	bl	800bbd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	2100      	movs	r1, #0
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f003 fa8c 	bl	800bbd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2204      	movs	r2, #4
 80086ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086d2:	2300      	movs	r3, #0
 80086d4:	2200      	movs	r2, #0
 80086d6:	2100      	movs	r1, #0
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f003 fa58 	bl	800bb8e <USBD_LL_Transmit>

  return USBD_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2205      	movs	r2, #5
 80086f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086f8:	2300      	movs	r3, #0
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f003 fa66 	bl	800bbd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <__NVIC_SetPriority>:
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800871c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008720:	2b00      	cmp	r3, #0
 8008722:	db0a      	blt.n	800873a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	b2da      	uxtb	r2, r3
 8008728:	490c      	ldr	r1, [pc, #48]	; (800875c <__NVIC_SetPriority+0x4c>)
 800872a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800872e:	0112      	lsls	r2, r2, #4
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	440b      	add	r3, r1
 8008734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008738:	e00a      	b.n	8008750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	b2da      	uxtb	r2, r3
 800873e:	4908      	ldr	r1, [pc, #32]	; (8008760 <__NVIC_SetPriority+0x50>)
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	3b04      	subs	r3, #4
 8008748:	0112      	lsls	r2, r2, #4
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	440b      	add	r3, r1
 800874e:	761a      	strb	r2, [r3, #24]
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	e000e100 	.word	0xe000e100
 8008760:	e000ed00 	.word	0xe000ed00

08008764 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <SysTick_Handler+0x1c>)
 800876a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800876c:	f001 fd24 	bl	800a1b8 <xTaskGetSchedulerState>
 8008770:	4603      	mov	r3, r0
 8008772:	2b01      	cmp	r3, #1
 8008774:	d001      	beq.n	800877a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008776:	f002 fb0f 	bl	800ad98 <xPortSysTickHandler>
  }
}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	e000e010 	.word	0xe000e010

08008784 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008788:	2100      	movs	r1, #0
 800878a:	f06f 0004 	mvn.w	r0, #4
 800878e:	f7ff ffbf 	bl	8008710 <__NVIC_SetPriority>
#endif
}
 8008792:	bf00      	nop
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800879e:	f3ef 8305 	mrs	r3, IPSR
 80087a2:	603b      	str	r3, [r7, #0]
  return(result);
 80087a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80087aa:	f06f 0305 	mvn.w	r3, #5
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	e00c      	b.n	80087cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80087b2:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <osKernelInitialize+0x44>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d105      	bne.n	80087c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80087ba:	4b08      	ldr	r3, [pc, #32]	; (80087dc <osKernelInitialize+0x44>)
 80087bc:	2201      	movs	r2, #1
 80087be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	607b      	str	r3, [r7, #4]
 80087c4:	e002      	b.n	80087cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087cc:	687b      	ldr	r3, [r7, #4]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20004890 	.word	0x20004890

080087e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087e6:	f3ef 8305 	mrs	r3, IPSR
 80087ea:	603b      	str	r3, [r7, #0]
  return(result);
 80087ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80087f2:	f06f 0305 	mvn.w	r3, #5
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	e010      	b.n	800881c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087fa:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <osKernelStart+0x48>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d109      	bne.n	8008816 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008802:	f7ff ffbf 	bl	8008784 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <osKernelStart+0x48>)
 8008808:	2202      	movs	r2, #2
 800880a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800880c:	f001 f866 	bl	80098dc <vTaskStartScheduler>
      stat = osOK;
 8008810:	2300      	movs	r3, #0
 8008812:	607b      	str	r3, [r7, #4]
 8008814:	e002      	b.n	800881c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800881a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800881c:	687b      	ldr	r3, [r7, #4]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20004890 	.word	0x20004890

0800882c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b08e      	sub	sp, #56	; 0x38
 8008830:	af04      	add	r7, sp, #16
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008838:	2300      	movs	r3, #0
 800883a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800883c:	f3ef 8305 	mrs	r3, IPSR
 8008840:	617b      	str	r3, [r7, #20]
  return(result);
 8008842:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008844:	2b00      	cmp	r3, #0
 8008846:	d17e      	bne.n	8008946 <osThreadNew+0x11a>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d07b      	beq.n	8008946 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800884e:	2380      	movs	r3, #128	; 0x80
 8008850:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008852:	2318      	movs	r3, #24
 8008854:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800885a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800885e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d045      	beq.n	80088f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <osThreadNew+0x48>
        name = attr->name;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d008      	beq.n	800889a <osThreadNew+0x6e>
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	2b38      	cmp	r3, #56	; 0x38
 800888c:	d805      	bhi.n	800889a <osThreadNew+0x6e>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <osThreadNew+0x72>
        return (NULL);
 800889a:	2300      	movs	r3, #0
 800889c:	e054      	b.n	8008948 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	089b      	lsrs	r3, r3, #2
 80088ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00e      	beq.n	80088d4 <osThreadNew+0xa8>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	2b5b      	cmp	r3, #91	; 0x5b
 80088bc:	d90a      	bls.n	80088d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d006      	beq.n	80088d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <osThreadNew+0xa8>
        mem = 1;
 80088ce:	2301      	movs	r3, #1
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	e010      	b.n	80088f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10c      	bne.n	80088f6 <osThreadNew+0xca>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d108      	bne.n	80088f6 <osThreadNew+0xca>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <osThreadNew+0xca>
          mem = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61bb      	str	r3, [r7, #24]
 80088f0:	e001      	b.n	80088f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d110      	bne.n	800891e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008904:	9202      	str	r2, [sp, #8]
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	6a3a      	ldr	r2, [r7, #32]
 8008910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 fe0c 	bl	8009530 <xTaskCreateStatic>
 8008918:	4603      	mov	r3, r0
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	e013      	b.n	8008946 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d110      	bne.n	8008946 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	b29a      	uxth	r2, r3
 8008928:	f107 0310 	add.w	r3, r7, #16
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 fe57 	bl	80095ea <xTaskCreate>
 800893c:	4603      	mov	r3, r0
 800893e:	2b01      	cmp	r3, #1
 8008940:	d001      	beq.n	8008946 <osThreadNew+0x11a>
            hTask = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008946:	693b      	ldr	r3, [r7, #16]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3728      	adds	r7, #40	; 0x28
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008958:	f3ef 8305 	mrs	r3, IPSR
 800895c:	60bb      	str	r3, [r7, #8]
  return(result);
 800895e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <osDelay+0x1c>
    stat = osErrorISR;
 8008964:	f06f 0305 	mvn.w	r3, #5
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	e007      	b.n	800897c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 ff7c 	bl	8009874 <vTaskDelay>
    }
  }

  return (stat);
 800897c:	68fb      	ldr	r3, [r7, #12]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
	...

08008988 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	4a07      	ldr	r2, [pc, #28]	; (80089b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008998:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	4a06      	ldr	r2, [pc, #24]	; (80089b8 <vApplicationGetIdleTaskMemory+0x30>)
 800899e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2280      	movs	r2, #128	; 0x80
 80089a4:	601a      	str	r2, [r3, #0]
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20004894 	.word	0x20004894
 80089b8:	200048f0 	.word	0x200048f0

080089bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80089cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	4a06      	ldr	r2, [pc, #24]	; (80089ec <vApplicationGetTimerTaskMemory+0x30>)
 80089d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089da:	601a      	str	r2, [r3, #0]
}
 80089dc:	bf00      	nop
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	20004af0 	.word	0x20004af0
 80089ec:	20004b4c 	.word	0x20004b4c

080089f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f103 0208 	add.w	r2, r3, #8
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f103 0208 	add.w	r2, r3, #8
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f103 0208 	add.w	r2, r3, #8
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a3e:	bf00      	nop
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	601a      	str	r2, [r3, #0]
}
 8008a86:	bf00      	nop
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a92:	b480      	push	{r7}
 8008a94:	b085      	sub	sp, #20
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aa8:	d103      	bne.n	8008ab2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e00c      	b.n	8008acc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	e002      	b.n	8008ac0 <vListInsert+0x2e>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d2f6      	bcs.n	8008aba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	601a      	str	r2, [r3, #0]
}
 8008af8:	bf00      	nop
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6892      	ldr	r2, [r2, #8]
 8008b1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6852      	ldr	r2, [r2, #4]
 8008b24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d103      	bne.n	8008b38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	1e5a      	subs	r2, r3, #1
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <xQueueGenericReset+0x2a>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	60bb      	str	r3, [r7, #8]
}
 8008b7e:	bf00      	nop
 8008b80:	e7fe      	b.n	8008b80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b82:	f002 f877 	bl	800ac74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8e:	68f9      	ldr	r1, [r7, #12]
 8008b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b92:	fb01 f303 	mul.w	r3, r1, r3
 8008b96:	441a      	add	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	68f9      	ldr	r1, [r7, #12]
 8008bb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bb8:	fb01 f303 	mul.w	r3, r1, r3
 8008bbc:	441a      	add	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	22ff      	movs	r2, #255	; 0xff
 8008bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	22ff      	movs	r2, #255	; 0xff
 8008bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d114      	bne.n	8008c02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01a      	beq.n	8008c16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3310      	adds	r3, #16
 8008be4:	4618      	mov	r0, r3
 8008be6:	f001 f903 	bl	8009df0 <xTaskRemoveFromEventList>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d012      	beq.n	8008c16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bf0:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <xQueueGenericReset+0xcc>)
 8008bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	e009      	b.n	8008c16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3310      	adds	r3, #16
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff fef2 	bl	80089f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3324      	adds	r3, #36	; 0x24
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff feed 	bl	80089f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c16:	f002 f85d 	bl	800acd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c1a:	2301      	movs	r3, #1
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	e000ed04 	.word	0xe000ed04

08008c28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08e      	sub	sp, #56	; 0x38
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10a      	bne.n	8008c52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10a      	bne.n	8008c6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c6a:	bf00      	nop
 8008c6c:	e7fe      	b.n	8008c6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <xQueueGenericCreateStatic+0x52>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <xQueueGenericCreateStatic+0x56>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <xQueueGenericCreateStatic+0x58>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10a      	bne.n	8008c9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	623b      	str	r3, [r7, #32]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <xQueueGenericCreateStatic+0x7e>
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <xQueueGenericCreateStatic+0x82>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <xQueueGenericCreateStatic+0x84>
 8008caa:	2300      	movs	r3, #0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	61fb      	str	r3, [r7, #28]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cc6:	2350      	movs	r3, #80	; 0x50
 8008cc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b50      	cmp	r3, #80	; 0x50
 8008cce:	d00a      	beq.n	8008ce6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	61bb      	str	r3, [r7, #24]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ce6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00d      	beq.n	8008d0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	4613      	mov	r3, r2
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f805 	bl	8008d18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3730      	adds	r7, #48	; 0x30
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d103      	bne.n	8008d34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	e002      	b.n	8008d3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d46:	2101      	movs	r1, #1
 8008d48:	69b8      	ldr	r0, [r7, #24]
 8008d4a:	f7ff ff05 	bl	8008b58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	78fa      	ldrb	r2, [r7, #3]
 8008d52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08e      	sub	sp, #56	; 0x38
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <xQueueGenericSend+0x32>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d103      	bne.n	8008da0 <xQueueGenericSend+0x40>
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <xQueueGenericSend+0x44>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e000      	b.n	8008da6 <xQueueGenericSend+0x46>
 8008da4:	2300      	movs	r3, #0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10a      	bne.n	8008dc0 <xQueueGenericSend+0x60>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dbc:	bf00      	nop
 8008dbe:	e7fe      	b.n	8008dbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d103      	bne.n	8008dce <xQueueGenericSend+0x6e>
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <xQueueGenericSend+0x72>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <xQueueGenericSend+0x74>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <xQueueGenericSend+0x8e>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	623b      	str	r3, [r7, #32]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dee:	f001 f9e3 	bl	800a1b8 <xTaskGetSchedulerState>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <xQueueGenericSend+0x9e>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <xQueueGenericSend+0xa2>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <xQueueGenericSend+0xa4>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xQueueGenericSend+0xbe>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	61fb      	str	r3, [r7, #28]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e1e:	f001 ff29 	bl	800ac74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d302      	bcc.n	8008e34 <xQueueGenericSend+0xd4>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d129      	bne.n	8008e88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	68b9      	ldr	r1, [r7, #8]
 8008e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e3a:	f000 fa0b 	bl	8009254 <prvCopyDataToQueue>
 8008e3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d010      	beq.n	8008e6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	3324      	adds	r3, #36	; 0x24
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 ffcf 	bl	8009df0 <xTaskRemoveFromEventList>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d013      	beq.n	8008e80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e58:	4b3f      	ldr	r3, [pc, #252]	; (8008f58 <xQueueGenericSend+0x1f8>)
 8008e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	e00a      	b.n	8008e80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d007      	beq.n	8008e80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e70:	4b39      	ldr	r3, [pc, #228]	; (8008f58 <xQueueGenericSend+0x1f8>)
 8008e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e80:	f001 ff28 	bl	800acd4 <vPortExitCritical>
				return pdPASS;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e063      	b.n	8008f50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d103      	bne.n	8008e96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e8e:	f001 ff21 	bl	800acd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	e05c      	b.n	8008f50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d106      	bne.n	8008eaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f001 f82f 	bl	8009f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008eaa:	f001 ff13 	bl	800acd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008eae:	f000 fd7b 	bl	80099a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eb2:	f001 fedf 	bl	800ac74 <vPortEnterCritical>
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ebc:	b25b      	sxtb	r3, r3
 8008ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ec2:	d103      	bne.n	8008ecc <xQueueGenericSend+0x16c>
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ed2:	b25b      	sxtb	r3, r3
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed8:	d103      	bne.n	8008ee2 <xQueueGenericSend+0x182>
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ee2:	f001 fef7 	bl	800acd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ee6:	1d3a      	adds	r2, r7, #4
 8008ee8:	f107 0314 	add.w	r3, r7, #20
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 f81e 	bl	8009f30 <xTaskCheckForTimeOut>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d124      	bne.n	8008f44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008efc:	f000 faa2 	bl	8009444 <prvIsQueueFull>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d018      	beq.n	8008f38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	3310      	adds	r3, #16
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 ff1e 	bl	8009d50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f16:	f000 fa2d 	bl	8009374 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f1a:	f000 fd53 	bl	80099c4 <xTaskResumeAll>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f47f af7c 	bne.w	8008e1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f26:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <xQueueGenericSend+0x1f8>)
 8008f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	e772      	b.n	8008e1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f3a:	f000 fa1b 	bl	8009374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f3e:	f000 fd41 	bl	80099c4 <xTaskResumeAll>
 8008f42:	e76c      	b.n	8008e1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f46:	f000 fa15 	bl	8009374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f4a:	f000 fd3b 	bl	80099c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3738      	adds	r7, #56	; 0x38
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	e000ed04 	.word	0xe000ed04

08008f5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b090      	sub	sp, #64	; 0x40
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <xQueueGenericSendFromISR+0x3c>
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <xQueueGenericSendFromISR+0x40>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <xQueueGenericSendFromISR+0x42>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d103      	bne.n	8008fc6 <xQueueGenericSendFromISR+0x6a>
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <xQueueGenericSendFromISR+0x6e>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <xQueueGenericSendFromISR+0x70>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	623b      	str	r3, [r7, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fe6:	f001 ff27 	bl	800ae38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fea:	f3ef 8211 	mrs	r2, BASEPRI
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	61fa      	str	r2, [r7, #28]
 8009000:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009002:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900e:	429a      	cmp	r2, r3
 8009010:	d302      	bcc.n	8009018 <xQueueGenericSendFromISR+0xbc>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d12f      	bne.n	8009078 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800901e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009026:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	68b9      	ldr	r1, [r7, #8]
 800902c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800902e:	f000 f911 	bl	8009254 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009032:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800903a:	d112      	bne.n	8009062 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	d016      	beq.n	8009072 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	3324      	adds	r3, #36	; 0x24
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fed1 	bl	8009df0 <xTaskRemoveFromEventList>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00e      	beq.n	8009072 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	e007      	b.n	8009072 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009066:	3301      	adds	r3, #1
 8009068:	b2db      	uxtb	r3, r3
 800906a:	b25a      	sxtb	r2, r3
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009072:	2301      	movs	r3, #1
 8009074:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009076:	e001      	b.n	800907c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009078:	2300      	movs	r3, #0
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800907c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009086:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800908a:	4618      	mov	r0, r3
 800908c:	3740      	adds	r7, #64	; 0x40
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08c      	sub	sp, #48	; 0x30
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090a0:	2300      	movs	r3, #0
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10a      	bne.n	80090c4 <xQueueReceive+0x30>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	623b      	str	r3, [r7, #32]
}
 80090c0:	bf00      	nop
 80090c2:	e7fe      	b.n	80090c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <xQueueReceive+0x3e>
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <xQueueReceive+0x42>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <xQueueReceive+0x44>
 80090d6:	2300      	movs	r3, #0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10a      	bne.n	80090f2 <xQueueReceive+0x5e>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	61fb      	str	r3, [r7, #28]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090f2:	f001 f861 	bl	800a1b8 <xTaskGetSchedulerState>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d102      	bne.n	8009102 <xQueueReceive+0x6e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <xQueueReceive+0x72>
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <xQueueReceive+0x74>
 8009106:	2300      	movs	r3, #0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <xQueueReceive+0x8e>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	61bb      	str	r3, [r7, #24]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009122:	f001 fda7 	bl	800ac74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01f      	beq.n	8009172 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009136:	f000 f8f7 	bl	8009328 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	1e5a      	subs	r2, r3, #1
 800913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009140:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00f      	beq.n	800916a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	3310      	adds	r3, #16
 800914e:	4618      	mov	r0, r3
 8009150:	f000 fe4e 	bl	8009df0 <xTaskRemoveFromEventList>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d007      	beq.n	800916a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800915a:	4b3d      	ldr	r3, [pc, #244]	; (8009250 <xQueueReceive+0x1bc>)
 800915c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800916a:	f001 fdb3 	bl	800acd4 <vPortExitCritical>
				return pdPASS;
 800916e:	2301      	movs	r3, #1
 8009170:	e069      	b.n	8009246 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009178:	f001 fdac 	bl	800acd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800917c:	2300      	movs	r3, #0
 800917e:	e062      	b.n	8009246 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009186:	f107 0310 	add.w	r3, r7, #16
 800918a:	4618      	mov	r0, r3
 800918c:	f000 feba 	bl	8009f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009190:	2301      	movs	r3, #1
 8009192:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009194:	f001 fd9e 	bl	800acd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009198:	f000 fc06 	bl	80099a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800919c:	f001 fd6a 	bl	800ac74 <vPortEnterCritical>
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091a6:	b25b      	sxtb	r3, r3
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ac:	d103      	bne.n	80091b6 <xQueueReceive+0x122>
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091bc:	b25b      	sxtb	r3, r3
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c2:	d103      	bne.n	80091cc <xQueueReceive+0x138>
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091cc:	f001 fd82 	bl	800acd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091d0:	1d3a      	adds	r2, r7, #4
 80091d2:	f107 0310 	add.w	r3, r7, #16
 80091d6:	4611      	mov	r1, r2
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fea9 	bl	8009f30 <xTaskCheckForTimeOut>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d123      	bne.n	800922c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e6:	f000 f917 	bl	8009418 <prvIsQueueEmpty>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d017      	beq.n	8009220 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	3324      	adds	r3, #36	; 0x24
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fda9 	bl	8009d50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009200:	f000 f8b8 	bl	8009374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009204:	f000 fbde 	bl	80099c4 <xTaskResumeAll>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d189      	bne.n	8009122 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800920e:	4b10      	ldr	r3, [pc, #64]	; (8009250 <xQueueReceive+0x1bc>)
 8009210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	e780      	b.n	8009122 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009222:	f000 f8a7 	bl	8009374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009226:	f000 fbcd 	bl	80099c4 <xTaskResumeAll>
 800922a:	e77a      	b.n	8009122 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800922c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800922e:	f000 f8a1 	bl	8009374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009232:	f000 fbc7 	bl	80099c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009238:	f000 f8ee 	bl	8009418 <prvIsQueueEmpty>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	f43f af6f 	beq.w	8009122 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009246:	4618      	mov	r0, r3
 8009248:	3730      	adds	r7, #48	; 0x30
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	e000ed04 	.word	0xe000ed04

08009254 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10d      	bne.n	800928e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d14d      	bne.n	8009316 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 ffb8 	bl	800a1f4 <xTaskPriorityDisinherit>
 8009284:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	609a      	str	r2, [r3, #8]
 800928c:	e043      	b.n	8009316 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d119      	bne.n	80092c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6858      	ldr	r0, [r3, #4]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929c:	461a      	mov	r2, r3
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	f00f fc2a 	bl	8018af8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ac:	441a      	add	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d32b      	bcc.n	8009316 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	605a      	str	r2, [r3, #4]
 80092c6:	e026      	b.n	8009316 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	68d8      	ldr	r0, [r3, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d0:	461a      	mov	r2, r3
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	f00f fc10 	bl	8018af8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e0:	425b      	negs	r3, r3
 80092e2:	441a      	add	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d207      	bcs.n	8009304 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	425b      	negs	r3, r3
 80092fe:	441a      	add	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d105      	bne.n	8009316 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	3b01      	subs	r3, #1
 8009314:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800931e:	697b      	ldr	r3, [r7, #20]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d018      	beq.n	800936c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	441a      	add	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	429a      	cmp	r2, r3
 8009352:	d303      	bcc.n	800935c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68d9      	ldr	r1, [r3, #12]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009364:	461a      	mov	r2, r3
 8009366:	6838      	ldr	r0, [r7, #0]
 8009368:	f00f fbc6 	bl	8018af8 <memcpy>
	}
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800937c:	f001 fc7a 	bl	800ac74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009386:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009388:	e011      	b.n	80093ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	d012      	beq.n	80093b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3324      	adds	r3, #36	; 0x24
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fd2a 	bl	8009df0 <xTaskRemoveFromEventList>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093a2:	f000 fe27 	bl	8009ff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dce9      	bgt.n	800938a <prvUnlockQueue+0x16>
 80093b6:	e000      	b.n	80093ba <prvUnlockQueue+0x46>
					break;
 80093b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	22ff      	movs	r2, #255	; 0xff
 80093be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093c2:	f001 fc87 	bl	800acd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093c6:	f001 fc55 	bl	800ac74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093d2:	e011      	b.n	80093f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d012      	beq.n	8009402 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3310      	adds	r3, #16
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fd05 	bl	8009df0 <xTaskRemoveFromEventList>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093ec:	f000 fe02 	bl	8009ff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	dce9      	bgt.n	80093d4 <prvUnlockQueue+0x60>
 8009400:	e000      	b.n	8009404 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009402:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	22ff      	movs	r2, #255	; 0xff
 8009408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800940c:	f001 fc62 	bl	800acd4 <vPortExitCritical>
}
 8009410:	bf00      	nop
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009420:	f001 fc28 	bl	800ac74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800942c:	2301      	movs	r3, #1
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	e001      	b.n	8009436 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009436:	f001 fc4d 	bl	800acd4 <vPortExitCritical>

	return xReturn;
 800943a:	68fb      	ldr	r3, [r7, #12]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800944c:	f001 fc12 	bl	800ac74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009458:	429a      	cmp	r2, r3
 800945a:	d102      	bne.n	8009462 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800945c:	2301      	movs	r3, #1
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	e001      	b.n	8009466 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009466:	f001 fc35 	bl	800acd4 <vPortExitCritical>

	return xReturn;
 800946a:	68fb      	ldr	r3, [r7, #12]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	e014      	b.n	80094ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009484:	4a0f      	ldr	r2, [pc, #60]	; (80094c4 <vQueueAddToRegistry+0x50>)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10b      	bne.n	80094a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009490:	490c      	ldr	r1, [pc, #48]	; (80094c4 <vQueueAddToRegistry+0x50>)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800949a:	4a0a      	ldr	r2, [pc, #40]	; (80094c4 <vQueueAddToRegistry+0x50>)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	4413      	add	r3, r2
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094a6:	e006      	b.n	80094b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3301      	adds	r3, #1
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b07      	cmp	r3, #7
 80094b2:	d9e7      	bls.n	8009484 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	2000e094 	.word	0x2000e094

080094c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094d8:	f001 fbcc 	bl	800ac74 <vPortEnterCritical>
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094e2:	b25b      	sxtb	r3, r3
 80094e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e8:	d103      	bne.n	80094f2 <vQueueWaitForMessageRestricted+0x2a>
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094f8:	b25b      	sxtb	r3, r3
 80094fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094fe:	d103      	bne.n	8009508 <vQueueWaitForMessageRestricted+0x40>
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009508:	f001 fbe4 	bl	800acd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	3324      	adds	r3, #36	; 0x24
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	68b9      	ldr	r1, [r7, #8]
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fc3b 	bl	8009d98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009522:	6978      	ldr	r0, [r7, #20]
 8009524:	f7ff ff26 	bl	8009374 <prvUnlockQueue>
	}
 8009528:	bf00      	nop
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08e      	sub	sp, #56	; 0x38
 8009534:	af04      	add	r7, sp, #16
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800953e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10a      	bne.n	800955a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	623b      	str	r3, [r7, #32]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <xTaskCreateStatic+0x46>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	61fb      	str	r3, [r7, #28]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009576:	235c      	movs	r3, #92	; 0x5c
 8009578:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2b5c      	cmp	r3, #92	; 0x5c
 800957e:	d00a      	beq.n	8009596 <xTaskCreateStatic+0x66>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	61bb      	str	r3, [r7, #24]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009596:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	2b00      	cmp	r3, #0
 800959c:	d01e      	beq.n	80095dc <xTaskCreateStatic+0xac>
 800959e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d01b      	beq.n	80095dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	2202      	movs	r2, #2
 80095b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095b6:	2300      	movs	r3, #0
 80095b8:	9303      	str	r3, [sp, #12]
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	9302      	str	r3, [sp, #8]
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	68b9      	ldr	r1, [r7, #8]
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f000 f850 	bl	8009674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095d6:	f000 f8dd 	bl	8009794 <prvAddNewTaskToReadyList>
 80095da:	e001      	b.n	80095e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80095dc:	2300      	movs	r3, #0
 80095de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095e0:	697b      	ldr	r3, [r7, #20]
	}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3728      	adds	r7, #40	; 0x28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b08c      	sub	sp, #48	; 0x30
 80095ee:	af04      	add	r7, sp, #16
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	603b      	str	r3, [r7, #0]
 80095f6:	4613      	mov	r3, r2
 80095f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4618      	mov	r0, r3
 8009600:	f001 fc5a 	bl	800aeb8 <pvPortMalloc>
 8009604:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00e      	beq.n	800962a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800960c:	205c      	movs	r0, #92	; 0x5c
 800960e:	f001 fc53 	bl	800aeb8 <pvPortMalloc>
 8009612:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	631a      	str	r2, [r3, #48]	; 0x30
 8009620:	e005      	b.n	800962e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009622:	6978      	ldr	r0, [r7, #20]
 8009624:	f001 fd14 	bl	800b050 <vPortFree>
 8009628:	e001      	b.n	800962e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d017      	beq.n	8009664 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800963c:	88fa      	ldrh	r2, [r7, #6]
 800963e:	2300      	movs	r3, #0
 8009640:	9303      	str	r3, [sp, #12]
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	9302      	str	r3, [sp, #8]
 8009646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	68b9      	ldr	r1, [r7, #8]
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f000 f80e 	bl	8009674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009658:	69f8      	ldr	r0, [r7, #28]
 800965a:	f000 f89b 	bl	8009794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800965e:	2301      	movs	r3, #1
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	e002      	b.n	800966a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009668:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800966a:	69bb      	ldr	r3, [r7, #24]
	}
 800966c:	4618      	mov	r0, r3
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b088      	sub	sp, #32
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	461a      	mov	r2, r3
 800968c:	21a5      	movs	r1, #165	; 0xa5
 800968e:	f00f fa5b 	bl	8018b48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800969c:	3b01      	subs	r3, #1
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	f023 0307 	bic.w	r3, r3, #7
 80096aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	f003 0307 	and.w	r3, r3, #7
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	617b      	str	r3, [r7, #20]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d01f      	beq.n	8009712 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096d2:	2300      	movs	r3, #0
 80096d4:	61fb      	str	r3, [r7, #28]
 80096d6:	e012      	b.n	80096fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	4413      	add	r3, r2
 80096de:	7819      	ldrb	r1, [r3, #0]
 80096e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	4413      	add	r3, r2
 80096e6:	3334      	adds	r3, #52	; 0x34
 80096e8:	460a      	mov	r2, r1
 80096ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d006      	beq.n	8009706 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	3301      	adds	r3, #1
 80096fc:	61fb      	str	r3, [r7, #28]
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	2b0f      	cmp	r3, #15
 8009702:	d9e9      	bls.n	80096d8 <prvInitialiseNewTask+0x64>
 8009704:	e000      	b.n	8009708 <prvInitialiseNewTask+0x94>
			{
				break;
 8009706:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009710:	e003      	b.n	800971a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	2b37      	cmp	r3, #55	; 0x37
 800971e:	d901      	bls.n	8009724 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009720:	2337      	movs	r3, #55	; 0x37
 8009722:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009728:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800972e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009732:	2200      	movs	r2, #0
 8009734:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009738:	3304      	adds	r3, #4
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff f978 	bl	8008a30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	3318      	adds	r3, #24
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff f973 	bl	8008a30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800974e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800975e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	2200      	movs	r2, #0
 8009764:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	68f9      	ldr	r1, [r7, #12]
 8009772:	69b8      	ldr	r0, [r7, #24]
 8009774:	f001 f94e 	bl	800aa14 <pxPortInitialiseStack>
 8009778:	4602      	mov	r2, r0
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800978a:	bf00      	nop
 800978c:	3720      	adds	r7, #32
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
	...

08009794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800979c:	f001 fa6a 	bl	800ac74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097a0:	4b2d      	ldr	r3, [pc, #180]	; (8009858 <prvAddNewTaskToReadyList+0xc4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	4a2c      	ldr	r2, [pc, #176]	; (8009858 <prvAddNewTaskToReadyList+0xc4>)
 80097a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097aa:	4b2c      	ldr	r3, [pc, #176]	; (800985c <prvAddNewTaskToReadyList+0xc8>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097b2:	4a2a      	ldr	r2, [pc, #168]	; (800985c <prvAddNewTaskToReadyList+0xc8>)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097b8:	4b27      	ldr	r3, [pc, #156]	; (8009858 <prvAddNewTaskToReadyList+0xc4>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d110      	bne.n	80097e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097c0:	f000 fc3c 	bl	800a03c <prvInitialiseTaskLists>
 80097c4:	e00d      	b.n	80097e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097c6:	4b26      	ldr	r3, [pc, #152]	; (8009860 <prvAddNewTaskToReadyList+0xcc>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097ce:	4b23      	ldr	r3, [pc, #140]	; (800985c <prvAddNewTaskToReadyList+0xc8>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	429a      	cmp	r2, r3
 80097da:	d802      	bhi.n	80097e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097dc:	4a1f      	ldr	r2, [pc, #124]	; (800985c <prvAddNewTaskToReadyList+0xc8>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097e2:	4b20      	ldr	r3, [pc, #128]	; (8009864 <prvAddNewTaskToReadyList+0xd0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3301      	adds	r3, #1
 80097e8:	4a1e      	ldr	r2, [pc, #120]	; (8009864 <prvAddNewTaskToReadyList+0xd0>)
 80097ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097ec:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <prvAddNewTaskToReadyList+0xd0>)
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	4b1b      	ldr	r3, [pc, #108]	; (8009868 <prvAddNewTaskToReadyList+0xd4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d903      	bls.n	8009808 <prvAddNewTaskToReadyList+0x74>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	4a18      	ldr	r2, [pc, #96]	; (8009868 <prvAddNewTaskToReadyList+0xd4>)
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4a15      	ldr	r2, [pc, #84]	; (800986c <prvAddNewTaskToReadyList+0xd8>)
 8009816:	441a      	add	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3304      	adds	r3, #4
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7ff f913 	bl	8008a4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009824:	f001 fa56 	bl	800acd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009828:	4b0d      	ldr	r3, [pc, #52]	; (8009860 <prvAddNewTaskToReadyList+0xcc>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00e      	beq.n	800984e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009830:	4b0a      	ldr	r3, [pc, #40]	; (800985c <prvAddNewTaskToReadyList+0xc8>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983a:	429a      	cmp	r2, r3
 800983c:	d207      	bcs.n	800984e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800983e:	4b0c      	ldr	r3, [pc, #48]	; (8009870 <prvAddNewTaskToReadyList+0xdc>)
 8009840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800984e:	bf00      	nop
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20005420 	.word	0x20005420
 800985c:	20004f4c 	.word	0x20004f4c
 8009860:	2000542c 	.word	0x2000542c
 8009864:	2000543c 	.word	0x2000543c
 8009868:	20005428 	.word	0x20005428
 800986c:	20004f50 	.word	0x20004f50
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d017      	beq.n	80098b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009886:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <vTaskDelay+0x60>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00a      	beq.n	80098a4 <vTaskDelay+0x30>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	60bb      	str	r3, [r7, #8]
}
 80098a0:	bf00      	nop
 80098a2:	e7fe      	b.n	80098a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098a4:	f000 f880 	bl	80099a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098a8:	2100      	movs	r1, #0
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fd10 	bl	800a2d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098b0:	f000 f888 	bl	80099c4 <xTaskResumeAll>
 80098b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d107      	bne.n	80098cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <vTaskDelay+0x64>)
 80098be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098cc:	bf00      	nop
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20005448 	.word	0x20005448
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08a      	sub	sp, #40	; 0x28
 80098e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098ea:	463a      	mov	r2, r7
 80098ec:	1d39      	adds	r1, r7, #4
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7ff f848 	bl	8008988 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	9202      	str	r2, [sp, #8]
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	2300      	movs	r3, #0
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	2300      	movs	r3, #0
 8009908:	460a      	mov	r2, r1
 800990a:	4921      	ldr	r1, [pc, #132]	; (8009990 <vTaskStartScheduler+0xb4>)
 800990c:	4821      	ldr	r0, [pc, #132]	; (8009994 <vTaskStartScheduler+0xb8>)
 800990e:	f7ff fe0f 	bl	8009530 <xTaskCreateStatic>
 8009912:	4603      	mov	r3, r0
 8009914:	4a20      	ldr	r2, [pc, #128]	; (8009998 <vTaskStartScheduler+0xbc>)
 8009916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009918:	4b1f      	ldr	r3, [pc, #124]	; (8009998 <vTaskStartScheduler+0xbc>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009920:	2301      	movs	r3, #1
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	e001      	b.n	800992a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d102      	bne.n	8009936 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009930:	f000 fd22 	bl	800a378 <xTimerCreateTimerTask>
 8009934:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d116      	bne.n	800996a <vTaskStartScheduler+0x8e>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	613b      	str	r3, [r7, #16]
}
 800994e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009950:	4b12      	ldr	r3, [pc, #72]	; (800999c <vTaskStartScheduler+0xc0>)
 8009952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009956:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009958:	4b11      	ldr	r3, [pc, #68]	; (80099a0 <vTaskStartScheduler+0xc4>)
 800995a:	2201      	movs	r2, #1
 800995c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800995e:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <vTaskStartScheduler+0xc8>)
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009964:	f001 f8e4 	bl	800ab30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009968:	e00e      	b.n	8009988 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009970:	d10a      	bne.n	8009988 <vTaskStartScheduler+0xac>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	60fb      	str	r3, [r7, #12]
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <vTaskStartScheduler+0xaa>
}
 8009988:	bf00      	nop
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	0801a22c 	.word	0x0801a22c
 8009994:	0800a00d 	.word	0x0800a00d
 8009998:	20005444 	.word	0x20005444
 800999c:	20005440 	.word	0x20005440
 80099a0:	2000542c 	.word	0x2000542c
 80099a4:	20005424 	.word	0x20005424

080099a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099ac:	4b04      	ldr	r3, [pc, #16]	; (80099c0 <vTaskSuspendAll+0x18>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	4a03      	ldr	r2, [pc, #12]	; (80099c0 <vTaskSuspendAll+0x18>)
 80099b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80099b6:	bf00      	nop
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	20005448 	.word	0x20005448

080099c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099ce:	2300      	movs	r3, #0
 80099d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099d2:	4b42      	ldr	r3, [pc, #264]	; (8009adc <xTaskResumeAll+0x118>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10a      	bne.n	80099f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	603b      	str	r3, [r7, #0]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099f0:	f001 f940 	bl	800ac74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099f4:	4b39      	ldr	r3, [pc, #228]	; (8009adc <xTaskResumeAll+0x118>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	4a38      	ldr	r2, [pc, #224]	; (8009adc <xTaskResumeAll+0x118>)
 80099fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099fe:	4b37      	ldr	r3, [pc, #220]	; (8009adc <xTaskResumeAll+0x118>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d162      	bne.n	8009acc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a06:	4b36      	ldr	r3, [pc, #216]	; (8009ae0 <xTaskResumeAll+0x11c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d05e      	beq.n	8009acc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a0e:	e02f      	b.n	8009a70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a10:	4b34      	ldr	r3, [pc, #208]	; (8009ae4 <xTaskResumeAll+0x120>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3318      	adds	r3, #24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7ff f871 	bl	8008b04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3304      	adds	r3, #4
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff f86c 	bl	8008b04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a30:	4b2d      	ldr	r3, [pc, #180]	; (8009ae8 <xTaskResumeAll+0x124>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d903      	bls.n	8009a40 <xTaskResumeAll+0x7c>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	4a2a      	ldr	r2, [pc, #168]	; (8009ae8 <xTaskResumeAll+0x124>)
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4a27      	ldr	r2, [pc, #156]	; (8009aec <xTaskResumeAll+0x128>)
 8009a4e:	441a      	add	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f7fe fff7 	bl	8008a4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a60:	4b23      	ldr	r3, [pc, #140]	; (8009af0 <xTaskResumeAll+0x12c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d302      	bcc.n	8009a70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a6a:	4b22      	ldr	r3, [pc, #136]	; (8009af4 <xTaskResumeAll+0x130>)
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a70:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <xTaskResumeAll+0x120>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1cb      	bne.n	8009a10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a7e:	f000 fb7b 	bl	800a178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a82:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <xTaskResumeAll+0x134>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d010      	beq.n	8009ab0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a8e:	f000 f847 	bl	8009b20 <xTaskIncrementTick>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009a98:	4b16      	ldr	r3, [pc, #88]	; (8009af4 <xTaskResumeAll+0x130>)
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1f1      	bne.n	8009a8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009aaa:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <xTaskResumeAll+0x134>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ab0:	4b10      	ldr	r3, [pc, #64]	; (8009af4 <xTaskResumeAll+0x130>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d009      	beq.n	8009acc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009abc:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <xTaskResumeAll+0x138>)
 8009abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009acc:	f001 f902 	bl	800acd4 <vPortExitCritical>

	return xAlreadyYielded;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20005448 	.word	0x20005448
 8009ae0:	20005420 	.word	0x20005420
 8009ae4:	200053e0 	.word	0x200053e0
 8009ae8:	20005428 	.word	0x20005428
 8009aec:	20004f50 	.word	0x20004f50
 8009af0:	20004f4c 	.word	0x20004f4c
 8009af4:	20005434 	.word	0x20005434
 8009af8:	20005430 	.word	0x20005430
 8009afc:	e000ed04 	.word	0xe000ed04

08009b00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b06:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <xTaskGetTickCount+0x1c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b0c:	687b      	ldr	r3, [r7, #4]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	20005424 	.word	0x20005424

08009b20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b2a:	4b4f      	ldr	r3, [pc, #316]	; (8009c68 <xTaskIncrementTick+0x148>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f040 808f 	bne.w	8009c52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b34:	4b4d      	ldr	r3, [pc, #308]	; (8009c6c <xTaskIncrementTick+0x14c>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b3c:	4a4b      	ldr	r2, [pc, #300]	; (8009c6c <xTaskIncrementTick+0x14c>)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d120      	bne.n	8009b8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b48:	4b49      	ldr	r3, [pc, #292]	; (8009c70 <xTaskIncrementTick+0x150>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	603b      	str	r3, [r7, #0]
}
 8009b64:	bf00      	nop
 8009b66:	e7fe      	b.n	8009b66 <xTaskIncrementTick+0x46>
 8009b68:	4b41      	ldr	r3, [pc, #260]	; (8009c70 <xTaskIncrementTick+0x150>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	4b41      	ldr	r3, [pc, #260]	; (8009c74 <xTaskIncrementTick+0x154>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a3f      	ldr	r2, [pc, #252]	; (8009c70 <xTaskIncrementTick+0x150>)
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	4a3f      	ldr	r2, [pc, #252]	; (8009c74 <xTaskIncrementTick+0x154>)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	4b3e      	ldr	r3, [pc, #248]	; (8009c78 <xTaskIncrementTick+0x158>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3301      	adds	r3, #1
 8009b82:	4a3d      	ldr	r2, [pc, #244]	; (8009c78 <xTaskIncrementTick+0x158>)
 8009b84:	6013      	str	r3, [r2, #0]
 8009b86:	f000 faf7 	bl	800a178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b8a:	4b3c      	ldr	r3, [pc, #240]	; (8009c7c <xTaskIncrementTick+0x15c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d349      	bcc.n	8009c28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b94:	4b36      	ldr	r3, [pc, #216]	; (8009c70 <xTaskIncrementTick+0x150>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d104      	bne.n	8009ba8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b9e:	4b37      	ldr	r3, [pc, #220]	; (8009c7c <xTaskIncrementTick+0x15c>)
 8009ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ba4:	601a      	str	r2, [r3, #0]
					break;
 8009ba6:	e03f      	b.n	8009c28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba8:	4b31      	ldr	r3, [pc, #196]	; (8009c70 <xTaskIncrementTick+0x150>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d203      	bcs.n	8009bc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bc0:	4a2e      	ldr	r2, [pc, #184]	; (8009c7c <xTaskIncrementTick+0x15c>)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bc6:	e02f      	b.n	8009c28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe ff99 	bl	8008b04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	3318      	adds	r3, #24
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe ff90 	bl	8008b04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be8:	4b25      	ldr	r3, [pc, #148]	; (8009c80 <xTaskIncrementTick+0x160>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d903      	bls.n	8009bf8 <xTaskIncrementTick+0xd8>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	4a22      	ldr	r2, [pc, #136]	; (8009c80 <xTaskIncrementTick+0x160>)
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4a1f      	ldr	r2, [pc, #124]	; (8009c84 <xTaskIncrementTick+0x164>)
 8009c06:	441a      	add	r2, r3
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4610      	mov	r0, r2
 8009c10:	f7fe ff1b 	bl	8008a4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c18:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <xTaskIncrementTick+0x168>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d3b8      	bcc.n	8009b94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c22:	2301      	movs	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c26:	e7b5      	b.n	8009b94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c28:	4b17      	ldr	r3, [pc, #92]	; (8009c88 <xTaskIncrementTick+0x168>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2e:	4915      	ldr	r1, [pc, #84]	; (8009c84 <xTaskIncrementTick+0x164>)
 8009c30:	4613      	mov	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d901      	bls.n	8009c44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009c40:	2301      	movs	r3, #1
 8009c42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c44:	4b11      	ldr	r3, [pc, #68]	; (8009c8c <xTaskIncrementTick+0x16c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d007      	beq.n	8009c5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	617b      	str	r3, [r7, #20]
 8009c50:	e004      	b.n	8009c5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c52:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <xTaskIncrementTick+0x170>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3301      	adds	r3, #1
 8009c58:	4a0d      	ldr	r2, [pc, #52]	; (8009c90 <xTaskIncrementTick+0x170>)
 8009c5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c5c:	697b      	ldr	r3, [r7, #20]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20005448 	.word	0x20005448
 8009c6c:	20005424 	.word	0x20005424
 8009c70:	200053d8 	.word	0x200053d8
 8009c74:	200053dc 	.word	0x200053dc
 8009c78:	20005438 	.word	0x20005438
 8009c7c:	20005440 	.word	0x20005440
 8009c80:	20005428 	.word	0x20005428
 8009c84:	20004f50 	.word	0x20004f50
 8009c88:	20004f4c 	.word	0x20004f4c
 8009c8c:	20005434 	.word	0x20005434
 8009c90:	20005430 	.word	0x20005430

08009c94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c9a:	4b28      	ldr	r3, [pc, #160]	; (8009d3c <vTaskSwitchContext+0xa8>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d003      	beq.n	8009caa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ca2:	4b27      	ldr	r3, [pc, #156]	; (8009d40 <vTaskSwitchContext+0xac>)
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ca8:	e041      	b.n	8009d2e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009caa:	4b25      	ldr	r3, [pc, #148]	; (8009d40 <vTaskSwitchContext+0xac>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb0:	4b24      	ldr	r3, [pc, #144]	; (8009d44 <vTaskSwitchContext+0xb0>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	e010      	b.n	8009cda <vTaskSwitchContext+0x46>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <vTaskSwitchContext+0x40>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	607b      	str	r3, [r7, #4]
}
 8009cd0:	bf00      	nop
 8009cd2:	e7fe      	b.n	8009cd2 <vTaskSwitchContext+0x3e>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	60fb      	str	r3, [r7, #12]
 8009cda:	491b      	ldr	r1, [pc, #108]	; (8009d48 <vTaskSwitchContext+0xb4>)
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	440b      	add	r3, r1
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0e4      	beq.n	8009cb8 <vTaskSwitchContext+0x24>
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4a13      	ldr	r2, [pc, #76]	; (8009d48 <vTaskSwitchContext+0xb4>)
 8009cfa:	4413      	add	r3, r2
 8009cfc:	60bb      	str	r3, [r7, #8]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	605a      	str	r2, [r3, #4]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d104      	bne.n	8009d1e <vTaskSwitchContext+0x8a>
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	685a      	ldr	r2, [r3, #4]
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	605a      	str	r2, [r3, #4]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	4a09      	ldr	r2, [pc, #36]	; (8009d4c <vTaskSwitchContext+0xb8>)
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	4a06      	ldr	r2, [pc, #24]	; (8009d44 <vTaskSwitchContext+0xb0>)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6013      	str	r3, [r2, #0]
}
 8009d2e:	bf00      	nop
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	20005448 	.word	0x20005448
 8009d40:	20005434 	.word	0x20005434
 8009d44:	20005428 	.word	0x20005428
 8009d48:	20004f50 	.word	0x20004f50
 8009d4c:	20004f4c 	.word	0x20004f4c

08009d50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10a      	bne.n	8009d76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	60fb      	str	r3, [r7, #12]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d76:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <vTaskPlaceOnEventList+0x44>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3318      	adds	r3, #24
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7fe fe87 	bl	8008a92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d84:	2101      	movs	r1, #1
 8009d86:	6838      	ldr	r0, [r7, #0]
 8009d88:	f000 faa2 	bl	800a2d0 <prvAddCurrentTaskToDelayedList>
}
 8009d8c:	bf00      	nop
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	20004f4c 	.word	0x20004f4c

08009d98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	617b      	str	r3, [r7, #20]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <vTaskPlaceOnEventListRestricted+0x54>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3318      	adds	r3, #24
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7fe fe3e 	bl	8008a4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	68b8      	ldr	r0, [r7, #8]
 8009dde:	f000 fa77 	bl	800a2d0 <prvAddCurrentTaskToDelayedList>
	}
 8009de2:	bf00      	nop
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20004f4c 	.word	0x20004f4c

08009df0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	60fb      	str	r3, [r7, #12]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	3318      	adds	r3, #24
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fe fe6f 	bl	8008b04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e26:	4b1e      	ldr	r3, [pc, #120]	; (8009ea0 <xTaskRemoveFromEventList+0xb0>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d11d      	bne.n	8009e6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	3304      	adds	r3, #4
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fe66 	bl	8008b04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3c:	4b19      	ldr	r3, [pc, #100]	; (8009ea4 <xTaskRemoveFromEventList+0xb4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d903      	bls.n	8009e4c <xTaskRemoveFromEventList+0x5c>
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	4a16      	ldr	r2, [pc, #88]	; (8009ea4 <xTaskRemoveFromEventList+0xb4>)
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e50:	4613      	mov	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4413      	add	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4a13      	ldr	r2, [pc, #76]	; (8009ea8 <xTaskRemoveFromEventList+0xb8>)
 8009e5a:	441a      	add	r2, r3
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4619      	mov	r1, r3
 8009e62:	4610      	mov	r0, r2
 8009e64:	f7fe fdf1 	bl	8008a4a <vListInsertEnd>
 8009e68:	e005      	b.n	8009e76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	3318      	adds	r3, #24
 8009e6e:	4619      	mov	r1, r3
 8009e70:	480e      	ldr	r0, [pc, #56]	; (8009eac <xTaskRemoveFromEventList+0xbc>)
 8009e72:	f7fe fdea 	bl	8008a4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7a:	4b0d      	ldr	r3, [pc, #52]	; (8009eb0 <xTaskRemoveFromEventList+0xc0>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d905      	bls.n	8009e90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e84:	2301      	movs	r3, #1
 8009e86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e88:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <xTaskRemoveFromEventList+0xc4>)
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	e001      	b.n	8009e94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e94:	697b      	ldr	r3, [r7, #20]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20005448 	.word	0x20005448
 8009ea4:	20005428 	.word	0x20005428
 8009ea8:	20004f50 	.word	0x20004f50
 8009eac:	200053e0 	.word	0x200053e0
 8009eb0:	20004f4c 	.word	0x20004f4c
 8009eb4:	20005434 	.word	0x20005434

08009eb8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10a      	bne.n	8009edc <vTaskSetTimeOutState+0x24>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	60fb      	str	r3, [r7, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009edc:	f000 feca 	bl	800ac74 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ee0:	4b06      	ldr	r3, [pc, #24]	; (8009efc <vTaskSetTimeOutState+0x44>)
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009ee8:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <vTaskSetTimeOutState+0x48>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009ef0:	f000 fef0 	bl	800acd4 <vPortExitCritical>
}
 8009ef4:	bf00      	nop
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	20005438 	.word	0x20005438
 8009f00:	20005424 	.word	0x20005424

08009f04 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f0c:	4b06      	ldr	r3, [pc, #24]	; (8009f28 <vTaskInternalSetTimeOutState+0x24>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f14:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <vTaskInternalSetTimeOutState+0x28>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	605a      	str	r2, [r3, #4]
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	20005438 	.word	0x20005438
 8009f2c:	20005424 	.word	0x20005424

08009f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10a      	bne.n	8009f56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	613b      	str	r3, [r7, #16]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60fb      	str	r3, [r7, #12]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f72:	f000 fe7f 	bl	800ac74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f76:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <xTaskCheckForTimeOut+0xbc>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f8e:	d102      	bne.n	8009f96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	61fb      	str	r3, [r7, #28]
 8009f94:	e023      	b.n	8009fde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <xTaskCheckForTimeOut+0xc0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d007      	beq.n	8009fb2 <xTaskCheckForTimeOut+0x82>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	69ba      	ldr	r2, [r7, #24]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d302      	bcc.n	8009fb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fac:	2301      	movs	r3, #1
 8009fae:	61fb      	str	r3, [r7, #28]
 8009fb0:	e015      	b.n	8009fde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d20b      	bcs.n	8009fd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	1ad2      	subs	r2, r2, r3
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff ff9b 	bl	8009f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	61fb      	str	r3, [r7, #28]
 8009fd2:	e004      	b.n	8009fde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009fde:	f000 fe79 	bl	800acd4 <vPortExitCritical>

	return xReturn;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3720      	adds	r7, #32
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20005424 	.word	0x20005424
 8009ff0:	20005438 	.word	0x20005438

08009ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ff8:	4b03      	ldr	r3, [pc, #12]	; (800a008 <vTaskMissedYield+0x14>)
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]
}
 8009ffe:	bf00      	nop
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	20005434 	.word	0x20005434

0800a00c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a014:	f000 f852 	bl	800a0bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a018:	4b06      	ldr	r3, [pc, #24]	; (800a034 <prvIdleTask+0x28>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d9f9      	bls.n	800a014 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a020:	4b05      	ldr	r3, [pc, #20]	; (800a038 <prvIdleTask+0x2c>)
 800a022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a030:	e7f0      	b.n	800a014 <prvIdleTask+0x8>
 800a032:	bf00      	nop
 800a034:	20004f50 	.word	0x20004f50
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a042:	2300      	movs	r3, #0
 800a044:	607b      	str	r3, [r7, #4]
 800a046:	e00c      	b.n	800a062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	4613      	mov	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4a12      	ldr	r2, [pc, #72]	; (800a09c <prvInitialiseTaskLists+0x60>)
 800a054:	4413      	add	r3, r2
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe fcca 	bl	80089f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	3301      	adds	r3, #1
 800a060:	607b      	str	r3, [r7, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2b37      	cmp	r3, #55	; 0x37
 800a066:	d9ef      	bls.n	800a048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a068:	480d      	ldr	r0, [pc, #52]	; (800a0a0 <prvInitialiseTaskLists+0x64>)
 800a06a:	f7fe fcc1 	bl	80089f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a06e:	480d      	ldr	r0, [pc, #52]	; (800a0a4 <prvInitialiseTaskLists+0x68>)
 800a070:	f7fe fcbe 	bl	80089f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a074:	480c      	ldr	r0, [pc, #48]	; (800a0a8 <prvInitialiseTaskLists+0x6c>)
 800a076:	f7fe fcbb 	bl	80089f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a07a:	480c      	ldr	r0, [pc, #48]	; (800a0ac <prvInitialiseTaskLists+0x70>)
 800a07c:	f7fe fcb8 	bl	80089f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a080:	480b      	ldr	r0, [pc, #44]	; (800a0b0 <prvInitialiseTaskLists+0x74>)
 800a082:	f7fe fcb5 	bl	80089f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <prvInitialiseTaskLists+0x78>)
 800a088:	4a05      	ldr	r2, [pc, #20]	; (800a0a0 <prvInitialiseTaskLists+0x64>)
 800a08a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a08c:	4b0a      	ldr	r3, [pc, #40]	; (800a0b8 <prvInitialiseTaskLists+0x7c>)
 800a08e:	4a05      	ldr	r2, [pc, #20]	; (800a0a4 <prvInitialiseTaskLists+0x68>)
 800a090:	601a      	str	r2, [r3, #0]
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	20004f50 	.word	0x20004f50
 800a0a0:	200053b0 	.word	0x200053b0
 800a0a4:	200053c4 	.word	0x200053c4
 800a0a8:	200053e0 	.word	0x200053e0
 800a0ac:	200053f4 	.word	0x200053f4
 800a0b0:	2000540c 	.word	0x2000540c
 800a0b4:	200053d8 	.word	0x200053d8
 800a0b8:	200053dc 	.word	0x200053dc

0800a0bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0c2:	e019      	b.n	800a0f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0c4:	f000 fdd6 	bl	800ac74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c8:	4b10      	ldr	r3, [pc, #64]	; (800a10c <prvCheckTasksWaitingTermination+0x50>)
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fe fd15 	bl	8008b04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0da:	4b0d      	ldr	r3, [pc, #52]	; (800a110 <prvCheckTasksWaitingTermination+0x54>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	4a0b      	ldr	r2, [pc, #44]	; (800a110 <prvCheckTasksWaitingTermination+0x54>)
 800a0e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0e4:	4b0b      	ldr	r3, [pc, #44]	; (800a114 <prvCheckTasksWaitingTermination+0x58>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	4a0a      	ldr	r2, [pc, #40]	; (800a114 <prvCheckTasksWaitingTermination+0x58>)
 800a0ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0ee:	f000 fdf1 	bl	800acd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f810 	bl	800a118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0f8:	4b06      	ldr	r3, [pc, #24]	; (800a114 <prvCheckTasksWaitingTermination+0x58>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e1      	bne.n	800a0c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a100:	bf00      	nop
 800a102:	bf00      	nop
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	200053f4 	.word	0x200053f4
 800a110:	20005420 	.word	0x20005420
 800a114:	20005408 	.word	0x20005408

0800a118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a126:	2b00      	cmp	r3, #0
 800a128:	d108      	bne.n	800a13c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 ff8e 	bl	800b050 <vPortFree>
				vPortFree( pxTCB );
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 ff8b 	bl	800b050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a13a:	e018      	b.n	800a16e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a142:	2b01      	cmp	r3, #1
 800a144:	d103      	bne.n	800a14e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 ff82 	bl	800b050 <vPortFree>
	}
 800a14c:	e00f      	b.n	800a16e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a154:	2b02      	cmp	r3, #2
 800a156:	d00a      	beq.n	800a16e <prvDeleteTCB+0x56>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	60fb      	str	r3, [r7, #12]
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <prvDeleteTCB+0x54>
	}
 800a16e:	bf00      	nop
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a17e:	4b0c      	ldr	r3, [pc, #48]	; (800a1b0 <prvResetNextTaskUnblockTime+0x38>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d104      	bne.n	800a192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a188:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <prvResetNextTaskUnblockTime+0x3c>)
 800a18a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a18e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a190:	e008      	b.n	800a1a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a192:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <prvResetNextTaskUnblockTime+0x38>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4a04      	ldr	r2, [pc, #16]	; (800a1b4 <prvResetNextTaskUnblockTime+0x3c>)
 800a1a2:	6013      	str	r3, [r2, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	200053d8 	.word	0x200053d8
 800a1b4:	20005440 	.word	0x20005440

0800a1b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1be:	4b0b      	ldr	r3, [pc, #44]	; (800a1ec <xTaskGetSchedulerState+0x34>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d102      	bne.n	800a1cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	607b      	str	r3, [r7, #4]
 800a1ca:	e008      	b.n	800a1de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1cc:	4b08      	ldr	r3, [pc, #32]	; (800a1f0 <xTaskGetSchedulerState+0x38>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d102      	bne.n	800a1da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	607b      	str	r3, [r7, #4]
 800a1d8:	e001      	b.n	800a1de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1de:	687b      	ldr	r3, [r7, #4]
	}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	2000542c 	.word	0x2000542c
 800a1f0:	20005448 	.word	0x20005448

0800a1f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a200:	2300      	movs	r3, #0
 800a202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d056      	beq.n	800a2b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a20a:	4b2e      	ldr	r3, [pc, #184]	; (800a2c4 <xTaskPriorityDisinherit+0xd0>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	429a      	cmp	r2, r3
 800a212:	d00a      	beq.n	800a22a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	60fb      	str	r3, [r7, #12]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	60bb      	str	r3, [r7, #8]
}
 800a244:	bf00      	nop
 800a246:	e7fe      	b.n	800a246 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a24c:	1e5a      	subs	r2, r3, #1
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d02c      	beq.n	800a2b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a262:	2b00      	cmp	r3, #0
 800a264:	d128      	bne.n	800a2b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	3304      	adds	r3, #4
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fe fc4a 	bl	8008b04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a288:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <xTaskPriorityDisinherit+0xd4>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d903      	bls.n	800a298 <xTaskPriorityDisinherit+0xa4>
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a294:	4a0c      	ldr	r2, [pc, #48]	; (800a2c8 <xTaskPriorityDisinherit+0xd4>)
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29c:	4613      	mov	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4a09      	ldr	r2, [pc, #36]	; (800a2cc <xTaskPriorityDisinherit+0xd8>)
 800a2a6:	441a      	add	r2, r3
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	f7fe fbcb 	bl	8008a4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2b8:	697b      	ldr	r3, [r7, #20]
	}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20004f4c 	.word	0x20004f4c
 800a2c8:	20005428 	.word	0x20005428
 800a2cc:	20004f50 	.word	0x20004f50

0800a2d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2da:	4b21      	ldr	r3, [pc, #132]	; (800a360 <prvAddCurrentTaskToDelayedList+0x90>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2e0:	4b20      	ldr	r3, [pc, #128]	; (800a364 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fe fc0c 	bl	8008b04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2f2:	d10a      	bne.n	800a30a <prvAddCurrentTaskToDelayedList+0x3a>
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2fa:	4b1a      	ldr	r3, [pc, #104]	; (800a364 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4619      	mov	r1, r3
 800a302:	4819      	ldr	r0, [pc, #100]	; (800a368 <prvAddCurrentTaskToDelayedList+0x98>)
 800a304:	f7fe fba1 	bl	8008a4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a308:	e026      	b.n	800a358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4413      	add	r3, r2
 800a310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <prvAddCurrentTaskToDelayedList+0x94>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d209      	bcs.n	800a336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a322:	4b12      	ldr	r3, [pc, #72]	; (800a36c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <prvAddCurrentTaskToDelayedList+0x94>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3304      	adds	r3, #4
 800a32c:	4619      	mov	r1, r3
 800a32e:	4610      	mov	r0, r2
 800a330:	f7fe fbaf 	bl	8008a92 <vListInsert>
}
 800a334:	e010      	b.n	800a358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a336:	4b0e      	ldr	r3, [pc, #56]	; (800a370 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	4b0a      	ldr	r3, [pc, #40]	; (800a364 <prvAddCurrentTaskToDelayedList+0x94>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3304      	adds	r3, #4
 800a340:	4619      	mov	r1, r3
 800a342:	4610      	mov	r0, r2
 800a344:	f7fe fba5 	bl	8008a92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a348:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d202      	bcs.n	800a358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a352:	4a08      	ldr	r2, [pc, #32]	; (800a374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	6013      	str	r3, [r2, #0]
}
 800a358:	bf00      	nop
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	20005424 	.word	0x20005424
 800a364:	20004f4c 	.word	0x20004f4c
 800a368:	2000540c 	.word	0x2000540c
 800a36c:	200053dc 	.word	0x200053dc
 800a370:	200053d8 	.word	0x200053d8
 800a374:	20005440 	.word	0x20005440

0800a378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b08a      	sub	sp, #40	; 0x28
 800a37c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a37e:	2300      	movs	r3, #0
 800a380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a382:	f000 fb07 	bl	800a994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a386:	4b1c      	ldr	r3, [pc, #112]	; (800a3f8 <xTimerCreateTimerTask+0x80>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d021      	beq.n	800a3d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a396:	1d3a      	adds	r2, r7, #4
 800a398:	f107 0108 	add.w	r1, r7, #8
 800a39c:	f107 030c 	add.w	r3, r7, #12
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fe fb0b 	bl	80089bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a3a6:	6879      	ldr	r1, [r7, #4]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	9202      	str	r2, [sp, #8]
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	460a      	mov	r2, r1
 800a3b8:	4910      	ldr	r1, [pc, #64]	; (800a3fc <xTimerCreateTimerTask+0x84>)
 800a3ba:	4811      	ldr	r0, [pc, #68]	; (800a400 <xTimerCreateTimerTask+0x88>)
 800a3bc:	f7ff f8b8 	bl	8009530 <xTaskCreateStatic>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	4a10      	ldr	r2, [pc, #64]	; (800a404 <xTimerCreateTimerTask+0x8c>)
 800a3c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	; (800a404 <xTimerCreateTimerTask+0x8c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10a      	bne.n	800a3ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	613b      	str	r3, [r7, #16]
}
 800a3ea:	bf00      	nop
 800a3ec:	e7fe      	b.n	800a3ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a3ee:	697b      	ldr	r3, [r7, #20]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	2000547c 	.word	0x2000547c
 800a3fc:	0801a234 	.word	0x0801a234
 800a400:	0800a53d 	.word	0x0800a53d
 800a404:	20005480 	.word	0x20005480

0800a408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08a      	sub	sp, #40	; 0x28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a416:	2300      	movs	r3, #0
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10a      	bne.n	800a436 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	623b      	str	r3, [r7, #32]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a436:	4b1a      	ldr	r3, [pc, #104]	; (800a4a0 <xTimerGenericCommand+0x98>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d02a      	beq.n	800a494 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	dc18      	bgt.n	800a482 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a450:	f7ff feb2 	bl	800a1b8 <xTaskGetSchedulerState>
 800a454:	4603      	mov	r3, r0
 800a456:	2b02      	cmp	r3, #2
 800a458:	d109      	bne.n	800a46e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a45a:	4b11      	ldr	r3, [pc, #68]	; (800a4a0 <xTimerGenericCommand+0x98>)
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	f107 0110 	add.w	r1, r7, #16
 800a462:	2300      	movs	r3, #0
 800a464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a466:	f7fe fc7b 	bl	8008d60 <xQueueGenericSend>
 800a46a:	6278      	str	r0, [r7, #36]	; 0x24
 800a46c:	e012      	b.n	800a494 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a46e:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <xTimerGenericCommand+0x98>)
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	f107 0110 	add.w	r1, r7, #16
 800a476:	2300      	movs	r3, #0
 800a478:	2200      	movs	r2, #0
 800a47a:	f7fe fc71 	bl	8008d60 <xQueueGenericSend>
 800a47e:	6278      	str	r0, [r7, #36]	; 0x24
 800a480:	e008      	b.n	800a494 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a482:	4b07      	ldr	r3, [pc, #28]	; (800a4a0 <xTimerGenericCommand+0x98>)
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f107 0110 	add.w	r1, r7, #16
 800a48a:	2300      	movs	r3, #0
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	f7fe fd65 	bl	8008f5c <xQueueGenericSendFromISR>
 800a492:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a496:	4618      	mov	r0, r3
 800a498:	3728      	adds	r7, #40	; 0x28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	2000547c 	.word	0x2000547c

0800a4a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af02      	add	r7, sp, #8
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ae:	4b22      	ldr	r3, [pc, #136]	; (800a538 <prvProcessExpiredTimer+0x94>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fb21 	bl	8008b04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d022      	beq.n	800a516 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	699a      	ldr	r2, [r3, #24]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	18d1      	adds	r1, r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	6978      	ldr	r0, [r7, #20]
 800a4de:	f000 f8d1 	bl	800a684 <prvInsertTimerInActiveList>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d01f      	beq.n	800a528 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	6978      	ldr	r0, [r7, #20]
 800a4f4:	f7ff ff88 	bl	800a408 <xTimerGenericCommand>
 800a4f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d113      	bne.n	800a528 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	60fb      	str	r3, [r7, #12]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a51c:	f023 0301 	bic.w	r3, r3, #1
 800a520:	b2da      	uxtb	r2, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
 800a52c:	6978      	ldr	r0, [r7, #20]
 800a52e:	4798      	blx	r3
}
 800a530:	bf00      	nop
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20005474 	.word	0x20005474

0800a53c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a544:	f107 0308 	add.w	r3, r7, #8
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 f857 	bl	800a5fc <prvGetNextExpireTime>
 800a54e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	4619      	mov	r1, r3
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f803 	bl	800a560 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a55a:	f000 f8d5 	bl	800a708 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a55e:	e7f1      	b.n	800a544 <prvTimerTask+0x8>

0800a560 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a56a:	f7ff fa1d 	bl	80099a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	4618      	mov	r0, r3
 800a574:	f000 f866 	bl	800a644 <prvSampleTimeNow>
 800a578:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d130      	bne.n	800a5e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10a      	bne.n	800a59c <prvProcessTimerOrBlockTask+0x3c>
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d806      	bhi.n	800a59c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a58e:	f7ff fa19 	bl	80099c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a592:	68f9      	ldr	r1, [r7, #12]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff ff85 	bl	800a4a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a59a:	e024      	b.n	800a5e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d008      	beq.n	800a5b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5a2:	4b13      	ldr	r3, [pc, #76]	; (800a5f0 <prvProcessTimerOrBlockTask+0x90>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <prvProcessTimerOrBlockTask+0x50>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e000      	b.n	800a5b2 <prvProcessTimerOrBlockTask+0x52>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a5b4:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <prvProcessTimerOrBlockTask+0x94>)
 800a5b6:	6818      	ldr	r0, [r3, #0]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	f7fe ff81 	bl	80094c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5c6:	f7ff f9fd 	bl	80099c4 <xTaskResumeAll>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10a      	bne.n	800a5e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5d0:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <prvProcessTimerOrBlockTask+0x98>)
 800a5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
}
 800a5e0:	e001      	b.n	800a5e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5e2:	f7ff f9ef 	bl	80099c4 <xTaskResumeAll>
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20005478 	.word	0x20005478
 800a5f4:	2000547c 	.word	0x2000547c
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a604:	4b0e      	ldr	r3, [pc, #56]	; (800a640 <prvGetNextExpireTime+0x44>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <prvGetNextExpireTime+0x16>
 800a60e:	2201      	movs	r2, #1
 800a610:	e000      	b.n	800a614 <prvGetNextExpireTime+0x18>
 800a612:	2200      	movs	r2, #0
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d105      	bne.n	800a62c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a620:	4b07      	ldr	r3, [pc, #28]	; (800a640 <prvGetNextExpireTime+0x44>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	e001      	b.n	800a630 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a630:	68fb      	ldr	r3, [r7, #12]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	20005474 	.word	0x20005474

0800a644 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a64c:	f7ff fa58 	bl	8009b00 <xTaskGetTickCount>
 800a650:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a652:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <prvSampleTimeNow+0x3c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d205      	bcs.n	800a668 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a65c:	f000 f936 	bl	800a8cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	e002      	b.n	800a66e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a66e:	4a04      	ldr	r2, [pc, #16]	; (800a680 <prvSampleTimeNow+0x3c>)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a674:	68fb      	ldr	r3, [r7, #12]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20005484 	.word	0x20005484

0800a684 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
 800a690:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a692:	2300      	movs	r3, #0
 800a694:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d812      	bhi.n	800a6d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	1ad2      	subs	r2, r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d302      	bcc.n	800a6be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	e01b      	b.n	800a6f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6be:	4b10      	ldr	r3, [pc, #64]	; (800a700 <prvInsertTimerInActiveList+0x7c>)
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f7fe f9e2 	bl	8008a92 <vListInsert>
 800a6ce:	e012      	b.n	800a6f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d206      	bcs.n	800a6e6 <prvInsertTimerInActiveList+0x62>
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d302      	bcc.n	800a6e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	e007      	b.n	800a6f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6e6:	4b07      	ldr	r3, [pc, #28]	; (800a704 <prvInsertTimerInActiveList+0x80>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	f7fe f9ce 	bl	8008a92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6f6:	697b      	ldr	r3, [r7, #20]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20005478 	.word	0x20005478
 800a704:	20005474 	.word	0x20005474

0800a708 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08e      	sub	sp, #56	; 0x38
 800a70c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a70e:	e0ca      	b.n	800a8a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	da18      	bge.n	800a748 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a716:	1d3b      	adds	r3, r7, #4
 800a718:	3304      	adds	r3, #4
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10a      	bne.n	800a738 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	61fb      	str	r3, [r7, #28]
}
 800a734:	bf00      	nop
 800a736:	e7fe      	b.n	800a736 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a73e:	6850      	ldr	r0, [r2, #4]
 800a740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a742:	6892      	ldr	r2, [r2, #8]
 800a744:	4611      	mov	r1, r2
 800a746:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f2c0 80aa 	blt.w	800a8a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d004      	beq.n	800a766 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	3304      	adds	r3, #4
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe f9cf 	bl	8008b04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a766:	463b      	mov	r3, r7
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff ff6b 	bl	800a644 <prvSampleTimeNow>
 800a76e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b09      	cmp	r3, #9
 800a774:	f200 8097 	bhi.w	800a8a6 <prvProcessReceivedCommands+0x19e>
 800a778:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <prvProcessReceivedCommands+0x78>)
 800a77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77e:	bf00      	nop
 800a780:	0800a7a9 	.word	0x0800a7a9
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7a9 	.word	0x0800a7a9
 800a78c:	0800a81d 	.word	0x0800a81d
 800a790:	0800a831 	.word	0x0800a831
 800a794:	0800a87b 	.word	0x0800a87b
 800a798:	0800a7a9 	.word	0x0800a7a9
 800a79c:	0800a7a9 	.word	0x0800a7a9
 800a7a0:	0800a81d 	.word	0x0800a81d
 800a7a4:	0800a831 	.word	0x0800a831
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ae:	f043 0301 	orr.w	r3, r3, #1
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	18d1      	adds	r1, r2, r3
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7c8:	f7ff ff5c 	bl	800a684 <prvInsertTimerInActiveList>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d069      	beq.n	800a8a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d05e      	beq.n	800a8a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	441a      	add	r2, r3
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7fa:	f7ff fe05 	bl	800a408 <xTimerGenericCommand>
 800a7fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d14f      	bne.n	800a8a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	61bb      	str	r3, [r7, #24]
}
 800a818:	bf00      	nop
 800a81a:	e7fe      	b.n	800a81a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a822:	f023 0301 	bic.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a82e:	e03a      	b.n	800a8a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a836:	f043 0301 	orr.w	r3, r3, #1
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a846:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	617b      	str	r3, [r7, #20]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a868:	699a      	ldr	r2, [r3, #24]
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	18d1      	adds	r1, r2, r3
 800a86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a874:	f7ff ff06 	bl	800a684 <prvInsertTimerInActiveList>
					break;
 800a878:	e015      	b.n	800a8a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d103      	bne.n	800a890 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a88a:	f000 fbe1 	bl	800b050 <vPortFree>
 800a88e:	e00a      	b.n	800a8a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a896:	f023 0301 	bic.w	r3, r3, #1
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8a2:	e000      	b.n	800a8a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a8a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8a6:	4b08      	ldr	r3, [pc, #32]	; (800a8c8 <prvProcessReceivedCommands+0x1c0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	1d39      	adds	r1, r7, #4
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe fbf0 	bl	8009094 <xQueueReceive>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f47f af2a 	bne.w	800a710 <prvProcessReceivedCommands+0x8>
	}
}
 800a8bc:	bf00      	nop
 800a8be:	bf00      	nop
 800a8c0:	3730      	adds	r7, #48	; 0x30
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	2000547c 	.word	0x2000547c

0800a8cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b088      	sub	sp, #32
 800a8d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8d2:	e048      	b.n	800a966 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8d4:	4b2d      	ldr	r3, [pc, #180]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8de:	4b2b      	ldr	r3, [pc, #172]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fe f909 	bl	8008b04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b00      	cmp	r3, #0
 800a906:	d02e      	beq.n	800a966 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4413      	add	r3, r2
 800a910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	429a      	cmp	r2, r3
 800a918:	d90e      	bls.n	800a938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a926:	4b19      	ldr	r3, [pc, #100]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3304      	adds	r3, #4
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f7fe f8ae 	bl	8008a92 <vListInsert>
 800a936:	e016      	b.n	800a966 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a938:	2300      	movs	r3, #0
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	2300      	movs	r3, #0
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	2100      	movs	r1, #0
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f7ff fd60 	bl	800a408 <xTimerGenericCommand>
 800a948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	603b      	str	r3, [r7, #0]
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1b1      	bne.n	800a8d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a970:	4b06      	ldr	r3, [pc, #24]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a976:	4b06      	ldr	r3, [pc, #24]	; (800a990 <prvSwitchTimerLists+0xc4>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a04      	ldr	r2, [pc, #16]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a97c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a97e:	4a04      	ldr	r2, [pc, #16]	; (800a990 <prvSwitchTimerLists+0xc4>)
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	6013      	str	r3, [r2, #0]
}
 800a984:	bf00      	nop
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	20005474 	.word	0x20005474
 800a990:	20005478 	.word	0x20005478

0800a994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a99a:	f000 f96b 	bl	800ac74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a99e:	4b15      	ldr	r3, [pc, #84]	; (800a9f4 <prvCheckForValidListAndQueue+0x60>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d120      	bne.n	800a9e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9a6:	4814      	ldr	r0, [pc, #80]	; (800a9f8 <prvCheckForValidListAndQueue+0x64>)
 800a9a8:	f7fe f822 	bl	80089f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9ac:	4813      	ldr	r0, [pc, #76]	; (800a9fc <prvCheckForValidListAndQueue+0x68>)
 800a9ae:	f7fe f81f 	bl	80089f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9b2:	4b13      	ldr	r3, [pc, #76]	; (800aa00 <prvCheckForValidListAndQueue+0x6c>)
 800a9b4:	4a10      	ldr	r2, [pc, #64]	; (800a9f8 <prvCheckForValidListAndQueue+0x64>)
 800a9b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9b8:	4b12      	ldr	r3, [pc, #72]	; (800aa04 <prvCheckForValidListAndQueue+0x70>)
 800a9ba:	4a10      	ldr	r2, [pc, #64]	; (800a9fc <prvCheckForValidListAndQueue+0x68>)
 800a9bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9be:	2300      	movs	r3, #0
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	4b11      	ldr	r3, [pc, #68]	; (800aa08 <prvCheckForValidListAndQueue+0x74>)
 800a9c4:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <prvCheckForValidListAndQueue+0x78>)
 800a9c6:	2110      	movs	r1, #16
 800a9c8:	200a      	movs	r0, #10
 800a9ca:	f7fe f92d 	bl	8008c28 <xQueueGenericCreateStatic>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4a08      	ldr	r2, [pc, #32]	; (800a9f4 <prvCheckForValidListAndQueue+0x60>)
 800a9d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9d4:	4b07      	ldr	r3, [pc, #28]	; (800a9f4 <prvCheckForValidListAndQueue+0x60>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d005      	beq.n	800a9e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9dc:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <prvCheckForValidListAndQueue+0x60>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	490b      	ldr	r1, [pc, #44]	; (800aa10 <prvCheckForValidListAndQueue+0x7c>)
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fe fd46 	bl	8009474 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9e8:	f000 f974 	bl	800acd4 <vPortExitCritical>
}
 800a9ec:	bf00      	nop
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	2000547c 	.word	0x2000547c
 800a9f8:	2000544c 	.word	0x2000544c
 800a9fc:	20005460 	.word	0x20005460
 800aa00:	20005474 	.word	0x20005474
 800aa04:	20005478 	.word	0x20005478
 800aa08:	20005528 	.word	0x20005528
 800aa0c:	20005488 	.word	0x20005488
 800aa10:	0801a23c 	.word	0x0801a23c

0800aa14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3b04      	subs	r3, #4
 800aa24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3b04      	subs	r3, #4
 800aa32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f023 0201 	bic.w	r2, r3, #1
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3b04      	subs	r3, #4
 800aa42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa44:	4a0c      	ldr	r2, [pc, #48]	; (800aa78 <pxPortInitialiseStack+0x64>)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3b14      	subs	r3, #20
 800aa4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3b04      	subs	r3, #4
 800aa5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f06f 0202 	mvn.w	r2, #2
 800aa62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3b20      	subs	r3, #32
 800aa68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	0800aa7d 	.word	0x0800aa7d

0800aa7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa86:	4b12      	ldr	r3, [pc, #72]	; (800aad0 <prvTaskExitError+0x54>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa8e:	d00a      	beq.n	800aaa6 <prvTaskExitError+0x2a>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60fb      	str	r3, [r7, #12]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <prvTaskExitError+0x28>
	__asm volatile
 800aaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	60bb      	str	r3, [r7, #8]
}
 800aab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aaba:	bf00      	nop
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d0fc      	beq.n	800aabc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aac2:	bf00      	nop
 800aac4:	bf00      	nop
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	20000128 	.word	0x20000128
	...

0800aae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aae0:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <pxCurrentTCBConst2>)
 800aae2:	6819      	ldr	r1, [r3, #0]
 800aae4:	6808      	ldr	r0, [r1, #0]
 800aae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaea:	f380 8809 	msr	PSP, r0
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f04f 0000 	mov.w	r0, #0
 800aaf6:	f380 8811 	msr	BASEPRI, r0
 800aafa:	4770      	bx	lr
 800aafc:	f3af 8000 	nop.w

0800ab00 <pxCurrentTCBConst2>:
 800ab00:	20004f4c 	.word	0x20004f4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab04:	bf00      	nop
 800ab06:	bf00      	nop

0800ab08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab08:	4808      	ldr	r0, [pc, #32]	; (800ab2c <prvPortStartFirstTask+0x24>)
 800ab0a:	6800      	ldr	r0, [r0, #0]
 800ab0c:	6800      	ldr	r0, [r0, #0]
 800ab0e:	f380 8808 	msr	MSP, r0
 800ab12:	f04f 0000 	mov.w	r0, #0
 800ab16:	f380 8814 	msr	CONTROL, r0
 800ab1a:	b662      	cpsie	i
 800ab1c:	b661      	cpsie	f
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	df00      	svc	0
 800ab28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab2a:	bf00      	nop
 800ab2c:	e000ed08 	.word	0xe000ed08

0800ab30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab36:	4b46      	ldr	r3, [pc, #280]	; (800ac50 <xPortStartScheduler+0x120>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a46      	ldr	r2, [pc, #280]	; (800ac54 <xPortStartScheduler+0x124>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d10a      	bne.n	800ab56 <xPortStartScheduler+0x26>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	613b      	str	r3, [r7, #16]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab56:	4b3e      	ldr	r3, [pc, #248]	; (800ac50 <xPortStartScheduler+0x120>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a3f      	ldr	r2, [pc, #252]	; (800ac58 <xPortStartScheduler+0x128>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d10a      	bne.n	800ab76 <xPortStartScheduler+0x46>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	60fb      	str	r3, [r7, #12]
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab76:	4b39      	ldr	r3, [pc, #228]	; (800ac5c <xPortStartScheduler+0x12c>)
 800ab78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	22ff      	movs	r2, #255	; 0xff
 800ab86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	4b31      	ldr	r3, [pc, #196]	; (800ac60 <xPortStartScheduler+0x130>)
 800ab9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab9e:	4b31      	ldr	r3, [pc, #196]	; (800ac64 <xPortStartScheduler+0x134>)
 800aba0:	2207      	movs	r2, #7
 800aba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aba4:	e009      	b.n	800abba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aba6:	4b2f      	ldr	r3, [pc, #188]	; (800ac64 <xPortStartScheduler+0x134>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3b01      	subs	r3, #1
 800abac:	4a2d      	ldr	r2, [pc, #180]	; (800ac64 <xPortStartScheduler+0x134>)
 800abae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc2:	2b80      	cmp	r3, #128	; 0x80
 800abc4:	d0ef      	beq.n	800aba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abc6:	4b27      	ldr	r3, [pc, #156]	; (800ac64 <xPortStartScheduler+0x134>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f1c3 0307 	rsb	r3, r3, #7
 800abce:	2b04      	cmp	r3, #4
 800abd0:	d00a      	beq.n	800abe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	60bb      	str	r3, [r7, #8]
}
 800abe4:	bf00      	nop
 800abe6:	e7fe      	b.n	800abe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abe8:	4b1e      	ldr	r3, [pc, #120]	; (800ac64 <xPortStartScheduler+0x134>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	4a1d      	ldr	r2, [pc, #116]	; (800ac64 <xPortStartScheduler+0x134>)
 800abf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abf2:	4b1c      	ldr	r3, [pc, #112]	; (800ac64 <xPortStartScheduler+0x134>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abfa:	4a1a      	ldr	r2, [pc, #104]	; (800ac64 <xPortStartScheduler+0x134>)
 800abfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac06:	4b18      	ldr	r3, [pc, #96]	; (800ac68 <xPortStartScheduler+0x138>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a17      	ldr	r2, [pc, #92]	; (800ac68 <xPortStartScheduler+0x138>)
 800ac0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac12:	4b15      	ldr	r3, [pc, #84]	; (800ac68 <xPortStartScheduler+0x138>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a14      	ldr	r2, [pc, #80]	; (800ac68 <xPortStartScheduler+0x138>)
 800ac18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac1e:	f000 f8dd 	bl	800addc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac22:	4b12      	ldr	r3, [pc, #72]	; (800ac6c <xPortStartScheduler+0x13c>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac28:	f000 f8fc 	bl	800ae24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac2c:	4b10      	ldr	r3, [pc, #64]	; (800ac70 <xPortStartScheduler+0x140>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a0f      	ldr	r2, [pc, #60]	; (800ac70 <xPortStartScheduler+0x140>)
 800ac32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac38:	f7ff ff66 	bl	800ab08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac3c:	f7ff f82a 	bl	8009c94 <vTaskSwitchContext>
	prvTaskExitError();
 800ac40:	f7ff ff1c 	bl	800aa7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	e000ed00 	.word	0xe000ed00
 800ac54:	410fc271 	.word	0x410fc271
 800ac58:	410fc270 	.word	0x410fc270
 800ac5c:	e000e400 	.word	0xe000e400
 800ac60:	20005578 	.word	0x20005578
 800ac64:	2000557c 	.word	0x2000557c
 800ac68:	e000ed20 	.word	0xe000ed20
 800ac6c:	20000128 	.word	0x20000128
 800ac70:	e000ef34 	.word	0xe000ef34

0800ac74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	607b      	str	r3, [r7, #4]
}
 800ac8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac8e:	4b0f      	ldr	r3, [pc, #60]	; (800accc <vPortEnterCritical+0x58>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3301      	adds	r3, #1
 800ac94:	4a0d      	ldr	r2, [pc, #52]	; (800accc <vPortEnterCritical+0x58>)
 800ac96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac98:	4b0c      	ldr	r3, [pc, #48]	; (800accc <vPortEnterCritical+0x58>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d10f      	bne.n	800acc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aca0:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <vPortEnterCritical+0x5c>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00a      	beq.n	800acc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	603b      	str	r3, [r7, #0]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <vPortEnterCritical+0x4a>
	}
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	20000128 	.word	0x20000128
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acda:	4b12      	ldr	r3, [pc, #72]	; (800ad24 <vPortExitCritical+0x50>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10a      	bne.n	800acf8 <vPortExitCritical+0x24>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	607b      	str	r3, [r7, #4]
}
 800acf4:	bf00      	nop
 800acf6:	e7fe      	b.n	800acf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800acf8:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <vPortExitCritical+0x50>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3b01      	subs	r3, #1
 800acfe:	4a09      	ldr	r2, [pc, #36]	; (800ad24 <vPortExitCritical+0x50>)
 800ad00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad02:	4b08      	ldr	r3, [pc, #32]	; (800ad24 <vPortExitCritical+0x50>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d105      	bne.n	800ad16 <vPortExitCritical+0x42>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	f383 8811 	msr	BASEPRI, r3
}
 800ad14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad16:	bf00      	nop
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	20000128 	.word	0x20000128
	...

0800ad30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad30:	f3ef 8009 	mrs	r0, PSP
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	4b15      	ldr	r3, [pc, #84]	; (800ad90 <pxCurrentTCBConst>)
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	f01e 0f10 	tst.w	lr, #16
 800ad40:	bf08      	it	eq
 800ad42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4a:	6010      	str	r0, [r2, #0]
 800ad4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad54:	f380 8811 	msr	BASEPRI, r0
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f7fe ff98 	bl	8009c94 <vTaskSwitchContext>
 800ad64:	f04f 0000 	mov.w	r0, #0
 800ad68:	f380 8811 	msr	BASEPRI, r0
 800ad6c:	bc09      	pop	{r0, r3}
 800ad6e:	6819      	ldr	r1, [r3, #0]
 800ad70:	6808      	ldr	r0, [r1, #0]
 800ad72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad76:	f01e 0f10 	tst.w	lr, #16
 800ad7a:	bf08      	it	eq
 800ad7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad80:	f380 8809 	msr	PSP, r0
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	f3af 8000 	nop.w

0800ad90 <pxCurrentTCBConst>:
 800ad90:	20004f4c 	.word	0x20004f4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop

0800ad98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	607b      	str	r3, [r7, #4]
}
 800adb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800adb2:	f7fe feb5 	bl	8009b20 <xTaskIncrementTick>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d003      	beq.n	800adc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adbc:	4b06      	ldr	r3, [pc, #24]	; (800add8 <xPortSysTickHandler+0x40>)
 800adbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	2300      	movs	r3, #0
 800adc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	f383 8811 	msr	BASEPRI, r3
}
 800adce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	e000ed04 	.word	0xe000ed04

0800addc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800addc:	b480      	push	{r7}
 800adde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ade0:	4b0b      	ldr	r3, [pc, #44]	; (800ae10 <vPortSetupTimerInterrupt+0x34>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ade6:	4b0b      	ldr	r3, [pc, #44]	; (800ae14 <vPortSetupTimerInterrupt+0x38>)
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adec:	4b0a      	ldr	r3, [pc, #40]	; (800ae18 <vPortSetupTimerInterrupt+0x3c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a0a      	ldr	r2, [pc, #40]	; (800ae1c <vPortSetupTimerInterrupt+0x40>)
 800adf2:	fba2 2303 	umull	r2, r3, r2, r3
 800adf6:	099b      	lsrs	r3, r3, #6
 800adf8:	4a09      	ldr	r2, [pc, #36]	; (800ae20 <vPortSetupTimerInterrupt+0x44>)
 800adfa:	3b01      	subs	r3, #1
 800adfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adfe:	4b04      	ldr	r3, [pc, #16]	; (800ae10 <vPortSetupTimerInterrupt+0x34>)
 800ae00:	2207      	movs	r2, #7
 800ae02:	601a      	str	r2, [r3, #0]
}
 800ae04:	bf00      	nop
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	e000e010 	.word	0xe000e010
 800ae14:	e000e018 	.word	0xe000e018
 800ae18:	20000004 	.word	0x20000004
 800ae1c:	10624dd3 	.word	0x10624dd3
 800ae20:	e000e014 	.word	0xe000e014

0800ae24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae34 <vPortEnableVFP+0x10>
 800ae28:	6801      	ldr	r1, [r0, #0]
 800ae2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae2e:	6001      	str	r1, [r0, #0]
 800ae30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae32:	bf00      	nop
 800ae34:	e000ed88 	.word	0xe000ed88

0800ae38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae3e:	f3ef 8305 	mrs	r3, IPSR
 800ae42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2b0f      	cmp	r3, #15
 800ae48:	d914      	bls.n	800ae74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae4a:	4a17      	ldr	r2, [pc, #92]	; (800aea8 <vPortValidateInterruptPriority+0x70>)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae54:	4b15      	ldr	r3, [pc, #84]	; (800aeac <vPortValidateInterruptPriority+0x74>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	7afa      	ldrb	r2, [r7, #11]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d20a      	bcs.n	800ae74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	607b      	str	r3, [r7, #4]
}
 800ae70:	bf00      	nop
 800ae72:	e7fe      	b.n	800ae72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae74:	4b0e      	ldr	r3, [pc, #56]	; (800aeb0 <vPortValidateInterruptPriority+0x78>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae7c:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <vPortValidateInterruptPriority+0x7c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d90a      	bls.n	800ae9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ae84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	603b      	str	r3, [r7, #0]
}
 800ae96:	bf00      	nop
 800ae98:	e7fe      	b.n	800ae98 <vPortValidateInterruptPriority+0x60>
	}
 800ae9a:	bf00      	nop
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	e000e3f0 	.word	0xe000e3f0
 800aeac:	20005578 	.word	0x20005578
 800aeb0:	e000ed0c 	.word	0xe000ed0c
 800aeb4:	2000557c 	.word	0x2000557c

0800aeb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08a      	sub	sp, #40	; 0x28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aec0:	2300      	movs	r3, #0
 800aec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aec4:	f7fe fd70 	bl	80099a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aec8:	4b5b      	ldr	r3, [pc, #364]	; (800b038 <pvPortMalloc+0x180>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aed0:	f000 f920 	bl	800b114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aed4:	4b59      	ldr	r3, [pc, #356]	; (800b03c <pvPortMalloc+0x184>)
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4013      	ands	r3, r2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f040 8093 	bne.w	800b008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d01d      	beq.n	800af24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aee8:	2208      	movs	r2, #8
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4413      	add	r3, r2
 800aeee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f003 0307 	and.w	r3, r3, #7
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d014      	beq.n	800af24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f023 0307 	bic.w	r3, r3, #7
 800af00:	3308      	adds	r3, #8
 800af02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00a      	beq.n	800af24 <pvPortMalloc+0x6c>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	617b      	str	r3, [r7, #20]
}
 800af20:	bf00      	nop
 800af22:	e7fe      	b.n	800af22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d06e      	beq.n	800b008 <pvPortMalloc+0x150>
 800af2a:	4b45      	ldr	r3, [pc, #276]	; (800b040 <pvPortMalloc+0x188>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	429a      	cmp	r2, r3
 800af32:	d869      	bhi.n	800b008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af34:	4b43      	ldr	r3, [pc, #268]	; (800b044 <pvPortMalloc+0x18c>)
 800af36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af38:	4b42      	ldr	r3, [pc, #264]	; (800b044 <pvPortMalloc+0x18c>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af3e:	e004      	b.n	800af4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d903      	bls.n	800af5c <pvPortMalloc+0xa4>
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1f1      	bne.n	800af40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af5c:	4b36      	ldr	r3, [pc, #216]	; (800b038 <pvPortMalloc+0x180>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af62:	429a      	cmp	r2, r3
 800af64:	d050      	beq.n	800b008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2208      	movs	r2, #8
 800af6c:	4413      	add	r3, r2
 800af6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	1ad2      	subs	r2, r2, r3
 800af80:	2308      	movs	r3, #8
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	429a      	cmp	r2, r3
 800af86:	d91f      	bls.n	800afc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4413      	add	r3, r2
 800af8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	f003 0307 	and.w	r3, r3, #7
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00a      	beq.n	800afb0 <pvPortMalloc+0xf8>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	613b      	str	r3, [r7, #16]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	685a      	ldr	r2, [r3, #4]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	1ad2      	subs	r2, r2, r3
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afc2:	69b8      	ldr	r0, [r7, #24]
 800afc4:	f000 f908 	bl	800b1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afc8:	4b1d      	ldr	r3, [pc, #116]	; (800b040 <pvPortMalloc+0x188>)
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	4a1b      	ldr	r2, [pc, #108]	; (800b040 <pvPortMalloc+0x188>)
 800afd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afd6:	4b1a      	ldr	r3, [pc, #104]	; (800b040 <pvPortMalloc+0x188>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	4b1b      	ldr	r3, [pc, #108]	; (800b048 <pvPortMalloc+0x190>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d203      	bcs.n	800afea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800afe2:	4b17      	ldr	r3, [pc, #92]	; (800b040 <pvPortMalloc+0x188>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a18      	ldr	r2, [pc, #96]	; (800b048 <pvPortMalloc+0x190>)
 800afe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	4b13      	ldr	r3, [pc, #76]	; (800b03c <pvPortMalloc+0x184>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	431a      	orrs	r2, r3
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	2200      	movs	r2, #0
 800affc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800affe:	4b13      	ldr	r3, [pc, #76]	; (800b04c <pvPortMalloc+0x194>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3301      	adds	r3, #1
 800b004:	4a11      	ldr	r2, [pc, #68]	; (800b04c <pvPortMalloc+0x194>)
 800b006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b008:	f7fe fcdc 	bl	80099c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	f003 0307 	and.w	r3, r3, #7
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00a      	beq.n	800b02c <pvPortMalloc+0x174>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	60fb      	str	r3, [r7, #12]
}
 800b028:	bf00      	nop
 800b02a:	e7fe      	b.n	800b02a <pvPortMalloc+0x172>
	return pvReturn;
 800b02c:	69fb      	ldr	r3, [r7, #28]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3728      	adds	r7, #40	; 0x28
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20009188 	.word	0x20009188
 800b03c:	2000919c 	.word	0x2000919c
 800b040:	2000918c 	.word	0x2000918c
 800b044:	20009180 	.word	0x20009180
 800b048:	20009190 	.word	0x20009190
 800b04c:	20009194 	.word	0x20009194

0800b050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d04d      	beq.n	800b0fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b062:	2308      	movs	r3, #8
 800b064:	425b      	negs	r3, r3
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	4413      	add	r3, r2
 800b06a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	4b24      	ldr	r3, [pc, #144]	; (800b108 <vPortFree+0xb8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4013      	ands	r3, r2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10a      	bne.n	800b094 <vPortFree+0x44>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	60fb      	str	r3, [r7, #12]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00a      	beq.n	800b0b2 <vPortFree+0x62>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	60bb      	str	r3, [r7, #8]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	4b14      	ldr	r3, [pc, #80]	; (800b108 <vPortFree+0xb8>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01e      	beq.n	800b0fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d11a      	bne.n	800b0fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	4b0e      	ldr	r3, [pc, #56]	; (800b108 <vPortFree+0xb8>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	43db      	mvns	r3, r3
 800b0d2:	401a      	ands	r2, r3
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0d8:	f7fe fc66 	bl	80099a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	685a      	ldr	r2, [r3, #4]
 800b0e0:	4b0a      	ldr	r3, [pc, #40]	; (800b10c <vPortFree+0xbc>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	4a09      	ldr	r2, [pc, #36]	; (800b10c <vPortFree+0xbc>)
 800b0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0ea:	6938      	ldr	r0, [r7, #16]
 800b0ec:	f000 f874 	bl	800b1d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <vPortFree+0xc0>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	4a06      	ldr	r2, [pc, #24]	; (800b110 <vPortFree+0xc0>)
 800b0f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b0fa:	f7fe fc63 	bl	80099c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0fe:	bf00      	nop
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	2000919c 	.word	0x2000919c
 800b10c:	2000918c 	.word	0x2000918c
 800b110:	20009198 	.word	0x20009198

0800b114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b11a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b120:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <prvHeapInit+0xac>)
 800b122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00c      	beq.n	800b148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3307      	adds	r3, #7
 800b132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0307 	bic.w	r3, r3, #7
 800b13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	4a1f      	ldr	r2, [pc, #124]	; (800b1c0 <prvHeapInit+0xac>)
 800b144:	4413      	add	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b14c:	4a1d      	ldr	r2, [pc, #116]	; (800b1c4 <prvHeapInit+0xb0>)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b152:	4b1c      	ldr	r3, [pc, #112]	; (800b1c4 <prvHeapInit+0xb0>)
 800b154:	2200      	movs	r2, #0
 800b156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	4413      	add	r3, r2
 800b15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b160:	2208      	movs	r2, #8
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	1a9b      	subs	r3, r3, r2
 800b166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f023 0307 	bic.w	r3, r3, #7
 800b16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4a15      	ldr	r2, [pc, #84]	; (800b1c8 <prvHeapInit+0xb4>)
 800b174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <prvHeapInit+0xb4>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b17e:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <prvHeapInit+0xb4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	1ad2      	subs	r2, r2, r3
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b194:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <prvHeapInit+0xb4>)
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <prvHeapInit+0xb8>)
 800b1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	4a09      	ldr	r2, [pc, #36]	; (800b1d0 <prvHeapInit+0xbc>)
 800b1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1ac:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <prvHeapInit+0xc0>)
 800b1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1b2:	601a      	str	r2, [r3, #0]
}
 800b1b4:	bf00      	nop
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	20005580 	.word	0x20005580
 800b1c4:	20009180 	.word	0x20009180
 800b1c8:	20009188 	.word	0x20009188
 800b1cc:	20009190 	.word	0x20009190
 800b1d0:	2000918c 	.word	0x2000918c
 800b1d4:	2000919c 	.word	0x2000919c

0800b1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1e0:	4b28      	ldr	r3, [pc, #160]	; (800b284 <prvInsertBlockIntoFreeList+0xac>)
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	e002      	b.n	800b1ec <prvInsertBlockIntoFreeList+0x14>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d8f7      	bhi.n	800b1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	4413      	add	r3, r2
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	429a      	cmp	r2, r3
 800b206:	d108      	bne.n	800b21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	441a      	add	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	441a      	add	r2, r3
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d118      	bne.n	800b260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b15      	ldr	r3, [pc, #84]	; (800b288 <prvInsertBlockIntoFreeList+0xb0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	429a      	cmp	r2, r3
 800b238:	d00d      	beq.n	800b256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	441a      	add	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e008      	b.n	800b268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b256:	4b0c      	ldr	r3, [pc, #48]	; (800b288 <prvInsertBlockIntoFreeList+0xb0>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	e003      	b.n	800b268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d002      	beq.n	800b276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	20009180 	.word	0x20009180
 800b288:	20009188 	.word	0x20009188

0800b28c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b290:	2200      	movs	r2, #0
 800b292:	4912      	ldr	r1, [pc, #72]	; (800b2dc <MX_USB_DEVICE_Init+0x50>)
 800b294:	4812      	ldr	r0, [pc, #72]	; (800b2e0 <MX_USB_DEVICE_Init+0x54>)
 800b296:	f7fc f8d1 	bl	800743c <USBD_Init>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b2a0:	f7f5 ff40 	bl	8001124 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b2a4:	490f      	ldr	r1, [pc, #60]	; (800b2e4 <MX_USB_DEVICE_Init+0x58>)
 800b2a6:	480e      	ldr	r0, [pc, #56]	; (800b2e0 <MX_USB_DEVICE_Init+0x54>)
 800b2a8:	f7fc f8f8 	bl	800749c <USBD_RegisterClass>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b2b2:	f7f5 ff37 	bl	8001124 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b2b6:	490c      	ldr	r1, [pc, #48]	; (800b2e8 <MX_USB_DEVICE_Init+0x5c>)
 800b2b8:	4809      	ldr	r0, [pc, #36]	; (800b2e0 <MX_USB_DEVICE_Init+0x54>)
 800b2ba:	f7fc f819 	bl	80072f0 <USBD_CDC_RegisterInterface>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d001      	beq.n	800b2c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b2c4:	f7f5 ff2e 	bl	8001124 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b2c8:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <MX_USB_DEVICE_Init+0x54>)
 800b2ca:	f7fc f90e 	bl	80074ea <USBD_Start>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b2d4:	f7f5 ff26 	bl	8001124 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b2d8:	bf00      	nop
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	20000140 	.word	0x20000140
 800b2e0:	2000e0d4 	.word	0x2000e0d4
 800b2e4:	20000024 	.word	0x20000024
 800b2e8:	2000012c 	.word	0x2000012c

0800b2ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4905      	ldr	r1, [pc, #20]	; (800b308 <CDC_Init_FS+0x1c>)
 800b2f4:	4805      	ldr	r0, [pc, #20]	; (800b30c <CDC_Init_FS+0x20>)
 800b2f6:	f7fc f810 	bl	800731a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2fa:	4905      	ldr	r1, [pc, #20]	; (800b310 <CDC_Init_FS+0x24>)
 800b2fc:	4803      	ldr	r0, [pc, #12]	; (800b30c <CDC_Init_FS+0x20>)
 800b2fe:	f7fc f82a 	bl	8007356 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b302:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b304:	4618      	mov	r0, r3
 800b306:	bd80      	pop	{r7, pc}
 800b308:	2000eba4 	.word	0x2000eba4
 800b30c:	2000e0d4 	.word	0x2000e0d4
 800b310:	2000e3a4 	.word	0x2000e3a4

0800b314 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b314:	b480      	push	{r7}
 800b316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b318:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	6039      	str	r1, [r7, #0]
 800b32e:	71fb      	strb	r3, [r7, #7]
 800b330:	4613      	mov	r3, r2
 800b332:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b334:	79fb      	ldrb	r3, [r7, #7]
 800b336:	2b23      	cmp	r3, #35	; 0x23
 800b338:	d84a      	bhi.n	800b3d0 <CDC_Control_FS+0xac>
 800b33a:	a201      	add	r2, pc, #4	; (adr r2, 800b340 <CDC_Control_FS+0x1c>)
 800b33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b340:	0800b3d1 	.word	0x0800b3d1
 800b344:	0800b3d1 	.word	0x0800b3d1
 800b348:	0800b3d1 	.word	0x0800b3d1
 800b34c:	0800b3d1 	.word	0x0800b3d1
 800b350:	0800b3d1 	.word	0x0800b3d1
 800b354:	0800b3d1 	.word	0x0800b3d1
 800b358:	0800b3d1 	.word	0x0800b3d1
 800b35c:	0800b3d1 	.word	0x0800b3d1
 800b360:	0800b3d1 	.word	0x0800b3d1
 800b364:	0800b3d1 	.word	0x0800b3d1
 800b368:	0800b3d1 	.word	0x0800b3d1
 800b36c:	0800b3d1 	.word	0x0800b3d1
 800b370:	0800b3d1 	.word	0x0800b3d1
 800b374:	0800b3d1 	.word	0x0800b3d1
 800b378:	0800b3d1 	.word	0x0800b3d1
 800b37c:	0800b3d1 	.word	0x0800b3d1
 800b380:	0800b3d1 	.word	0x0800b3d1
 800b384:	0800b3d1 	.word	0x0800b3d1
 800b388:	0800b3d1 	.word	0x0800b3d1
 800b38c:	0800b3d1 	.word	0x0800b3d1
 800b390:	0800b3d1 	.word	0x0800b3d1
 800b394:	0800b3d1 	.word	0x0800b3d1
 800b398:	0800b3d1 	.word	0x0800b3d1
 800b39c:	0800b3d1 	.word	0x0800b3d1
 800b3a0:	0800b3d1 	.word	0x0800b3d1
 800b3a4:	0800b3d1 	.word	0x0800b3d1
 800b3a8:	0800b3d1 	.word	0x0800b3d1
 800b3ac:	0800b3d1 	.word	0x0800b3d1
 800b3b0:	0800b3d1 	.word	0x0800b3d1
 800b3b4:	0800b3d1 	.word	0x0800b3d1
 800b3b8:	0800b3d1 	.word	0x0800b3d1
 800b3bc:	0800b3d1 	.word	0x0800b3d1
 800b3c0:	0800b3d1 	.word	0x0800b3d1
 800b3c4:	0800b3d1 	.word	0x0800b3d1
 800b3c8:	0800b3d1 	.word	0x0800b3d1
 800b3cc:	0800b3d1 	.word	0x0800b3d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b3d0:	bf00      	nop
  }

  return (USBD_OK);
 800b3d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	4805      	ldr	r0, [pc, #20]	; (800b404 <CDC_Receive_FS+0x24>)
 800b3ee:	f7fb ffb2 	bl	8007356 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b3f2:	4804      	ldr	r0, [pc, #16]	; (800b404 <CDC_Receive_FS+0x24>)
 800b3f4:	f7fb fff8 	bl	80073e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b3f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	2000e0d4 	.word	0x2000e0d4

0800b408 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b414:	2300      	movs	r3, #0
 800b416:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b418:	4b0d      	ldr	r3, [pc, #52]	; (800b450 <CDC_Transmit_FS+0x48>)
 800b41a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b41e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b42a:	2301      	movs	r3, #1
 800b42c:	e00b      	b.n	800b446 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b42e:	887b      	ldrh	r3, [r7, #2]
 800b430:	461a      	mov	r2, r3
 800b432:	6879      	ldr	r1, [r7, #4]
 800b434:	4806      	ldr	r0, [pc, #24]	; (800b450 <CDC_Transmit_FS+0x48>)
 800b436:	f7fb ff70 	bl	800731a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b43a:	4805      	ldr	r0, [pc, #20]	; (800b450 <CDC_Transmit_FS+0x48>)
 800b43c:	f7fb ffa4 	bl	8007388 <USBD_CDC_TransmitPacket>
 800b440:	4603      	mov	r3, r0
 800b442:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	2000e0d4 	.word	0x2000e0d4

0800b454 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	4613      	mov	r3, r2
 800b460:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	371c      	adds	r7, #28
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
	...

0800b478 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	4603      	mov	r3, r0
 800b480:	6039      	str	r1, [r7, #0]
 800b482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2212      	movs	r2, #18
 800b488:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b48a:	4b03      	ldr	r3, [pc, #12]	; (800b498 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	2000015c 	.word	0x2000015c

0800b49c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	6039      	str	r1, [r7, #0]
 800b4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	2204      	movs	r2, #4
 800b4ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b4ae:	4b03      	ldr	r3, [pc, #12]	; (800b4bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	20000170 	.word	0x20000170

0800b4c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	6039      	str	r1, [r7, #0]
 800b4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4cc:	79fb      	ldrb	r3, [r7, #7]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d105      	bne.n	800b4de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	4907      	ldr	r1, [pc, #28]	; (800b4f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b4d6:	4808      	ldr	r0, [pc, #32]	; (800b4f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b4d8:	f7fd f839 	bl	800854e <USBD_GetString>
 800b4dc:	e004      	b.n	800b4e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	4904      	ldr	r1, [pc, #16]	; (800b4f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b4e2:	4805      	ldr	r0, [pc, #20]	; (800b4f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b4e4:	f7fd f833 	bl	800854e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4e8:	4b02      	ldr	r3, [pc, #8]	; (800b4f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	2000f3a4 	.word	0x2000f3a4
 800b4f8:	0801a244 	.word	0x0801a244

0800b4fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	6039      	str	r1, [r7, #0]
 800b506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	4904      	ldr	r1, [pc, #16]	; (800b51c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b50c:	4804      	ldr	r0, [pc, #16]	; (800b520 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b50e:	f7fd f81e 	bl	800854e <USBD_GetString>
  return USBD_StrDesc;
 800b512:	4b02      	ldr	r3, [pc, #8]	; (800b51c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b514:	4618      	mov	r0, r3
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	2000f3a4 	.word	0x2000f3a4
 800b520:	0801a25c 	.word	0x0801a25c

0800b524 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	6039      	str	r1, [r7, #0]
 800b52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	221a      	movs	r2, #26
 800b534:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b536:	f000 f843 	bl	800b5c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b53a:	4b02      	ldr	r3, [pc, #8]	; (800b544 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20000174 	.word	0x20000174

0800b548 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	6039      	str	r1, [r7, #0]
 800b552:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b554:	79fb      	ldrb	r3, [r7, #7]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d105      	bne.n	800b566 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	4907      	ldr	r1, [pc, #28]	; (800b57c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b55e:	4808      	ldr	r0, [pc, #32]	; (800b580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b560:	f7fc fff5 	bl	800854e <USBD_GetString>
 800b564:	e004      	b.n	800b570 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	4904      	ldr	r1, [pc, #16]	; (800b57c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b56a:	4805      	ldr	r0, [pc, #20]	; (800b580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b56c:	f7fc ffef 	bl	800854e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b570:	4b02      	ldr	r3, [pc, #8]	; (800b57c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	2000f3a4 	.word	0x2000f3a4
 800b580:	0801a270 	.word	0x0801a270

0800b584 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	6039      	str	r1, [r7, #0]
 800b58e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b590:	79fb      	ldrb	r3, [r7, #7]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d105      	bne.n	800b5a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	4907      	ldr	r1, [pc, #28]	; (800b5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b59a:	4808      	ldr	r0, [pc, #32]	; (800b5bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b59c:	f7fc ffd7 	bl	800854e <USBD_GetString>
 800b5a0:	e004      	b.n	800b5ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	4904      	ldr	r1, [pc, #16]	; (800b5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5a6:	4805      	ldr	r0, [pc, #20]	; (800b5bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5a8:	f7fc ffd1 	bl	800854e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5ac:	4b02      	ldr	r3, [pc, #8]	; (800b5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	2000f3a4 	.word	0x2000f3a4
 800b5bc:	0801a27c 	.word	0x0801a27c

0800b5c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b5c6:	4b0f      	ldr	r3, [pc, #60]	; (800b604 <Get_SerialNum+0x44>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b5cc:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <Get_SerialNum+0x48>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b5d2:	4b0e      	ldr	r3, [pc, #56]	; (800b60c <Get_SerialNum+0x4c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4413      	add	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d009      	beq.n	800b5fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b5e6:	2208      	movs	r2, #8
 800b5e8:	4909      	ldr	r1, [pc, #36]	; (800b610 <Get_SerialNum+0x50>)
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 f814 	bl	800b618 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5f0:	2204      	movs	r2, #4
 800b5f2:	4908      	ldr	r1, [pc, #32]	; (800b614 <Get_SerialNum+0x54>)
 800b5f4:	68b8      	ldr	r0, [r7, #8]
 800b5f6:	f000 f80f 	bl	800b618 <IntToUnicode>
  }
}
 800b5fa:	bf00      	nop
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	1fff7a10 	.word	0x1fff7a10
 800b608:	1fff7a14 	.word	0x1fff7a14
 800b60c:	1fff7a18 	.word	0x1fff7a18
 800b610:	20000176 	.word	0x20000176
 800b614:	20000186 	.word	0x20000186

0800b618 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b618:	b480      	push	{r7}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	4613      	mov	r3, r2
 800b624:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b62a:	2300      	movs	r3, #0
 800b62c:	75fb      	strb	r3, [r7, #23]
 800b62e:	e027      	b.n	800b680 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	0f1b      	lsrs	r3, r3, #28
 800b634:	2b09      	cmp	r3, #9
 800b636:	d80b      	bhi.n	800b650 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	0f1b      	lsrs	r3, r3, #28
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	7dfb      	ldrb	r3, [r7, #23]
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	4619      	mov	r1, r3
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	440b      	add	r3, r1
 800b648:	3230      	adds	r2, #48	; 0x30
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]
 800b64e:	e00a      	b.n	800b666 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	0f1b      	lsrs	r3, r3, #28
 800b654:	b2da      	uxtb	r2, r3
 800b656:	7dfb      	ldrb	r3, [r7, #23]
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	4619      	mov	r1, r3
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	440b      	add	r3, r1
 800b660:	3237      	adds	r2, #55	; 0x37
 800b662:	b2d2      	uxtb	r2, r2
 800b664:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b66c:	7dfb      	ldrb	r3, [r7, #23]
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	3301      	adds	r3, #1
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	4413      	add	r3, r2
 800b676:	2200      	movs	r2, #0
 800b678:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
 800b67c:	3301      	adds	r3, #1
 800b67e:	75fb      	strb	r3, [r7, #23]
 800b680:	7dfa      	ldrb	r2, [r7, #23]
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	429a      	cmp	r2, r3
 800b686:	d3d3      	bcc.n	800b630 <IntToUnicode+0x18>
  }
}
 800b688:	bf00      	nop
 800b68a:	bf00      	nop
 800b68c:	371c      	adds	r7, #28
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
	...

0800b698 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08a      	sub	sp, #40	; 0x28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6a0:	f107 0314 	add.w	r3, r7, #20
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	605a      	str	r2, [r3, #4]
 800b6aa:	609a      	str	r2, [r3, #8]
 800b6ac:	60da      	str	r2, [r3, #12]
 800b6ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b8:	d13a      	bne.n	800b730 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	613b      	str	r3, [r7, #16]
 800b6be:	4b1e      	ldr	r3, [pc, #120]	; (800b738 <HAL_PCD_MspInit+0xa0>)
 800b6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c2:	4a1d      	ldr	r2, [pc, #116]	; (800b738 <HAL_PCD_MspInit+0xa0>)
 800b6c4:	f043 0301 	orr.w	r3, r3, #1
 800b6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ca:	4b1b      	ldr	r3, [pc, #108]	; (800b738 <HAL_PCD_MspInit+0xa0>)
 800b6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	613b      	str	r3, [r7, #16]
 800b6d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b6d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b6da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6dc:	2302      	movs	r3, #2
 800b6de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b6e8:	230a      	movs	r3, #10
 800b6ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6ec:	f107 0314 	add.w	r3, r7, #20
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4812      	ldr	r0, [pc, #72]	; (800b73c <HAL_PCD_MspInit+0xa4>)
 800b6f4:	f7f6 ff0e 	bl	8002514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b6f8:	4b0f      	ldr	r3, [pc, #60]	; (800b738 <HAL_PCD_MspInit+0xa0>)
 800b6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6fc:	4a0e      	ldr	r2, [pc, #56]	; (800b738 <HAL_PCD_MspInit+0xa0>)
 800b6fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b702:	6353      	str	r3, [r2, #52]	; 0x34
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	4b0b      	ldr	r3, [pc, #44]	; (800b738 <HAL_PCD_MspInit+0xa0>)
 800b70a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b70c:	4a0a      	ldr	r2, [pc, #40]	; (800b738 <HAL_PCD_MspInit+0xa0>)
 800b70e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b712:	6453      	str	r3, [r2, #68]	; 0x44
 800b714:	4b08      	ldr	r3, [pc, #32]	; (800b738 <HAL_PCD_MspInit+0xa0>)
 800b716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b71c:	60fb      	str	r3, [r7, #12]
 800b71e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b720:	2200      	movs	r2, #0
 800b722:	2105      	movs	r1, #5
 800b724:	2043      	movs	r0, #67	; 0x43
 800b726:	f7f6 fb4f 	bl	8001dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b72a:	2043      	movs	r0, #67	; 0x43
 800b72c:	f7f6 fb68 	bl	8001e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b730:	bf00      	nop
 800b732:	3728      	adds	r7, #40	; 0x28
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	40023800 	.word	0x40023800
 800b73c:	40020000 	.word	0x40020000

0800b740 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b754:	4619      	mov	r1, r3
 800b756:	4610      	mov	r0, r2
 800b758:	f7fb ff12 	bl	8007580 <USBD_LL_SetupStage>
}
 800b75c:	bf00      	nop
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	460b      	mov	r3, r1
 800b76e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b776:	78fa      	ldrb	r2, [r7, #3]
 800b778:	6879      	ldr	r1, [r7, #4]
 800b77a:	4613      	mov	r3, r2
 800b77c:	00db      	lsls	r3, r3, #3
 800b77e:	1a9b      	subs	r3, r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	440b      	add	r3, r1
 800b784:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	78fb      	ldrb	r3, [r7, #3]
 800b78c:	4619      	mov	r1, r3
 800b78e:	f7fb ff4c 	bl	800762a <USBD_LL_DataOutStage>
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b7ac:	78fa      	ldrb	r2, [r7, #3]
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	1a9b      	subs	r3, r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	440b      	add	r3, r1
 800b7ba:	3348      	adds	r3, #72	; 0x48
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	78fb      	ldrb	r3, [r7, #3]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f7fb ff95 	bl	80076f0 <USBD_LL_DataInStage>
}
 800b7c6:	bf00      	nop
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fc f8a9 	bl	8007934 <USBD_LL_SOF>
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d102      	bne.n	800b804 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b7fe:	2300      	movs	r3, #0
 800b800:	73fb      	strb	r3, [r7, #15]
 800b802:	e008      	b.n	800b816 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d102      	bne.n	800b812 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b80c:	2301      	movs	r3, #1
 800b80e:	73fb      	strb	r3, [r7, #15]
 800b810:	e001      	b.n	800b816 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b812:	f7f5 fc87 	bl	8001124 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b81c:	7bfa      	ldrb	r2, [r7, #15]
 800b81e:	4611      	mov	r1, r2
 800b820:	4618      	mov	r0, r3
 800b822:	f7fc f849 	bl	80078b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fb fff5 	bl	800781c <USBD_LL_Reset>
}
 800b832:	bf00      	nop
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
	...

0800b83c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fc f844 	bl	80078d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	6812      	ldr	r2, [r2, #0]
 800b85e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b862:	f043 0301 	orr.w	r3, r3, #1
 800b866:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d005      	beq.n	800b87c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b870:	4b04      	ldr	r3, [pc, #16]	; (800b884 <HAL_PCD_SuspendCallback+0x48>)
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	4a03      	ldr	r2, [pc, #12]	; (800b884 <HAL_PCD_SuspendCallback+0x48>)
 800b876:	f043 0306 	orr.w	r3, r3, #6
 800b87a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	e000ed00 	.word	0xe000ed00

0800b888 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b896:	4618      	mov	r0, r3
 800b898:	f7fc f834 	bl	8007904 <USBD_LL_Resume>
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8b6:	78fa      	ldrb	r2, [r7, #3]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fc f882 	bl	80079c4 <USBD_LL_IsoOUTIncomplete>
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8da:	78fa      	ldrb	r2, [r7, #3]
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fc f84a 	bl	8007978 <USBD_LL_IsoINIncomplete>
}
 800b8e4:	bf00      	nop
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fc f888 	bl	8007a10 <USBD_LL_DevConnected>
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b916:	4618      	mov	r0, r3
 800b918:	f7fc f885 	bl	8007a26 <USBD_LL_DevDisconnected>
}
 800b91c:	bf00      	nop
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d13c      	bne.n	800b9ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b934:	4a20      	ldr	r2, [pc, #128]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a1e      	ldr	r2, [pc, #120]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b940:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b944:	4b1c      	ldr	r3, [pc, #112]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b946:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b94a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b94c:	4b1a      	ldr	r3, [pc, #104]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b94e:	2204      	movs	r2, #4
 800b950:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b952:	4b19      	ldr	r3, [pc, #100]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b954:	2202      	movs	r2, #2
 800b956:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b958:	4b17      	ldr	r3, [pc, #92]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b95e:	4b16      	ldr	r3, [pc, #88]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b960:	2202      	movs	r2, #2
 800b962:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b964:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b966:	2200      	movs	r2, #0
 800b968:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b96a:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b970:	4b11      	ldr	r3, [pc, #68]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b972:	2200      	movs	r2, #0
 800b974:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b976:	4b10      	ldr	r3, [pc, #64]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b978:	2200      	movs	r2, #0
 800b97a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b97c:	4b0e      	ldr	r3, [pc, #56]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b97e:	2200      	movs	r2, #0
 800b980:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b982:	480d      	ldr	r0, [pc, #52]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b984:	f7f6 ff7b 	bl	800287e <HAL_PCD_Init>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b98e:	f7f5 fbc9 	bl	8001124 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b992:	2180      	movs	r1, #128	; 0x80
 800b994:	4808      	ldr	r0, [pc, #32]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b996:	f7f8 f8d8 	bl	8003b4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b99a:	2240      	movs	r2, #64	; 0x40
 800b99c:	2100      	movs	r1, #0
 800b99e:	4806      	ldr	r0, [pc, #24]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b9a0:	f7f8 f88c 	bl	8003abc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b9a4:	2280      	movs	r2, #128	; 0x80
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	4803      	ldr	r0, [pc, #12]	; (800b9b8 <USBD_LL_Init+0x94>)
 800b9aa:	f7f8 f887 	bl	8003abc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	2000f5a4 	.word	0x2000f5a4

0800b9bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7f7 f870 	bl	8002ab8 <HAL_PCD_Start>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f000 f942 	bl	800bc68 <USBD_Get_USB_Status>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	4608      	mov	r0, r1
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	461a      	mov	r2, r3
 800ba00:	4603      	mov	r3, r0
 800ba02:	70fb      	strb	r3, [r7, #3]
 800ba04:	460b      	mov	r3, r1
 800ba06:	70bb      	strb	r3, [r7, #2]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba1a:	78bb      	ldrb	r3, [r7, #2]
 800ba1c:	883a      	ldrh	r2, [r7, #0]
 800ba1e:	78f9      	ldrb	r1, [r7, #3]
 800ba20:	f7f7 fc54 	bl	80032cc <HAL_PCD_EP_Open>
 800ba24:	4603      	mov	r3, r0
 800ba26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 f91c 	bl	800bc68 <USBD_Get_USB_Status>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b084      	sub	sp, #16
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	460b      	mov	r3, r1
 800ba48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba58:	78fa      	ldrb	r2, [r7, #3]
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7f7 fc9d 	bl	800339c <HAL_PCD_EP_Close>
 800ba62:	4603      	mov	r3, r0
 800ba64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f000 f8fd 	bl	800bc68 <USBD_Get_USB_Status>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba96:	78fa      	ldrb	r2, [r7, #3]
 800ba98:	4611      	mov	r1, r2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7f7 fd75 	bl	800358a <HAL_PCD_EP_SetStall>
 800baa0:	4603      	mov	r3, r0
 800baa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 f8de 	bl	800bc68 <USBD_Get_USB_Status>
 800baac:	4603      	mov	r3, r0
 800baae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bab0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	460b      	mov	r3, r1
 800bac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bad4:	78fa      	ldrb	r2, [r7, #3]
 800bad6:	4611      	mov	r1, r2
 800bad8:	4618      	mov	r0, r3
 800bada:	f7f7 fdba 	bl	8003652 <HAL_PCD_EP_ClrStall>
 800bade:	4603      	mov	r3, r0
 800bae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 f8bf 	bl	800bc68 <USBD_Get_USB_Status>
 800baea:	4603      	mov	r3, r0
 800baec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baee:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	460b      	mov	r3, r1
 800bb02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	da0b      	bge.n	800bb2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb14:	78fb      	ldrb	r3, [r7, #3]
 800bb16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb1a:	68f9      	ldr	r1, [r7, #12]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	00db      	lsls	r3, r3, #3
 800bb20:	1a9b      	subs	r3, r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	440b      	add	r3, r1
 800bb26:	333e      	adds	r3, #62	; 0x3e
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	e00b      	b.n	800bb44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb2c:	78fb      	ldrb	r3, [r7, #3]
 800bb2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb32:	68f9      	ldr	r1, [r7, #12]
 800bb34:	4613      	mov	r3, r2
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	1a9b      	subs	r3, r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	440b      	add	r3, r1
 800bb3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3714      	adds	r7, #20
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb6a:	78fa      	ldrb	r2, [r7, #3]
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7f7 fb87 	bl	8003282 <HAL_PCD_SetAddress>
 800bb74:	4603      	mov	r3, r0
 800bb76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 f874 	bl	800bc68 <USBD_Get_USB_Status>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb84:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b086      	sub	sp, #24
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	60f8      	str	r0, [r7, #12]
 800bb96:	607a      	str	r2, [r7, #4]
 800bb98:	603b      	str	r3, [r7, #0]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbac:	7af9      	ldrb	r1, [r7, #11]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	f7f7 fca0 	bl	80034f6 <HAL_PCD_EP_Transmit>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 f853 	bl	800bc68 <USBD_Get_USB_Status>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbc6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3718      	adds	r7, #24
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	607a      	str	r2, [r7, #4]
 800bbda:	603b      	str	r3, [r7, #0]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbee:	7af9      	ldrb	r1, [r7, #11]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	f7f7 fc1c 	bl	8003430 <HAL_PCD_EP_Receive>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 f832 	bl	800bc68 <USBD_Get_USB_Status>
 800bc04:	4603      	mov	r3, r0
 800bc06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc08:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3718      	adds	r7, #24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b082      	sub	sp, #8
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc24:	78fa      	ldrb	r2, [r7, #3]
 800bc26:	4611      	mov	r1, r2
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7f7 fc4c 	bl	80034c6 <HAL_PCD_EP_GetRxCount>
 800bc2e:	4603      	mov	r3, r0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc40:	4b03      	ldr	r3, [pc, #12]	; (800bc50 <USBD_static_malloc+0x18>)
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	200091a0 	.word	0x200091a0

0800bc54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]

}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc76:	79fb      	ldrb	r3, [r7, #7]
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d817      	bhi.n	800bcac <USBD_Get_USB_Status+0x44>
 800bc7c:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <USBD_Get_USB_Status+0x1c>)
 800bc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc82:	bf00      	nop
 800bc84:	0800bc95 	.word	0x0800bc95
 800bc88:	0800bc9b 	.word	0x0800bc9b
 800bc8c:	0800bca1 	.word	0x0800bca1
 800bc90:	0800bca7 	.word	0x0800bca7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73fb      	strb	r3, [r7, #15]
    break;
 800bc98:	e00b      	b.n	800bcb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc9e:	e008      	b.n	800bcb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bca0:	2301      	movs	r3, #1
 800bca2:	73fb      	strb	r3, [r7, #15]
    break;
 800bca4:	e005      	b.n	800bcb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bca6:	2303      	movs	r3, #3
 800bca8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcaa:	e002      	b.n	800bcb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcac:	2303      	movs	r3, #3
 800bcae:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb0:	bf00      	nop
  }
  return usb_status;
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800bcc0:	4b04      	ldr	r3, [pc, #16]	; (800bcd4 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	b10a      	cbz	r2, 800bcca <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800bcc6:	4803      	ldr	r0, [pc, #12]	; (800bcd4 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800bcc8:	4770      	bx	lr
 800bcca:	4a03      	ldr	r2, [pc, #12]	; (800bcd8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800bccc:	4801      	ldr	r0, [pc, #4]	; (800bcd4 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800bcce:	6812      	ldr	r2, [r2, #0]
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	4770      	bx	lr
 800bcd4:	20000198 	.word	0x20000198
 800bcd8:	2000034c 	.word	0x2000034c

0800bcdc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800bcdc:	4a02      	ldr	r2, [pc, #8]	; (800bce8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800bcde:	4b03      	ldr	r3, [pc, #12]	; (800bcec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800bce0:	6812      	ldr	r2, [r2, #0]
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	2000034c 	.word	0x2000034c
 800bcec:	20000198 	.word	0x20000198

0800bcf0 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800bcf0:	f003 b9c8 	b.w	800f084 <geometry_msgs__msg__Twist__init>

0800bcf4 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800bcf4:	f003 b9ea 	b.w	800f0cc <geometry_msgs__msg__Twist__fini>

0800bcf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	f000 f819 	bl	800bd30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bcfe:	4c07      	ldr	r4, [pc, #28]	; (800bd1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800bd00:	60e0      	str	r0, [r4, #12]
 800bd02:	f000 f815 	bl	800bd30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bd06:	4b06      	ldr	r3, [pc, #24]	; (800bd20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800bd08:	64a0      	str	r0, [r4, #72]	; 0x48
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	b10a      	cbz	r2, 800bd12 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800bd0e:	4804      	ldr	r0, [pc, #16]	; (800bd20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800bd10:	bd10      	pop	{r4, pc}
 800bd12:	4a04      	ldr	r2, [pc, #16]	; (800bd24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800bd14:	4802      	ldr	r0, [pc, #8]	; (800bd20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800bd16:	6812      	ldr	r2, [r2, #0]
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	bd10      	pop	{r4, pc}
 800bd1c:	200001a4 	.word	0x200001a4
 800bd20:	2000021c 	.word	0x2000021c
 800bd24:	20000350 	.word	0x20000350

0800bd28 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800bd28:	f003 b9dc 	b.w	800f0e4 <geometry_msgs__msg__Vector3__init>

0800bd2c <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800bd2c:	f003 b9de 	b.w	800f0ec <geometry_msgs__msg__Vector3__fini>

0800bd30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800bd30:	4b04      	ldr	r3, [pc, #16]	; (800bd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	b10a      	cbz	r2, 800bd3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800bd36:	4803      	ldr	r0, [pc, #12]	; (800bd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bd38:	4770      	bx	lr
 800bd3a:	4a03      	ldr	r2, [pc, #12]	; (800bd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800bd3c:	4801      	ldr	r0, [pc, #4]	; (800bd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800bd3e:	6812      	ldr	r2, [r2, #0]
 800bd40:	601a      	str	r2, [r3, #0]
 800bd42:	4770      	bx	lr
 800bd44:	200002dc 	.word	0x200002dc
 800bd48:	20000350 	.word	0x20000350

0800bd4c <get_serialized_size_geometry_msgs__msg__Twist>:
 800bd4c:	b570      	push	{r4, r5, r6, lr}
 800bd4e:	4604      	mov	r4, r0
 800bd50:	b148      	cbz	r0, 800bd66 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800bd52:	460d      	mov	r5, r1
 800bd54:	f000 f860 	bl	800be18 <get_serialized_size_geometry_msgs__msg__Vector3>
 800bd58:	4606      	mov	r6, r0
 800bd5a:	1829      	adds	r1, r5, r0
 800bd5c:	f104 0018 	add.w	r0, r4, #24
 800bd60:	f000 f85a 	bl	800be18 <get_serialized_size_geometry_msgs__msg__Vector3>
 800bd64:	4430      	add	r0, r6
 800bd66:	bd70      	pop	{r4, r5, r6, pc}

0800bd68 <_Twist__cdr_deserialize>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	b189      	cbz	r1, 800bd92 <_Twist__cdr_deserialize+0x2a>
 800bd6e:	4605      	mov	r5, r0
 800bd70:	f000 f8de 	bl	800bf30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bd74:	6843      	ldr	r3, [r0, #4]
 800bd76:	4621      	mov	r1, r4
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	4798      	blx	r3
 800bd7e:	f000 f8d7 	bl	800bf30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bd82:	6843      	ldr	r3, [r0, #4]
 800bd84:	f104 0118 	add.w	r1, r4, #24
 800bd88:	4628      	mov	r0, r5
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd90:	4718      	bx	r3
 800bd92:	4608      	mov	r0, r1
 800bd94:	bd70      	pop	{r4, r5, r6, pc}
 800bd96:	bf00      	nop

0800bd98 <_Twist__cdr_serialize>:
 800bd98:	b510      	push	{r4, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	9101      	str	r1, [sp, #4]
 800bd9e:	b190      	cbz	r0, 800bdc6 <_Twist__cdr_serialize+0x2e>
 800bda0:	4604      	mov	r4, r0
 800bda2:	f000 f8c5 	bl	800bf30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bda6:	6843      	ldr	r3, [r0, #4]
 800bda8:	9901      	ldr	r1, [sp, #4]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	4620      	mov	r0, r4
 800bdae:	4798      	blx	r3
 800bdb0:	f000 f8be 	bl	800bf30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800bdb4:	6843      	ldr	r3, [r0, #4]
 800bdb6:	9901      	ldr	r1, [sp, #4]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	f104 0018 	add.w	r0, r4, #24
 800bdbe:	b002      	add	sp, #8
 800bdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc4:	4718      	bx	r3
 800bdc6:	b002      	add	sp, #8
 800bdc8:	bd10      	pop	{r4, pc}
 800bdca:	bf00      	nop

0800bdcc <_Twist__get_serialized_size>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4604      	mov	r4, r0
 800bdd0:	b148      	cbz	r0, 800bde6 <_Twist__get_serialized_size+0x1a>
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	f000 f820 	bl	800be18 <get_serialized_size_geometry_msgs__msg__Vector3>
 800bdd8:	4605      	mov	r5, r0
 800bdda:	4601      	mov	r1, r0
 800bddc:	f104 0018 	add.w	r0, r4, #24
 800bde0:	f000 f81a 	bl	800be18 <get_serialized_size_geometry_msgs__msg__Vector3>
 800bde4:	4428      	add	r0, r5
 800bde6:	bd38      	pop	{r3, r4, r5, pc}

0800bde8 <_Twist__max_serialized_size>:
 800bde8:	b510      	push	{r4, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	2301      	movs	r3, #1
 800bdee:	2100      	movs	r1, #0
 800bdf0:	f10d 0007 	add.w	r0, sp, #7
 800bdf4:	f88d 3007 	strb.w	r3, [sp, #7]
 800bdf8:	f000 f87e 	bl	800bef8 <max_serialized_size_geometry_msgs__msg__Vector3>
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	4601      	mov	r1, r0
 800be00:	f10d 0007 	add.w	r0, sp, #7
 800be04:	f000 f878 	bl	800bef8 <max_serialized_size_geometry_msgs__msg__Vector3>
 800be08:	4420      	add	r0, r4
 800be0a:	b002      	add	sp, #8
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	bf00      	nop

0800be10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800be10:	4800      	ldr	r0, [pc, #0]	; (800be14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800be12:	4770      	bx	lr
 800be14:	200002e8 	.word	0x200002e8

0800be18 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800be18:	b1b8      	cbz	r0, 800be4a <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800be1a:	b538      	push	{r3, r4, r5, lr}
 800be1c:	460d      	mov	r5, r1
 800be1e:	4628      	mov	r0, r5
 800be20:	2108      	movs	r1, #8
 800be22:	f001 f9fd 	bl	800d220 <ucdr_alignment>
 800be26:	f105 0308 	add.w	r3, r5, #8
 800be2a:	181c      	adds	r4, r3, r0
 800be2c:	2108      	movs	r1, #8
 800be2e:	4620      	mov	r0, r4
 800be30:	f001 f9f6 	bl	800d220 <ucdr_alignment>
 800be34:	3008      	adds	r0, #8
 800be36:	4404      	add	r4, r0
 800be38:	2108      	movs	r1, #8
 800be3a:	4620      	mov	r0, r4
 800be3c:	f001 f9f0 	bl	800d220 <ucdr_alignment>
 800be40:	f1c5 0508 	rsb	r5, r5, #8
 800be44:	4428      	add	r0, r5
 800be46:	4420      	add	r0, r4
 800be48:	bd38      	pop	{r3, r4, r5, pc}
 800be4a:	4770      	bx	lr

0800be4c <_Vector3__cdr_deserialize>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	460c      	mov	r4, r1
 800be50:	b171      	cbz	r1, 800be70 <_Vector3__cdr_deserialize+0x24>
 800be52:	4605      	mov	r5, r0
 800be54:	f001 f8c6 	bl	800cfe4 <ucdr_deserialize_double>
 800be58:	f104 0108 	add.w	r1, r4, #8
 800be5c:	4628      	mov	r0, r5
 800be5e:	f001 f8c1 	bl	800cfe4 <ucdr_deserialize_double>
 800be62:	f104 0110 	add.w	r1, r4, #16
 800be66:	4628      	mov	r0, r5
 800be68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be6c:	f001 b8ba 	b.w	800cfe4 <ucdr_deserialize_double>
 800be70:	4608      	mov	r0, r1
 800be72:	bd38      	pop	{r3, r4, r5, pc}

0800be74 <_Vector3__cdr_serialize>:
 800be74:	b198      	cbz	r0, 800be9e <_Vector3__cdr_serialize+0x2a>
 800be76:	b538      	push	{r3, r4, r5, lr}
 800be78:	ed90 0b00 	vldr	d0, [r0]
 800be7c:	460d      	mov	r5, r1
 800be7e:	4604      	mov	r4, r0
 800be80:	4608      	mov	r0, r1
 800be82:	f000 ffdf 	bl	800ce44 <ucdr_serialize_double>
 800be86:	ed94 0b02 	vldr	d0, [r4, #8]
 800be8a:	4628      	mov	r0, r5
 800be8c:	f000 ffda 	bl	800ce44 <ucdr_serialize_double>
 800be90:	ed94 0b04 	vldr	d0, [r4, #16]
 800be94:	4628      	mov	r0, r5
 800be96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9a:	f000 bfd3 	b.w	800ce44 <ucdr_serialize_double>
 800be9e:	4770      	bx	lr

0800bea0 <_Vector3__get_serialized_size>:
 800bea0:	b198      	cbz	r0, 800beca <_Vector3__get_serialized_size+0x2a>
 800bea2:	b510      	push	{r4, lr}
 800bea4:	2108      	movs	r1, #8
 800bea6:	2000      	movs	r0, #0
 800bea8:	f001 f9ba 	bl	800d220 <ucdr_alignment>
 800beac:	f100 0408 	add.w	r4, r0, #8
 800beb0:	2108      	movs	r1, #8
 800beb2:	4620      	mov	r0, r4
 800beb4:	f001 f9b4 	bl	800d220 <ucdr_alignment>
 800beb8:	3008      	adds	r0, #8
 800beba:	4404      	add	r4, r0
 800bebc:	2108      	movs	r1, #8
 800bebe:	4620      	mov	r0, r4
 800bec0:	f001 f9ae 	bl	800d220 <ucdr_alignment>
 800bec4:	3008      	adds	r0, #8
 800bec6:	4420      	add	r0, r4
 800bec8:	bd10      	pop	{r4, pc}
 800beca:	4770      	bx	lr

0800becc <_Vector3__max_serialized_size>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	2108      	movs	r1, #8
 800bed0:	2000      	movs	r0, #0
 800bed2:	f001 f9a5 	bl	800d220 <ucdr_alignment>
 800bed6:	f100 0508 	add.w	r5, r0, #8
 800beda:	2108      	movs	r1, #8
 800bedc:	4628      	mov	r0, r5
 800bede:	f001 f99f 	bl	800d220 <ucdr_alignment>
 800bee2:	f100 0408 	add.w	r4, r0, #8
 800bee6:	442c      	add	r4, r5
 800bee8:	2108      	movs	r1, #8
 800beea:	4620      	mov	r0, r4
 800beec:	f001 f998 	bl	800d220 <ucdr_alignment>
 800bef0:	3008      	adds	r0, #8
 800bef2:	4420      	add	r0, r4
 800bef4:	bd38      	pop	{r3, r4, r5, pc}
 800bef6:	bf00      	nop

0800bef8 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	2301      	movs	r3, #1
 800befc:	460c      	mov	r4, r1
 800befe:	7003      	strb	r3, [r0, #0]
 800bf00:	2108      	movs	r1, #8
 800bf02:	4620      	mov	r0, r4
 800bf04:	f001 f98c 	bl	800d220 <ucdr_alignment>
 800bf08:	f104 0508 	add.w	r5, r4, #8
 800bf0c:	1946      	adds	r6, r0, r5
 800bf0e:	2108      	movs	r1, #8
 800bf10:	4630      	mov	r0, r6
 800bf12:	f001 f985 	bl	800d220 <ucdr_alignment>
 800bf16:	f100 0508 	add.w	r5, r0, #8
 800bf1a:	4435      	add	r5, r6
 800bf1c:	2108      	movs	r1, #8
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f001 f97e 	bl	800d220 <ucdr_alignment>
 800bf24:	f1c4 0408 	rsb	r4, r4, #8
 800bf28:	4420      	add	r0, r4
 800bf2a:	4428      	add	r0, r5
 800bf2c:	bd70      	pop	{r4, r5, r6, pc}
 800bf2e:	bf00      	nop

0800bf30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800bf30:	4800      	ldr	r0, [pc, #0]	; (800bf34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800bf32:	4770      	bx	lr
 800bf34:	20000310 	.word	0x20000310

0800bf38 <ucdr_serialize_bool>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	2101      	movs	r1, #1
 800bf3e:	4604      	mov	r4, r0
 800bf40:	f001 f922 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800bf44:	b148      	cbz	r0, 800bf5a <ucdr_serialize_bool+0x22>
 800bf46:	68a3      	ldr	r3, [r4, #8]
 800bf48:	701d      	strb	r5, [r3, #0]
 800bf4a:	68a2      	ldr	r2, [r4, #8]
 800bf4c:	6923      	ldr	r3, [r4, #16]
 800bf4e:	2101      	movs	r1, #1
 800bf50:	440a      	add	r2, r1
 800bf52:	440b      	add	r3, r1
 800bf54:	60a2      	str	r2, [r4, #8]
 800bf56:	6123      	str	r3, [r4, #16]
 800bf58:	7561      	strb	r1, [r4, #21]
 800bf5a:	7da0      	ldrb	r0, [r4, #22]
 800bf5c:	f080 0001 	eor.w	r0, r0, #1
 800bf60:	bd38      	pop	{r3, r4, r5, pc}
 800bf62:	bf00      	nop

0800bf64 <ucdr_deserialize_bool>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	460d      	mov	r5, r1
 800bf68:	2101      	movs	r1, #1
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	f001 f90c 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800bf70:	b160      	cbz	r0, 800bf8c <ucdr_deserialize_bool+0x28>
 800bf72:	68a2      	ldr	r2, [r4, #8]
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bf7a:	3900      	subs	r1, #0
 800bf7c:	bf18      	it	ne
 800bf7e:	2101      	movne	r1, #1
 800bf80:	7029      	strb	r1, [r5, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	2101      	movs	r1, #1
 800bf86:	60a2      	str	r2, [r4, #8]
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	7561      	strb	r1, [r4, #21]
 800bf8c:	7da0      	ldrb	r0, [r4, #22]
 800bf8e:	f080 0001 	eor.w	r0, r0, #1
 800bf92:	bd38      	pop	{r3, r4, r5, pc}

0800bf94 <ucdr_serialize_uint8_t>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	460d      	mov	r5, r1
 800bf98:	2101      	movs	r1, #1
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	f001 f8f4 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800bfa0:	b148      	cbz	r0, 800bfb6 <ucdr_serialize_uint8_t+0x22>
 800bfa2:	68a3      	ldr	r3, [r4, #8]
 800bfa4:	701d      	strb	r5, [r3, #0]
 800bfa6:	68a2      	ldr	r2, [r4, #8]
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	2101      	movs	r1, #1
 800bfac:	440a      	add	r2, r1
 800bfae:	440b      	add	r3, r1
 800bfb0:	60a2      	str	r2, [r4, #8]
 800bfb2:	6123      	str	r3, [r4, #16]
 800bfb4:	7561      	strb	r1, [r4, #21]
 800bfb6:	7da0      	ldrb	r0, [r4, #22]
 800bfb8:	f080 0001 	eor.w	r0, r0, #1
 800bfbc:	bd38      	pop	{r3, r4, r5, pc}
 800bfbe:	bf00      	nop

0800bfc0 <ucdr_deserialize_uint8_t>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	f001 f8de 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800bfcc:	b150      	cbz	r0, 800bfe4 <ucdr_deserialize_uint8_t+0x24>
 800bfce:	68a3      	ldr	r3, [r4, #8]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	702b      	strb	r3, [r5, #0]
 800bfd4:	68a2      	ldr	r2, [r4, #8]
 800bfd6:	6923      	ldr	r3, [r4, #16]
 800bfd8:	2101      	movs	r1, #1
 800bfda:	440a      	add	r2, r1
 800bfdc:	440b      	add	r3, r1
 800bfde:	60a2      	str	r2, [r4, #8]
 800bfe0:	6123      	str	r3, [r4, #16]
 800bfe2:	7561      	strb	r1, [r4, #21]
 800bfe4:	7da0      	ldrb	r0, [r4, #22]
 800bfe6:	f080 0001 	eor.w	r0, r0, #1
 800bfea:	bd38      	pop	{r3, r4, r5, pc}

0800bfec <ucdr_serialize_uint16_t>:
 800bfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff0:	b082      	sub	sp, #8
 800bff2:	460b      	mov	r3, r1
 800bff4:	2102      	movs	r1, #2
 800bff6:	4604      	mov	r4, r0
 800bff8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bffc:	f001 f918 	bl	800d230 <ucdr_buffer_alignment>
 800c000:	4601      	mov	r1, r0
 800c002:	4620      	mov	r0, r4
 800c004:	7d67      	ldrb	r7, [r4, #21]
 800c006:	f001 f957 	bl	800d2b8 <ucdr_advance_buffer>
 800c00a:	2102      	movs	r1, #2
 800c00c:	4620      	mov	r0, r4
 800c00e:	f001 f8af 	bl	800d170 <ucdr_check_buffer_available_for>
 800c012:	bb78      	cbnz	r0, 800c074 <ucdr_serialize_uint16_t+0x88>
 800c014:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c018:	42ab      	cmp	r3, r5
 800c01a:	d926      	bls.n	800c06a <ucdr_serialize_uint16_t+0x7e>
 800c01c:	1b5e      	subs	r6, r3, r5
 800c01e:	60a3      	str	r3, [r4, #8]
 800c020:	6923      	ldr	r3, [r4, #16]
 800c022:	f1c6 0802 	rsb	r8, r6, #2
 800c026:	4433      	add	r3, r6
 800c028:	6123      	str	r3, [r4, #16]
 800c02a:	4641      	mov	r1, r8
 800c02c:	4620      	mov	r0, r4
 800c02e:	f001 f8ab 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c032:	2800      	cmp	r0, #0
 800c034:	d03b      	beq.n	800c0ae <ucdr_serialize_uint16_t+0xc2>
 800c036:	7d23      	ldrb	r3, [r4, #20]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d04a      	beq.n	800c0d2 <ucdr_serialize_uint16_t+0xe6>
 800c03c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c040:	702b      	strb	r3, [r5, #0]
 800c042:	2e00      	cmp	r6, #0
 800c044:	d040      	beq.n	800c0c8 <ucdr_serialize_uint16_t+0xdc>
 800c046:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c04a:	706b      	strb	r3, [r5, #1]
 800c04c:	6923      	ldr	r3, [r4, #16]
 800c04e:	68a2      	ldr	r2, [r4, #8]
 800c050:	7da0      	ldrb	r0, [r4, #22]
 800c052:	3302      	adds	r3, #2
 800c054:	1b9e      	subs	r6, r3, r6
 800c056:	4442      	add	r2, r8
 800c058:	2302      	movs	r3, #2
 800c05a:	f080 0001 	eor.w	r0, r0, #1
 800c05e:	60a2      	str	r2, [r4, #8]
 800c060:	6126      	str	r6, [r4, #16]
 800c062:	7563      	strb	r3, [r4, #21]
 800c064:	b002      	add	sp, #8
 800c066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c06a:	2102      	movs	r1, #2
 800c06c:	4620      	mov	r0, r4
 800c06e:	f001 f88b 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c072:	b190      	cbz	r0, 800c09a <ucdr_serialize_uint16_t+0xae>
 800c074:	7d23      	ldrb	r3, [r4, #20]
 800c076:	2b01      	cmp	r3, #1
 800c078:	68a3      	ldr	r3, [r4, #8]
 800c07a:	d014      	beq.n	800c0a6 <ucdr_serialize_uint16_t+0xba>
 800c07c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c080:	701a      	strb	r2, [r3, #0]
 800c082:	68a3      	ldr	r3, [r4, #8]
 800c084:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c088:	705a      	strb	r2, [r3, #1]
 800c08a:	68a2      	ldr	r2, [r4, #8]
 800c08c:	6923      	ldr	r3, [r4, #16]
 800c08e:	3202      	adds	r2, #2
 800c090:	3302      	adds	r3, #2
 800c092:	2102      	movs	r1, #2
 800c094:	60a2      	str	r2, [r4, #8]
 800c096:	6123      	str	r3, [r4, #16]
 800c098:	7561      	strb	r1, [r4, #21]
 800c09a:	7da0      	ldrb	r0, [r4, #22]
 800c09c:	f080 0001 	eor.w	r0, r0, #1
 800c0a0:	b002      	add	sp, #8
 800c0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c0aa:	801a      	strh	r2, [r3, #0]
 800c0ac:	e7ed      	b.n	800c08a <ucdr_serialize_uint16_t+0x9e>
 800c0ae:	68a2      	ldr	r2, [r4, #8]
 800c0b0:	6923      	ldr	r3, [r4, #16]
 800c0b2:	7da0      	ldrb	r0, [r4, #22]
 800c0b4:	7567      	strb	r7, [r4, #21]
 800c0b6:	1b92      	subs	r2, r2, r6
 800c0b8:	1b9b      	subs	r3, r3, r6
 800c0ba:	f080 0001 	eor.w	r0, r0, #1
 800c0be:	60a2      	str	r2, [r4, #8]
 800c0c0:	6123      	str	r3, [r4, #16]
 800c0c2:	b002      	add	sp, #8
 800c0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c8:	68a3      	ldr	r3, [r4, #8]
 800c0ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c0ce:	701a      	strb	r2, [r3, #0]
 800c0d0:	e7bc      	b.n	800c04c <ucdr_serialize_uint16_t+0x60>
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f10d 0506 	add.w	r5, sp, #6
 800c0d8:	4629      	mov	r1, r5
 800c0da:	4632      	mov	r2, r6
 800c0dc:	f00c fd0c 	bl	8018af8 <memcpy>
 800c0e0:	68a0      	ldr	r0, [r4, #8]
 800c0e2:	4642      	mov	r2, r8
 800c0e4:	19a9      	adds	r1, r5, r6
 800c0e6:	f00c fd07 	bl	8018af8 <memcpy>
 800c0ea:	e7af      	b.n	800c04c <ucdr_serialize_uint16_t+0x60>

0800c0ec <ucdr_serialize_endian_uint16_t>:
 800c0ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0f0:	b083      	sub	sp, #12
 800c0f2:	460d      	mov	r5, r1
 800c0f4:	2102      	movs	r1, #2
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c0fc:	f001 f898 	bl	800d230 <ucdr_buffer_alignment>
 800c100:	4601      	mov	r1, r0
 800c102:	4620      	mov	r0, r4
 800c104:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c108:	f001 f8d6 	bl	800d2b8 <ucdr_advance_buffer>
 800c10c:	2102      	movs	r1, #2
 800c10e:	4620      	mov	r0, r4
 800c110:	f001 f82e 	bl	800d170 <ucdr_check_buffer_available_for>
 800c114:	bb70      	cbnz	r0, 800c174 <ucdr_serialize_endian_uint16_t+0x88>
 800c116:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c11a:	42be      	cmp	r6, r7
 800c11c:	d925      	bls.n	800c16a <ucdr_serialize_endian_uint16_t+0x7e>
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	60a6      	str	r6, [r4, #8]
 800c122:	1bf6      	subs	r6, r6, r7
 800c124:	4433      	add	r3, r6
 800c126:	f1c6 0902 	rsb	r9, r6, #2
 800c12a:	6123      	str	r3, [r4, #16]
 800c12c:	4649      	mov	r1, r9
 800c12e:	4620      	mov	r0, r4
 800c130:	f001 f82a 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c134:	2800      	cmp	r0, #0
 800c136:	d039      	beq.n	800c1ac <ucdr_serialize_endian_uint16_t+0xc0>
 800c138:	2d01      	cmp	r5, #1
 800c13a:	d04a      	beq.n	800c1d2 <ucdr_serialize_endian_uint16_t+0xe6>
 800c13c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c140:	703b      	strb	r3, [r7, #0]
 800c142:	2e00      	cmp	r6, #0
 800c144:	d040      	beq.n	800c1c8 <ucdr_serialize_endian_uint16_t+0xdc>
 800c146:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c14a:	707b      	strb	r3, [r7, #1]
 800c14c:	6923      	ldr	r3, [r4, #16]
 800c14e:	68a2      	ldr	r2, [r4, #8]
 800c150:	7da0      	ldrb	r0, [r4, #22]
 800c152:	3302      	adds	r3, #2
 800c154:	444a      	add	r2, r9
 800c156:	1b9b      	subs	r3, r3, r6
 800c158:	2102      	movs	r1, #2
 800c15a:	f080 0001 	eor.w	r0, r0, #1
 800c15e:	60a2      	str	r2, [r4, #8]
 800c160:	6123      	str	r3, [r4, #16]
 800c162:	7561      	strb	r1, [r4, #21]
 800c164:	b003      	add	sp, #12
 800c166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c16a:	2102      	movs	r1, #2
 800c16c:	4620      	mov	r0, r4
 800c16e:	f001 f80b 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c172:	b188      	cbz	r0, 800c198 <ucdr_serialize_endian_uint16_t+0xac>
 800c174:	2d01      	cmp	r5, #1
 800c176:	68a3      	ldr	r3, [r4, #8]
 800c178:	d014      	beq.n	800c1a4 <ucdr_serialize_endian_uint16_t+0xb8>
 800c17a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c17e:	701a      	strb	r2, [r3, #0]
 800c180:	68a3      	ldr	r3, [r4, #8]
 800c182:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c186:	705a      	strb	r2, [r3, #1]
 800c188:	68a2      	ldr	r2, [r4, #8]
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	3202      	adds	r2, #2
 800c18e:	3302      	adds	r3, #2
 800c190:	2102      	movs	r1, #2
 800c192:	60a2      	str	r2, [r4, #8]
 800c194:	6123      	str	r3, [r4, #16]
 800c196:	7561      	strb	r1, [r4, #21]
 800c198:	7da0      	ldrb	r0, [r4, #22]
 800c19a:	f080 0001 	eor.w	r0, r0, #1
 800c19e:	b003      	add	sp, #12
 800c1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c1a8:	801a      	strh	r2, [r3, #0]
 800c1aa:	e7ed      	b.n	800c188 <ucdr_serialize_endian_uint16_t+0x9c>
 800c1ac:	68a2      	ldr	r2, [r4, #8]
 800c1ae:	6923      	ldr	r3, [r4, #16]
 800c1b0:	7da0      	ldrb	r0, [r4, #22]
 800c1b2:	f884 8015 	strb.w	r8, [r4, #21]
 800c1b6:	1b92      	subs	r2, r2, r6
 800c1b8:	1b9b      	subs	r3, r3, r6
 800c1ba:	f080 0001 	eor.w	r0, r0, #1
 800c1be:	60a2      	str	r2, [r4, #8]
 800c1c0:	6123      	str	r3, [r4, #16]
 800c1c2:	b003      	add	sp, #12
 800c1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1c8:	68a3      	ldr	r3, [r4, #8]
 800c1ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1ce:	701a      	strb	r2, [r3, #0]
 800c1d0:	e7bc      	b.n	800c14c <ucdr_serialize_endian_uint16_t+0x60>
 800c1d2:	f10d 0506 	add.w	r5, sp, #6
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	4632      	mov	r2, r6
 800c1da:	4638      	mov	r0, r7
 800c1dc:	f00c fc8c 	bl	8018af8 <memcpy>
 800c1e0:	68a0      	ldr	r0, [r4, #8]
 800c1e2:	464a      	mov	r2, r9
 800c1e4:	19a9      	adds	r1, r5, r6
 800c1e6:	f00c fc87 	bl	8018af8 <memcpy>
 800c1ea:	e7af      	b.n	800c14c <ucdr_serialize_endian_uint16_t+0x60>

0800c1ec <ucdr_deserialize_uint16_t>:
 800c1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1f0:	460d      	mov	r5, r1
 800c1f2:	2102      	movs	r1, #2
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	f001 f81b 	bl	800d230 <ucdr_buffer_alignment>
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c202:	f001 f859 	bl	800d2b8 <ucdr_advance_buffer>
 800c206:	2102      	movs	r1, #2
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 ffb1 	bl	800d170 <ucdr_check_buffer_available_for>
 800c20e:	bb60      	cbnz	r0, 800c26a <ucdr_deserialize_uint16_t+0x7e>
 800c210:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c214:	42be      	cmp	r6, r7
 800c216:	d923      	bls.n	800c260 <ucdr_deserialize_uint16_t+0x74>
 800c218:	6923      	ldr	r3, [r4, #16]
 800c21a:	60a6      	str	r6, [r4, #8]
 800c21c:	1bf6      	subs	r6, r6, r7
 800c21e:	4433      	add	r3, r6
 800c220:	f1c6 0902 	rsb	r9, r6, #2
 800c224:	6123      	str	r3, [r4, #16]
 800c226:	4649      	mov	r1, r9
 800c228:	4620      	mov	r0, r4
 800c22a:	f000 ffad 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d034      	beq.n	800c29c <ucdr_deserialize_uint16_t+0xb0>
 800c232:	7d23      	ldrb	r3, [r4, #20]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d042      	beq.n	800c2be <ucdr_deserialize_uint16_t+0xd2>
 800c238:	787b      	ldrb	r3, [r7, #1]
 800c23a:	702b      	strb	r3, [r5, #0]
 800c23c:	2e00      	cmp	r6, #0
 800c23e:	d03a      	beq.n	800c2b6 <ucdr_deserialize_uint16_t+0xca>
 800c240:	783b      	ldrb	r3, [r7, #0]
 800c242:	706b      	strb	r3, [r5, #1]
 800c244:	6923      	ldr	r3, [r4, #16]
 800c246:	68a2      	ldr	r2, [r4, #8]
 800c248:	7da0      	ldrb	r0, [r4, #22]
 800c24a:	2102      	movs	r1, #2
 800c24c:	3302      	adds	r3, #2
 800c24e:	444a      	add	r2, r9
 800c250:	1b9b      	subs	r3, r3, r6
 800c252:	7561      	strb	r1, [r4, #21]
 800c254:	60a2      	str	r2, [r4, #8]
 800c256:	6123      	str	r3, [r4, #16]
 800c258:	f080 0001 	eor.w	r0, r0, #1
 800c25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c260:	2102      	movs	r1, #2
 800c262:	4620      	mov	r0, r4
 800c264:	f000 ff90 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c268:	b180      	cbz	r0, 800c28c <ucdr_deserialize_uint16_t+0xa0>
 800c26a:	7d23      	ldrb	r3, [r4, #20]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	68a3      	ldr	r3, [r4, #8]
 800c270:	d011      	beq.n	800c296 <ucdr_deserialize_uint16_t+0xaa>
 800c272:	785b      	ldrb	r3, [r3, #1]
 800c274:	702b      	strb	r3, [r5, #0]
 800c276:	68a3      	ldr	r3, [r4, #8]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	706b      	strb	r3, [r5, #1]
 800c27c:	68a2      	ldr	r2, [r4, #8]
 800c27e:	6923      	ldr	r3, [r4, #16]
 800c280:	3202      	adds	r2, #2
 800c282:	3302      	adds	r3, #2
 800c284:	2102      	movs	r1, #2
 800c286:	60a2      	str	r2, [r4, #8]
 800c288:	6123      	str	r3, [r4, #16]
 800c28a:	7561      	strb	r1, [r4, #21]
 800c28c:	7da0      	ldrb	r0, [r4, #22]
 800c28e:	f080 0001 	eor.w	r0, r0, #1
 800c292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c296:	881b      	ldrh	r3, [r3, #0]
 800c298:	802b      	strh	r3, [r5, #0]
 800c29a:	e7ef      	b.n	800c27c <ucdr_deserialize_uint16_t+0x90>
 800c29c:	68a2      	ldr	r2, [r4, #8]
 800c29e:	6923      	ldr	r3, [r4, #16]
 800c2a0:	7da0      	ldrb	r0, [r4, #22]
 800c2a2:	f884 8015 	strb.w	r8, [r4, #21]
 800c2a6:	1b92      	subs	r2, r2, r6
 800c2a8:	1b9b      	subs	r3, r3, r6
 800c2aa:	60a2      	str	r2, [r4, #8]
 800c2ac:	6123      	str	r3, [r4, #16]
 800c2ae:	f080 0001 	eor.w	r0, r0, #1
 800c2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2b6:	68a3      	ldr	r3, [r4, #8]
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	706b      	strb	r3, [r5, #1]
 800c2bc:	e7c2      	b.n	800c244 <ucdr_deserialize_uint16_t+0x58>
 800c2be:	4639      	mov	r1, r7
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f00c fc18 	bl	8018af8 <memcpy>
 800c2c8:	68a1      	ldr	r1, [r4, #8]
 800c2ca:	464a      	mov	r2, r9
 800c2cc:	19a8      	adds	r0, r5, r6
 800c2ce:	f00c fc13 	bl	8018af8 <memcpy>
 800c2d2:	e7b7      	b.n	800c244 <ucdr_deserialize_uint16_t+0x58>

0800c2d4 <ucdr_deserialize_endian_uint16_t>:
 800c2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d8:	460e      	mov	r6, r1
 800c2da:	2102      	movs	r1, #2
 800c2dc:	4604      	mov	r4, r0
 800c2de:	4615      	mov	r5, r2
 800c2e0:	f000 ffa6 	bl	800d230 <ucdr_buffer_alignment>
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c2ec:	f000 ffe4 	bl	800d2b8 <ucdr_advance_buffer>
 800c2f0:	2102      	movs	r1, #2
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 ff3c 	bl	800d170 <ucdr_check_buffer_available_for>
 800c2f8:	bb70      	cbnz	r0, 800c358 <ucdr_deserialize_endian_uint16_t+0x84>
 800c2fa:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c2fe:	4547      	cmp	r7, r8
 800c300:	d925      	bls.n	800c34e <ucdr_deserialize_endian_uint16_t+0x7a>
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	60a7      	str	r7, [r4, #8]
 800c306:	eba7 0708 	sub.w	r7, r7, r8
 800c30a:	443b      	add	r3, r7
 800c30c:	f1c7 0a02 	rsb	sl, r7, #2
 800c310:	6123      	str	r3, [r4, #16]
 800c312:	4651      	mov	r1, sl
 800c314:	4620      	mov	r0, r4
 800c316:	f000 ff37 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d034      	beq.n	800c388 <ucdr_deserialize_endian_uint16_t+0xb4>
 800c31e:	2e01      	cmp	r6, #1
 800c320:	d043      	beq.n	800c3aa <ucdr_deserialize_endian_uint16_t+0xd6>
 800c322:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c326:	702b      	strb	r3, [r5, #0]
 800c328:	2f00      	cmp	r7, #0
 800c32a:	d03a      	beq.n	800c3a2 <ucdr_deserialize_endian_uint16_t+0xce>
 800c32c:	f898 3000 	ldrb.w	r3, [r8]
 800c330:	706b      	strb	r3, [r5, #1]
 800c332:	6923      	ldr	r3, [r4, #16]
 800c334:	68a2      	ldr	r2, [r4, #8]
 800c336:	7da0      	ldrb	r0, [r4, #22]
 800c338:	2102      	movs	r1, #2
 800c33a:	3302      	adds	r3, #2
 800c33c:	4452      	add	r2, sl
 800c33e:	1bdb      	subs	r3, r3, r7
 800c340:	7561      	strb	r1, [r4, #21]
 800c342:	60a2      	str	r2, [r4, #8]
 800c344:	6123      	str	r3, [r4, #16]
 800c346:	f080 0001 	eor.w	r0, r0, #1
 800c34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c34e:	2102      	movs	r1, #2
 800c350:	4620      	mov	r0, r4
 800c352:	f000 ff19 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c356:	b178      	cbz	r0, 800c378 <ucdr_deserialize_endian_uint16_t+0xa4>
 800c358:	2e01      	cmp	r6, #1
 800c35a:	68a3      	ldr	r3, [r4, #8]
 800c35c:	d011      	beq.n	800c382 <ucdr_deserialize_endian_uint16_t+0xae>
 800c35e:	785b      	ldrb	r3, [r3, #1]
 800c360:	702b      	strb	r3, [r5, #0]
 800c362:	68a3      	ldr	r3, [r4, #8]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	706b      	strb	r3, [r5, #1]
 800c368:	68a2      	ldr	r2, [r4, #8]
 800c36a:	6923      	ldr	r3, [r4, #16]
 800c36c:	3202      	adds	r2, #2
 800c36e:	3302      	adds	r3, #2
 800c370:	2102      	movs	r1, #2
 800c372:	60a2      	str	r2, [r4, #8]
 800c374:	6123      	str	r3, [r4, #16]
 800c376:	7561      	strb	r1, [r4, #21]
 800c378:	7da0      	ldrb	r0, [r4, #22]
 800c37a:	f080 0001 	eor.w	r0, r0, #1
 800c37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	802b      	strh	r3, [r5, #0]
 800c386:	e7ef      	b.n	800c368 <ucdr_deserialize_endian_uint16_t+0x94>
 800c388:	68a2      	ldr	r2, [r4, #8]
 800c38a:	6923      	ldr	r3, [r4, #16]
 800c38c:	7da0      	ldrb	r0, [r4, #22]
 800c38e:	f884 9015 	strb.w	r9, [r4, #21]
 800c392:	1bd2      	subs	r2, r2, r7
 800c394:	1bdb      	subs	r3, r3, r7
 800c396:	60a2      	str	r2, [r4, #8]
 800c398:	6123      	str	r3, [r4, #16]
 800c39a:	f080 0001 	eor.w	r0, r0, #1
 800c39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	706b      	strb	r3, [r5, #1]
 800c3a8:	e7c3      	b.n	800c332 <ucdr_deserialize_endian_uint16_t+0x5e>
 800c3aa:	4641      	mov	r1, r8
 800c3ac:	463a      	mov	r2, r7
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f00c fba2 	bl	8018af8 <memcpy>
 800c3b4:	68a1      	ldr	r1, [r4, #8]
 800c3b6:	4652      	mov	r2, sl
 800c3b8:	19e8      	adds	r0, r5, r7
 800c3ba:	f00c fb9d 	bl	8018af8 <memcpy>
 800c3be:	e7b8      	b.n	800c332 <ucdr_deserialize_endian_uint16_t+0x5e>

0800c3c0 <ucdr_serialize_uint32_t>:
 800c3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c4:	b082      	sub	sp, #8
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	9101      	str	r1, [sp, #4]
 800c3ca:	2104      	movs	r1, #4
 800c3cc:	f000 ff30 	bl	800d230 <ucdr_buffer_alignment>
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	7d67      	ldrb	r7, [r4, #21]
 800c3d6:	f000 ff6f 	bl	800d2b8 <ucdr_advance_buffer>
 800c3da:	2104      	movs	r1, #4
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f000 fec7 	bl	800d170 <ucdr_check_buffer_available_for>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d139      	bne.n	800c45a <ucdr_serialize_uint32_t+0x9a>
 800c3e6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c3ea:	42ab      	cmp	r3, r5
 800c3ec:	d930      	bls.n	800c450 <ucdr_serialize_uint32_t+0x90>
 800c3ee:	1b5e      	subs	r6, r3, r5
 800c3f0:	60a3      	str	r3, [r4, #8]
 800c3f2:	6923      	ldr	r3, [r4, #16]
 800c3f4:	f1c6 0804 	rsb	r8, r6, #4
 800c3f8:	4433      	add	r3, r6
 800c3fa:	6123      	str	r3, [r4, #16]
 800c3fc:	4641      	mov	r1, r8
 800c3fe:	4620      	mov	r0, r4
 800c400:	f000 fec2 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c404:	2800      	cmp	r0, #0
 800c406:	d04c      	beq.n	800c4a2 <ucdr_serialize_uint32_t+0xe2>
 800c408:	7d23      	ldrb	r3, [r4, #20]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d063      	beq.n	800c4d6 <ucdr_serialize_uint32_t+0x116>
 800c40e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c412:	702b      	strb	r3, [r5, #0]
 800c414:	2e00      	cmp	r6, #0
 800c416:	d051      	beq.n	800c4bc <ucdr_serialize_uint32_t+0xfc>
 800c418:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c41c:	706b      	strb	r3, [r5, #1]
 800c41e:	2e01      	cmp	r6, #1
 800c420:	d050      	beq.n	800c4c4 <ucdr_serialize_uint32_t+0x104>
 800c422:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c426:	70ab      	strb	r3, [r5, #2]
 800c428:	2e02      	cmp	r6, #2
 800c42a:	d04f      	beq.n	800c4cc <ucdr_serialize_uint32_t+0x10c>
 800c42c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c430:	70eb      	strb	r3, [r5, #3]
 800c432:	6923      	ldr	r3, [r4, #16]
 800c434:	68a2      	ldr	r2, [r4, #8]
 800c436:	7da0      	ldrb	r0, [r4, #22]
 800c438:	3304      	adds	r3, #4
 800c43a:	1b9e      	subs	r6, r3, r6
 800c43c:	4442      	add	r2, r8
 800c43e:	2304      	movs	r3, #4
 800c440:	f080 0001 	eor.w	r0, r0, #1
 800c444:	60a2      	str	r2, [r4, #8]
 800c446:	6126      	str	r6, [r4, #16]
 800c448:	7563      	strb	r3, [r4, #21]
 800c44a:	b002      	add	sp, #8
 800c44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c450:	2104      	movs	r1, #4
 800c452:	4620      	mov	r0, r4
 800c454:	f000 fe98 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c458:	b1d0      	cbz	r0, 800c490 <ucdr_serialize_uint32_t+0xd0>
 800c45a:	7d23      	ldrb	r3, [r4, #20]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	68a3      	ldr	r3, [r4, #8]
 800c460:	d01c      	beq.n	800c49c <ucdr_serialize_uint32_t+0xdc>
 800c462:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c466:	701a      	strb	r2, [r3, #0]
 800c468:	68a3      	ldr	r3, [r4, #8]
 800c46a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c46e:	705a      	strb	r2, [r3, #1]
 800c470:	68a3      	ldr	r3, [r4, #8]
 800c472:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c476:	709a      	strb	r2, [r3, #2]
 800c478:	68a3      	ldr	r3, [r4, #8]
 800c47a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c47e:	70da      	strb	r2, [r3, #3]
 800c480:	68a2      	ldr	r2, [r4, #8]
 800c482:	6923      	ldr	r3, [r4, #16]
 800c484:	3204      	adds	r2, #4
 800c486:	3304      	adds	r3, #4
 800c488:	2104      	movs	r1, #4
 800c48a:	60a2      	str	r2, [r4, #8]
 800c48c:	6123      	str	r3, [r4, #16]
 800c48e:	7561      	strb	r1, [r4, #21]
 800c490:	7da0      	ldrb	r0, [r4, #22]
 800c492:	f080 0001 	eor.w	r0, r0, #1
 800c496:	b002      	add	sp, #8
 800c498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c49c:	9a01      	ldr	r2, [sp, #4]
 800c49e:	601a      	str	r2, [r3, #0]
 800c4a0:	e7ee      	b.n	800c480 <ucdr_serialize_uint32_t+0xc0>
 800c4a2:	68a2      	ldr	r2, [r4, #8]
 800c4a4:	6923      	ldr	r3, [r4, #16]
 800c4a6:	7da0      	ldrb	r0, [r4, #22]
 800c4a8:	7567      	strb	r7, [r4, #21]
 800c4aa:	1b92      	subs	r2, r2, r6
 800c4ac:	1b9b      	subs	r3, r3, r6
 800c4ae:	f080 0001 	eor.w	r0, r0, #1
 800c4b2:	60a2      	str	r2, [r4, #8]
 800c4b4:	6123      	str	r3, [r4, #16]
 800c4b6:	b002      	add	sp, #8
 800c4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4bc:	68a3      	ldr	r3, [r4, #8]
 800c4be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	68a3      	ldr	r3, [r4, #8]
 800c4c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c4ca:	701a      	strb	r2, [r3, #0]
 800c4cc:	68a3      	ldr	r3, [r4, #8]
 800c4ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c4d2:	701a      	strb	r2, [r3, #0]
 800c4d4:	e7ad      	b.n	800c432 <ucdr_serialize_uint32_t+0x72>
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	ad01      	add	r5, sp, #4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4632      	mov	r2, r6
 800c4de:	f00c fb0b 	bl	8018af8 <memcpy>
 800c4e2:	68a0      	ldr	r0, [r4, #8]
 800c4e4:	4642      	mov	r2, r8
 800c4e6:	19a9      	adds	r1, r5, r6
 800c4e8:	f00c fb06 	bl	8018af8 <memcpy>
 800c4ec:	e7a1      	b.n	800c432 <ucdr_serialize_uint32_t+0x72>
 800c4ee:	bf00      	nop

0800c4f0 <ucdr_serialize_endian_uint32_t>:
 800c4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4f4:	b083      	sub	sp, #12
 800c4f6:	460d      	mov	r5, r1
 800c4f8:	2104      	movs	r1, #4
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	9201      	str	r2, [sp, #4]
 800c4fe:	f000 fe97 	bl	800d230 <ucdr_buffer_alignment>
 800c502:	4601      	mov	r1, r0
 800c504:	4620      	mov	r0, r4
 800c506:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c50a:	f000 fed5 	bl	800d2b8 <ucdr_advance_buffer>
 800c50e:	2104      	movs	r1, #4
 800c510:	4620      	mov	r0, r4
 800c512:	f000 fe2d 	bl	800d170 <ucdr_check_buffer_available_for>
 800c516:	2800      	cmp	r0, #0
 800c518:	d138      	bne.n	800c58c <ucdr_serialize_endian_uint32_t+0x9c>
 800c51a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c51e:	42b7      	cmp	r7, r6
 800c520:	d92f      	bls.n	800c582 <ucdr_serialize_endian_uint32_t+0x92>
 800c522:	6923      	ldr	r3, [r4, #16]
 800c524:	60a7      	str	r7, [r4, #8]
 800c526:	1bbf      	subs	r7, r7, r6
 800c528:	443b      	add	r3, r7
 800c52a:	f1c7 0904 	rsb	r9, r7, #4
 800c52e:	6123      	str	r3, [r4, #16]
 800c530:	4649      	mov	r1, r9
 800c532:	4620      	mov	r0, r4
 800c534:	f000 fe28 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d04a      	beq.n	800c5d2 <ucdr_serialize_endian_uint32_t+0xe2>
 800c53c:	2d01      	cmp	r5, #1
 800c53e:	d063      	beq.n	800c608 <ucdr_serialize_endian_uint32_t+0x118>
 800c540:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c544:	7033      	strb	r3, [r6, #0]
 800c546:	2f00      	cmp	r7, #0
 800c548:	d051      	beq.n	800c5ee <ucdr_serialize_endian_uint32_t+0xfe>
 800c54a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c54e:	7073      	strb	r3, [r6, #1]
 800c550:	2f01      	cmp	r7, #1
 800c552:	d050      	beq.n	800c5f6 <ucdr_serialize_endian_uint32_t+0x106>
 800c554:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c558:	70b3      	strb	r3, [r6, #2]
 800c55a:	2f02      	cmp	r7, #2
 800c55c:	d04f      	beq.n	800c5fe <ucdr_serialize_endian_uint32_t+0x10e>
 800c55e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c562:	70f3      	strb	r3, [r6, #3]
 800c564:	6923      	ldr	r3, [r4, #16]
 800c566:	68a2      	ldr	r2, [r4, #8]
 800c568:	7da0      	ldrb	r0, [r4, #22]
 800c56a:	3304      	adds	r3, #4
 800c56c:	444a      	add	r2, r9
 800c56e:	1bdb      	subs	r3, r3, r7
 800c570:	2104      	movs	r1, #4
 800c572:	f080 0001 	eor.w	r0, r0, #1
 800c576:	60a2      	str	r2, [r4, #8]
 800c578:	6123      	str	r3, [r4, #16]
 800c57a:	7561      	strb	r1, [r4, #21]
 800c57c:	b003      	add	sp, #12
 800c57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c582:	2104      	movs	r1, #4
 800c584:	4620      	mov	r0, r4
 800c586:	f000 fdff 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c58a:	b1c8      	cbz	r0, 800c5c0 <ucdr_serialize_endian_uint32_t+0xd0>
 800c58c:	2d01      	cmp	r5, #1
 800c58e:	68a3      	ldr	r3, [r4, #8]
 800c590:	d01c      	beq.n	800c5cc <ucdr_serialize_endian_uint32_t+0xdc>
 800c592:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c596:	701a      	strb	r2, [r3, #0]
 800c598:	68a3      	ldr	r3, [r4, #8]
 800c59a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c59e:	705a      	strb	r2, [r3, #1]
 800c5a0:	68a3      	ldr	r3, [r4, #8]
 800c5a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c5a6:	709a      	strb	r2, [r3, #2]
 800c5a8:	68a3      	ldr	r3, [r4, #8]
 800c5aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c5ae:	70da      	strb	r2, [r3, #3]
 800c5b0:	68a2      	ldr	r2, [r4, #8]
 800c5b2:	6923      	ldr	r3, [r4, #16]
 800c5b4:	3204      	adds	r2, #4
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	2104      	movs	r1, #4
 800c5ba:	60a2      	str	r2, [r4, #8]
 800c5bc:	6123      	str	r3, [r4, #16]
 800c5be:	7561      	strb	r1, [r4, #21]
 800c5c0:	7da0      	ldrb	r0, [r4, #22]
 800c5c2:	f080 0001 	eor.w	r0, r0, #1
 800c5c6:	b003      	add	sp, #12
 800c5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5cc:	9a01      	ldr	r2, [sp, #4]
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	e7ee      	b.n	800c5b0 <ucdr_serialize_endian_uint32_t+0xc0>
 800c5d2:	68a2      	ldr	r2, [r4, #8]
 800c5d4:	6923      	ldr	r3, [r4, #16]
 800c5d6:	7da0      	ldrb	r0, [r4, #22]
 800c5d8:	f884 8015 	strb.w	r8, [r4, #21]
 800c5dc:	1bd2      	subs	r2, r2, r7
 800c5de:	1bdb      	subs	r3, r3, r7
 800c5e0:	f080 0001 	eor.w	r0, r0, #1
 800c5e4:	60a2      	str	r2, [r4, #8]
 800c5e6:	6123      	str	r3, [r4, #16]
 800c5e8:	b003      	add	sp, #12
 800c5ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ee:	68a3      	ldr	r3, [r4, #8]
 800c5f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	68a3      	ldr	r3, [r4, #8]
 800c5f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c5fc:	701a      	strb	r2, [r3, #0]
 800c5fe:	68a3      	ldr	r3, [r4, #8]
 800c600:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c604:	701a      	strb	r2, [r3, #0]
 800c606:	e7ad      	b.n	800c564 <ucdr_serialize_endian_uint32_t+0x74>
 800c608:	ad01      	add	r5, sp, #4
 800c60a:	4629      	mov	r1, r5
 800c60c:	463a      	mov	r2, r7
 800c60e:	4630      	mov	r0, r6
 800c610:	f00c fa72 	bl	8018af8 <memcpy>
 800c614:	68a0      	ldr	r0, [r4, #8]
 800c616:	464a      	mov	r2, r9
 800c618:	19e9      	adds	r1, r5, r7
 800c61a:	f00c fa6d 	bl	8018af8 <memcpy>
 800c61e:	e7a1      	b.n	800c564 <ucdr_serialize_endian_uint32_t+0x74>

0800c620 <ucdr_deserialize_uint32_t>:
 800c620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c624:	460d      	mov	r5, r1
 800c626:	2104      	movs	r1, #4
 800c628:	4604      	mov	r4, r0
 800c62a:	f000 fe01 	bl	800d230 <ucdr_buffer_alignment>
 800c62e:	4601      	mov	r1, r0
 800c630:	4620      	mov	r0, r4
 800c632:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c636:	f000 fe3f 	bl	800d2b8 <ucdr_advance_buffer>
 800c63a:	2104      	movs	r1, #4
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 fd97 	bl	800d170 <ucdr_check_buffer_available_for>
 800c642:	2800      	cmp	r0, #0
 800c644:	d138      	bne.n	800c6b8 <ucdr_deserialize_uint32_t+0x98>
 800c646:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c64a:	42b7      	cmp	r7, r6
 800c64c:	d92f      	bls.n	800c6ae <ucdr_deserialize_uint32_t+0x8e>
 800c64e:	6923      	ldr	r3, [r4, #16]
 800c650:	60a7      	str	r7, [r4, #8]
 800c652:	1bbf      	subs	r7, r7, r6
 800c654:	443b      	add	r3, r7
 800c656:	f1c7 0904 	rsb	r9, r7, #4
 800c65a:	6123      	str	r3, [r4, #16]
 800c65c:	4649      	mov	r1, r9
 800c65e:	4620      	mov	r0, r4
 800c660:	f000 fd92 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c664:	2800      	cmp	r0, #0
 800c666:	d046      	beq.n	800c6f6 <ucdr_deserialize_uint32_t+0xd6>
 800c668:	7d23      	ldrb	r3, [r4, #20]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d05c      	beq.n	800c728 <ucdr_deserialize_uint32_t+0x108>
 800c66e:	78f3      	ldrb	r3, [r6, #3]
 800c670:	702b      	strb	r3, [r5, #0]
 800c672:	2f00      	cmp	r7, #0
 800c674:	d04c      	beq.n	800c710 <ucdr_deserialize_uint32_t+0xf0>
 800c676:	78b3      	ldrb	r3, [r6, #2]
 800c678:	706b      	strb	r3, [r5, #1]
 800c67a:	2f01      	cmp	r7, #1
 800c67c:	f105 0302 	add.w	r3, r5, #2
 800c680:	d04a      	beq.n	800c718 <ucdr_deserialize_uint32_t+0xf8>
 800c682:	7873      	ldrb	r3, [r6, #1]
 800c684:	70ab      	strb	r3, [r5, #2]
 800c686:	2f02      	cmp	r7, #2
 800c688:	f105 0303 	add.w	r3, r5, #3
 800c68c:	d048      	beq.n	800c720 <ucdr_deserialize_uint32_t+0x100>
 800c68e:	7833      	ldrb	r3, [r6, #0]
 800c690:	70eb      	strb	r3, [r5, #3]
 800c692:	6923      	ldr	r3, [r4, #16]
 800c694:	68a2      	ldr	r2, [r4, #8]
 800c696:	7da0      	ldrb	r0, [r4, #22]
 800c698:	2104      	movs	r1, #4
 800c69a:	3304      	adds	r3, #4
 800c69c:	444a      	add	r2, r9
 800c69e:	1bdb      	subs	r3, r3, r7
 800c6a0:	7561      	strb	r1, [r4, #21]
 800c6a2:	60a2      	str	r2, [r4, #8]
 800c6a4:	6123      	str	r3, [r4, #16]
 800c6a6:	f080 0001 	eor.w	r0, r0, #1
 800c6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ae:	2104      	movs	r1, #4
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f000 fd69 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c6b6:	b1b0      	cbz	r0, 800c6e6 <ucdr_deserialize_uint32_t+0xc6>
 800c6b8:	7d23      	ldrb	r3, [r4, #20]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	68a3      	ldr	r3, [r4, #8]
 800c6be:	d017      	beq.n	800c6f0 <ucdr_deserialize_uint32_t+0xd0>
 800c6c0:	78db      	ldrb	r3, [r3, #3]
 800c6c2:	702b      	strb	r3, [r5, #0]
 800c6c4:	68a3      	ldr	r3, [r4, #8]
 800c6c6:	789b      	ldrb	r3, [r3, #2]
 800c6c8:	706b      	strb	r3, [r5, #1]
 800c6ca:	68a3      	ldr	r3, [r4, #8]
 800c6cc:	785b      	ldrb	r3, [r3, #1]
 800c6ce:	70ab      	strb	r3, [r5, #2]
 800c6d0:	68a3      	ldr	r3, [r4, #8]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	70eb      	strb	r3, [r5, #3]
 800c6d6:	68a2      	ldr	r2, [r4, #8]
 800c6d8:	6923      	ldr	r3, [r4, #16]
 800c6da:	3204      	adds	r2, #4
 800c6dc:	3304      	adds	r3, #4
 800c6de:	2104      	movs	r1, #4
 800c6e0:	60a2      	str	r2, [r4, #8]
 800c6e2:	6123      	str	r3, [r4, #16]
 800c6e4:	7561      	strb	r1, [r4, #21]
 800c6e6:	7da0      	ldrb	r0, [r4, #22]
 800c6e8:	f080 0001 	eor.w	r0, r0, #1
 800c6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	602b      	str	r3, [r5, #0]
 800c6f4:	e7ef      	b.n	800c6d6 <ucdr_deserialize_uint32_t+0xb6>
 800c6f6:	68a2      	ldr	r2, [r4, #8]
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	7da0      	ldrb	r0, [r4, #22]
 800c6fc:	f884 8015 	strb.w	r8, [r4, #21]
 800c700:	1bd2      	subs	r2, r2, r7
 800c702:	1bdb      	subs	r3, r3, r7
 800c704:	60a2      	str	r2, [r4, #8]
 800c706:	6123      	str	r3, [r4, #16]
 800c708:	f080 0001 	eor.w	r0, r0, #1
 800c70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c710:	68a3      	ldr	r3, [r4, #8]
 800c712:	789b      	ldrb	r3, [r3, #2]
 800c714:	706b      	strb	r3, [r5, #1]
 800c716:	1cab      	adds	r3, r5, #2
 800c718:	68a2      	ldr	r2, [r4, #8]
 800c71a:	7852      	ldrb	r2, [r2, #1]
 800c71c:	f803 2b01 	strb.w	r2, [r3], #1
 800c720:	68a2      	ldr	r2, [r4, #8]
 800c722:	7812      	ldrb	r2, [r2, #0]
 800c724:	701a      	strb	r2, [r3, #0]
 800c726:	e7b4      	b.n	800c692 <ucdr_deserialize_uint32_t+0x72>
 800c728:	4631      	mov	r1, r6
 800c72a:	463a      	mov	r2, r7
 800c72c:	4628      	mov	r0, r5
 800c72e:	f00c f9e3 	bl	8018af8 <memcpy>
 800c732:	68a1      	ldr	r1, [r4, #8]
 800c734:	464a      	mov	r2, r9
 800c736:	19e8      	adds	r0, r5, r7
 800c738:	f00c f9de 	bl	8018af8 <memcpy>
 800c73c:	e7a9      	b.n	800c692 <ucdr_deserialize_uint32_t+0x72>
 800c73e:	bf00      	nop

0800c740 <ucdr_deserialize_endian_uint32_t>:
 800c740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c744:	460e      	mov	r6, r1
 800c746:	2104      	movs	r1, #4
 800c748:	4604      	mov	r4, r0
 800c74a:	4615      	mov	r5, r2
 800c74c:	f000 fd70 	bl	800d230 <ucdr_buffer_alignment>
 800c750:	4601      	mov	r1, r0
 800c752:	4620      	mov	r0, r4
 800c754:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c758:	f000 fdae 	bl	800d2b8 <ucdr_advance_buffer>
 800c75c:	2104      	movs	r1, #4
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 fd06 	bl	800d170 <ucdr_check_buffer_available_for>
 800c764:	2800      	cmp	r0, #0
 800c766:	d13c      	bne.n	800c7e2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800c768:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c76c:	42bb      	cmp	r3, r7
 800c76e:	d933      	bls.n	800c7d8 <ucdr_deserialize_endian_uint32_t+0x98>
 800c770:	eba3 0807 	sub.w	r8, r3, r7
 800c774:	60a3      	str	r3, [r4, #8]
 800c776:	6923      	ldr	r3, [r4, #16]
 800c778:	f1c8 0a04 	rsb	sl, r8, #4
 800c77c:	4443      	add	r3, r8
 800c77e:	6123      	str	r3, [r4, #16]
 800c780:	4651      	mov	r1, sl
 800c782:	4620      	mov	r0, r4
 800c784:	f000 fd00 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c788:	2800      	cmp	r0, #0
 800c78a:	d048      	beq.n	800c81e <ucdr_deserialize_endian_uint32_t+0xde>
 800c78c:	2e01      	cmp	r6, #1
 800c78e:	d061      	beq.n	800c854 <ucdr_deserialize_endian_uint32_t+0x114>
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	702b      	strb	r3, [r5, #0]
 800c794:	f1b8 0f00 	cmp.w	r8, #0
 800c798:	d050      	beq.n	800c83c <ucdr_deserialize_endian_uint32_t+0xfc>
 800c79a:	78bb      	ldrb	r3, [r7, #2]
 800c79c:	706b      	strb	r3, [r5, #1]
 800c79e:	f1b8 0f01 	cmp.w	r8, #1
 800c7a2:	f105 0302 	add.w	r3, r5, #2
 800c7a6:	d04d      	beq.n	800c844 <ucdr_deserialize_endian_uint32_t+0x104>
 800c7a8:	787b      	ldrb	r3, [r7, #1]
 800c7aa:	70ab      	strb	r3, [r5, #2]
 800c7ac:	f1b8 0f02 	cmp.w	r8, #2
 800c7b0:	f105 0303 	add.w	r3, r5, #3
 800c7b4:	d04a      	beq.n	800c84c <ucdr_deserialize_endian_uint32_t+0x10c>
 800c7b6:	783b      	ldrb	r3, [r7, #0]
 800c7b8:	70eb      	strb	r3, [r5, #3]
 800c7ba:	6923      	ldr	r3, [r4, #16]
 800c7bc:	68a2      	ldr	r2, [r4, #8]
 800c7be:	7da0      	ldrb	r0, [r4, #22]
 800c7c0:	2104      	movs	r1, #4
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4452      	add	r2, sl
 800c7c6:	eba3 0308 	sub.w	r3, r3, r8
 800c7ca:	7561      	strb	r1, [r4, #21]
 800c7cc:	60a2      	str	r2, [r4, #8]
 800c7ce:	6123      	str	r3, [r4, #16]
 800c7d0:	f080 0001 	eor.w	r0, r0, #1
 800c7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d8:	2104      	movs	r1, #4
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f000 fcd4 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c7e0:	b1a8      	cbz	r0, 800c80e <ucdr_deserialize_endian_uint32_t+0xce>
 800c7e2:	2e01      	cmp	r6, #1
 800c7e4:	68a3      	ldr	r3, [r4, #8]
 800c7e6:	d017      	beq.n	800c818 <ucdr_deserialize_endian_uint32_t+0xd8>
 800c7e8:	78db      	ldrb	r3, [r3, #3]
 800c7ea:	702b      	strb	r3, [r5, #0]
 800c7ec:	68a3      	ldr	r3, [r4, #8]
 800c7ee:	789b      	ldrb	r3, [r3, #2]
 800c7f0:	706b      	strb	r3, [r5, #1]
 800c7f2:	68a3      	ldr	r3, [r4, #8]
 800c7f4:	785b      	ldrb	r3, [r3, #1]
 800c7f6:	70ab      	strb	r3, [r5, #2]
 800c7f8:	68a3      	ldr	r3, [r4, #8]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	70eb      	strb	r3, [r5, #3]
 800c7fe:	68a2      	ldr	r2, [r4, #8]
 800c800:	6923      	ldr	r3, [r4, #16]
 800c802:	3204      	adds	r2, #4
 800c804:	3304      	adds	r3, #4
 800c806:	2104      	movs	r1, #4
 800c808:	60a2      	str	r2, [r4, #8]
 800c80a:	6123      	str	r3, [r4, #16]
 800c80c:	7561      	strb	r1, [r4, #21]
 800c80e:	7da0      	ldrb	r0, [r4, #22]
 800c810:	f080 0001 	eor.w	r0, r0, #1
 800c814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	602b      	str	r3, [r5, #0]
 800c81c:	e7ef      	b.n	800c7fe <ucdr_deserialize_endian_uint32_t+0xbe>
 800c81e:	68a2      	ldr	r2, [r4, #8]
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	7da0      	ldrb	r0, [r4, #22]
 800c824:	f884 9015 	strb.w	r9, [r4, #21]
 800c828:	eba2 0208 	sub.w	r2, r2, r8
 800c82c:	eba3 0308 	sub.w	r3, r3, r8
 800c830:	60a2      	str	r2, [r4, #8]
 800c832:	6123      	str	r3, [r4, #16]
 800c834:	f080 0001 	eor.w	r0, r0, #1
 800c838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83c:	68a3      	ldr	r3, [r4, #8]
 800c83e:	789b      	ldrb	r3, [r3, #2]
 800c840:	706b      	strb	r3, [r5, #1]
 800c842:	1cab      	adds	r3, r5, #2
 800c844:	68a2      	ldr	r2, [r4, #8]
 800c846:	7852      	ldrb	r2, [r2, #1]
 800c848:	f803 2b01 	strb.w	r2, [r3], #1
 800c84c:	68a2      	ldr	r2, [r4, #8]
 800c84e:	7812      	ldrb	r2, [r2, #0]
 800c850:	701a      	strb	r2, [r3, #0]
 800c852:	e7b2      	b.n	800c7ba <ucdr_deserialize_endian_uint32_t+0x7a>
 800c854:	4639      	mov	r1, r7
 800c856:	4642      	mov	r2, r8
 800c858:	4628      	mov	r0, r5
 800c85a:	f00c f94d 	bl	8018af8 <memcpy>
 800c85e:	68a1      	ldr	r1, [r4, #8]
 800c860:	4652      	mov	r2, sl
 800c862:	eb05 0008 	add.w	r0, r5, r8
 800c866:	f00c f947 	bl	8018af8 <memcpy>
 800c86a:	e7a6      	b.n	800c7ba <ucdr_deserialize_endian_uint32_t+0x7a>

0800c86c <ucdr_serialize_uint64_t>:
 800c86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c870:	2108      	movs	r1, #8
 800c872:	b082      	sub	sp, #8
 800c874:	4604      	mov	r4, r0
 800c876:	e9cd 2300 	strd	r2, r3, [sp]
 800c87a:	f000 fcd9 	bl	800d230 <ucdr_buffer_alignment>
 800c87e:	4601      	mov	r1, r0
 800c880:	4620      	mov	r0, r4
 800c882:	7d67      	ldrb	r7, [r4, #21]
 800c884:	f000 fd18 	bl	800d2b8 <ucdr_advance_buffer>
 800c888:	2108      	movs	r1, #8
 800c88a:	4620      	mov	r0, r4
 800c88c:	f000 fc70 	bl	800d170 <ucdr_check_buffer_available_for>
 800c890:	2800      	cmp	r0, #0
 800c892:	d14e      	bne.n	800c932 <ucdr_serialize_uint64_t+0xc6>
 800c894:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c898:	42ab      	cmp	r3, r5
 800c89a:	d945      	bls.n	800c928 <ucdr_serialize_uint64_t+0xbc>
 800c89c:	1b5e      	subs	r6, r3, r5
 800c89e:	60a3      	str	r3, [r4, #8]
 800c8a0:	6923      	ldr	r3, [r4, #16]
 800c8a2:	f1c6 0808 	rsb	r8, r6, #8
 800c8a6:	4433      	add	r3, r6
 800c8a8:	6123      	str	r3, [r4, #16]
 800c8aa:	4641      	mov	r1, r8
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f000 fc6b 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d074      	beq.n	800c9a0 <ucdr_serialize_uint64_t+0x134>
 800c8b6:	7d23      	ldrb	r3, [r4, #20]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	f000 809b 	beq.w	800c9f4 <ucdr_serialize_uint64_t+0x188>
 800c8be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c8c2:	702b      	strb	r3, [r5, #0]
 800c8c4:	2e00      	cmp	r6, #0
 800c8c6:	d078      	beq.n	800c9ba <ucdr_serialize_uint64_t+0x14e>
 800c8c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c8cc:	706b      	strb	r3, [r5, #1]
 800c8ce:	2e01      	cmp	r6, #1
 800c8d0:	d077      	beq.n	800c9c2 <ucdr_serialize_uint64_t+0x156>
 800c8d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c8d6:	70ab      	strb	r3, [r5, #2]
 800c8d8:	2e02      	cmp	r6, #2
 800c8da:	d076      	beq.n	800c9ca <ucdr_serialize_uint64_t+0x15e>
 800c8dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c8e0:	70eb      	strb	r3, [r5, #3]
 800c8e2:	2e03      	cmp	r6, #3
 800c8e4:	d075      	beq.n	800c9d2 <ucdr_serialize_uint64_t+0x166>
 800c8e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c8ea:	712b      	strb	r3, [r5, #4]
 800c8ec:	2e04      	cmp	r6, #4
 800c8ee:	d074      	beq.n	800c9da <ucdr_serialize_uint64_t+0x16e>
 800c8f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c8f4:	716b      	strb	r3, [r5, #5]
 800c8f6:	2e05      	cmp	r6, #5
 800c8f8:	d073      	beq.n	800c9e2 <ucdr_serialize_uint64_t+0x176>
 800c8fa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c8fe:	71ab      	strb	r3, [r5, #6]
 800c900:	2e06      	cmp	r6, #6
 800c902:	d072      	beq.n	800c9ea <ucdr_serialize_uint64_t+0x17e>
 800c904:	f89d 3000 	ldrb.w	r3, [sp]
 800c908:	71eb      	strb	r3, [r5, #7]
 800c90a:	6923      	ldr	r3, [r4, #16]
 800c90c:	68a2      	ldr	r2, [r4, #8]
 800c90e:	7da0      	ldrb	r0, [r4, #22]
 800c910:	3308      	adds	r3, #8
 800c912:	1b9e      	subs	r6, r3, r6
 800c914:	4442      	add	r2, r8
 800c916:	2308      	movs	r3, #8
 800c918:	f080 0001 	eor.w	r0, r0, #1
 800c91c:	60a2      	str	r2, [r4, #8]
 800c91e:	6126      	str	r6, [r4, #16]
 800c920:	7563      	strb	r3, [r4, #21]
 800c922:	b002      	add	sp, #8
 800c924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c928:	2108      	movs	r1, #8
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 fc2c 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800c930:	b350      	cbz	r0, 800c988 <ucdr_serialize_uint64_t+0x11c>
 800c932:	7d23      	ldrb	r3, [r4, #20]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d02d      	beq.n	800c994 <ucdr_serialize_uint64_t+0x128>
 800c938:	68a3      	ldr	r3, [r4, #8]
 800c93a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c93e:	701a      	strb	r2, [r3, #0]
 800c940:	68a3      	ldr	r3, [r4, #8]
 800c942:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c946:	705a      	strb	r2, [r3, #1]
 800c948:	68a3      	ldr	r3, [r4, #8]
 800c94a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c94e:	709a      	strb	r2, [r3, #2]
 800c950:	68a3      	ldr	r3, [r4, #8]
 800c952:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c956:	70da      	strb	r2, [r3, #3]
 800c958:	68a3      	ldr	r3, [r4, #8]
 800c95a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c95e:	711a      	strb	r2, [r3, #4]
 800c960:	68a3      	ldr	r3, [r4, #8]
 800c962:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c966:	715a      	strb	r2, [r3, #5]
 800c968:	68a3      	ldr	r3, [r4, #8]
 800c96a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c96e:	719a      	strb	r2, [r3, #6]
 800c970:	68a3      	ldr	r3, [r4, #8]
 800c972:	f89d 2000 	ldrb.w	r2, [sp]
 800c976:	71da      	strb	r2, [r3, #7]
 800c978:	68a2      	ldr	r2, [r4, #8]
 800c97a:	6923      	ldr	r3, [r4, #16]
 800c97c:	3208      	adds	r2, #8
 800c97e:	3308      	adds	r3, #8
 800c980:	2108      	movs	r1, #8
 800c982:	60a2      	str	r2, [r4, #8]
 800c984:	6123      	str	r3, [r4, #16]
 800c986:	7561      	strb	r1, [r4, #21]
 800c988:	7da0      	ldrb	r0, [r4, #22]
 800c98a:	f080 0001 	eor.w	r0, r0, #1
 800c98e:	b002      	add	sp, #8
 800c990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c994:	466b      	mov	r3, sp
 800c996:	cb03      	ldmia	r3!, {r0, r1}
 800c998:	68a3      	ldr	r3, [r4, #8]
 800c99a:	6018      	str	r0, [r3, #0]
 800c99c:	6059      	str	r1, [r3, #4]
 800c99e:	e7eb      	b.n	800c978 <ucdr_serialize_uint64_t+0x10c>
 800c9a0:	68a2      	ldr	r2, [r4, #8]
 800c9a2:	6923      	ldr	r3, [r4, #16]
 800c9a4:	7da0      	ldrb	r0, [r4, #22]
 800c9a6:	7567      	strb	r7, [r4, #21]
 800c9a8:	1b92      	subs	r2, r2, r6
 800c9aa:	1b9b      	subs	r3, r3, r6
 800c9ac:	f080 0001 	eor.w	r0, r0, #1
 800c9b0:	60a2      	str	r2, [r4, #8]
 800c9b2:	6123      	str	r3, [r4, #16]
 800c9b4:	b002      	add	sp, #8
 800c9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ba:	68a3      	ldr	r3, [r4, #8]
 800c9bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	68a3      	ldr	r3, [r4, #8]
 800c9c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c9c8:	701a      	strb	r2, [r3, #0]
 800c9ca:	68a3      	ldr	r3, [r4, #8]
 800c9cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c9d0:	701a      	strb	r2, [r3, #0]
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c9d8:	701a      	strb	r2, [r3, #0]
 800c9da:	68a3      	ldr	r3, [r4, #8]
 800c9dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c9e8:	701a      	strb	r2, [r3, #0]
 800c9ea:	68a3      	ldr	r3, [r4, #8]
 800c9ec:	f89d 2000 	ldrb.w	r2, [sp]
 800c9f0:	701a      	strb	r2, [r3, #0]
 800c9f2:	e78a      	b.n	800c90a <ucdr_serialize_uint64_t+0x9e>
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	466d      	mov	r5, sp
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	4632      	mov	r2, r6
 800c9fc:	f00c f87c 	bl	8018af8 <memcpy>
 800ca00:	68a0      	ldr	r0, [r4, #8]
 800ca02:	4642      	mov	r2, r8
 800ca04:	19a9      	adds	r1, r5, r6
 800ca06:	f00c f877 	bl	8018af8 <memcpy>
 800ca0a:	e77e      	b.n	800c90a <ucdr_serialize_uint64_t+0x9e>

0800ca0c <ucdr_serialize_int16_t>:
 800ca0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	460b      	mov	r3, r1
 800ca14:	2102      	movs	r1, #2
 800ca16:	4604      	mov	r4, r0
 800ca18:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ca1c:	f000 fc08 	bl	800d230 <ucdr_buffer_alignment>
 800ca20:	4601      	mov	r1, r0
 800ca22:	4620      	mov	r0, r4
 800ca24:	7d67      	ldrb	r7, [r4, #21]
 800ca26:	f000 fc47 	bl	800d2b8 <ucdr_advance_buffer>
 800ca2a:	2102      	movs	r1, #2
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 fb9f 	bl	800d170 <ucdr_check_buffer_available_for>
 800ca32:	bb78      	cbnz	r0, 800ca94 <ucdr_serialize_int16_t+0x88>
 800ca34:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca38:	42ab      	cmp	r3, r5
 800ca3a:	d926      	bls.n	800ca8a <ucdr_serialize_int16_t+0x7e>
 800ca3c:	1b5e      	subs	r6, r3, r5
 800ca3e:	60a3      	str	r3, [r4, #8]
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	f1c6 0802 	rsb	r8, r6, #2
 800ca46:	4433      	add	r3, r6
 800ca48:	6123      	str	r3, [r4, #16]
 800ca4a:	4641      	mov	r1, r8
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 fb9b 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d03b      	beq.n	800cace <ucdr_serialize_int16_t+0xc2>
 800ca56:	7d23      	ldrb	r3, [r4, #20]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d04a      	beq.n	800caf2 <ucdr_serialize_int16_t+0xe6>
 800ca5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca60:	702b      	strb	r3, [r5, #0]
 800ca62:	2e00      	cmp	r6, #0
 800ca64:	d040      	beq.n	800cae8 <ucdr_serialize_int16_t+0xdc>
 800ca66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca6a:	706b      	strb	r3, [r5, #1]
 800ca6c:	6923      	ldr	r3, [r4, #16]
 800ca6e:	68a2      	ldr	r2, [r4, #8]
 800ca70:	7da0      	ldrb	r0, [r4, #22]
 800ca72:	3302      	adds	r3, #2
 800ca74:	1b9e      	subs	r6, r3, r6
 800ca76:	4442      	add	r2, r8
 800ca78:	2302      	movs	r3, #2
 800ca7a:	f080 0001 	eor.w	r0, r0, #1
 800ca7e:	60a2      	str	r2, [r4, #8]
 800ca80:	6126      	str	r6, [r4, #16]
 800ca82:	7563      	strb	r3, [r4, #21]
 800ca84:	b002      	add	sp, #8
 800ca86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca8a:	2102      	movs	r1, #2
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f000 fb7b 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800ca92:	b190      	cbz	r0, 800caba <ucdr_serialize_int16_t+0xae>
 800ca94:	7d23      	ldrb	r3, [r4, #20]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	68a3      	ldr	r3, [r4, #8]
 800ca9a:	d014      	beq.n	800cac6 <ucdr_serialize_int16_t+0xba>
 800ca9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800caa0:	701a      	strb	r2, [r3, #0]
 800caa2:	68a3      	ldr	r3, [r4, #8]
 800caa4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800caa8:	705a      	strb	r2, [r3, #1]
 800caaa:	68a2      	ldr	r2, [r4, #8]
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	3202      	adds	r2, #2
 800cab0:	3302      	adds	r3, #2
 800cab2:	2102      	movs	r1, #2
 800cab4:	60a2      	str	r2, [r4, #8]
 800cab6:	6123      	str	r3, [r4, #16]
 800cab8:	7561      	strb	r1, [r4, #21]
 800caba:	7da0      	ldrb	r0, [r4, #22]
 800cabc:	f080 0001 	eor.w	r0, r0, #1
 800cac0:	b002      	add	sp, #8
 800cac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800caca:	801a      	strh	r2, [r3, #0]
 800cacc:	e7ed      	b.n	800caaa <ucdr_serialize_int16_t+0x9e>
 800cace:	68a2      	ldr	r2, [r4, #8]
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	7da0      	ldrb	r0, [r4, #22]
 800cad4:	7567      	strb	r7, [r4, #21]
 800cad6:	1b92      	subs	r2, r2, r6
 800cad8:	1b9b      	subs	r3, r3, r6
 800cada:	f080 0001 	eor.w	r0, r0, #1
 800cade:	60a2      	str	r2, [r4, #8]
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	b002      	add	sp, #8
 800cae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae8:	68a3      	ldr	r3, [r4, #8]
 800caea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800caee:	701a      	strb	r2, [r3, #0]
 800caf0:	e7bc      	b.n	800ca6c <ucdr_serialize_int16_t+0x60>
 800caf2:	4628      	mov	r0, r5
 800caf4:	f10d 0506 	add.w	r5, sp, #6
 800caf8:	4629      	mov	r1, r5
 800cafa:	4632      	mov	r2, r6
 800cafc:	f00b fffc 	bl	8018af8 <memcpy>
 800cb00:	68a0      	ldr	r0, [r4, #8]
 800cb02:	4642      	mov	r2, r8
 800cb04:	19a9      	adds	r1, r5, r6
 800cb06:	f00b fff7 	bl	8018af8 <memcpy>
 800cb0a:	e7af      	b.n	800ca6c <ucdr_serialize_int16_t+0x60>

0800cb0c <ucdr_deserialize_int16_t>:
 800cb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb10:	460d      	mov	r5, r1
 800cb12:	2102      	movs	r1, #2
 800cb14:	4604      	mov	r4, r0
 800cb16:	f000 fb8b 	bl	800d230 <ucdr_buffer_alignment>
 800cb1a:	4601      	mov	r1, r0
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb22:	f000 fbc9 	bl	800d2b8 <ucdr_advance_buffer>
 800cb26:	2102      	movs	r1, #2
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f000 fb21 	bl	800d170 <ucdr_check_buffer_available_for>
 800cb2e:	bb60      	cbnz	r0, 800cb8a <ucdr_deserialize_int16_t+0x7e>
 800cb30:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cb34:	42be      	cmp	r6, r7
 800cb36:	d923      	bls.n	800cb80 <ucdr_deserialize_int16_t+0x74>
 800cb38:	6923      	ldr	r3, [r4, #16]
 800cb3a:	60a6      	str	r6, [r4, #8]
 800cb3c:	1bf6      	subs	r6, r6, r7
 800cb3e:	4433      	add	r3, r6
 800cb40:	f1c6 0902 	rsb	r9, r6, #2
 800cb44:	6123      	str	r3, [r4, #16]
 800cb46:	4649      	mov	r1, r9
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f000 fb1d 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d034      	beq.n	800cbbc <ucdr_deserialize_int16_t+0xb0>
 800cb52:	7d23      	ldrb	r3, [r4, #20]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d042      	beq.n	800cbde <ucdr_deserialize_int16_t+0xd2>
 800cb58:	787b      	ldrb	r3, [r7, #1]
 800cb5a:	702b      	strb	r3, [r5, #0]
 800cb5c:	2e00      	cmp	r6, #0
 800cb5e:	d03a      	beq.n	800cbd6 <ucdr_deserialize_int16_t+0xca>
 800cb60:	783b      	ldrb	r3, [r7, #0]
 800cb62:	706b      	strb	r3, [r5, #1]
 800cb64:	6923      	ldr	r3, [r4, #16]
 800cb66:	68a2      	ldr	r2, [r4, #8]
 800cb68:	7da0      	ldrb	r0, [r4, #22]
 800cb6a:	2102      	movs	r1, #2
 800cb6c:	3302      	adds	r3, #2
 800cb6e:	444a      	add	r2, r9
 800cb70:	1b9b      	subs	r3, r3, r6
 800cb72:	7561      	strb	r1, [r4, #21]
 800cb74:	60a2      	str	r2, [r4, #8]
 800cb76:	6123      	str	r3, [r4, #16]
 800cb78:	f080 0001 	eor.w	r0, r0, #1
 800cb7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb80:	2102      	movs	r1, #2
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 fb00 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800cb88:	b180      	cbz	r0, 800cbac <ucdr_deserialize_int16_t+0xa0>
 800cb8a:	7d23      	ldrb	r3, [r4, #20]
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	68a3      	ldr	r3, [r4, #8]
 800cb90:	d011      	beq.n	800cbb6 <ucdr_deserialize_int16_t+0xaa>
 800cb92:	785b      	ldrb	r3, [r3, #1]
 800cb94:	702b      	strb	r3, [r5, #0]
 800cb96:	68a3      	ldr	r3, [r4, #8]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	706b      	strb	r3, [r5, #1]
 800cb9c:	68a2      	ldr	r2, [r4, #8]
 800cb9e:	6923      	ldr	r3, [r4, #16]
 800cba0:	3202      	adds	r2, #2
 800cba2:	3302      	adds	r3, #2
 800cba4:	2102      	movs	r1, #2
 800cba6:	60a2      	str	r2, [r4, #8]
 800cba8:	6123      	str	r3, [r4, #16]
 800cbaa:	7561      	strb	r1, [r4, #21]
 800cbac:	7da0      	ldrb	r0, [r4, #22]
 800cbae:	f080 0001 	eor.w	r0, r0, #1
 800cbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbb6:	881b      	ldrh	r3, [r3, #0]
 800cbb8:	802b      	strh	r3, [r5, #0]
 800cbba:	e7ef      	b.n	800cb9c <ucdr_deserialize_int16_t+0x90>
 800cbbc:	68a2      	ldr	r2, [r4, #8]
 800cbbe:	6923      	ldr	r3, [r4, #16]
 800cbc0:	7da0      	ldrb	r0, [r4, #22]
 800cbc2:	f884 8015 	strb.w	r8, [r4, #21]
 800cbc6:	1b92      	subs	r2, r2, r6
 800cbc8:	1b9b      	subs	r3, r3, r6
 800cbca:	60a2      	str	r2, [r4, #8]
 800cbcc:	6123      	str	r3, [r4, #16]
 800cbce:	f080 0001 	eor.w	r0, r0, #1
 800cbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbd6:	68a3      	ldr	r3, [r4, #8]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	706b      	strb	r3, [r5, #1]
 800cbdc:	e7c2      	b.n	800cb64 <ucdr_deserialize_int16_t+0x58>
 800cbde:	4639      	mov	r1, r7
 800cbe0:	4632      	mov	r2, r6
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f00b ff88 	bl	8018af8 <memcpy>
 800cbe8:	68a1      	ldr	r1, [r4, #8]
 800cbea:	464a      	mov	r2, r9
 800cbec:	19a8      	adds	r0, r5, r6
 800cbee:	f00b ff83 	bl	8018af8 <memcpy>
 800cbf2:	e7b7      	b.n	800cb64 <ucdr_deserialize_int16_t+0x58>

0800cbf4 <ucdr_serialize_int32_t>:
 800cbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf8:	b082      	sub	sp, #8
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	9101      	str	r1, [sp, #4]
 800cbfe:	2104      	movs	r1, #4
 800cc00:	f000 fb16 	bl	800d230 <ucdr_buffer_alignment>
 800cc04:	4601      	mov	r1, r0
 800cc06:	4620      	mov	r0, r4
 800cc08:	7d67      	ldrb	r7, [r4, #21]
 800cc0a:	f000 fb55 	bl	800d2b8 <ucdr_advance_buffer>
 800cc0e:	2104      	movs	r1, #4
 800cc10:	4620      	mov	r0, r4
 800cc12:	f000 faad 	bl	800d170 <ucdr_check_buffer_available_for>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d139      	bne.n	800cc8e <ucdr_serialize_int32_t+0x9a>
 800cc1a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cc1e:	42ab      	cmp	r3, r5
 800cc20:	d930      	bls.n	800cc84 <ucdr_serialize_int32_t+0x90>
 800cc22:	1b5e      	subs	r6, r3, r5
 800cc24:	60a3      	str	r3, [r4, #8]
 800cc26:	6923      	ldr	r3, [r4, #16]
 800cc28:	f1c6 0804 	rsb	r8, r6, #4
 800cc2c:	4433      	add	r3, r6
 800cc2e:	6123      	str	r3, [r4, #16]
 800cc30:	4641      	mov	r1, r8
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 faa8 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d04c      	beq.n	800ccd6 <ucdr_serialize_int32_t+0xe2>
 800cc3c:	7d23      	ldrb	r3, [r4, #20]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d063      	beq.n	800cd0a <ucdr_serialize_int32_t+0x116>
 800cc42:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc46:	702b      	strb	r3, [r5, #0]
 800cc48:	2e00      	cmp	r6, #0
 800cc4a:	d051      	beq.n	800ccf0 <ucdr_serialize_int32_t+0xfc>
 800cc4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cc50:	706b      	strb	r3, [r5, #1]
 800cc52:	2e01      	cmp	r6, #1
 800cc54:	d050      	beq.n	800ccf8 <ucdr_serialize_int32_t+0x104>
 800cc56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cc5a:	70ab      	strb	r3, [r5, #2]
 800cc5c:	2e02      	cmp	r6, #2
 800cc5e:	d04f      	beq.n	800cd00 <ucdr_serialize_int32_t+0x10c>
 800cc60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc64:	70eb      	strb	r3, [r5, #3]
 800cc66:	6923      	ldr	r3, [r4, #16]
 800cc68:	68a2      	ldr	r2, [r4, #8]
 800cc6a:	7da0      	ldrb	r0, [r4, #22]
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	1b9e      	subs	r6, r3, r6
 800cc70:	4442      	add	r2, r8
 800cc72:	2304      	movs	r3, #4
 800cc74:	f080 0001 	eor.w	r0, r0, #1
 800cc78:	60a2      	str	r2, [r4, #8]
 800cc7a:	6126      	str	r6, [r4, #16]
 800cc7c:	7563      	strb	r3, [r4, #21]
 800cc7e:	b002      	add	sp, #8
 800cc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc84:	2104      	movs	r1, #4
 800cc86:	4620      	mov	r0, r4
 800cc88:	f000 fa7e 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800cc8c:	b1d0      	cbz	r0, 800ccc4 <ucdr_serialize_int32_t+0xd0>
 800cc8e:	7d23      	ldrb	r3, [r4, #20]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	68a3      	ldr	r3, [r4, #8]
 800cc94:	d01c      	beq.n	800ccd0 <ucdr_serialize_int32_t+0xdc>
 800cc96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cc9a:	701a      	strb	r2, [r3, #0]
 800cc9c:	68a3      	ldr	r3, [r4, #8]
 800cc9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cca2:	705a      	strb	r2, [r3, #1]
 800cca4:	68a3      	ldr	r3, [r4, #8]
 800cca6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ccaa:	709a      	strb	r2, [r3, #2]
 800ccac:	68a3      	ldr	r3, [r4, #8]
 800ccae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ccb2:	70da      	strb	r2, [r3, #3]
 800ccb4:	68a2      	ldr	r2, [r4, #8]
 800ccb6:	6923      	ldr	r3, [r4, #16]
 800ccb8:	3204      	adds	r2, #4
 800ccba:	3304      	adds	r3, #4
 800ccbc:	2104      	movs	r1, #4
 800ccbe:	60a2      	str	r2, [r4, #8]
 800ccc0:	6123      	str	r3, [r4, #16]
 800ccc2:	7561      	strb	r1, [r4, #21]
 800ccc4:	7da0      	ldrb	r0, [r4, #22]
 800ccc6:	f080 0001 	eor.w	r0, r0, #1
 800ccca:	b002      	add	sp, #8
 800cccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd0:	9a01      	ldr	r2, [sp, #4]
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	e7ee      	b.n	800ccb4 <ucdr_serialize_int32_t+0xc0>
 800ccd6:	68a2      	ldr	r2, [r4, #8]
 800ccd8:	6923      	ldr	r3, [r4, #16]
 800ccda:	7da0      	ldrb	r0, [r4, #22]
 800ccdc:	7567      	strb	r7, [r4, #21]
 800ccde:	1b92      	subs	r2, r2, r6
 800cce0:	1b9b      	subs	r3, r3, r6
 800cce2:	f080 0001 	eor.w	r0, r0, #1
 800cce6:	60a2      	str	r2, [r4, #8]
 800cce8:	6123      	str	r3, [r4, #16]
 800ccea:	b002      	add	sp, #8
 800ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ccf6:	701a      	strb	r2, [r3, #0]
 800ccf8:	68a3      	ldr	r3, [r4, #8]
 800ccfa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ccfe:	701a      	strb	r2, [r3, #0]
 800cd00:	68a3      	ldr	r3, [r4, #8]
 800cd02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd06:	701a      	strb	r2, [r3, #0]
 800cd08:	e7ad      	b.n	800cc66 <ucdr_serialize_int32_t+0x72>
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	ad01      	add	r5, sp, #4
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4632      	mov	r2, r6
 800cd12:	f00b fef1 	bl	8018af8 <memcpy>
 800cd16:	68a0      	ldr	r0, [r4, #8]
 800cd18:	4642      	mov	r2, r8
 800cd1a:	19a9      	adds	r1, r5, r6
 800cd1c:	f00b feec 	bl	8018af8 <memcpy>
 800cd20:	e7a1      	b.n	800cc66 <ucdr_serialize_int32_t+0x72>
 800cd22:	bf00      	nop

0800cd24 <ucdr_deserialize_int32_t>:
 800cd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd28:	460d      	mov	r5, r1
 800cd2a:	2104      	movs	r1, #4
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	f000 fa7f 	bl	800d230 <ucdr_buffer_alignment>
 800cd32:	4601      	mov	r1, r0
 800cd34:	4620      	mov	r0, r4
 800cd36:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cd3a:	f000 fabd 	bl	800d2b8 <ucdr_advance_buffer>
 800cd3e:	2104      	movs	r1, #4
 800cd40:	4620      	mov	r0, r4
 800cd42:	f000 fa15 	bl	800d170 <ucdr_check_buffer_available_for>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d138      	bne.n	800cdbc <ucdr_deserialize_int32_t+0x98>
 800cd4a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cd4e:	42b7      	cmp	r7, r6
 800cd50:	d92f      	bls.n	800cdb2 <ucdr_deserialize_int32_t+0x8e>
 800cd52:	6923      	ldr	r3, [r4, #16]
 800cd54:	60a7      	str	r7, [r4, #8]
 800cd56:	1bbf      	subs	r7, r7, r6
 800cd58:	443b      	add	r3, r7
 800cd5a:	f1c7 0904 	rsb	r9, r7, #4
 800cd5e:	6123      	str	r3, [r4, #16]
 800cd60:	4649      	mov	r1, r9
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 fa10 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d046      	beq.n	800cdfa <ucdr_deserialize_int32_t+0xd6>
 800cd6c:	7d23      	ldrb	r3, [r4, #20]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d05c      	beq.n	800ce2c <ucdr_deserialize_int32_t+0x108>
 800cd72:	78f3      	ldrb	r3, [r6, #3]
 800cd74:	702b      	strb	r3, [r5, #0]
 800cd76:	2f00      	cmp	r7, #0
 800cd78:	d04c      	beq.n	800ce14 <ucdr_deserialize_int32_t+0xf0>
 800cd7a:	78b3      	ldrb	r3, [r6, #2]
 800cd7c:	706b      	strb	r3, [r5, #1]
 800cd7e:	2f01      	cmp	r7, #1
 800cd80:	f105 0302 	add.w	r3, r5, #2
 800cd84:	d04a      	beq.n	800ce1c <ucdr_deserialize_int32_t+0xf8>
 800cd86:	7873      	ldrb	r3, [r6, #1]
 800cd88:	70ab      	strb	r3, [r5, #2]
 800cd8a:	2f02      	cmp	r7, #2
 800cd8c:	f105 0303 	add.w	r3, r5, #3
 800cd90:	d048      	beq.n	800ce24 <ucdr_deserialize_int32_t+0x100>
 800cd92:	7833      	ldrb	r3, [r6, #0]
 800cd94:	70eb      	strb	r3, [r5, #3]
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	68a2      	ldr	r2, [r4, #8]
 800cd9a:	7da0      	ldrb	r0, [r4, #22]
 800cd9c:	2104      	movs	r1, #4
 800cd9e:	3304      	adds	r3, #4
 800cda0:	444a      	add	r2, r9
 800cda2:	1bdb      	subs	r3, r3, r7
 800cda4:	7561      	strb	r1, [r4, #21]
 800cda6:	60a2      	str	r2, [r4, #8]
 800cda8:	6123      	str	r3, [r4, #16]
 800cdaa:	f080 0001 	eor.w	r0, r0, #1
 800cdae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdb2:	2104      	movs	r1, #4
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f000 f9e7 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800cdba:	b1b0      	cbz	r0, 800cdea <ucdr_deserialize_int32_t+0xc6>
 800cdbc:	7d23      	ldrb	r3, [r4, #20]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	68a3      	ldr	r3, [r4, #8]
 800cdc2:	d017      	beq.n	800cdf4 <ucdr_deserialize_int32_t+0xd0>
 800cdc4:	78db      	ldrb	r3, [r3, #3]
 800cdc6:	702b      	strb	r3, [r5, #0]
 800cdc8:	68a3      	ldr	r3, [r4, #8]
 800cdca:	789b      	ldrb	r3, [r3, #2]
 800cdcc:	706b      	strb	r3, [r5, #1]
 800cdce:	68a3      	ldr	r3, [r4, #8]
 800cdd0:	785b      	ldrb	r3, [r3, #1]
 800cdd2:	70ab      	strb	r3, [r5, #2]
 800cdd4:	68a3      	ldr	r3, [r4, #8]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	70eb      	strb	r3, [r5, #3]
 800cdda:	68a2      	ldr	r2, [r4, #8]
 800cddc:	6923      	ldr	r3, [r4, #16]
 800cdde:	3204      	adds	r2, #4
 800cde0:	3304      	adds	r3, #4
 800cde2:	2104      	movs	r1, #4
 800cde4:	60a2      	str	r2, [r4, #8]
 800cde6:	6123      	str	r3, [r4, #16]
 800cde8:	7561      	strb	r1, [r4, #21]
 800cdea:	7da0      	ldrb	r0, [r4, #22]
 800cdec:	f080 0001 	eor.w	r0, r0, #1
 800cdf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	602b      	str	r3, [r5, #0]
 800cdf8:	e7ef      	b.n	800cdda <ucdr_deserialize_int32_t+0xb6>
 800cdfa:	68a2      	ldr	r2, [r4, #8]
 800cdfc:	6923      	ldr	r3, [r4, #16]
 800cdfe:	7da0      	ldrb	r0, [r4, #22]
 800ce00:	f884 8015 	strb.w	r8, [r4, #21]
 800ce04:	1bd2      	subs	r2, r2, r7
 800ce06:	1bdb      	subs	r3, r3, r7
 800ce08:	60a2      	str	r2, [r4, #8]
 800ce0a:	6123      	str	r3, [r4, #16]
 800ce0c:	f080 0001 	eor.w	r0, r0, #1
 800ce10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce14:	68a3      	ldr	r3, [r4, #8]
 800ce16:	789b      	ldrb	r3, [r3, #2]
 800ce18:	706b      	strb	r3, [r5, #1]
 800ce1a:	1cab      	adds	r3, r5, #2
 800ce1c:	68a2      	ldr	r2, [r4, #8]
 800ce1e:	7852      	ldrb	r2, [r2, #1]
 800ce20:	f803 2b01 	strb.w	r2, [r3], #1
 800ce24:	68a2      	ldr	r2, [r4, #8]
 800ce26:	7812      	ldrb	r2, [r2, #0]
 800ce28:	701a      	strb	r2, [r3, #0]
 800ce2a:	e7b4      	b.n	800cd96 <ucdr_deserialize_int32_t+0x72>
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	463a      	mov	r2, r7
 800ce30:	4628      	mov	r0, r5
 800ce32:	f00b fe61 	bl	8018af8 <memcpy>
 800ce36:	68a1      	ldr	r1, [r4, #8]
 800ce38:	464a      	mov	r2, r9
 800ce3a:	19e8      	adds	r0, r5, r7
 800ce3c:	f00b fe5c 	bl	8018af8 <memcpy>
 800ce40:	e7a9      	b.n	800cd96 <ucdr_deserialize_int32_t+0x72>
 800ce42:	bf00      	nop

0800ce44 <ucdr_serialize_double>:
 800ce44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce48:	2108      	movs	r1, #8
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	ed8d 0b00 	vstr	d0, [sp]
 800ce52:	f000 f9ed 	bl	800d230 <ucdr_buffer_alignment>
 800ce56:	4601      	mov	r1, r0
 800ce58:	4620      	mov	r0, r4
 800ce5a:	7d67      	ldrb	r7, [r4, #21]
 800ce5c:	f000 fa2c 	bl	800d2b8 <ucdr_advance_buffer>
 800ce60:	2108      	movs	r1, #8
 800ce62:	4620      	mov	r0, r4
 800ce64:	f000 f984 	bl	800d170 <ucdr_check_buffer_available_for>
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	d14e      	bne.n	800cf0a <ucdr_serialize_double+0xc6>
 800ce6c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ce70:	42ab      	cmp	r3, r5
 800ce72:	d945      	bls.n	800cf00 <ucdr_serialize_double+0xbc>
 800ce74:	1b5e      	subs	r6, r3, r5
 800ce76:	60a3      	str	r3, [r4, #8]
 800ce78:	6923      	ldr	r3, [r4, #16]
 800ce7a:	f1c6 0808 	rsb	r8, r6, #8
 800ce7e:	4433      	add	r3, r6
 800ce80:	6123      	str	r3, [r4, #16]
 800ce82:	4641      	mov	r1, r8
 800ce84:	4620      	mov	r0, r4
 800ce86:	f000 f97f 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	d074      	beq.n	800cf78 <ucdr_serialize_double+0x134>
 800ce8e:	7d23      	ldrb	r3, [r4, #20]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	f000 809b 	beq.w	800cfcc <ucdr_serialize_double+0x188>
 800ce96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce9a:	702b      	strb	r3, [r5, #0]
 800ce9c:	2e00      	cmp	r6, #0
 800ce9e:	d078      	beq.n	800cf92 <ucdr_serialize_double+0x14e>
 800cea0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cea4:	706b      	strb	r3, [r5, #1]
 800cea6:	2e01      	cmp	r6, #1
 800cea8:	d077      	beq.n	800cf9a <ucdr_serialize_double+0x156>
 800ceaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ceae:	70ab      	strb	r3, [r5, #2]
 800ceb0:	2e02      	cmp	r6, #2
 800ceb2:	d076      	beq.n	800cfa2 <ucdr_serialize_double+0x15e>
 800ceb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ceb8:	70eb      	strb	r3, [r5, #3]
 800ceba:	2e03      	cmp	r6, #3
 800cebc:	d075      	beq.n	800cfaa <ucdr_serialize_double+0x166>
 800cebe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cec2:	712b      	strb	r3, [r5, #4]
 800cec4:	2e04      	cmp	r6, #4
 800cec6:	d074      	beq.n	800cfb2 <ucdr_serialize_double+0x16e>
 800cec8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cecc:	716b      	strb	r3, [r5, #5]
 800cece:	2e05      	cmp	r6, #5
 800ced0:	d073      	beq.n	800cfba <ucdr_serialize_double+0x176>
 800ced2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ced6:	71ab      	strb	r3, [r5, #6]
 800ced8:	2e06      	cmp	r6, #6
 800ceda:	d072      	beq.n	800cfc2 <ucdr_serialize_double+0x17e>
 800cedc:	f89d 3000 	ldrb.w	r3, [sp]
 800cee0:	71eb      	strb	r3, [r5, #7]
 800cee2:	6923      	ldr	r3, [r4, #16]
 800cee4:	68a2      	ldr	r2, [r4, #8]
 800cee6:	7da0      	ldrb	r0, [r4, #22]
 800cee8:	3308      	adds	r3, #8
 800ceea:	1b9e      	subs	r6, r3, r6
 800ceec:	4442      	add	r2, r8
 800ceee:	2308      	movs	r3, #8
 800cef0:	f080 0001 	eor.w	r0, r0, #1
 800cef4:	60a2      	str	r2, [r4, #8]
 800cef6:	6126      	str	r6, [r4, #16]
 800cef8:	7563      	strb	r3, [r4, #21]
 800cefa:	b002      	add	sp, #8
 800cefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf00:	2108      	movs	r1, #8
 800cf02:	4620      	mov	r0, r4
 800cf04:	f000 f940 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800cf08:	b350      	cbz	r0, 800cf60 <ucdr_serialize_double+0x11c>
 800cf0a:	7d23      	ldrb	r3, [r4, #20]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d02d      	beq.n	800cf6c <ucdr_serialize_double+0x128>
 800cf10:	68a3      	ldr	r3, [r4, #8]
 800cf12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cf16:	701a      	strb	r2, [r3, #0]
 800cf18:	68a3      	ldr	r3, [r4, #8]
 800cf1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf1e:	705a      	strb	r2, [r3, #1]
 800cf20:	68a3      	ldr	r3, [r4, #8]
 800cf22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf26:	709a      	strb	r2, [r3, #2]
 800cf28:	68a3      	ldr	r3, [r4, #8]
 800cf2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf2e:	70da      	strb	r2, [r3, #3]
 800cf30:	68a3      	ldr	r3, [r4, #8]
 800cf32:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cf36:	711a      	strb	r2, [r3, #4]
 800cf38:	68a3      	ldr	r3, [r4, #8]
 800cf3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cf3e:	715a      	strb	r2, [r3, #5]
 800cf40:	68a3      	ldr	r3, [r4, #8]
 800cf42:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cf46:	719a      	strb	r2, [r3, #6]
 800cf48:	68a3      	ldr	r3, [r4, #8]
 800cf4a:	f89d 2000 	ldrb.w	r2, [sp]
 800cf4e:	71da      	strb	r2, [r3, #7]
 800cf50:	68a2      	ldr	r2, [r4, #8]
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	3208      	adds	r2, #8
 800cf56:	3308      	adds	r3, #8
 800cf58:	2108      	movs	r1, #8
 800cf5a:	60a2      	str	r2, [r4, #8]
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	7561      	strb	r1, [r4, #21]
 800cf60:	7da0      	ldrb	r0, [r4, #22]
 800cf62:	f080 0001 	eor.w	r0, r0, #1
 800cf66:	b002      	add	sp, #8
 800cf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf6c:	466b      	mov	r3, sp
 800cf6e:	cb03      	ldmia	r3!, {r0, r1}
 800cf70:	68a3      	ldr	r3, [r4, #8]
 800cf72:	6018      	str	r0, [r3, #0]
 800cf74:	6059      	str	r1, [r3, #4]
 800cf76:	e7eb      	b.n	800cf50 <ucdr_serialize_double+0x10c>
 800cf78:	68a2      	ldr	r2, [r4, #8]
 800cf7a:	6923      	ldr	r3, [r4, #16]
 800cf7c:	7da0      	ldrb	r0, [r4, #22]
 800cf7e:	7567      	strb	r7, [r4, #21]
 800cf80:	1b92      	subs	r2, r2, r6
 800cf82:	1b9b      	subs	r3, r3, r6
 800cf84:	f080 0001 	eor.w	r0, r0, #1
 800cf88:	60a2      	str	r2, [r4, #8]
 800cf8a:	6123      	str	r3, [r4, #16]
 800cf8c:	b002      	add	sp, #8
 800cf8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf92:	68a3      	ldr	r3, [r4, #8]
 800cf94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf98:	701a      	strb	r2, [r3, #0]
 800cf9a:	68a3      	ldr	r3, [r4, #8]
 800cf9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cfa0:	701a      	strb	r2, [r3, #0]
 800cfa2:	68a3      	ldr	r3, [r4, #8]
 800cfa4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cfa8:	701a      	strb	r2, [r3, #0]
 800cfaa:	68a3      	ldr	r3, [r4, #8]
 800cfac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cfb0:	701a      	strb	r2, [r3, #0]
 800cfb2:	68a3      	ldr	r3, [r4, #8]
 800cfb4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	68a3      	ldr	r3, [r4, #8]
 800cfbc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cfc0:	701a      	strb	r2, [r3, #0]
 800cfc2:	68a3      	ldr	r3, [r4, #8]
 800cfc4:	f89d 2000 	ldrb.w	r2, [sp]
 800cfc8:	701a      	strb	r2, [r3, #0]
 800cfca:	e78a      	b.n	800cee2 <ucdr_serialize_double+0x9e>
 800cfcc:	4628      	mov	r0, r5
 800cfce:	466d      	mov	r5, sp
 800cfd0:	4629      	mov	r1, r5
 800cfd2:	4632      	mov	r2, r6
 800cfd4:	f00b fd90 	bl	8018af8 <memcpy>
 800cfd8:	68a0      	ldr	r0, [r4, #8]
 800cfda:	4642      	mov	r2, r8
 800cfdc:	19a9      	adds	r1, r5, r6
 800cfde:	f00b fd8b 	bl	8018af8 <memcpy>
 800cfe2:	e77e      	b.n	800cee2 <ucdr_serialize_double+0x9e>

0800cfe4 <ucdr_deserialize_double>:
 800cfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe8:	460d      	mov	r5, r1
 800cfea:	2108      	movs	r1, #8
 800cfec:	4604      	mov	r4, r0
 800cfee:	f000 f91f 	bl	800d230 <ucdr_buffer_alignment>
 800cff2:	4601      	mov	r1, r0
 800cff4:	4620      	mov	r0, r4
 800cff6:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cffa:	f000 f95d 	bl	800d2b8 <ucdr_advance_buffer>
 800cffe:	2108      	movs	r1, #8
 800d000:	4620      	mov	r0, r4
 800d002:	f000 f8b5 	bl	800d170 <ucdr_check_buffer_available_for>
 800d006:	2800      	cmp	r0, #0
 800d008:	d151      	bne.n	800d0ae <ucdr_deserialize_double+0xca>
 800d00a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d00e:	42be      	cmp	r6, r7
 800d010:	d948      	bls.n	800d0a4 <ucdr_deserialize_double+0xc0>
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	60a6      	str	r6, [r4, #8]
 800d016:	1bf6      	subs	r6, r6, r7
 800d018:	4433      	add	r3, r6
 800d01a:	f1c6 0808 	rsb	r8, r6, #8
 800d01e:	6123      	str	r3, [r4, #16]
 800d020:	4641      	mov	r1, r8
 800d022:	4620      	mov	r0, r4
 800d024:	f000 f8b0 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800d028:	2800      	cmp	r0, #0
 800d02a:	d06d      	beq.n	800d108 <ucdr_deserialize_double+0x124>
 800d02c:	7d23      	ldrb	r3, [r4, #20]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	f000 8093 	beq.w	800d15a <ucdr_deserialize_double+0x176>
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	702b      	strb	r3, [r5, #0]
 800d038:	2e00      	cmp	r6, #0
 800d03a:	d072      	beq.n	800d122 <ucdr_deserialize_double+0x13e>
 800d03c:	79bb      	ldrb	r3, [r7, #6]
 800d03e:	706b      	strb	r3, [r5, #1]
 800d040:	2e01      	cmp	r6, #1
 800d042:	f105 0302 	add.w	r3, r5, #2
 800d046:	d070      	beq.n	800d12a <ucdr_deserialize_double+0x146>
 800d048:	797b      	ldrb	r3, [r7, #5]
 800d04a:	70ab      	strb	r3, [r5, #2]
 800d04c:	2e02      	cmp	r6, #2
 800d04e:	f105 0303 	add.w	r3, r5, #3
 800d052:	d06e      	beq.n	800d132 <ucdr_deserialize_double+0x14e>
 800d054:	793b      	ldrb	r3, [r7, #4]
 800d056:	70eb      	strb	r3, [r5, #3]
 800d058:	2e03      	cmp	r6, #3
 800d05a:	f105 0304 	add.w	r3, r5, #4
 800d05e:	d06c      	beq.n	800d13a <ucdr_deserialize_double+0x156>
 800d060:	78fb      	ldrb	r3, [r7, #3]
 800d062:	712b      	strb	r3, [r5, #4]
 800d064:	2e04      	cmp	r6, #4
 800d066:	f105 0305 	add.w	r3, r5, #5
 800d06a:	d06a      	beq.n	800d142 <ucdr_deserialize_double+0x15e>
 800d06c:	78bb      	ldrb	r3, [r7, #2]
 800d06e:	716b      	strb	r3, [r5, #5]
 800d070:	2e05      	cmp	r6, #5
 800d072:	f105 0306 	add.w	r3, r5, #6
 800d076:	d068      	beq.n	800d14a <ucdr_deserialize_double+0x166>
 800d078:	787b      	ldrb	r3, [r7, #1]
 800d07a:	71ab      	strb	r3, [r5, #6]
 800d07c:	2e06      	cmp	r6, #6
 800d07e:	f105 0307 	add.w	r3, r5, #7
 800d082:	d066      	beq.n	800d152 <ucdr_deserialize_double+0x16e>
 800d084:	783b      	ldrb	r3, [r7, #0]
 800d086:	71eb      	strb	r3, [r5, #7]
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	68a2      	ldr	r2, [r4, #8]
 800d08c:	7da0      	ldrb	r0, [r4, #22]
 800d08e:	3308      	adds	r3, #8
 800d090:	1b9e      	subs	r6, r3, r6
 800d092:	2308      	movs	r3, #8
 800d094:	4442      	add	r2, r8
 800d096:	7563      	strb	r3, [r4, #21]
 800d098:	60a2      	str	r2, [r4, #8]
 800d09a:	6126      	str	r6, [r4, #16]
 800d09c:	f080 0001 	eor.w	r0, r0, #1
 800d0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a4:	2108      	movs	r1, #8
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f000 f86e 	bl	800d188 <ucdr_check_final_buffer_behavior>
 800d0ac:	b310      	cbz	r0, 800d0f4 <ucdr_deserialize_double+0x110>
 800d0ae:	7d23      	ldrb	r3, [r4, #20]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	68a3      	ldr	r3, [r4, #8]
 800d0b4:	d023      	beq.n	800d0fe <ucdr_deserialize_double+0x11a>
 800d0b6:	79db      	ldrb	r3, [r3, #7]
 800d0b8:	702b      	strb	r3, [r5, #0]
 800d0ba:	68a3      	ldr	r3, [r4, #8]
 800d0bc:	799b      	ldrb	r3, [r3, #6]
 800d0be:	706b      	strb	r3, [r5, #1]
 800d0c0:	68a3      	ldr	r3, [r4, #8]
 800d0c2:	795b      	ldrb	r3, [r3, #5]
 800d0c4:	70ab      	strb	r3, [r5, #2]
 800d0c6:	68a3      	ldr	r3, [r4, #8]
 800d0c8:	791b      	ldrb	r3, [r3, #4]
 800d0ca:	70eb      	strb	r3, [r5, #3]
 800d0cc:	68a3      	ldr	r3, [r4, #8]
 800d0ce:	78db      	ldrb	r3, [r3, #3]
 800d0d0:	712b      	strb	r3, [r5, #4]
 800d0d2:	68a3      	ldr	r3, [r4, #8]
 800d0d4:	789b      	ldrb	r3, [r3, #2]
 800d0d6:	716b      	strb	r3, [r5, #5]
 800d0d8:	68a3      	ldr	r3, [r4, #8]
 800d0da:	785b      	ldrb	r3, [r3, #1]
 800d0dc:	71ab      	strb	r3, [r5, #6]
 800d0de:	68a3      	ldr	r3, [r4, #8]
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	71eb      	strb	r3, [r5, #7]
 800d0e4:	68a2      	ldr	r2, [r4, #8]
 800d0e6:	6923      	ldr	r3, [r4, #16]
 800d0e8:	3208      	adds	r2, #8
 800d0ea:	3308      	adds	r3, #8
 800d0ec:	2108      	movs	r1, #8
 800d0ee:	60a2      	str	r2, [r4, #8]
 800d0f0:	6123      	str	r3, [r4, #16]
 800d0f2:	7561      	strb	r1, [r4, #21]
 800d0f4:	7da0      	ldrb	r0, [r4, #22]
 800d0f6:	f080 0001 	eor.w	r0, r0, #1
 800d0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	606b      	str	r3, [r5, #4]
 800d104:	602a      	str	r2, [r5, #0]
 800d106:	e7ed      	b.n	800d0e4 <ucdr_deserialize_double+0x100>
 800d108:	68a2      	ldr	r2, [r4, #8]
 800d10a:	6923      	ldr	r3, [r4, #16]
 800d10c:	7da0      	ldrb	r0, [r4, #22]
 800d10e:	f884 9015 	strb.w	r9, [r4, #21]
 800d112:	1b92      	subs	r2, r2, r6
 800d114:	1b9b      	subs	r3, r3, r6
 800d116:	60a2      	str	r2, [r4, #8]
 800d118:	6123      	str	r3, [r4, #16]
 800d11a:	f080 0001 	eor.w	r0, r0, #1
 800d11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d122:	68a3      	ldr	r3, [r4, #8]
 800d124:	799b      	ldrb	r3, [r3, #6]
 800d126:	706b      	strb	r3, [r5, #1]
 800d128:	1cab      	adds	r3, r5, #2
 800d12a:	68a2      	ldr	r2, [r4, #8]
 800d12c:	7952      	ldrb	r2, [r2, #5]
 800d12e:	f803 2b01 	strb.w	r2, [r3], #1
 800d132:	68a2      	ldr	r2, [r4, #8]
 800d134:	7912      	ldrb	r2, [r2, #4]
 800d136:	f803 2b01 	strb.w	r2, [r3], #1
 800d13a:	68a2      	ldr	r2, [r4, #8]
 800d13c:	78d2      	ldrb	r2, [r2, #3]
 800d13e:	f803 2b01 	strb.w	r2, [r3], #1
 800d142:	68a2      	ldr	r2, [r4, #8]
 800d144:	7892      	ldrb	r2, [r2, #2]
 800d146:	f803 2b01 	strb.w	r2, [r3], #1
 800d14a:	68a2      	ldr	r2, [r4, #8]
 800d14c:	7852      	ldrb	r2, [r2, #1]
 800d14e:	f803 2b01 	strb.w	r2, [r3], #1
 800d152:	68a2      	ldr	r2, [r4, #8]
 800d154:	7812      	ldrb	r2, [r2, #0]
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	e796      	b.n	800d088 <ucdr_deserialize_double+0xa4>
 800d15a:	4639      	mov	r1, r7
 800d15c:	4632      	mov	r2, r6
 800d15e:	4628      	mov	r0, r5
 800d160:	f00b fcca 	bl	8018af8 <memcpy>
 800d164:	68a1      	ldr	r1, [r4, #8]
 800d166:	4642      	mov	r2, r8
 800d168:	19a8      	adds	r0, r5, r6
 800d16a:	f00b fcc5 	bl	8018af8 <memcpy>
 800d16e:	e78b      	b.n	800d088 <ucdr_deserialize_double+0xa4>

0800d170 <ucdr_check_buffer_available_for>:
 800d170:	7d83      	ldrb	r3, [r0, #22]
 800d172:	b93b      	cbnz	r3, 800d184 <ucdr_check_buffer_available_for+0x14>
 800d174:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d178:	4419      	add	r1, r3
 800d17a:	4288      	cmp	r0, r1
 800d17c:	bf34      	ite	cc
 800d17e:	2000      	movcc	r0, #0
 800d180:	2001      	movcs	r0, #1
 800d182:	4770      	bx	lr
 800d184:	2000      	movs	r0, #0
 800d186:	4770      	bx	lr

0800d188 <ucdr_check_final_buffer_behavior>:
 800d188:	7d83      	ldrb	r3, [r0, #22]
 800d18a:	b943      	cbnz	r3, 800d19e <ucdr_check_final_buffer_behavior+0x16>
 800d18c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d190:	4291      	cmp	r1, r2
 800d192:	b510      	push	{r4, lr}
 800d194:	4604      	mov	r4, r0
 800d196:	d205      	bcs.n	800d1a4 <ucdr_check_final_buffer_behavior+0x1c>
 800d198:	2301      	movs	r3, #1
 800d19a:	4618      	mov	r0, r3
 800d19c:	bd10      	pop	{r4, pc}
 800d19e:	2300      	movs	r3, #0
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	4770      	bx	lr
 800d1a4:	6982      	ldr	r2, [r0, #24]
 800d1a6:	b13a      	cbz	r2, 800d1b8 <ucdr_check_final_buffer_behavior+0x30>
 800d1a8:	69c1      	ldr	r1, [r0, #28]
 800d1aa:	4790      	blx	r2
 800d1ac:	f080 0301 	eor.w	r3, r0, #1
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	75a0      	strb	r0, [r4, #22]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	bd10      	pop	{r4, pc}
 800d1b8:	2001      	movs	r0, #1
 800d1ba:	75a0      	strb	r0, [r4, #22]
 800d1bc:	e7fa      	b.n	800d1b4 <ucdr_check_final_buffer_behavior+0x2c>
 800d1be:	bf00      	nop

0800d1c0 <ucdr_set_on_full_buffer_callback>:
 800d1c0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop

0800d1c8 <ucdr_init_buffer_origin_offset_endian>:
 800d1c8:	b410      	push	{r4}
 800d1ca:	9c01      	ldr	r4, [sp, #4]
 800d1cc:	6001      	str	r1, [r0, #0]
 800d1ce:	440a      	add	r2, r1
 800d1d0:	6042      	str	r2, [r0, #4]
 800d1d2:	190a      	adds	r2, r1, r4
 800d1d4:	441c      	add	r4, r3
 800d1d6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d1da:	6082      	str	r2, [r0, #8]
 800d1dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d1e0:	7503      	strb	r3, [r0, #20]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1ec:	7542      	strb	r2, [r0, #21]
 800d1ee:	7582      	strb	r2, [r0, #22]
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop

0800d1f4 <ucdr_init_buffer_origin_offset>:
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	9c04      	ldr	r4, [sp, #16]
 800d1fa:	9400      	str	r4, [sp, #0]
 800d1fc:	2401      	movs	r4, #1
 800d1fe:	9401      	str	r4, [sp, #4]
 800d200:	f7ff ffe2 	bl	800d1c8 <ucdr_init_buffer_origin_offset_endian>
 800d204:	b002      	add	sp, #8
 800d206:	bd10      	pop	{r4, pc}

0800d208 <ucdr_init_buffer_origin>:
 800d208:	b510      	push	{r4, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	2400      	movs	r4, #0
 800d20e:	9400      	str	r4, [sp, #0]
 800d210:	f7ff fff0 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 800d214:	b002      	add	sp, #8
 800d216:	bd10      	pop	{r4, pc}

0800d218 <ucdr_init_buffer>:
 800d218:	2300      	movs	r3, #0
 800d21a:	f7ff bff5 	b.w	800d208 <ucdr_init_buffer_origin>
 800d21e:	bf00      	nop

0800d220 <ucdr_alignment>:
 800d220:	fbb0 f3f1 	udiv	r3, r0, r1
 800d224:	fb03 0011 	mls	r0, r3, r1, r0
 800d228:	1a08      	subs	r0, r1, r0
 800d22a:	3901      	subs	r1, #1
 800d22c:	4008      	ands	r0, r1
 800d22e:	4770      	bx	lr

0800d230 <ucdr_buffer_alignment>:
 800d230:	7d43      	ldrb	r3, [r0, #21]
 800d232:	428b      	cmp	r3, r1
 800d234:	d208      	bcs.n	800d248 <ucdr_buffer_alignment+0x18>
 800d236:	6900      	ldr	r0, [r0, #16]
 800d238:	fbb0 f3f1 	udiv	r3, r0, r1
 800d23c:	fb01 0013 	mls	r0, r1, r3, r0
 800d240:	1a08      	subs	r0, r1, r0
 800d242:	3901      	subs	r1, #1
 800d244:	4008      	ands	r0, r1
 800d246:	4770      	bx	lr
 800d248:	2000      	movs	r0, #0
 800d24a:	4770      	bx	lr

0800d24c <ucdr_align_to>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4604      	mov	r4, r0
 800d250:	460d      	mov	r5, r1
 800d252:	f7ff ffed 	bl	800d230 <ucdr_buffer_alignment>
 800d256:	68a3      	ldr	r3, [r4, #8]
 800d258:	6921      	ldr	r1, [r4, #16]
 800d25a:	7565      	strb	r5, [r4, #21]
 800d25c:	181a      	adds	r2, r3, r0
 800d25e:	6863      	ldr	r3, [r4, #4]
 800d260:	4293      	cmp	r3, r2
 800d262:	4408      	add	r0, r1
 800d264:	bf28      	it	cs
 800d266:	4613      	movcs	r3, r2
 800d268:	6120      	str	r0, [r4, #16]
 800d26a:	60a3      	str	r3, [r4, #8]
 800d26c:	bd38      	pop	{r3, r4, r5, pc}
 800d26e:	bf00      	nop

0800d270 <ucdr_buffer_length>:
 800d270:	6882      	ldr	r2, [r0, #8]
 800d272:	6800      	ldr	r0, [r0, #0]
 800d274:	1a10      	subs	r0, r2, r0
 800d276:	4770      	bx	lr

0800d278 <ucdr_buffer_remaining>:
 800d278:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d27c:	1a10      	subs	r0, r2, r0
 800d27e:	4770      	bx	lr

0800d280 <ucdr_check_final_buffer_behavior_array>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	7d83      	ldrb	r3, [r0, #22]
 800d284:	b963      	cbnz	r3, 800d2a0 <ucdr_check_final_buffer_behavior_array+0x20>
 800d286:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	4604      	mov	r4, r0
 800d28e:	460d      	mov	r5, r1
 800d290:	d308      	bcc.n	800d2a4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d292:	b139      	cbz	r1, 800d2a4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d294:	6983      	ldr	r3, [r0, #24]
 800d296:	b163      	cbz	r3, 800d2b2 <ucdr_check_final_buffer_behavior_array+0x32>
 800d298:	69c1      	ldr	r1, [r0, #28]
 800d29a:	4798      	blx	r3
 800d29c:	75a0      	strb	r0, [r4, #22]
 800d29e:	b108      	cbz	r0, 800d2a4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	bd38      	pop	{r3, r4, r5, pc}
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f7ff ffe7 	bl	800d278 <ucdr_buffer_remaining>
 800d2aa:	42a8      	cmp	r0, r5
 800d2ac:	bf28      	it	cs
 800d2ae:	4628      	movcs	r0, r5
 800d2b0:	bd38      	pop	{r3, r4, r5, pc}
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	7583      	strb	r3, [r0, #22]
 800d2b6:	e7f3      	b.n	800d2a0 <ucdr_check_final_buffer_behavior_array+0x20>

0800d2b8 <ucdr_advance_buffer>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	460d      	mov	r5, r1
 800d2be:	f7ff ff57 	bl	800d170 <ucdr_check_buffer_available_for>
 800d2c2:	b178      	cbz	r0, 800d2e4 <ucdr_advance_buffer+0x2c>
 800d2c4:	6923      	ldr	r3, [r4, #16]
 800d2c6:	68a2      	ldr	r2, [r4, #8]
 800d2c8:	442b      	add	r3, r5
 800d2ca:	6123      	str	r3, [r4, #16]
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	442a      	add	r2, r5
 800d2d0:	7563      	strb	r3, [r4, #21]
 800d2d2:	60a2      	str	r2, [r4, #8]
 800d2d4:	bd38      	pop	{r3, r4, r5, pc}
 800d2d6:	68a2      	ldr	r2, [r4, #8]
 800d2d8:	6923      	ldr	r3, [r4, #16]
 800d2da:	4402      	add	r2, r0
 800d2dc:	4403      	add	r3, r0
 800d2de:	1a2d      	subs	r5, r5, r0
 800d2e0:	60a2      	str	r2, [r4, #8]
 800d2e2:	6123      	str	r3, [r4, #16]
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f7ff ffc9 	bl	800d280 <ucdr_check_final_buffer_behavior_array>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d1f1      	bne.n	800d2d6 <ucdr_advance_buffer+0x1e>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	7563      	strb	r3, [r4, #21]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}

0800d2f8 <uxr_millis>:
 800d2f8:	b510      	push	{r4, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	4669      	mov	r1, sp
 800d2fe:	2001      	movs	r0, #1
 800d300:	f7f4 f802 	bl	8001308 <clock_gettime>
 800d304:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800d308:	4906      	ldr	r1, [pc, #24]	; (800d324 <uxr_millis+0x2c>)
 800d30a:	fba0 0301 	umull	r0, r3, r0, r1
 800d30e:	1900      	adds	r0, r0, r4
 800d310:	fb01 3102 	mla	r1, r1, r2, r3
 800d314:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800d318:	4a03      	ldr	r2, [pc, #12]	; (800d328 <uxr_millis+0x30>)
 800d31a:	2300      	movs	r3, #0
 800d31c:	f7f3 f848 	bl	80003b0 <__aeabi_ldivmod>
 800d320:	b004      	add	sp, #16
 800d322:	bd10      	pop	{r4, pc}
 800d324:	3b9aca00 	.word	0x3b9aca00
 800d328:	000f4240 	.word	0x000f4240

0800d32c <uxr_nanos>:
 800d32c:	b510      	push	{r4, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	4669      	mov	r1, sp
 800d332:	2001      	movs	r0, #1
 800d334:	f7f3 ffe8 	bl	8001308 <clock_gettime>
 800d338:	4a06      	ldr	r2, [pc, #24]	; (800d354 <uxr_nanos+0x28>)
 800d33a:	9800      	ldr	r0, [sp, #0]
 800d33c:	9902      	ldr	r1, [sp, #8]
 800d33e:	9c01      	ldr	r4, [sp, #4]
 800d340:	fba0 0302 	umull	r0, r3, r0, r2
 800d344:	1840      	adds	r0, r0, r1
 800d346:	fb02 3304 	mla	r3, r2, r4, r3
 800d34a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800d34e:	b004      	add	sp, #16
 800d350:	bd10      	pop	{r4, pc}
 800d352:	bf00      	nop
 800d354:	3b9aca00 	.word	0x3b9aca00

0800d358 <rcl_get_zero_initialized_publisher>:
 800d358:	4b01      	ldr	r3, [pc, #4]	; (800d360 <rcl_get_zero_initialized_publisher+0x8>)
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	0801a4ac 	.word	0x0801a4ac

0800d364 <rcl_publisher_init>:
 800d364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d368:	b088      	sub	sp, #32
 800d36a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	d069      	beq.n	800d444 <rcl_publisher_init+0xe0>
 800d370:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800d374:	4604      	mov	r4, r0
 800d376:	4648      	mov	r0, r9
 800d378:	460e      	mov	r6, r1
 800d37a:	4690      	mov	r8, r2
 800d37c:	461f      	mov	r7, r3
 800d37e:	f001 f83b 	bl	800e3f8 <rcutils_allocator_is_valid>
 800d382:	2800      	cmp	r0, #0
 800d384:	d05e      	beq.n	800d444 <rcl_publisher_init+0xe0>
 800d386:	2c00      	cmp	r4, #0
 800d388:	d05c      	beq.n	800d444 <rcl_publisher_init+0xe0>
 800d38a:	f8d4 a000 	ldr.w	sl, [r4]
 800d38e:	f1ba 0f00 	cmp.w	sl, #0
 800d392:	d004      	beq.n	800d39e <rcl_publisher_init+0x3a>
 800d394:	2764      	movs	r7, #100	; 0x64
 800d396:	4638      	mov	r0, r7
 800d398:	b008      	add	sp, #32
 800d39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39e:	4630      	mov	r0, r6
 800d3a0:	f005 f980 	bl	80126a4 <rcl_node_is_valid>
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d052      	beq.n	800d44e <rcl_publisher_init+0xea>
 800d3a8:	f1b8 0f00 	cmp.w	r8, #0
 800d3ac:	d04a      	beq.n	800d444 <rcl_publisher_init+0xe0>
 800d3ae:	2f00      	cmp	r7, #0
 800d3b0:	d048      	beq.n	800d444 <rcl_publisher_init+0xe0>
 800d3b2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800d3b6:	aa07      	add	r2, sp, #28
 800d3b8:	9205      	str	r2, [sp, #20]
 800d3ba:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800d3be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d3c6:	f8cd a01c 	str.w	sl, [sp, #28]
 800d3ca:	4639      	mov	r1, r7
 800d3cc:	e899 000c 	ldmia.w	r9, {r2, r3}
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f005 f9bb 	bl	801274c <rcl_node_resolve_name>
 800d3d6:	4607      	mov	r7, r0
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d14f      	bne.n	800d47c <rcl_publisher_init+0x118>
 800d3dc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d3de:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800d3e0:	20c8      	movs	r0, #200	; 0xc8
 800d3e2:	4798      	blx	r3
 800d3e4:	6020      	str	r0, [r4, #0]
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d04e      	beq.n	800d488 <rcl_publisher_init+0x124>
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f005 f97c 	bl	80126e8 <rcl_node_get_rmw_handle>
 800d3f0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	9a07      	ldr	r2, [sp, #28]
 800d3f8:	6827      	ldr	r7, [r4, #0]
 800d3fa:	462b      	mov	r3, r5
 800d3fc:	4641      	mov	r1, r8
 800d3fe:	f001 f909 	bl	800e614 <rmw_create_publisher>
 800d402:	6823      	ldr	r3, [r4, #0]
 800d404:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800d408:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800d40c:	b370      	cbz	r0, 800d46c <rcl_publisher_init+0x108>
 800d40e:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800d412:	f001 f9dd 	bl	800e7d0 <rmw_publisher_get_actual_qos>
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	4607      	mov	r7, r0
 800d41a:	b9d0      	cbnz	r0, 800d452 <rcl_publisher_init+0xee>
 800d41c:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800d420:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800d424:	4629      	mov	r1, r5
 800d426:	2270      	movs	r2, #112	; 0x70
 800d428:	4618      	mov	r0, r3
 800d42a:	f00b fb65 	bl	8018af8 <memcpy>
 800d42e:	6832      	ldr	r2, [r6, #0]
 800d430:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800d434:	9807      	ldr	r0, [sp, #28]
 800d436:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800d438:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800d43a:	4798      	blx	r3
 800d43c:	4638      	mov	r0, r7
 800d43e:	b008      	add	sp, #32
 800d440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d444:	270b      	movs	r7, #11
 800d446:	4638      	mov	r0, r7
 800d448:	b008      	add	sp, #32
 800d44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d44e:	27c8      	movs	r7, #200	; 0xc8
 800d450:	e7a1      	b.n	800d396 <rcl_publisher_init+0x32>
 800d452:	b18b      	cbz	r3, 800d478 <rcl_publisher_init+0x114>
 800d454:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800d458:	b142      	cbz	r2, 800d46c <rcl_publisher_init+0x108>
 800d45a:	4630      	mov	r0, r6
 800d45c:	f005 f944 	bl	80126e8 <rcl_node_get_rmw_handle>
 800d460:	6823      	ldr	r3, [r4, #0]
 800d462:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800d466:	f001 f9c3 	bl	800e7f0 <rmw_destroy_publisher>
 800d46a:	6823      	ldr	r3, [r4, #0]
 800d46c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800d46e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800d470:	4618      	mov	r0, r3
 800d472:	4790      	blx	r2
 800d474:	2300      	movs	r3, #0
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	2701      	movs	r7, #1
 800d47a:	e7db      	b.n	800d434 <rcl_publisher_init+0xd0>
 800d47c:	2867      	cmp	r0, #103	; 0x67
 800d47e:	d0d9      	beq.n	800d434 <rcl_publisher_init+0xd0>
 800d480:	2869      	cmp	r0, #105	; 0x69
 800d482:	d003      	beq.n	800d48c <rcl_publisher_init+0x128>
 800d484:	280a      	cmp	r0, #10
 800d486:	d1f7      	bne.n	800d478 <rcl_publisher_init+0x114>
 800d488:	270a      	movs	r7, #10
 800d48a:	e7d3      	b.n	800d434 <rcl_publisher_init+0xd0>
 800d48c:	2767      	movs	r7, #103	; 0x67
 800d48e:	e7d1      	b.n	800d434 <rcl_publisher_init+0xd0>

0800d490 <rcl_publisher_get_default_options>:
 800d490:	b570      	push	{r4, r5, r6, lr}
 800d492:	4d14      	ldr	r5, [pc, #80]	; (800d4e4 <rcl_publisher_get_default_options+0x54>)
 800d494:	4914      	ldr	r1, [pc, #80]	; (800d4e8 <rcl_publisher_get_default_options+0x58>)
 800d496:	b088      	sub	sp, #32
 800d498:	4604      	mov	r4, r0
 800d49a:	2250      	movs	r2, #80	; 0x50
 800d49c:	4628      	mov	r0, r5
 800d49e:	f00b fb2b 	bl	8018af8 <memcpy>
 800d4a2:	a802      	add	r0, sp, #8
 800d4a4:	f000 ff9a 	bl	800e3dc <rcutils_get_default_allocator>
 800d4a8:	f10d 0c08 	add.w	ip, sp, #8
 800d4ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4b0:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800d4b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4b8:	466e      	mov	r6, sp
 800d4ba:	f8dc 3000 	ldr.w	r3, [ip]
 800d4be:	f8ce 3000 	str.w	r3, [lr]
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f001 f828 	bl	800e518 <rmw_get_default_publisher_options>
 800d4c8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d4cc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800d4d0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4d4:	2270      	movs	r2, #112	; 0x70
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f00b fb0d 	bl	8018af8 <memcpy>
 800d4de:	4620      	mov	r0, r4
 800d4e0:	b008      	add	sp, #32
 800d4e2:	bd70      	pop	{r4, r5, r6, pc}
 800d4e4:	200093c0 	.word	0x200093c0
 800d4e8:	0801a4b0 	.word	0x0801a4b0

0800d4ec <rcl_publish>:
 800d4ec:	b1f8      	cbz	r0, 800d52e <rcl_publish+0x42>
 800d4ee:	6803      	ldr	r3, [r0, #0]
 800d4f0:	b570      	push	{r4, r5, r6, lr}
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	b1b3      	cbz	r3, 800d524 <rcl_publish+0x38>
 800d4f6:	4616      	mov	r6, r2
 800d4f8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800d4fc:	b192      	cbz	r2, 800d524 <rcl_publish+0x38>
 800d4fe:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d502:	460d      	mov	r5, r1
 800d504:	f004 fcf4 	bl	8011ef0 <rcl_context_is_valid>
 800d508:	b160      	cbz	r0, 800d524 <rcl_publish+0x38>
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800d510:	b140      	cbz	r0, 800d524 <rcl_publish+0x38>
 800d512:	b155      	cbz	r5, 800d52a <rcl_publish+0x3e>
 800d514:	4632      	mov	r2, r6
 800d516:	4629      	mov	r1, r5
 800d518:	f001 f81c 	bl	800e554 <rmw_publish>
 800d51c:	3800      	subs	r0, #0
 800d51e:	bf18      	it	ne
 800d520:	2001      	movne	r0, #1
 800d522:	bd70      	pop	{r4, r5, r6, pc}
 800d524:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d528:	bd70      	pop	{r4, r5, r6, pc}
 800d52a:	200b      	movs	r0, #11
 800d52c:	bd70      	pop	{r4, r5, r6, pc}
 800d52e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d532:	4770      	bx	lr

0800d534 <rcl_publisher_is_valid>:
 800d534:	b1a0      	cbz	r0, 800d560 <rcl_publisher_is_valid+0x2c>
 800d536:	6803      	ldr	r3, [r0, #0]
 800d538:	b510      	push	{r4, lr}
 800d53a:	4604      	mov	r4, r0
 800d53c:	b173      	cbz	r3, 800d55c <rcl_publisher_is_valid+0x28>
 800d53e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800d542:	b15a      	cbz	r2, 800d55c <rcl_publisher_is_valid+0x28>
 800d544:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d548:	f004 fcd2 	bl	8011ef0 <rcl_context_is_valid>
 800d54c:	b130      	cbz	r0, 800d55c <rcl_publisher_is_valid+0x28>
 800d54e:	6823      	ldr	r3, [r4, #0]
 800d550:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800d554:	3800      	subs	r0, #0
 800d556:	bf18      	it	ne
 800d558:	2001      	movne	r0, #1
 800d55a:	bd10      	pop	{r4, pc}
 800d55c:	2000      	movs	r0, #0
 800d55e:	bd10      	pop	{r4, pc}
 800d560:	2000      	movs	r0, #0
 800d562:	4770      	bx	lr

0800d564 <rcl_publisher_is_valid_except_context>:
 800d564:	b130      	cbz	r0, 800d574 <rcl_publisher_is_valid_except_context+0x10>
 800d566:	6800      	ldr	r0, [r0, #0]
 800d568:	b120      	cbz	r0, 800d574 <rcl_publisher_is_valid_except_context+0x10>
 800d56a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800d56e:	3800      	subs	r0, #0
 800d570:	bf18      	it	ne
 800d572:	2001      	movne	r0, #1
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop

0800d578 <_rclc_check_for_new_data>:
 800d578:	2800      	cmp	r0, #0
 800d57a:	d046      	beq.n	800d60a <_rclc_check_for_new_data+0x92>
 800d57c:	b510      	push	{r4, lr}
 800d57e:	7802      	ldrb	r2, [r0, #0]
 800d580:	b084      	sub	sp, #16
 800d582:	4603      	mov	r3, r0
 800d584:	2a0a      	cmp	r2, #10
 800d586:	d842      	bhi.n	800d60e <_rclc_check_for_new_data+0x96>
 800d588:	e8df f002 	tbb	[pc, r2]
 800d58c:	14181212 	.word	0x14181212
 800d590:	06060614 	.word	0x06060614
 800d594:	2e1a      	.short	0x2e1a
 800d596:	16          	.byte	0x16
 800d597:	00          	.byte	0x00
 800d598:	6a0a      	ldr	r2, [r1, #32]
 800d59a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d59c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	1a12      	subs	r2, r2, r0
 800d5a4:	bf18      	it	ne
 800d5a6:	2201      	movne	r2, #1
 800d5a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d5ac:	b004      	add	sp, #16
 800d5ae:	bd10      	pop	{r4, pc}
 800d5b0:	680a      	ldr	r2, [r1, #0]
 800d5b2:	e7f2      	b.n	800d59a <_rclc_check_for_new_data+0x22>
 800d5b4:	698a      	ldr	r2, [r1, #24]
 800d5b6:	e7f0      	b.n	800d59a <_rclc_check_for_new_data+0x22>
 800d5b8:	688a      	ldr	r2, [r1, #8]
 800d5ba:	e7ee      	b.n	800d59a <_rclc_check_for_new_data+0x22>
 800d5bc:	690a      	ldr	r2, [r1, #16]
 800d5be:	e7ec      	b.n	800d59a <_rclc_check_for_new_data+0x22>
 800d5c0:	685c      	ldr	r4, [r3, #4]
 800d5c2:	4608      	mov	r0, r1
 800d5c4:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800d5c8:	f104 0143 	add.w	r1, r4, #67	; 0x43
 800d5cc:	f104 0342 	add.w	r3, r4, #66	; 0x42
 800d5d0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800d5da:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800d5de:	f104 0110 	add.w	r1, r4, #16
 800d5e2:	f006 fd81 	bl	80140e8 <rcl_action_client_wait_set_get_entities_ready>
 800d5e6:	e7e1      	b.n	800d5ac <_rclc_check_for_new_data+0x34>
 800d5e8:	685c      	ldr	r4, [r3, #4]
 800d5ea:	f104 0223 	add.w	r2, r4, #35	; 0x23
 800d5ee:	f104 0322 	add.w	r3, r4, #34	; 0x22
 800d5f2:	e9cd 3200 	strd	r3, r2, [sp]
 800d5f6:	4608      	mov	r0, r1
 800d5f8:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800d5fc:	f104 0220 	add.w	r2, r4, #32
 800d600:	f104 0110 	add.w	r1, r4, #16
 800d604:	f006 ff88 	bl	8014518 <rcl_action_server_wait_set_get_entities_ready>
 800d608:	e7d0      	b.n	800d5ac <_rclc_check_for_new_data+0x34>
 800d60a:	200b      	movs	r0, #11
 800d60c:	4770      	bx	lr
 800d60e:	2001      	movs	r0, #1
 800d610:	e7cc      	b.n	800d5ac <_rclc_check_for_new_data+0x34>
 800d612:	bf00      	nop

0800d614 <_rclc_take_new_data>:
 800d614:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d616:	b09b      	sub	sp, #108	; 0x6c
 800d618:	2800      	cmp	r0, #0
 800d61a:	f000 8088 	beq.w	800d72e <_rclc_take_new_data+0x11a>
 800d61e:	7803      	ldrb	r3, [r0, #0]
 800d620:	4604      	mov	r4, r0
 800d622:	2b0a      	cmp	r3, #10
 800d624:	f200 8167 	bhi.w	800d8f6 <_rclc_take_new_data+0x2e2>
 800d628:	e8df f003 	tbb	[pc, r3]
 800d62c:	44152d2d 	.word	0x44152d2d
 800d630:	19191944 	.word	0x19191944
 800d634:	065a      	.short	0x065a
 800d636:	15          	.byte	0x15
 800d637:	00          	.byte	0x00
 800d638:	6840      	ldr	r0, [r0, #4]
 800d63a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f040 80b2 	bne.w	800d7a8 <_rclc_take_new_data+0x194>
 800d644:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f040 80e4 	bne.w	800d816 <_rclc_take_new_data+0x202>
 800d64e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d652:	2b00      	cmp	r3, #0
 800d654:	d16f      	bne.n	800d736 <_rclc_take_new_data+0x122>
 800d656:	2500      	movs	r5, #0
 800d658:	4628      	mov	r0, r5
 800d65a:	b01b      	add	sp, #108	; 0x6c
 800d65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d65e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d660:	6a0b      	ldr	r3, [r1, #32]
 800d662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d0f5      	beq.n	800d656 <_rclc_take_new_data+0x42>
 800d66a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d66e:	f104 0110 	add.w	r1, r4, #16
 800d672:	f005 fa15 	bl	8012aa0 <rcl_take_request>
 800d676:	4605      	mov	r5, r0
 800d678:	2800      	cmp	r0, #0
 800d67a:	d0ec      	beq.n	800d656 <_rclc_take_new_data+0x42>
 800d67c:	f240 2359 	movw	r3, #601	; 0x259
 800d680:	4298      	cmp	r0, r3
 800d682:	d013      	beq.n	800d6ac <_rclc_take_new_data+0x98>
 800d684:	e029      	b.n	800d6da <_rclc_take_new_data+0xc6>
 800d686:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d688:	680b      	ldr	r3, [r1, #0]
 800d68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d0e1      	beq.n	800d656 <_rclc_take_new_data+0x42>
 800d692:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d696:	2300      	movs	r3, #0
 800d698:	aa0a      	add	r2, sp, #40	; 0x28
 800d69a:	f005 fb3f 	bl	8012d1c <rcl_take>
 800d69e:	4605      	mov	r5, r0
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	d0d9      	beq.n	800d658 <_rclc_take_new_data+0x44>
 800d6a4:	f240 1391 	movw	r3, #401	; 0x191
 800d6a8:	4298      	cmp	r0, r3
 800d6aa:	d116      	bne.n	800d6da <_rclc_take_new_data+0xc6>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800d6b2:	e7d1      	b.n	800d658 <_rclc_take_new_data+0x44>
 800d6b4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d6b6:	698b      	ldr	r3, [r1, #24]
 800d6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d0ca      	beq.n	800d656 <_rclc_take_new_data+0x42>
 800d6c0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d6c4:	f104 0110 	add.w	r1, r4, #16
 800d6c8:	f004 fba2 	bl	8011e10 <rcl_take_response>
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d0c1      	beq.n	800d656 <_rclc_take_new_data+0x42>
 800d6d2:	f240 13f5 	movw	r3, #501	; 0x1f5
 800d6d6:	4298      	cmp	r0, r3
 800d6d8:	d0be      	beq.n	800d658 <_rclc_take_new_data+0x44>
 800d6da:	f000 feb1 	bl	800e440 <rcutils_reset_error>
 800d6de:	e7bb      	b.n	800d658 <_rclc_take_new_data+0x44>
 800d6e0:	6840      	ldr	r0, [r0, #4]
 800d6e2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d17d      	bne.n	800d7e6 <_rclc_take_new_data+0x1d2>
 800d6ea:	69c3      	ldr	r3, [r0, #28]
 800d6ec:	b11b      	cbz	r3, 800d6f6 <_rclc_take_new_data+0xe2>
 800d6ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d144      	bne.n	800d780 <_rclc_take_new_data+0x16c>
 800d6f6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f040 80ac 	bne.w	800d858 <_rclc_take_new_data+0x244>
 800d700:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800d704:	2b00      	cmp	r3, #0
 800d706:	d0a6      	beq.n	800d656 <_rclc_take_new_data+0x42>
 800d708:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d70a:	a90a      	add	r1, sp, #40	; 0x28
 800d70c:	3010      	adds	r0, #16
 800d70e:	f006 fbc3 	bl	8013e98 <rcl_action_take_result_response>
 800d712:	4605      	mov	r5, r0
 800d714:	2800      	cmp	r0, #0
 800d716:	d1e0      	bne.n	800d6da <_rclc_take_new_data+0xc6>
 800d718:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d71c:	6860      	ldr	r0, [r4, #4]
 800d71e:	f007 f81f 	bl	8014760 <rclc_action_find_handle_by_result_request_sequence_number>
 800d722:	2800      	cmp	r0, #0
 800d724:	d098      	beq.n	800d658 <_rclc_take_new_data+0x44>
 800d726:	2301      	movs	r3, #1
 800d728:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800d72c:	e794      	b.n	800d658 <_rclc_take_new_data+0x44>
 800d72e:	250b      	movs	r5, #11
 800d730:	4628      	mov	r0, r5
 800d732:	b01b      	add	sp, #108	; 0x6c
 800d734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d736:	ae04      	add	r6, sp, #16
 800d738:	aa0a      	add	r2, sp, #40	; 0x28
 800d73a:	3010      	adds	r0, #16
 800d73c:	4631      	mov	r1, r6
 800d73e:	f006 fe1f 	bl	8014380 <rcl_action_take_cancel_request>
 800d742:	4605      	mov	r5, r0
 800d744:	2800      	cmp	r0, #0
 800d746:	d1c8      	bne.n	800d6da <_rclc_take_new_data+0xc6>
 800d748:	6860      	ldr	r0, [r4, #4]
 800d74a:	a90a      	add	r1, sp, #40	; 0x28
 800d74c:	f006 ffc6 	bl	80146dc <rclc_action_find_goal_handle_by_uuid>
 800d750:	4607      	mov	r7, r0
 800d752:	2800      	cmp	r0, #0
 800d754:	f000 80bb 	beq.w	800d8ce <_rclc_take_new_data+0x2ba>
 800d758:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d75c:	2101      	movs	r1, #1
 800d75e:	f006 ff47 	bl	80145f0 <rcl_action_transition_goal_state>
 800d762:	2803      	cmp	r0, #3
 800d764:	4684      	mov	ip, r0
 800d766:	f040 80a7 	bne.w	800d8b8 <_rclc_take_new_data+0x2a4>
 800d76a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d76c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800d770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d772:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d776:	e884 0003 	stmia.w	r4, {r0, r1}
 800d77a:	f887 c008 	strb.w	ip, [r7, #8]
 800d77e:	e76b      	b.n	800d658 <_rclc_take_new_data+0x44>
 800d780:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d782:	3010      	adds	r0, #16
 800d784:	f006 fc08 	bl	8013f98 <rcl_action_take_feedback>
 800d788:	4605      	mov	r5, r0
 800d78a:	2800      	cmp	r0, #0
 800d78c:	d1a5      	bne.n	800d6da <_rclc_take_new_data+0xc6>
 800d78e:	6860      	ldr	r0, [r4, #4]
 800d790:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d792:	f006 ffa3 	bl	80146dc <rclc_action_find_goal_handle_by_uuid>
 800d796:	4603      	mov	r3, r0
 800d798:	2800      	cmp	r0, #0
 800d79a:	f000 80a3 	beq.w	800d8e4 <_rclc_take_new_data+0x2d0>
 800d79e:	2201      	movs	r2, #1
 800d7a0:	6860      	ldr	r0, [r4, #4]
 800d7a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800d7a6:	e7a6      	b.n	800d6f6 <_rclc_take_new_data+0xe2>
 800d7a8:	f006 ff72 	bl	8014690 <rclc_action_take_goal_handle>
 800d7ac:	4606      	mov	r6, r0
 800d7ae:	6860      	ldr	r0, [r4, #4]
 800d7b0:	2e00      	cmp	r6, #0
 800d7b2:	f43f af47 	beq.w	800d644 <_rclc_take_new_data+0x30>
 800d7b6:	6070      	str	r0, [r6, #4]
 800d7b8:	69f2      	ldr	r2, [r6, #28]
 800d7ba:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800d7be:	3010      	adds	r0, #16
 800d7c0:	f006 fd26 	bl	8014210 <rcl_action_take_goal_request>
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	f040 808e 	bne.w	800d8e8 <_rclc_take_new_data+0x2d4>
 800d7cc:	69f7      	ldr	r7, [r6, #28]
 800d7ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d7d0:	7235      	strb	r5, [r6, #8]
 800d7d2:	f8c6 0009 	str.w	r0, [r6, #9]
 800d7d6:	f8c6 100d 	str.w	r1, [r6, #13]
 800d7da:	6860      	ldr	r0, [r4, #4]
 800d7dc:	f8c6 2011 	str.w	r2, [r6, #17]
 800d7e0:	f8c6 3015 	str.w	r3, [r6, #21]
 800d7e4:	e72e      	b.n	800d644 <_rclc_take_new_data+0x30>
 800d7e6:	aa04      	add	r2, sp, #16
 800d7e8:	a90a      	add	r1, sp, #40	; 0x28
 800d7ea:	3010      	adds	r0, #16
 800d7ec:	f006 fadc 	bl	8013da8 <rcl_action_take_goal_response>
 800d7f0:	4605      	mov	r5, r0
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	f47f af71 	bne.w	800d6da <_rclc_take_new_data+0xc6>
 800d7f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d7fc:	6860      	ldr	r0, [r4, #4]
 800d7fe:	f006 ff9d 	bl	801473c <rclc_action_find_handle_by_goal_request_sequence_number>
 800d802:	b130      	cbz	r0, 800d812 <_rclc_take_new_data+0x1fe>
 800d804:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d808:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800d80c:	2201      	movs	r2, #1
 800d80e:	f880 2020 	strb.w	r2, [r0, #32]
 800d812:	6860      	ldr	r0, [r4, #4]
 800d814:	e769      	b.n	800d6ea <_rclc_take_new_data+0xd6>
 800d816:	aa04      	add	r2, sp, #16
 800d818:	3010      	adds	r0, #16
 800d81a:	a90a      	add	r1, sp, #40	; 0x28
 800d81c:	f006 fd70 	bl	8014300 <rcl_action_take_result_request>
 800d820:	4605      	mov	r5, r0
 800d822:	2800      	cmp	r0, #0
 800d824:	f47f af59 	bne.w	800d6da <_rclc_take_new_data+0xc6>
 800d828:	6860      	ldr	r0, [r4, #4]
 800d82a:	a904      	add	r1, sp, #16
 800d82c:	f006 ff56 	bl	80146dc <rclc_action_find_goal_handle_by_uuid>
 800d830:	4607      	mov	r7, r0
 800d832:	b160      	cbz	r0, 800d84e <_rclc_take_new_data+0x23a>
 800d834:	ad0a      	add	r5, sp, #40	; 0x28
 800d836:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800d83a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d83c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d83e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d842:	f04f 0c02 	mov.w	ip, #2
 800d846:	e886 0003 	stmia.w	r6, {r0, r1}
 800d84a:	f887 c008 	strb.w	ip, [r7, #8]
 800d84e:	6860      	ldr	r0, [r4, #4]
 800d850:	2300      	movs	r3, #0
 800d852:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800d856:	e6fa      	b.n	800d64e <_rclc_take_new_data+0x3a>
 800d858:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800d85c:	a90a      	add	r1, sp, #40	; 0x28
 800d85e:	3010      	adds	r0, #16
 800d860:	f006 fb5a 	bl	8013f18 <rcl_action_take_cancel_response>
 800d864:	4605      	mov	r5, r0
 800d866:	2800      	cmp	r0, #0
 800d868:	f47f af37 	bne.w	800d6da <_rclc_take_new_data+0xc6>
 800d86c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d870:	6860      	ldr	r0, [r4, #4]
 800d872:	f006 ff87 	bl	8014784 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d876:	4606      	mov	r6, r0
 800d878:	6860      	ldr	r0, [r4, #4]
 800d87a:	2e00      	cmp	r6, #0
 800d87c:	f43f af40 	beq.w	800d700 <_rclc_take_new_data+0xec>
 800d880:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d882:	2701      	movs	r7, #1
 800d884:	84b7      	strh	r7, [r6, #36]	; 0x24
 800d886:	2b00      	cmp	r3, #0
 800d888:	f43f af3a 	beq.w	800d700 <_rclc_take_new_data+0xec>
 800d88c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d88e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d892:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d896:	f006 ff21 	bl	80146dc <rclc_action_find_goal_handle_by_uuid>
 800d89a:	b138      	cbz	r0, 800d8ac <_rclc_take_new_data+0x298>
 800d89c:	6860      	ldr	r0, [r4, #4]
 800d89e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d8a0:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800d8a4:	3501      	adds	r5, #1
 800d8a6:	42ab      	cmp	r3, r5
 800d8a8:	d8f0      	bhi.n	800d88c <_rclc_take_new_data+0x278>
 800d8aa:	e729      	b.n	800d700 <_rclc_take_new_data+0xec>
 800d8ac:	6860      	ldr	r0, [r4, #4]
 800d8ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d8b0:	3501      	adds	r5, #1
 800d8b2:	42ab      	cmp	r3, r5
 800d8b4:	d8ea      	bhi.n	800d88c <_rclc_take_new_data+0x278>
 800d8b6:	e723      	b.n	800d700 <_rclc_take_new_data+0xec>
 800d8b8:	ab06      	add	r3, sp, #24
 800d8ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d8bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d8c0:	2103      	movs	r1, #3
 800d8c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d8c6:	6860      	ldr	r0, [r4, #4]
 800d8c8:	f006 ffd2 	bl	8014870 <rclc_action_server_goal_cancel_reject>
 800d8cc:	e6c4      	b.n	800d658 <_rclc_take_new_data+0x44>
 800d8ce:	ab06      	add	r3, sp, #24
 800d8d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d8d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d8d6:	2102      	movs	r1, #2
 800d8d8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d8dc:	6860      	ldr	r0, [r4, #4]
 800d8de:	f006 ffc7 	bl	8014870 <rclc_action_server_goal_cancel_reject>
 800d8e2:	e6b9      	b.n	800d658 <_rclc_take_new_data+0x44>
 800d8e4:	6860      	ldr	r0, [r4, #4]
 800d8e6:	e706      	b.n	800d6f6 <_rclc_take_new_data+0xe2>
 800d8e8:	6860      	ldr	r0, [r4, #4]
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	f006 fee0 	bl	80146b0 <rclc_action_remove_used_goal_handle>
 800d8f0:	f000 fda6 	bl	800e440 <rcutils_reset_error>
 800d8f4:	e6b0      	b.n	800d658 <_rclc_take_new_data+0x44>
 800d8f6:	2501      	movs	r5, #1
 800d8f8:	e6ae      	b.n	800d658 <_rclc_take_new_data+0x44>
 800d8fa:	bf00      	nop

0800d8fc <_rclc_execute.part.0>:
 800d8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8fe:	7803      	ldrb	r3, [r0, #0]
 800d900:	b087      	sub	sp, #28
 800d902:	4604      	mov	r4, r0
 800d904:	2b0a      	cmp	r3, #10
 800d906:	f200 8136 	bhi.w	800db76 <_rclc_execute.part.0+0x27a>
 800d90a:	e8df f003 	tbb	[pc, r3]
 800d90e:	435e      	.short	0x435e
 800d910:	06a1664f 	.word	0x06a1664f
 800d914:	6c1e0606 	.word	0x6c1e0606
 800d918:	59          	.byte	0x59
 800d919:	00          	.byte	0x00
 800d91a:	2b06      	cmp	r3, #6
 800d91c:	f000 8122 	beq.w	800db64 <_rclc_execute.part.0+0x268>
 800d920:	2b07      	cmp	r3, #7
 800d922:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d924:	f040 8118 	bne.w	800db58 <_rclc_execute.part.0+0x25c>
 800d928:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800d92c:	6880      	ldr	r0, [r0, #8]
 800d92e:	4798      	blx	r3
 800d930:	f104 0110 	add.w	r1, r4, #16
 800d934:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d936:	6860      	ldr	r0, [r4, #4]
 800d938:	f005 f8f2 	bl	8012b20 <rcl_send_response>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d033      	beq.n	800d9a8 <_rclc_execute.part.0+0xac>
 800d940:	9005      	str	r0, [sp, #20]
 800d942:	f000 fd7d 	bl	800e440 <rcutils_reset_error>
 800d946:	9805      	ldr	r0, [sp, #20]
 800d948:	e02e      	b.n	800d9a8 <_rclc_execute.part.0+0xac>
 800d94a:	6840      	ldr	r0, [r0, #4]
 800d94c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800d950:	2b00      	cmp	r3, #0
 800d952:	f000 8086 	beq.w	800da62 <_rclc_execute.part.0+0x166>
 800d956:	2600      	movs	r6, #0
 800d958:	2701      	movs	r7, #1
 800d95a:	e004      	b.n	800d966 <_rclc_execute.part.0+0x6a>
 800d95c:	f006 fe72 	bl	8014644 <rclc_action_send_result_request>
 800d960:	b998      	cbnz	r0, 800d98a <_rclc_execute.part.0+0x8e>
 800d962:	722f      	strb	r7, [r5, #8]
 800d964:	6860      	ldr	r0, [r4, #4]
 800d966:	f006 ff1f 	bl	80147a8 <rclc_action_find_first_handle_with_goal_response>
 800d96a:	4605      	mov	r5, r0
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d077      	beq.n	800da60 <_rclc_execute.part.0+0x164>
 800d970:	6863      	ldr	r3, [r4, #4]
 800d972:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800d97a:	f885 6020 	strb.w	r6, [r5, #32]
 800d97e:	4798      	blx	r3
 800d980:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800d984:	4628      	mov	r0, r5
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1e8      	bne.n	800d95c <_rclc_execute.part.0+0x60>
 800d98a:	6860      	ldr	r0, [r4, #4]
 800d98c:	4629      	mov	r1, r5
 800d98e:	f006 fe8f 	bl	80146b0 <rclc_action_remove_used_goal_handle>
 800d992:	e7e7      	b.n	800d964 <_rclc_execute.part.0+0x68>
 800d994:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800d998:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800d99c:	2d00      	cmp	r5, #0
 800d99e:	f000 80c9 	beq.w	800db34 <_rclc_execute.part.0+0x238>
 800d9a2:	6880      	ldr	r0, [r0, #8]
 800d9a4:	4798      	blx	r3
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	b007      	add	sp, #28
 800d9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ac:	6840      	ldr	r0, [r0, #4]
 800d9ae:	f005 fab9 	bl	8012f24 <rcl_timer_call>
 800d9b2:	f240 3321 	movw	r3, #801	; 0x321
 800d9b6:	4298      	cmp	r0, r3
 800d9b8:	d004      	beq.n	800d9c4 <_rclc_execute.part.0+0xc8>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d0f4      	beq.n	800d9a8 <_rclc_execute.part.0+0xac>
 800d9be:	e7bf      	b.n	800d940 <_rclc_execute.part.0+0x44>
 800d9c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d9c2:	4798      	blx	r3
 800d9c4:	2000      	movs	r0, #0
 800d9c6:	b007      	add	sp, #28
 800d9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ca:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800d9ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d9d0:	b925      	cbnz	r5, 800d9dc <_rclc_execute.part.0+0xe0>
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	4798      	blx	r3
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	e7e6      	b.n	800d9a8 <_rclc_execute.part.0+0xac>
 800d9da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d9dc:	68a0      	ldr	r0, [r4, #8]
 800d9de:	4798      	blx	r3
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	b007      	add	sp, #28
 800d9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9e6:	6840      	ldr	r0, [r0, #4]
 800d9e8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d9ec:	bb3b      	cbnz	r3, 800da3e <_rclc_execute.part.0+0x142>
 800d9ee:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d07b      	beq.n	800daee <_rclc_execute.part.0+0x1f2>
 800d9f6:	f640 0634 	movw	r6, #2100	; 0x834
 800d9fa:	2701      	movs	r7, #1
 800d9fc:	e007      	b.n	800da0e <_rclc_execute.part.0+0x112>
 800d9fe:	4628      	mov	r0, r5
 800da00:	f006 feea 	bl	80147d8 <rclc_action_server_response_goal_request>
 800da04:	6860      	ldr	r0, [r4, #4]
 800da06:	4629      	mov	r1, r5
 800da08:	f006 fe52 	bl	80146b0 <rclc_action_remove_used_goal_handle>
 800da0c:	6860      	ldr	r0, [r4, #4]
 800da0e:	2100      	movs	r1, #0
 800da10:	f006 fe7c 	bl	801470c <rclc_action_find_first_handle_by_status>
 800da14:	4605      	mov	r5, r0
 800da16:	2800      	cmp	r0, #0
 800da18:	d066      	beq.n	800dae8 <_rclc_execute.part.0+0x1ec>
 800da1a:	6863      	ldr	r3, [r4, #4]
 800da1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	4798      	blx	r3
 800da22:	42b0      	cmp	r0, r6
 800da24:	f04f 0100 	mov.w	r1, #0
 800da28:	d1e9      	bne.n	800d9fe <_rclc_execute.part.0+0x102>
 800da2a:	2101      	movs	r1, #1
 800da2c:	4628      	mov	r0, r5
 800da2e:	f006 fed3 	bl	80147d8 <rclc_action_server_response_goal_request>
 800da32:	722f      	strb	r7, [r5, #8]
 800da34:	e7ea      	b.n	800da0c <_rclc_execute.part.0+0x110>
 800da36:	6848      	ldr	r0, [r1, #4]
 800da38:	f006 fe3a 	bl	80146b0 <rclc_action_remove_used_goal_handle>
 800da3c:	6860      	ldr	r0, [r4, #4]
 800da3e:	f006 fe71 	bl	8014724 <rclc_action_find_first_terminated_handle>
 800da42:	4601      	mov	r1, r0
 800da44:	2800      	cmp	r0, #0
 800da46:	d1f6      	bne.n	800da36 <_rclc_execute.part.0+0x13a>
 800da48:	6860      	ldr	r0, [r4, #4]
 800da4a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800da4e:	e7ce      	b.n	800d9ee <_rclc_execute.part.0+0xf2>
 800da50:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800da52:	6880      	ldr	r0, [r0, #8]
 800da54:	f104 0110 	add.w	r1, r4, #16
 800da58:	4798      	blx	r3
 800da5a:	2000      	movs	r0, #0
 800da5c:	b007      	add	sp, #28
 800da5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da60:	6860      	ldr	r0, [r4, #4]
 800da62:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800da66:	b18b      	cbz	r3, 800da8c <_rclc_execute.part.0+0x190>
 800da68:	68c5      	ldr	r5, [r0, #12]
 800da6a:	b32d      	cbz	r5, 800dab8 <_rclc_execute.part.0+0x1bc>
 800da6c:	2600      	movs	r6, #0
 800da6e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800da72:	b143      	cbz	r3, 800da86 <_rclc_execute.part.0+0x18a>
 800da74:	69c3      	ldr	r3, [r0, #28]
 800da76:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800da7a:	b123      	cbz	r3, 800da86 <_rclc_execute.part.0+0x18a>
 800da7c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800da7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800da80:	4628      	mov	r0, r5
 800da82:	4798      	blx	r3
 800da84:	6860      	ldr	r0, [r4, #4]
 800da86:	682d      	ldr	r5, [r5, #0]
 800da88:	2d00      	cmp	r5, #0
 800da8a:	d1f0      	bne.n	800da6e <_rclc_execute.part.0+0x172>
 800da8c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800da90:	b193      	cbz	r3, 800dab8 <_rclc_execute.part.0+0x1bc>
 800da92:	68c5      	ldr	r5, [r0, #12]
 800da94:	b185      	cbz	r5, 800dab8 <_rclc_execute.part.0+0x1bc>
 800da96:	2600      	movs	r6, #0
 800da98:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800da9c:	b14b      	cbz	r3, 800dab2 <_rclc_execute.part.0+0x1b6>
 800da9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800daa0:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800daa4:	b12b      	cbz	r3, 800dab2 <_rclc_execute.part.0+0x1b6>
 800daa6:	4628      	mov	r0, r5
 800daa8:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800daac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800daae:	4798      	blx	r3
 800dab0:	6860      	ldr	r0, [r4, #4]
 800dab2:	682d      	ldr	r5, [r5, #0]
 800dab4:	2d00      	cmp	r5, #0
 800dab6:	d1ef      	bne.n	800da98 <_rclc_execute.part.0+0x19c>
 800dab8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d081      	beq.n	800d9c4 <_rclc_execute.part.0+0xc8>
 800dac0:	2700      	movs	r7, #0
 800dac2:	e00b      	b.n	800dadc <_rclc_execute.part.0+0x1e0>
 800dac4:	6863      	ldr	r3, [r4, #4]
 800dac6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dac8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800daca:	6a1e      	ldr	r6, [r3, #32]
 800dacc:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800dad0:	47b0      	blx	r6
 800dad2:	6860      	ldr	r0, [r4, #4]
 800dad4:	4629      	mov	r1, r5
 800dad6:	f006 fdeb 	bl	80146b0 <rclc_action_remove_used_goal_handle>
 800dada:	6860      	ldr	r0, [r4, #4]
 800dadc:	f006 fe70 	bl	80147c0 <rclc_action_find_first_handle_with_result_response>
 800dae0:	4605      	mov	r5, r0
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d1ee      	bne.n	800dac4 <_rclc_execute.part.0+0x1c8>
 800dae6:	e76d      	b.n	800d9c4 <_rclc_execute.part.0+0xc8>
 800dae8:	6860      	ldr	r0, [r4, #4]
 800daea:	f880 5020 	strb.w	r5, [r0, #32]
 800daee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f43f af66 	beq.w	800d9c4 <_rclc_execute.part.0+0xc8>
 800daf8:	68c5      	ldr	r5, [r0, #12]
 800dafa:	b1b5      	cbz	r5, 800db2a <_rclc_execute.part.0+0x22e>
 800dafc:	2602      	movs	r6, #2
 800dafe:	e001      	b.n	800db04 <_rclc_execute.part.0+0x208>
 800db00:	682d      	ldr	r5, [r5, #0]
 800db02:	b195      	cbz	r5, 800db2a <_rclc_execute.part.0+0x22e>
 800db04:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800db08:	2b03      	cmp	r3, #3
 800db0a:	d1f9      	bne.n	800db00 <_rclc_execute.part.0+0x204>
 800db0c:	69c3      	ldr	r3, [r0, #28]
 800db0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800db10:	4628      	mov	r0, r5
 800db12:	4798      	blx	r3
 800db14:	4603      	mov	r3, r0
 800db16:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800db1a:	4628      	mov	r0, r5
 800db1c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800db20:	b163      	cbz	r3, 800db3c <_rclc_execute.part.0+0x240>
 800db22:	f006 fe79 	bl	8014818 <rclc_action_server_goal_cancel_accept>
 800db26:	6860      	ldr	r0, [r4, #4]
 800db28:	e7ea      	b.n	800db00 <_rclc_execute.part.0+0x204>
 800db2a:	2300      	movs	r3, #0
 800db2c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800db30:	4618      	mov	r0, r3
 800db32:	e739      	b.n	800d9a8 <_rclc_execute.part.0+0xac>
 800db34:	4628      	mov	r0, r5
 800db36:	4798      	blx	r3
 800db38:	4628      	mov	r0, r5
 800db3a:	e735      	b.n	800d9a8 <_rclc_execute.part.0+0xac>
 800db3c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800db3e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800db42:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800db46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db4a:	6860      	ldr	r0, [r4, #4]
 800db4c:	2101      	movs	r1, #1
 800db4e:	f006 fe8f 	bl	8014870 <rclc_action_server_goal_cancel_reject>
 800db52:	722e      	strb	r6, [r5, #8]
 800db54:	6860      	ldr	r0, [r4, #4]
 800db56:	e7d3      	b.n	800db00 <_rclc_execute.part.0+0x204>
 800db58:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800db5a:	6880      	ldr	r0, [r0, #8]
 800db5c:	4798      	blx	r3
 800db5e:	f104 0110 	add.w	r1, r4, #16
 800db62:	e6e7      	b.n	800d934 <_rclc_execute.part.0+0x38>
 800db64:	f100 0110 	add.w	r1, r0, #16
 800db68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800db6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800db6c:	6880      	ldr	r0, [r0, #8]
 800db6e:	9105      	str	r1, [sp, #20]
 800db70:	4798      	blx	r3
 800db72:	9905      	ldr	r1, [sp, #20]
 800db74:	e6de      	b.n	800d934 <_rclc_execute.part.0+0x38>
 800db76:	2001      	movs	r0, #1
 800db78:	e716      	b.n	800d9a8 <_rclc_execute.part.0+0xac>
 800db7a:	bf00      	nop

0800db7c <rclc_executor_trigger_any>:
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d03f      	beq.n	800dc00 <rclc_executor_trigger_any+0x84>
 800db80:	2900      	cmp	r1, #0
 800db82:	d03e      	beq.n	800dc02 <rclc_executor_trigger_any+0x86>
 800db84:	4603      	mov	r3, r0
 800db86:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800db8a:	2200      	movs	r2, #0
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d037      	beq.n	800dc00 <rclc_executor_trigger_any+0x84>
 800db90:	b430      	push	{r4, r5}
 800db92:	f893 c000 	ldrb.w	ip, [r3]
 800db96:	f1bc 0f08 	cmp.w	ip, #8
 800db9a:	d11e      	bne.n	800dbda <rclc_executor_trigger_any+0x5e>
 800db9c:	685c      	ldr	r4, [r3, #4]
 800db9e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800dba0:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800dba4:	d105      	bne.n	800dbb2 <rclc_executor_trigger_any+0x36>
 800dba6:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800dbaa:	b910      	cbnz	r0, 800dbb2 <rclc_executor_trigger_any+0x36>
 800dbac:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800dbb0:	b128      	cbz	r0, 800dbbe <rclc_executor_trigger_any+0x42>
 800dbb2:	bc30      	pop	{r4, r5}
 800dbb4:	4770      	bx	lr
 800dbb6:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	d1f9      	bne.n	800dbb2 <rclc_executor_trigger_any+0x36>
 800dbbe:	3201      	adds	r2, #1
 800dbc0:	4291      	cmp	r1, r2
 800dbc2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800dbc6:	d018      	beq.n	800dbfa <rclc_executor_trigger_any+0x7e>
 800dbc8:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d0f0      	beq.n	800dbb2 <rclc_executor_trigger_any+0x36>
 800dbd0:	f893 c000 	ldrb.w	ip, [r3]
 800dbd4:	f1bc 0f08 	cmp.w	ip, #8
 800dbd8:	d0e0      	beq.n	800db9c <rclc_executor_trigger_any+0x20>
 800dbda:	f1bc 0f09 	cmp.w	ip, #9
 800dbde:	d1ea      	bne.n	800dbb6 <rclc_executor_trigger_any+0x3a>
 800dbe0:	685c      	ldr	r4, [r3, #4]
 800dbe2:	6a25      	ldr	r5, [r4, #32]
 800dbe4:	2d00      	cmp	r5, #0
 800dbe6:	d1e4      	bne.n	800dbb2 <rclc_executor_trigger_any+0x36>
 800dbe8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d1e0      	bne.n	800dbb2 <rclc_executor_trigger_any+0x36>
 800dbf0:	3201      	adds	r2, #1
 800dbf2:	4291      	cmp	r1, r2
 800dbf4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800dbf8:	d1e6      	bne.n	800dbc8 <rclc_executor_trigger_any+0x4c>
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	bc30      	pop	{r4, r5}
 800dbfe:	4770      	bx	lr
 800dc00:	4770      	bx	lr
 800dc02:	4608      	mov	r0, r1
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop

0800dc08 <rclc_executor_init>:
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	d05f      	beq.n	800dccc <rclc_executor_init+0xc4>
 800dc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc10:	460c      	mov	r4, r1
 800dc12:	b0b0      	sub	sp, #192	; 0xc0
 800dc14:	2900      	cmp	r1, #0
 800dc16:	d051      	beq.n	800dcbc <rclc_executor_init+0xb4>
 800dc18:	4605      	mov	r5, r0
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	4616      	mov	r6, r2
 800dc1e:	461f      	mov	r7, r3
 800dc20:	f000 fbea 	bl	800e3f8 <rcutils_allocator_is_valid>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d049      	beq.n	800dcbc <rclc_executor_init+0xb4>
 800dc28:	2e00      	cmp	r6, #0
 800dc2a:	d047      	beq.n	800dcbc <rclc_executor_init+0xb4>
 800dc2c:	492c      	ldr	r1, [pc, #176]	; (800dce0 <rclc_executor_init+0xd8>)
 800dc2e:	2288      	movs	r2, #136	; 0x88
 800dc30:	a80e      	add	r0, sp, #56	; 0x38
 800dc32:	f00a ff61 	bl	8018af8 <memcpy>
 800dc36:	a90e      	add	r1, sp, #56	; 0x38
 800dc38:	2288      	movs	r2, #136	; 0x88
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	f00a ff5c 	bl	8018af8 <memcpy>
 800dc40:	602c      	str	r4, [r5, #0]
 800dc42:	4668      	mov	r0, sp
 800dc44:	60ae      	str	r6, [r5, #8]
 800dc46:	466c      	mov	r4, sp
 800dc48:	f005 fade 	bl	8013208 <rcl_get_zero_initialized_wait_set>
 800dc4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc4e:	f105 0c14 	add.w	ip, r5, #20
 800dc52:	f8d7 8000 	ldr.w	r8, [r7]
 800dc56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc66:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 800dcd8 <rclc_executor_init+0xd0>
 800dc6a:	6823      	ldr	r3, [r4, #0]
 800dc6c:	f8cc 3000 	str.w	r3, [ip]
 800dc70:	6939      	ldr	r1, [r7, #16]
 800dc72:	612f      	str	r7, [r5, #16]
 800dc74:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800dc78:	01b0      	lsls	r0, r6, #6
 800dc7a:	47c0      	blx	r8
 800dc7c:	6068      	str	r0, [r5, #4]
 800dc7e:	b338      	cbz	r0, 800dcd0 <rclc_executor_init+0xc8>
 800dc80:	2400      	movs	r4, #0
 800dc82:	e000      	b.n	800dc86 <rclc_executor_init+0x7e>
 800dc84:	6868      	ldr	r0, [r5, #4]
 800dc86:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800dc8a:	4631      	mov	r1, r6
 800dc8c:	3401      	adds	r4, #1
 800dc8e:	f000 fa6b 	bl	800e168 <rclc_executor_handle_init>
 800dc92:	42a6      	cmp	r6, r4
 800dc94:	d1f6      	bne.n	800dc84 <rclc_executor_init+0x7c>
 800dc96:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800dc9a:	f000 fa5b 	bl	800e154 <rclc_executor_handle_counters_zero_init>
 800dc9e:	4a11      	ldr	r2, [pc, #68]	; (800dce4 <rclc_executor_init+0xdc>)
 800dca0:	686b      	ldr	r3, [r5, #4]
 800dca2:	2000      	movs	r0, #0
 800dca4:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 800dca8:	b163      	cbz	r3, 800dcc4 <rclc_executor_init+0xbc>
 800dcaa:	692b      	ldr	r3, [r5, #16]
 800dcac:	b153      	cbz	r3, 800dcc4 <rclc_executor_init+0xbc>
 800dcae:	68ab      	ldr	r3, [r5, #8]
 800dcb0:	b143      	cbz	r3, 800dcc4 <rclc_executor_init+0xbc>
 800dcb2:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 800dcb6:	b030      	add	sp, #192	; 0xc0
 800dcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcbc:	200b      	movs	r0, #11
 800dcbe:	b030      	add	sp, #192	; 0xc0
 800dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	b030      	add	sp, #192	; 0xc0
 800dcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dccc:	200b      	movs	r0, #11
 800dcce:	4770      	bx	lr
 800dcd0:	200a      	movs	r0, #10
 800dcd2:	e7f4      	b.n	800dcbe <rclc_executor_init+0xb6>
 800dcd4:	f3af 8000 	nop.w
 800dcd8:	3b9aca00 	.word	0x3b9aca00
 800dcdc:	00000000 	.word	0x00000000
 800dce0:	0801a500 	.word	0x0801a500
 800dce4:	0800db7d 	.word	0x0800db7d

0800dce8 <rclc_executor_add_subscription>:
 800dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcea:	f89d e018 	ldrb.w	lr, [sp, #24]
 800dcee:	b338      	cbz	r0, 800dd40 <rclc_executor_add_subscription+0x58>
 800dcf0:	b331      	cbz	r1, 800dd40 <rclc_executor_add_subscription+0x58>
 800dcf2:	b32a      	cbz	r2, 800dd40 <rclc_executor_add_subscription+0x58>
 800dcf4:	b323      	cbz	r3, 800dd40 <rclc_executor_add_subscription+0x58>
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800dcfc:	42a8      	cmp	r0, r5
 800dcfe:	d301      	bcc.n	800dd04 <rclc_executor_add_subscription+0x1c>
 800dd00:	2001      	movs	r0, #1
 800dd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd04:	6866      	ldr	r6, [r4, #4]
 800dd06:	0187      	lsls	r7, r0, #6
 800dd08:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800dd0c:	2500      	movs	r5, #0
 800dd0e:	55f5      	strb	r5, [r6, r7]
 800dd10:	3001      	adds	r0, #1
 800dd12:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 800dd16:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	f104 0514 	add.w	r5, r4, #20
 800dd20:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800dd24:	f88c e001 	strb.w	lr, [ip, #1]
 800dd28:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 800dd2c:	60e0      	str	r0, [r4, #12]
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f005 fa7e 	bl	8013230 <rcl_wait_set_is_valid>
 800dd34:	b930      	cbnz	r0, 800dd44 <rclc_executor_add_subscription+0x5c>
 800dd36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd38:	3301      	adds	r3, #1
 800dd3a:	2000      	movs	r0, #0
 800dd3c:	64a3      	str	r3, [r4, #72]	; 0x48
 800dd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd40:	200b      	movs	r0, #11
 800dd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd44:	4628      	mov	r0, r5
 800dd46:	f005 fa79 	bl	801323c <rcl_wait_set_fini>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d0f3      	beq.n	800dd36 <rclc_executor_add_subscription+0x4e>
 800dd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd50 <rclc_executor_prepare>:
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d044      	beq.n	800ddde <rclc_executor_prepare+0x8e>
 800dd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd56:	f100 0514 	add.w	r5, r0, #20
 800dd5a:	b09b      	sub	sp, #108	; 0x6c
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f005 fa66 	bl	8013230 <rcl_wait_set_is_valid>
 800dd64:	b110      	cbz	r0, 800dd6c <rclc_executor_prepare+0x1c>
 800dd66:	2000      	movs	r0, #0
 800dd68:	b01b      	add	sp, #108	; 0x6c
 800dd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f005 fa65 	bl	801323c <rcl_wait_set_fini>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	d130      	bne.n	800ddd8 <rclc_executor_prepare+0x88>
 800dd76:	a80c      	add	r0, sp, #48	; 0x30
 800dd78:	f005 fa46 	bl	8013208 <rcl_get_zero_initialized_wait_set>
 800dd7c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800dd80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dd84:	46ae      	mov	lr, r5
 800dd86:	6927      	ldr	r7, [r4, #16]
 800dd88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dd8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dd90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dd94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dd98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dd9c:	f8dc 3000 	ldr.w	r3, [ip]
 800dda0:	f8ce 3000 	str.w	r3, [lr]
 800dda4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dda6:	ae04      	add	r6, sp, #16
 800dda8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	6822      	ldr	r2, [r4, #0]
 800ddae:	6033      	str	r3, [r6, #0]
 800ddb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddb2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ddb4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ddb8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800ddbc:	e9cd 2100 	strd	r2, r1, [sp]
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ddc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ddc6:	f005 fd37 	bl	8013838 <rcl_wait_set_init>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d0cc      	beq.n	800dd68 <rclc_executor_prepare+0x18>
 800ddce:	900b      	str	r0, [sp, #44]	; 0x2c
 800ddd0:	f000 fb36 	bl	800e440 <rcutils_reset_error>
 800ddd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ddd6:	e7c7      	b.n	800dd68 <rclc_executor_prepare+0x18>
 800ddd8:	f000 fb32 	bl	800e440 <rcutils_reset_error>
 800dddc:	e7cb      	b.n	800dd76 <rclc_executor_prepare+0x26>
 800ddde:	200b      	movs	r0, #11
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop

0800dde4 <rclc_executor_spin_some.part.0>:
 800dde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde8:	f100 0614 	add.w	r6, r0, #20
 800ddec:	b083      	sub	sp, #12
 800ddee:	4691      	mov	r9, r2
 800ddf0:	4698      	mov	r8, r3
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	f7ff ffac 	bl	800dd50 <rclc_executor_prepare>
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f005 faeb 	bl	80133d4 <rcl_wait_set_clear>
 800ddfe:	4607      	mov	r7, r0
 800de00:	2800      	cmp	r0, #0
 800de02:	f040 80ed 	bne.w	800dfe0 <rclc_executor_spin_some.part.0+0x1fc>
 800de06:	68ab      	ldr	r3, [r5, #8]
 800de08:	4604      	mov	r4, r0
 800de0a:	b303      	cbz	r3, 800de4e <rclc_executor_spin_some.part.0+0x6a>
 800de0c:	6869      	ldr	r1, [r5, #4]
 800de0e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800de12:	01a2      	lsls	r2, r4, #6
 800de14:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800de18:	b1cb      	cbz	r3, 800de4e <rclc_executor_spin_some.part.0+0x6a>
 800de1a:	5c8b      	ldrb	r3, [r1, r2]
 800de1c:	2b0a      	cmp	r3, #10
 800de1e:	f200 80d8 	bhi.w	800dfd2 <rclc_executor_spin_some.part.0+0x1ee>
 800de22:	e8df f003 	tbb	[pc, r3]
 800de26:	9c9c      	.short	0x9c9c
 800de28:	068c8ca7 	.word	0x068c8ca7
 800de2c:	bdc90606 	.word	0xbdc90606
 800de30:	b2          	.byte	0xb2
 800de31:	00          	.byte	0x00
 800de32:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800de36:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800de3a:	4630      	mov	r0, r6
 800de3c:	f005 fe12 	bl	8013a64 <rcl_wait_set_add_service>
 800de40:	2800      	cmp	r0, #0
 800de42:	f040 8086 	bne.w	800df52 <rclc_executor_spin_some.part.0+0x16e>
 800de46:	68ab      	ldr	r3, [r5, #8]
 800de48:	3401      	adds	r4, #1
 800de4a:	429c      	cmp	r4, r3
 800de4c:	d3de      	bcc.n	800de0c <rclc_executor_spin_some.part.0+0x28>
 800de4e:	4643      	mov	r3, r8
 800de50:	464a      	mov	r2, r9
 800de52:	4630      	mov	r0, r6
 800de54:	f005 fe34 	bl	8013ac0 <rcl_wait>
 800de58:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f000 80c7 	beq.w	800dff0 <rclc_executor_spin_some.part.0+0x20c>
 800de62:	2b01      	cmp	r3, #1
 800de64:	f040 80b5 	bne.w	800dfd2 <rclc_executor_spin_some.part.0+0x1ee>
 800de68:	68ab      	ldr	r3, [r5, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f000 8159 	beq.w	800e122 <rclc_executor_spin_some.part.0+0x33e>
 800de70:	2400      	movs	r4, #0
 800de72:	46a0      	mov	r8, r4
 800de74:	f240 1991 	movw	r9, #401	; 0x191
 800de78:	e00a      	b.n	800de90 <rclc_executor_spin_some.part.0+0xac>
 800de7a:	f7ff fb7d 	bl	800d578 <_rclc_check_for_new_data>
 800de7e:	4604      	mov	r4, r0
 800de80:	b110      	cbz	r0, 800de88 <rclc_executor_spin_some.part.0+0xa4>
 800de82:	4548      	cmp	r0, r9
 800de84:	f040 80b2 	bne.w	800dfec <rclc_executor_spin_some.part.0+0x208>
 800de88:	68ab      	ldr	r3, [r5, #8]
 800de8a:	4598      	cmp	r8, r3
 800de8c:	f080 8126 	bcs.w	800e0dc <rclc_executor_spin_some.part.0+0x2f8>
 800de90:	686a      	ldr	r2, [r5, #4]
 800de92:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800de96:	4631      	mov	r1, r6
 800de98:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800de9c:	f108 0801 	add.w	r8, r8, #1
 800dea0:	f1bc 0f00 	cmp.w	ip, #0
 800dea4:	d1e9      	bne.n	800de7a <rclc_executor_spin_some.part.0+0x96>
 800dea6:	4619      	mov	r1, r3
 800dea8:	4610      	mov	r0, r2
 800deaa:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800deae:	4798      	blx	r3
 800deb0:	2800      	cmp	r0, #0
 800deb2:	f000 809b 	beq.w	800dfec <rclc_executor_spin_some.part.0+0x208>
 800deb6:	68ab      	ldr	r3, [r5, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f000 8097 	beq.w	800dfec <rclc_executor_spin_some.part.0+0x208>
 800debe:	f04f 0800 	mov.w	r8, #0
 800dec2:	f240 1991 	movw	r9, #401	; 0x191
 800dec6:	e009      	b.n	800dedc <rclc_executor_spin_some.part.0+0xf8>
 800dec8:	f7ff fba4 	bl	800d614 <_rclc_take_new_data>
 800decc:	4604      	mov	r4, r0
 800dece:	b110      	cbz	r0, 800ded6 <rclc_executor_spin_some.part.0+0xf2>
 800ded0:	4548      	cmp	r0, r9
 800ded2:	f040 808b 	bne.w	800dfec <rclc_executor_spin_some.part.0+0x208>
 800ded6:	68ab      	ldr	r3, [r5, #8]
 800ded8:	4598      	cmp	r8, r3
 800deda:	d209      	bcs.n	800def0 <rclc_executor_spin_some.part.0+0x10c>
 800dedc:	6868      	ldr	r0, [r5, #4]
 800dede:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800dee2:	4631      	mov	r1, r6
 800dee4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800dee8:	f108 0801 	add.w	r8, r8, #1
 800deec:	2a00      	cmp	r2, #0
 800deee:	d1eb      	bne.n	800dec8 <rclc_executor_spin_some.part.0+0xe4>
 800def0:	2600      	movs	r6, #0
 800def2:	b97b      	cbnz	r3, 800df14 <rclc_executor_spin_some.part.0+0x130>
 800def4:	e07a      	b.n	800dfec <rclc_executor_spin_some.part.0+0x208>
 800def6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800defa:	2a08      	cmp	r2, #8
 800defc:	f000 80fd 	beq.w	800e0fa <rclc_executor_spin_some.part.0+0x316>
 800df00:	2a09      	cmp	r2, #9
 800df02:	f000 80ef 	beq.w	800e0e4 <rclc_executor_spin_some.part.0+0x300>
 800df06:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800df0a:	b98a      	cbnz	r2, 800df30 <rclc_executor_spin_some.part.0+0x14c>
 800df0c:	3601      	adds	r6, #1
 800df0e:	429e      	cmp	r6, r3
 800df10:	d262      	bcs.n	800dfd8 <rclc_executor_spin_some.part.0+0x1f4>
 800df12:	2400      	movs	r4, #0
 800df14:	686a      	ldr	r2, [r5, #4]
 800df16:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800df1a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800df1e:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800df22:	2900      	cmp	r1, #0
 800df24:	d062      	beq.n	800dfec <rclc_executor_spin_some.part.0+0x208>
 800df26:	7841      	ldrb	r1, [r0, #1]
 800df28:	2900      	cmp	r1, #0
 800df2a:	d0e4      	beq.n	800def6 <rclc_executor_spin_some.part.0+0x112>
 800df2c:	2901      	cmp	r1, #1
 800df2e:	d1ed      	bne.n	800df0c <rclc_executor_spin_some.part.0+0x128>
 800df30:	f7ff fce4 	bl	800d8fc <_rclc_execute.part.0>
 800df34:	2800      	cmp	r0, #0
 800df36:	f040 80b6 	bne.w	800e0a6 <rclc_executor_spin_some.part.0+0x2c2>
 800df3a:	68ab      	ldr	r3, [r5, #8]
 800df3c:	e7e6      	b.n	800df0c <rclc_executor_spin_some.part.0+0x128>
 800df3e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800df42:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800df46:	4630      	mov	r0, r6
 800df48:	f005 fd60 	bl	8013a0c <rcl_wait_set_add_client>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	f43f af7a 	beq.w	800de46 <rclc_executor_spin_some.part.0+0x62>
 800df52:	9001      	str	r0, [sp, #4]
 800df54:	f000 fa74 	bl	800e440 <rcutils_reset_error>
 800df58:	9801      	ldr	r0, [sp, #4]
 800df5a:	4607      	mov	r7, r0
 800df5c:	e03c      	b.n	800dfd8 <rclc_executor_spin_some.part.0+0x1f4>
 800df5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800df62:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800df66:	4630      	mov	r0, r6
 800df68:	f005 fa08 	bl	801337c <rcl_wait_set_add_subscription>
 800df6c:	2800      	cmp	r0, #0
 800df6e:	f43f af6a 	beq.w	800de46 <rclc_executor_spin_some.part.0+0x62>
 800df72:	e7ee      	b.n	800df52 <rclc_executor_spin_some.part.0+0x16e>
 800df74:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800df78:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800df7c:	4630      	mov	r0, r6
 800df7e:	f005 fd15 	bl	80139ac <rcl_wait_set_add_timer>
 800df82:	2800      	cmp	r0, #0
 800df84:	f43f af5f 	beq.w	800de46 <rclc_executor_spin_some.part.0+0x62>
 800df88:	e7e3      	b.n	800df52 <rclc_executor_spin_some.part.0+0x16e>
 800df8a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800df8e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800df92:	4630      	mov	r0, r6
 800df94:	f005 fcde 	bl	8013954 <rcl_wait_set_add_guard_condition>
 800df98:	2800      	cmp	r0, #0
 800df9a:	f43f af54 	beq.w	800de46 <rclc_executor_spin_some.part.0+0x62>
 800df9e:	e7d8      	b.n	800df52 <rclc_executor_spin_some.part.0+0x16e>
 800dfa0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dfa4:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800dfa8:	3110      	adds	r1, #16
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f006 fa60 	bl	8014470 <rcl_action_wait_set_add_action_server>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	f43f af48 	beq.w	800de46 <rclc_executor_spin_some.part.0+0x62>
 800dfb6:	e7cc      	b.n	800df52 <rclc_executor_spin_some.part.0+0x16e>
 800dfb8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dfbc:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800dfc0:	3110      	adds	r1, #16
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	f006 f82b 	bl	8014020 <rcl_action_wait_set_add_action_client>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	f43f af3b 	beq.w	800de46 <rclc_executor_spin_some.part.0+0x62>
 800dfd0:	e7bf      	b.n	800df52 <rclc_executor_spin_some.part.0+0x16e>
 800dfd2:	f000 fa35 	bl	800e440 <rcutils_reset_error>
 800dfd6:	2701      	movs	r7, #1
 800dfd8:	4638      	mov	r0, r7
 800dfda:	b003      	add	sp, #12
 800dfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe0:	f000 fa2e 	bl	800e440 <rcutils_reset_error>
 800dfe4:	4638      	mov	r0, r7
 800dfe6:	b003      	add	sp, #12
 800dfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfec:	4627      	mov	r7, r4
 800dfee:	e7f3      	b.n	800dfd8 <rclc_executor_spin_some.part.0+0x1f4>
 800dff0:	68ab      	ldr	r3, [r5, #8]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	f000 8092 	beq.w	800e11c <rclc_executor_spin_some.part.0+0x338>
 800dff8:	2400      	movs	r4, #0
 800dffa:	46a0      	mov	r8, r4
 800dffc:	f240 1991 	movw	r9, #401	; 0x191
 800e000:	e008      	b.n	800e014 <rclc_executor_spin_some.part.0+0x230>
 800e002:	f7ff fab9 	bl	800d578 <_rclc_check_for_new_data>
 800e006:	4604      	mov	r4, r0
 800e008:	b108      	cbz	r0, 800e00e <rclc_executor_spin_some.part.0+0x22a>
 800e00a:	4548      	cmp	r0, r9
 800e00c:	d1ee      	bne.n	800dfec <rclc_executor_spin_some.part.0+0x208>
 800e00e:	68ab      	ldr	r3, [r5, #8]
 800e010:	4598      	cmp	r8, r3
 800e012:	d265      	bcs.n	800e0e0 <rclc_executor_spin_some.part.0+0x2fc>
 800e014:	686a      	ldr	r2, [r5, #4]
 800e016:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e01a:	4631      	mov	r1, r6
 800e01c:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e020:	f108 0801 	add.w	r8, r8, #1
 800e024:	f1bc 0f00 	cmp.w	ip, #0
 800e028:	d1eb      	bne.n	800e002 <rclc_executor_spin_some.part.0+0x21e>
 800e02a:	4619      	mov	r1, r3
 800e02c:	4610      	mov	r0, r2
 800e02e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800e032:	4798      	blx	r3
 800e034:	2800      	cmp	r0, #0
 800e036:	d0d9      	beq.n	800dfec <rclc_executor_spin_some.part.0+0x208>
 800e038:	68ab      	ldr	r3, [r5, #8]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d0d6      	beq.n	800dfec <rclc_executor_spin_some.part.0+0x208>
 800e03e:	f04f 0800 	mov.w	r8, #0
 800e042:	f240 1991 	movw	r9, #401	; 0x191
 800e046:	f240 2a59 	movw	sl, #601	; 0x259
 800e04a:	e00e      	b.n	800e06a <rclc_executor_spin_some.part.0+0x286>
 800e04c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800e050:	2b08      	cmp	r3, #8
 800e052:	d033      	beq.n	800e0bc <rclc_executor_spin_some.part.0+0x2d8>
 800e054:	2b09      	cmp	r3, #9
 800e056:	d028      	beq.n	800e0aa <rclc_executor_spin_some.part.0+0x2c6>
 800e058:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800e05c:	b9fb      	cbnz	r3, 800e09e <rclc_executor_spin_some.part.0+0x2ba>
 800e05e:	68ab      	ldr	r3, [r5, #8]
 800e060:	f108 0801 	add.w	r8, r8, #1
 800e064:	4598      	cmp	r8, r3
 800e066:	d2b7      	bcs.n	800dfd8 <rclc_executor_spin_some.part.0+0x1f4>
 800e068:	2400      	movs	r4, #0
 800e06a:	6868      	ldr	r0, [r5, #4]
 800e06c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e070:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800e074:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d0b7      	beq.n	800dfec <rclc_executor_spin_some.part.0+0x208>
 800e07c:	4631      	mov	r1, r6
 800e07e:	f7ff fac9 	bl	800d614 <_rclc_take_new_data>
 800e082:	b118      	cbz	r0, 800e08c <rclc_executor_spin_some.part.0+0x2a8>
 800e084:	4548      	cmp	r0, r9
 800e086:	d001      	beq.n	800e08c <rclc_executor_spin_some.part.0+0x2a8>
 800e088:	4550      	cmp	r0, sl
 800e08a:	d10c      	bne.n	800e0a6 <rclc_executor_spin_some.part.0+0x2c2>
 800e08c:	686b      	ldr	r3, [r5, #4]
 800e08e:	eb13 000b 	adds.w	r0, r3, fp
 800e092:	d021      	beq.n	800e0d8 <rclc_executor_spin_some.part.0+0x2f4>
 800e094:	7842      	ldrb	r2, [r0, #1]
 800e096:	2a00      	cmp	r2, #0
 800e098:	d0d8      	beq.n	800e04c <rclc_executor_spin_some.part.0+0x268>
 800e09a:	2a01      	cmp	r2, #1
 800e09c:	d1df      	bne.n	800e05e <rclc_executor_spin_some.part.0+0x27a>
 800e09e:	f7ff fc2d 	bl	800d8fc <_rclc_execute.part.0>
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	d0db      	beq.n	800e05e <rclc_executor_spin_some.part.0+0x27a>
 800e0a6:	4607      	mov	r7, r0
 800e0a8:	e796      	b.n	800dfd8 <rclc_executor_spin_some.part.0+0x1f4>
 800e0aa:	6843      	ldr	r3, [r0, #4]
 800e0ac:	6a1a      	ldr	r2, [r3, #32]
 800e0ae:	2a00      	cmp	r2, #0
 800e0b0:	d1f5      	bne.n	800e09e <rclc_executor_spin_some.part.0+0x2ba>
 800e0b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d0d1      	beq.n	800e05e <rclc_executor_spin_some.part.0+0x27a>
 800e0ba:	e7f0      	b.n	800e09e <rclc_executor_spin_some.part.0+0x2ba>
 800e0bc:	6843      	ldr	r3, [r0, #4]
 800e0be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0c0:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800e0c4:	d1eb      	bne.n	800e09e <rclc_executor_spin_some.part.0+0x2ba>
 800e0c6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e0ca:	2a00      	cmp	r2, #0
 800e0cc:	d1e7      	bne.n	800e09e <rclc_executor_spin_some.part.0+0x2ba>
 800e0ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0c3      	beq.n	800e05e <rclc_executor_spin_some.part.0+0x27a>
 800e0d6:	e7e2      	b.n	800e09e <rclc_executor_spin_some.part.0+0x2ba>
 800e0d8:	270b      	movs	r7, #11
 800e0da:	e77d      	b.n	800dfd8 <rclc_executor_spin_some.part.0+0x1f4>
 800e0dc:	686a      	ldr	r2, [r5, #4]
 800e0de:	e6e2      	b.n	800dea6 <rclc_executor_spin_some.part.0+0xc2>
 800e0e0:	686a      	ldr	r2, [r5, #4]
 800e0e2:	e7a2      	b.n	800e02a <rclc_executor_spin_some.part.0+0x246>
 800e0e4:	6842      	ldr	r2, [r0, #4]
 800e0e6:	6a11      	ldr	r1, [r2, #32]
 800e0e8:	2900      	cmp	r1, #0
 800e0ea:	f47f af21 	bne.w	800df30 <rclc_executor_spin_some.part.0+0x14c>
 800e0ee:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800e0f2:	2a00      	cmp	r2, #0
 800e0f4:	f43f af0a 	beq.w	800df0c <rclc_executor_spin_some.part.0+0x128>
 800e0f8:	e71a      	b.n	800df30 <rclc_executor_spin_some.part.0+0x14c>
 800e0fa:	6842      	ldr	r2, [r0, #4]
 800e0fc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e0fe:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800e102:	f47f af15 	bne.w	800df30 <rclc_executor_spin_some.part.0+0x14c>
 800e106:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800e10a:	2900      	cmp	r1, #0
 800e10c:	f47f af10 	bne.w	800df30 <rclc_executor_spin_some.part.0+0x14c>
 800e110:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800e114:	2a00      	cmp	r2, #0
 800e116:	f43f aef9 	beq.w	800df0c <rclc_executor_spin_some.part.0+0x128>
 800e11a:	e709      	b.n	800df30 <rclc_executor_spin_some.part.0+0x14c>
 800e11c:	686a      	ldr	r2, [r5, #4]
 800e11e:	461c      	mov	r4, r3
 800e120:	e783      	b.n	800e02a <rclc_executor_spin_some.part.0+0x246>
 800e122:	686a      	ldr	r2, [r5, #4]
 800e124:	461c      	mov	r4, r3
 800e126:	e6be      	b.n	800dea6 <rclc_executor_spin_some.part.0+0xc2>

0800e128 <rclc_executor_spin_some>:
 800e128:	b190      	cbz	r0, 800e150 <rclc_executor_spin_some+0x28>
 800e12a:	b570      	push	{r4, r5, r6, lr}
 800e12c:	4604      	mov	r4, r0
 800e12e:	6800      	ldr	r0, [r0, #0]
 800e130:	4616      	mov	r6, r2
 800e132:	461d      	mov	r5, r3
 800e134:	f003 fedc 	bl	8011ef0 <rcl_context_is_valid>
 800e138:	b130      	cbz	r0, 800e148 <rclc_executor_spin_some+0x20>
 800e13a:	4632      	mov	r2, r6
 800e13c:	462b      	mov	r3, r5
 800e13e:	4620      	mov	r0, r4
 800e140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e144:	f7ff be4e 	b.w	800dde4 <rclc_executor_spin_some.part.0>
 800e148:	f000 f97a 	bl	800e440 <rcutils_reset_error>
 800e14c:	2001      	movs	r0, #1
 800e14e:	bd70      	pop	{r4, r5, r6, pc}
 800e150:	200b      	movs	r0, #11
 800e152:	4770      	bx	lr

0800e154 <rclc_executor_handle_counters_zero_init>:
 800e154:	b130      	cbz	r0, 800e164 <rclc_executor_handle_counters_zero_init+0x10>
 800e156:	b508      	push	{r3, lr}
 800e158:	2220      	movs	r2, #32
 800e15a:	2100      	movs	r1, #0
 800e15c:	f00a fcf4 	bl	8018b48 <memset>
 800e160:	2000      	movs	r0, #0
 800e162:	bd08      	pop	{r3, pc}
 800e164:	200b      	movs	r0, #11
 800e166:	4770      	bx	lr

0800e168 <rclc_executor_handle_init>:
 800e168:	b168      	cbz	r0, 800e186 <rclc_executor_handle_init+0x1e>
 800e16a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800e190 <rclc_executor_handle_init+0x28>
 800e16e:	2300      	movs	r3, #0
 800e170:	220b      	movs	r2, #11
 800e172:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800e176:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800e17a:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800e17e:	8002      	strh	r2, [r0, #0]
 800e180:	8703      	strh	r3, [r0, #56]	; 0x38
 800e182:	4618      	mov	r0, r3
 800e184:	4770      	bx	lr
 800e186:	200b      	movs	r0, #11
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop
 800e18c:	f3af 8000 	nop.w
	...

0800e198 <rclc_support_init>:
 800e198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e19c:	b086      	sub	sp, #24
 800e19e:	b3b8      	cbz	r0, 800e210 <rclc_support_init+0x78>
 800e1a0:	461c      	mov	r4, r3
 800e1a2:	b3ab      	cbz	r3, 800e210 <rclc_support_init+0x78>
 800e1a4:	460f      	mov	r7, r1
 800e1a6:	4690      	mov	r8, r2
 800e1a8:	4606      	mov	r6, r0
 800e1aa:	f004 f80b 	bl	80121c4 <rcl_get_zero_initialized_init_options>
 800e1ae:	f104 030c 	add.w	r3, r4, #12
 800e1b2:	9005      	str	r0, [sp, #20]
 800e1b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e1b8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e1bc:	a805      	add	r0, sp, #20
 800e1be:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e1c2:	f004 f801 	bl	80121c8 <rcl_init_options_init>
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	b9e0      	cbnz	r0, 800e204 <rclc_support_init+0x6c>
 800e1ca:	ad02      	add	r5, sp, #8
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f003 fe85 	bl	8011edc <rcl_get_zero_initialized_context>
 800e1d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e1d6:	4633      	mov	r3, r6
 800e1d8:	e886 0003 	stmia.w	r6, {r0, r1}
 800e1dc:	aa05      	add	r2, sp, #20
 800e1de:	4641      	mov	r1, r8
 800e1e0:	4638      	mov	r0, r7
 800e1e2:	f003 feeb 	bl	8011fbc <rcl_init>
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	b9b8      	cbnz	r0, 800e21a <rclc_support_init+0x82>
 800e1ea:	60b4      	str	r4, [r6, #8]
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	f106 010c 	add.w	r1, r6, #12
 800e1f2:	2003      	movs	r0, #3
 800e1f4:	f004 fe12 	bl	8012e1c <rcl_clock_init>
 800e1f8:	4605      	mov	r5, r0
 800e1fa:	b970      	cbnz	r0, 800e21a <rclc_support_init+0x82>
 800e1fc:	a805      	add	r0, sp, #20
 800e1fe:	f004 f849 	bl	8012294 <rcl_init_options_fini>
 800e202:	b108      	cbz	r0, 800e208 <rclc_support_init+0x70>
 800e204:	f000 f91c 	bl	800e440 <rcutils_reset_error>
 800e208:	4628      	mov	r0, r5
 800e20a:	b006      	add	sp, #24
 800e20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e210:	250b      	movs	r5, #11
 800e212:	4628      	mov	r0, r5
 800e214:	b006      	add	sp, #24
 800e216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e21a:	f000 f911 	bl	800e440 <rcutils_reset_error>
 800e21e:	a805      	add	r0, sp, #20
 800e220:	f004 f838 	bl	8012294 <rcl_init_options_fini>
 800e224:	2800      	cmp	r0, #0
 800e226:	d0ef      	beq.n	800e208 <rclc_support_init+0x70>
 800e228:	e7ec      	b.n	800e204 <rclc_support_init+0x6c>
 800e22a:	bf00      	nop

0800e22c <rclc_node_init_default>:
 800e22c:	b3b8      	cbz	r0, 800e29e <rclc_node_init_default+0x72>
 800e22e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e232:	460d      	mov	r5, r1
 800e234:	b0a1      	sub	sp, #132	; 0x84
 800e236:	b329      	cbz	r1, 800e284 <rclc_node_init_default+0x58>
 800e238:	4616      	mov	r6, r2
 800e23a:	b31a      	cbz	r2, 800e284 <rclc_node_init_default+0x58>
 800e23c:	461f      	mov	r7, r3
 800e23e:	b30b      	cbz	r3, 800e284 <rclc_node_init_default+0x58>
 800e240:	f10d 0810 	add.w	r8, sp, #16
 800e244:	4604      	mov	r4, r0
 800e246:	4640      	mov	r0, r8
 800e248:	f004 f8dc 	bl	8012404 <rcl_get_zero_initialized_node>
 800e24c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e250:	f10d 0918 	add.w	r9, sp, #24
 800e254:	e884 0003 	stmia.w	r4, {r0, r1}
 800e258:	4648      	mov	r0, r9
 800e25a:	f004 fa4b 	bl	80126f4 <rcl_node_get_default_options>
 800e25e:	4640      	mov	r0, r8
 800e260:	f004 f8d0 	bl	8012404 <rcl_get_zero_initialized_node>
 800e264:	f8cd 9000 	str.w	r9, [sp]
 800e268:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e26c:	463b      	mov	r3, r7
 800e26e:	e884 0003 	stmia.w	r4, {r0, r1}
 800e272:	4632      	mov	r2, r6
 800e274:	4629      	mov	r1, r5
 800e276:	4620      	mov	r0, r4
 800e278:	f004 f8ce 	bl	8012418 <rcl_node_init>
 800e27c:	b930      	cbnz	r0, 800e28c <rclc_node_init_default+0x60>
 800e27e:	b021      	add	sp, #132	; 0x84
 800e280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e284:	200b      	movs	r0, #11
 800e286:	b021      	add	sp, #132	; 0x84
 800e288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e28c:	9003      	str	r0, [sp, #12]
 800e28e:	f000 f8d7 	bl	800e440 <rcutils_reset_error>
 800e292:	f000 f8d5 	bl	800e440 <rcutils_reset_error>
 800e296:	9803      	ldr	r0, [sp, #12]
 800e298:	b021      	add	sp, #132	; 0x84
 800e29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e29e:	200b      	movs	r0, #11
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop

0800e2a4 <rclc_publisher_init_default>:
 800e2a4:	b368      	cbz	r0, 800e302 <rclc_publisher_init_default+0x5e>
 800e2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2aa:	460d      	mov	r5, r1
 800e2ac:	b0a0      	sub	sp, #128	; 0x80
 800e2ae:	b321      	cbz	r1, 800e2fa <rclc_publisher_init_default+0x56>
 800e2b0:	4616      	mov	r6, r2
 800e2b2:	b312      	cbz	r2, 800e2fa <rclc_publisher_init_default+0x56>
 800e2b4:	461f      	mov	r7, r3
 800e2b6:	b303      	cbz	r3, 800e2fa <rclc_publisher_init_default+0x56>
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	f7ff f84d 	bl	800d358 <rcl_get_zero_initialized_publisher>
 800e2be:	f10d 0810 	add.w	r8, sp, #16
 800e2c2:	6020      	str	r0, [r4, #0]
 800e2c4:	4640      	mov	r0, r8
 800e2c6:	f7ff f8e3 	bl	800d490 <rcl_publisher_get_default_options>
 800e2ca:	490f      	ldr	r1, [pc, #60]	; (800e308 <rclc_publisher_init_default+0x64>)
 800e2cc:	2250      	movs	r2, #80	; 0x50
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	f00a fc12 	bl	8018af8 <memcpy>
 800e2d4:	f8cd 8000 	str.w	r8, [sp]
 800e2d8:	463b      	mov	r3, r7
 800e2da:	4632      	mov	r2, r6
 800e2dc:	4629      	mov	r1, r5
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f7ff f840 	bl	800d364 <rcl_publisher_init>
 800e2e4:	b910      	cbnz	r0, 800e2ec <rclc_publisher_init_default+0x48>
 800e2e6:	b020      	add	sp, #128	; 0x80
 800e2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2ec:	9003      	str	r0, [sp, #12]
 800e2ee:	f000 f8a7 	bl	800e440 <rcutils_reset_error>
 800e2f2:	9803      	ldr	r0, [sp, #12]
 800e2f4:	b020      	add	sp, #128	; 0x80
 800e2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2fa:	200b      	movs	r0, #11
 800e2fc:	b020      	add	sp, #128	; 0x80
 800e2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e302:	200b      	movs	r0, #11
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	0801a588 	.word	0x0801a588

0800e30c <rclc_subscription_init_default>:
 800e30c:	b368      	cbz	r0, 800e36a <rclc_subscription_init_default+0x5e>
 800e30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e312:	460d      	mov	r5, r1
 800e314:	b0a0      	sub	sp, #128	; 0x80
 800e316:	b321      	cbz	r1, 800e362 <rclc_subscription_init_default+0x56>
 800e318:	4616      	mov	r6, r2
 800e31a:	b312      	cbz	r2, 800e362 <rclc_subscription_init_default+0x56>
 800e31c:	461f      	mov	r7, r3
 800e31e:	b303      	cbz	r3, 800e362 <rclc_subscription_init_default+0x56>
 800e320:	4604      	mov	r4, r0
 800e322:	f004 fc1f 	bl	8012b64 <rcl_get_zero_initialized_subscription>
 800e326:	f10d 0810 	add.w	r8, sp, #16
 800e32a:	6020      	str	r0, [r4, #0]
 800e32c:	4640      	mov	r0, r8
 800e32e:	f004 fcc7 	bl	8012cc0 <rcl_subscription_get_default_options>
 800e332:	490f      	ldr	r1, [pc, #60]	; (800e370 <rclc_subscription_init_default+0x64>)
 800e334:	2250      	movs	r2, #80	; 0x50
 800e336:	4640      	mov	r0, r8
 800e338:	f00a fbde 	bl	8018af8 <memcpy>
 800e33c:	f8cd 8000 	str.w	r8, [sp]
 800e340:	463b      	mov	r3, r7
 800e342:	4632      	mov	r2, r6
 800e344:	4629      	mov	r1, r5
 800e346:	4620      	mov	r0, r4
 800e348:	f004 fc12 	bl	8012b70 <rcl_subscription_init>
 800e34c:	b910      	cbnz	r0, 800e354 <rclc_subscription_init_default+0x48>
 800e34e:	b020      	add	sp, #128	; 0x80
 800e350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e354:	9003      	str	r0, [sp, #12]
 800e356:	f000 f873 	bl	800e440 <rcutils_reset_error>
 800e35a:	9803      	ldr	r0, [sp, #12]
 800e35c:	b020      	add	sp, #128	; 0x80
 800e35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e362:	200b      	movs	r0, #11
 800e364:	b020      	add	sp, #128	; 0x80
 800e366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e36a:	200b      	movs	r0, #11
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	0801a5d8 	.word	0x0801a5d8

0800e374 <__default_zero_allocate>:
 800e374:	f00a bb2a 	b.w	80189cc <calloc>

0800e378 <__default_reallocate>:
 800e378:	f00a bd2e 	b.w	8018dd8 <realloc>

0800e37c <__default_deallocate>:
 800e37c:	f00a bba6 	b.w	8018acc <free>

0800e380 <__default_allocate>:
 800e380:	f00a bb9c 	b.w	8018abc <malloc>

0800e384 <rcutils_get_zero_initialized_allocator>:
 800e384:	b510      	push	{r4, lr}
 800e386:	4c05      	ldr	r4, [pc, #20]	; (800e39c <rcutils_get_zero_initialized_allocator+0x18>)
 800e388:	4686      	mov	lr, r0
 800e38a:	4684      	mov	ip, r0
 800e38c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e38e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	f8cc 3000 	str.w	r3, [ip]
 800e398:	4670      	mov	r0, lr
 800e39a:	bd10      	pop	{r4, pc}
 800e39c:	0801a628 	.word	0x0801a628

0800e3a0 <rcutils_set_default_allocator>:
 800e3a0:	b1a8      	cbz	r0, 800e3ce <rcutils_set_default_allocator+0x2e>
 800e3a2:	6802      	ldr	r2, [r0, #0]
 800e3a4:	b1a2      	cbz	r2, 800e3d0 <rcutils_set_default_allocator+0x30>
 800e3a6:	6841      	ldr	r1, [r0, #4]
 800e3a8:	b1a1      	cbz	r1, 800e3d4 <rcutils_set_default_allocator+0x34>
 800e3aa:	b410      	push	{r4}
 800e3ac:	68c4      	ldr	r4, [r0, #12]
 800e3ae:	b164      	cbz	r4, 800e3ca <rcutils_set_default_allocator+0x2a>
 800e3b0:	6880      	ldr	r0, [r0, #8]
 800e3b2:	b138      	cbz	r0, 800e3c4 <rcutils_set_default_allocator+0x24>
 800e3b4:	4b08      	ldr	r3, [pc, #32]	; (800e3d8 <rcutils_set_default_allocator+0x38>)
 800e3b6:	601a      	str	r2, [r3, #0]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e3be:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e3c2:	2001      	movs	r0, #1
 800e3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3c8:	4770      	bx	lr
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	e7fa      	b.n	800e3c4 <rcutils_set_default_allocator+0x24>
 800e3ce:	4770      	bx	lr
 800e3d0:	4610      	mov	r0, r2
 800e3d2:	4770      	bx	lr
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	4770      	bx	lr
 800e3d8:	20000338 	.word	0x20000338

0800e3dc <rcutils_get_default_allocator>:
 800e3dc:	b510      	push	{r4, lr}
 800e3de:	4c05      	ldr	r4, [pc, #20]	; (800e3f4 <rcutils_get_default_allocator+0x18>)
 800e3e0:	4686      	mov	lr, r0
 800e3e2:	4684      	mov	ip, r0
 800e3e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3ea:	6823      	ldr	r3, [r4, #0]
 800e3ec:	f8cc 3000 	str.w	r3, [ip]
 800e3f0:	4670      	mov	r0, lr
 800e3f2:	bd10      	pop	{r4, pc}
 800e3f4:	20000338 	.word	0x20000338

0800e3f8 <rcutils_allocator_is_valid>:
 800e3f8:	b158      	cbz	r0, 800e412 <rcutils_allocator_is_valid+0x1a>
 800e3fa:	6803      	ldr	r3, [r0, #0]
 800e3fc:	b143      	cbz	r3, 800e410 <rcutils_allocator_is_valid+0x18>
 800e3fe:	6843      	ldr	r3, [r0, #4]
 800e400:	b133      	cbz	r3, 800e410 <rcutils_allocator_is_valid+0x18>
 800e402:	68c3      	ldr	r3, [r0, #12]
 800e404:	b123      	cbz	r3, 800e410 <rcutils_allocator_is_valid+0x18>
 800e406:	6880      	ldr	r0, [r0, #8]
 800e408:	3800      	subs	r0, #0
 800e40a:	bf18      	it	ne
 800e40c:	2001      	movne	r0, #1
 800e40e:	4770      	bx	lr
 800e410:	4618      	mov	r0, r3
 800e412:	4770      	bx	lr

0800e414 <rcutils_get_error_string>:
 800e414:	4b06      	ldr	r3, [pc, #24]	; (800e430 <rcutils_get_error_string+0x1c>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	b13b      	cbz	r3, 800e42a <rcutils_get_error_string+0x16>
 800e41a:	4b06      	ldr	r3, [pc, #24]	; (800e434 <rcutils_get_error_string+0x20>)
 800e41c:	781a      	ldrb	r2, [r3, #0]
 800e41e:	b90a      	cbnz	r2, 800e424 <rcutils_get_error_string+0x10>
 800e420:	2201      	movs	r2, #1
 800e422:	701a      	strb	r2, [r3, #0]
 800e424:	4b04      	ldr	r3, [pc, #16]	; (800e438 <rcutils_get_error_string+0x24>)
 800e426:	7818      	ldrb	r0, [r3, #0]
 800e428:	4770      	bx	lr
 800e42a:	4b04      	ldr	r3, [pc, #16]	; (800e43c <rcutils_get_error_string+0x28>)
 800e42c:	7818      	ldrb	r0, [r3, #0]
 800e42e:	4770      	bx	lr
 800e430:	20009430 	.word	0x20009430
 800e434:	20009449 	.word	0x20009449
 800e438:	20009448 	.word	0x20009448
 800e43c:	0801a63c 	.word	0x0801a63c

0800e440 <rcutils_reset_error>:
 800e440:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800e460 <rcutils_reset_error+0x20>
 800e444:	4a08      	ldr	r2, [pc, #32]	; (800e468 <rcutils_reset_error+0x28>)
 800e446:	4809      	ldr	r0, [pc, #36]	; (800e46c <rcutils_reset_error+0x2c>)
 800e448:	4909      	ldr	r1, [pc, #36]	; (800e470 <rcutils_reset_error+0x30>)
 800e44a:	2300      	movs	r3, #0
 800e44c:	8013      	strh	r3, [r2, #0]
 800e44e:	ed82 7b02 	vstr	d7, [r2, #8]
 800e452:	4a08      	ldr	r2, [pc, #32]	; (800e474 <rcutils_reset_error+0x34>)
 800e454:	7003      	strb	r3, [r0, #0]
 800e456:	700b      	strb	r3, [r1, #0]
 800e458:	7013      	strb	r3, [r2, #0]
 800e45a:	4770      	bx	lr
 800e45c:	f3af 8000 	nop.w
	...
 800e468:	20009438 	.word	0x20009438
 800e46c:	20009449 	.word	0x20009449
 800e470:	20009448 	.word	0x20009448
 800e474:	20009430 	.word	0x20009430

0800e478 <rcutils_system_time_now>:
 800e478:	b308      	cbz	r0, 800e4be <rcutils_system_time_now+0x46>
 800e47a:	b570      	push	{r4, r5, r6, lr}
 800e47c:	b084      	sub	sp, #16
 800e47e:	4604      	mov	r4, r0
 800e480:	4669      	mov	r1, sp
 800e482:	2001      	movs	r0, #1
 800e484:	f7f2 ff40 	bl	8001308 <clock_gettime>
 800e488:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e48c:	2d00      	cmp	r5, #0
 800e48e:	db13      	blt.n	800e4b8 <rcutils_system_time_now+0x40>
 800e490:	9902      	ldr	r1, [sp, #8]
 800e492:	2900      	cmp	r1, #0
 800e494:	db0d      	blt.n	800e4b2 <rcutils_system_time_now+0x3a>
 800e496:	4e0b      	ldr	r6, [pc, #44]	; (800e4c4 <rcutils_system_time_now+0x4c>)
 800e498:	fba3 3206 	umull	r3, r2, r3, r6
 800e49c:	185b      	adds	r3, r3, r1
 800e49e:	fb06 2205 	mla	r2, r6, r5, r2
 800e4a2:	f04f 0000 	mov.w	r0, #0
 800e4a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e4aa:	e9c4 3200 	strd	r3, r2, [r4]
 800e4ae:	b004      	add	sp, #16
 800e4b0:	bd70      	pop	{r4, r5, r6, pc}
 800e4b2:	ea53 0205 	orrs.w	r2, r3, r5
 800e4b6:	d1ee      	bne.n	800e496 <rcutils_system_time_now+0x1e>
 800e4b8:	2002      	movs	r0, #2
 800e4ba:	b004      	add	sp, #16
 800e4bc:	bd70      	pop	{r4, r5, r6, pc}
 800e4be:	200b      	movs	r0, #11
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	3b9aca00 	.word	0x3b9aca00

0800e4c8 <rcutils_steady_time_now>:
 800e4c8:	b308      	cbz	r0, 800e50e <rcutils_steady_time_now+0x46>
 800e4ca:	b570      	push	{r4, r5, r6, lr}
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	4669      	mov	r1, sp
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	f7f2 ff18 	bl	8001308 <clock_gettime>
 800e4d8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e4dc:	2d00      	cmp	r5, #0
 800e4de:	db13      	blt.n	800e508 <rcutils_steady_time_now+0x40>
 800e4e0:	9902      	ldr	r1, [sp, #8]
 800e4e2:	2900      	cmp	r1, #0
 800e4e4:	db0d      	blt.n	800e502 <rcutils_steady_time_now+0x3a>
 800e4e6:	4e0b      	ldr	r6, [pc, #44]	; (800e514 <rcutils_steady_time_now+0x4c>)
 800e4e8:	fba3 3206 	umull	r3, r2, r3, r6
 800e4ec:	185b      	adds	r3, r3, r1
 800e4ee:	fb06 2205 	mla	r2, r6, r5, r2
 800e4f2:	f04f 0000 	mov.w	r0, #0
 800e4f6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e4fa:	e9c4 3200 	strd	r3, r2, [r4]
 800e4fe:	b004      	add	sp, #16
 800e500:	bd70      	pop	{r4, r5, r6, pc}
 800e502:	ea53 0205 	orrs.w	r2, r3, r5
 800e506:	d1ee      	bne.n	800e4e6 <rcutils_steady_time_now+0x1e>
 800e508:	2002      	movs	r0, #2
 800e50a:	b004      	add	sp, #16
 800e50c:	bd70      	pop	{r4, r5, r6, pc}
 800e50e:	200b      	movs	r0, #11
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	3b9aca00 	.word	0x3b9aca00

0800e518 <rmw_get_default_publisher_options>:
 800e518:	2200      	movs	r2, #0
 800e51a:	6002      	str	r2, [r0, #0]
 800e51c:	7102      	strb	r2, [r0, #4]
 800e51e:	4770      	bx	lr

0800e520 <rmw_uros_set_custom_transport>:
 800e520:	b470      	push	{r4, r5, r6}
 800e522:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e526:	b162      	cbz	r2, 800e542 <rmw_uros_set_custom_transport+0x22>
 800e528:	b15b      	cbz	r3, 800e542 <rmw_uros_set_custom_transport+0x22>
 800e52a:	b155      	cbz	r5, 800e542 <rmw_uros_set_custom_transport+0x22>
 800e52c:	b14e      	cbz	r6, 800e542 <rmw_uros_set_custom_transport+0x22>
 800e52e:	4c06      	ldr	r4, [pc, #24]	; (800e548 <rmw_uros_set_custom_transport+0x28>)
 800e530:	7020      	strb	r0, [r4, #0]
 800e532:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e536:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e53a:	6166      	str	r6, [r4, #20]
 800e53c:	2000      	movs	r0, #0
 800e53e:	bc70      	pop	{r4, r5, r6}
 800e540:	4770      	bx	lr
 800e542:	200b      	movs	r0, #11
 800e544:	bc70      	pop	{r4, r5, r6}
 800e546:	4770      	bx	lr
 800e548:	2000944c 	.word	0x2000944c

0800e54c <flush_session>:
 800e54c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800e54e:	f001 bcdf 	b.w	800ff10 <uxr_run_session_until_confirm_delivery>
 800e552:	bf00      	nop

0800e554 <rmw_publish>:
 800e554:	2800      	cmp	r0, #0
 800e556:	d053      	beq.n	800e600 <rmw_publish+0xac>
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	460d      	mov	r5, r1
 800e55c:	b08e      	sub	sp, #56	; 0x38
 800e55e:	2900      	cmp	r1, #0
 800e560:	d04b      	beq.n	800e5fa <rmw_publish+0xa6>
 800e562:	4604      	mov	r4, r0
 800e564:	6800      	ldr	r0, [r0, #0]
 800e566:	f000 fced 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d045      	beq.n	800e5fa <rmw_publish+0xa6>
 800e56e:	6866      	ldr	r6, [r4, #4]
 800e570:	2e00      	cmp	r6, #0
 800e572:	d042      	beq.n	800e5fa <rmw_publish+0xa6>
 800e574:	69b4      	ldr	r4, [r6, #24]
 800e576:	4628      	mov	r0, r5
 800e578:	6923      	ldr	r3, [r4, #16]
 800e57a:	4798      	blx	r3
 800e57c:	69f3      	ldr	r3, [r6, #28]
 800e57e:	9005      	str	r0, [sp, #20]
 800e580:	b113      	cbz	r3, 800e588 <rmw_publish+0x34>
 800e582:	a805      	add	r0, sp, #20
 800e584:	4798      	blx	r3
 800e586:	9805      	ldr	r0, [sp, #20]
 800e588:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	9000      	str	r0, [sp, #0]
 800e590:	6972      	ldr	r2, [r6, #20]
 800e592:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800e594:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e598:	ab06      	add	r3, sp, #24
 800e59a:	f002 fa75 	bl	8010a88 <uxr_prepare_output_stream>
 800e59e:	b1d8      	cbz	r0, 800e5d8 <rmw_publish+0x84>
 800e5a0:	68a3      	ldr	r3, [r4, #8]
 800e5a2:	a906      	add	r1, sp, #24
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	4798      	blx	r3
 800e5a8:	6a33      	ldr	r3, [r6, #32]
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	b10b      	cbz	r3, 800e5b2 <rmw_publish+0x5e>
 800e5ae:	a806      	add	r0, sp, #24
 800e5b0:	4798      	blx	r3
 800e5b2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e5bc:	d022      	beq.n	800e604 <rmw_publish+0xb0>
 800e5be:	6918      	ldr	r0, [r3, #16]
 800e5c0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800e5c2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e5c6:	f001 fca3 	bl	800ff10 <uxr_run_session_until_confirm_delivery>
 800e5ca:	4020      	ands	r0, r4
 800e5cc:	b2c4      	uxtb	r4, r0
 800e5ce:	f084 0001 	eor.w	r0, r4, #1
 800e5d2:	b2c0      	uxtb	r0, r0
 800e5d4:	b00e      	add	sp, #56	; 0x38
 800e5d6:	bd70      	pop	{r4, r5, r6, pc}
 800e5d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e5dc:	6918      	ldr	r0, [r3, #16]
 800e5de:	9b05      	ldr	r3, [sp, #20]
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	4b0b      	ldr	r3, [pc, #44]	; (800e610 <rmw_publish+0xbc>)
 800e5e4:	9301      	str	r3, [sp, #4]
 800e5e6:	9602      	str	r6, [sp, #8]
 800e5e8:	6972      	ldr	r2, [r6, #20]
 800e5ea:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800e5ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e5f0:	ab06      	add	r3, sp, #24
 800e5f2:	f002 fa79 	bl	8010ae8 <uxr_prepare_output_stream_fragmented>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d1d2      	bne.n	800e5a0 <rmw_publish+0x4c>
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	b00e      	add	sp, #56	; 0x38
 800e5fe:	bd70      	pop	{r4, r5, r6, pc}
 800e600:	2001      	movs	r0, #1
 800e602:	4770      	bx	lr
 800e604:	6918      	ldr	r0, [r3, #16]
 800e606:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e60a:	f001 f8c1 	bl	800f790 <uxr_flash_output_streams>
 800e60e:	e7de      	b.n	800e5ce <rmw_publish+0x7a>
 800e610:	0800e54d 	.word	0x0800e54d

0800e614 <rmw_create_publisher>:
 800e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e618:	b087      	sub	sp, #28
 800e61a:	2800      	cmp	r0, #0
 800e61c:	f000 80cc 	beq.w	800e7b8 <rmw_create_publisher+0x1a4>
 800e620:	460e      	mov	r6, r1
 800e622:	2900      	cmp	r1, #0
 800e624:	f000 80c8 	beq.w	800e7b8 <rmw_create_publisher+0x1a4>
 800e628:	4604      	mov	r4, r0
 800e62a:	6800      	ldr	r0, [r0, #0]
 800e62c:	4615      	mov	r5, r2
 800e62e:	4698      	mov	r8, r3
 800e630:	f000 fc88 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 800e634:	2800      	cmp	r0, #0
 800e636:	f000 80bf 	beq.w	800e7b8 <rmw_create_publisher+0x1a4>
 800e63a:	2d00      	cmp	r5, #0
 800e63c:	f000 80bc 	beq.w	800e7b8 <rmw_create_publisher+0x1a4>
 800e640:	782b      	ldrb	r3, [r5, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	f000 80b8 	beq.w	800e7b8 <rmw_create_publisher+0x1a4>
 800e648:	f1b8 0f00 	cmp.w	r8, #0
 800e64c:	f000 80b4 	beq.w	800e7b8 <rmw_create_publisher+0x1a4>
 800e650:	485c      	ldr	r0, [pc, #368]	; (800e7c4 <rmw_create_publisher+0x1b0>)
 800e652:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e656:	f006 fe8b 	bl	8015370 <get_memory>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	f000 80ac 	beq.w	800e7b8 <rmw_create_publisher+0x1a4>
 800e660:	6884      	ldr	r4, [r0, #8]
 800e662:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800e666:	f006 feeb 	bl	8015440 <rmw_get_implementation_identifier>
 800e66a:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800e66e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800e672:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800e676:	4628      	mov	r0, r5
 800e678:	f7f1 fdb4 	bl	80001e4 <strlen>
 800e67c:	3001      	adds	r0, #1
 800e67e:	283c      	cmp	r0, #60	; 0x3c
 800e680:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800e684:	f200 8091 	bhi.w	800e7aa <rmw_create_publisher+0x196>
 800e688:	4a4f      	ldr	r2, [pc, #316]	; (800e7c8 <rmw_create_publisher+0x1b4>)
 800e68a:	462b      	mov	r3, r5
 800e68c:	213c      	movs	r1, #60	; 0x3c
 800e68e:	4650      	mov	r0, sl
 800e690:	f00a fbba 	bl	8018e08 <sniprintf>
 800e694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e698:	67e3      	str	r3, [r4, #124]	; 0x7c
 800e69a:	4641      	mov	r1, r8
 800e69c:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800e6a0:	2250      	movs	r2, #80	; 0x50
 800e6a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e6a6:	f00a fa27 	bl	8018af8 <memcpy>
 800e6aa:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e6ae:	4947      	ldr	r1, [pc, #284]	; (800e7cc <rmw_create_publisher+0x1b8>)
 800e6b0:	2b02      	cmp	r3, #2
 800e6b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6b6:	bf0c      	ite	eq
 800e6b8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800e6bc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800e6c0:	67a3      	str	r3, [r4, #120]	; 0x78
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	f000 fc49 	bl	800ef60 <get_message_typesupport_handle>
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d06b      	beq.n	800e7aa <rmw_create_publisher+0x196>
 800e6d2:	6842      	ldr	r2, [r0, #4]
 800e6d4:	61a2      	str	r2, [r4, #24]
 800e6d6:	2a00      	cmp	r2, #0
 800e6d8:	d067      	beq.n	800e7aa <rmw_create_publisher+0x196>
 800e6da:	4629      	mov	r1, r5
 800e6dc:	4643      	mov	r3, r8
 800e6de:	4648      	mov	r0, r9
 800e6e0:	f007 f914 	bl	801590c <create_topic>
 800e6e4:	6260      	str	r0, [r4, #36]	; 0x24
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	d063      	beq.n	800e7b2 <rmw_create_publisher+0x19e>
 800e6ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6f2:	2103      	movs	r1, #3
 800e6f4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800e6f8:	1c42      	adds	r2, r0, #1
 800e6fa:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800e6fe:	f000 fef9 	bl	800f4f4 <uxr_object_id>
 800e702:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e706:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e70a:	6120      	str	r0, [r4, #16]
 800e70c:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800e710:	6910      	ldr	r0, [r2, #16]
 800e712:	2506      	movs	r5, #6
 800e714:	9500      	str	r5, [sp, #0]
 800e716:	6819      	ldr	r1, [r3, #0]
 800e718:	6922      	ldr	r2, [r4, #16]
 800e71a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e71e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e722:	f000 fd99 	bl	800f258 <uxr_buffer_create_publisher_bin>
 800e726:	4602      	mov	r2, r0
 800e728:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e72c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e730:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e734:	f000 fb86 	bl	800ee44 <run_xrce_session>
 800e738:	b3b8      	cbz	r0, 800e7aa <rmw_create_publisher+0x196>
 800e73a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e742:	2105      	movs	r1, #5
 800e744:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800e748:	1c42      	adds	r2, r0, #1
 800e74a:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800e74e:	f000 fed1 	bl	800f4f4 <uxr_object_id>
 800e752:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e756:	6160      	str	r0, [r4, #20]
 800e758:	691e      	ldr	r6, [r3, #16]
 800e75a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e75e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800e762:	f10d 0a10 	add.w	sl, sp, #16
 800e766:	4641      	mov	r1, r8
 800e768:	4650      	mov	r0, sl
 800e76a:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800e76e:	f000 fb85 	bl	800ee7c <convert_qos_profile>
 800e772:	9503      	str	r5, [sp, #12]
 800e774:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e778:	9001      	str	r0, [sp, #4]
 800e77a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e77e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800e788:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e78c:	f8d8 1000 	ldr.w	r1, [r8]
 800e790:	4630      	mov	r0, r6
 800e792:	f000 fdc1 	bl	800f318 <uxr_buffer_create_datawriter_bin>
 800e796:	4602      	mov	r2, r0
 800e798:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e79c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e7a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e7a4:	f000 fb4e 	bl	800ee44 <run_xrce_session>
 800e7a8:	b938      	cbnz	r0, 800e7ba <rmw_create_publisher+0x1a6>
 800e7aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e7ac:	b108      	cbz	r0, 800e7b2 <rmw_create_publisher+0x19e>
 800e7ae:	f000 fa47 	bl	800ec40 <rmw_uxrce_fini_topic_memory>
 800e7b2:	4638      	mov	r0, r7
 800e7b4:	f000 f9ec 	bl	800eb90 <rmw_uxrce_fini_publisher_memory>
 800e7b8:	2700      	movs	r7, #0
 800e7ba:	4638      	mov	r0, r7
 800e7bc:	b007      	add	sp, #28
 800e7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c2:	bf00      	nop
 800e7c4:	2000dd44 	.word	0x2000dd44
 800e7c8:	0801a650 	.word	0x0801a650
 800e7cc:	0801a3e0 	.word	0x0801a3e0

0800e7d0 <rmw_publisher_get_actual_qos>:
 800e7d0:	b150      	cbz	r0, 800e7e8 <rmw_publisher_get_actual_qos+0x18>
 800e7d2:	b508      	push	{r3, lr}
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	b149      	cbz	r1, 800e7ec <rmw_publisher_get_actual_qos+0x1c>
 800e7d8:	6841      	ldr	r1, [r0, #4]
 800e7da:	2250      	movs	r2, #80	; 0x50
 800e7dc:	3128      	adds	r1, #40	; 0x28
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f00a f98a 	bl	8018af8 <memcpy>
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	bd08      	pop	{r3, pc}
 800e7e8:	200b      	movs	r0, #11
 800e7ea:	4770      	bx	lr
 800e7ec:	200b      	movs	r0, #11
 800e7ee:	bd08      	pop	{r3, pc}

0800e7f0 <rmw_destroy_publisher>:
 800e7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7f2:	b128      	cbz	r0, 800e800 <rmw_destroy_publisher+0x10>
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	6800      	ldr	r0, [r0, #0]
 800e7f8:	460d      	mov	r5, r1
 800e7fa:	f000 fba3 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 800e7fe:	b910      	cbnz	r0, 800e806 <rmw_destroy_publisher+0x16>
 800e800:	2401      	movs	r4, #1
 800e802:	4620      	mov	r0, r4
 800e804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e806:	6863      	ldr	r3, [r4, #4]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d0f9      	beq.n	800e800 <rmw_destroy_publisher+0x10>
 800e80c:	2d00      	cmp	r5, #0
 800e80e:	d0f7      	beq.n	800e800 <rmw_destroy_publisher+0x10>
 800e810:	6828      	ldr	r0, [r5, #0]
 800e812:	f000 fb97 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 800e816:	2800      	cmp	r0, #0
 800e818:	d0f2      	beq.n	800e800 <rmw_destroy_publisher+0x10>
 800e81a:	686c      	ldr	r4, [r5, #4]
 800e81c:	2c00      	cmp	r4, #0
 800e81e:	d0ef      	beq.n	800e800 <rmw_destroy_publisher+0x10>
 800e820:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e822:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800e826:	f007 f8c1 	bl	80159ac <destroy_topic>
 800e82a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e82e:	6962      	ldr	r2, [r4, #20]
 800e830:	6918      	ldr	r0, [r3, #16]
 800e832:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e836:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e83a:	6819      	ldr	r1, [r3, #0]
 800e83c:	f000 fc58 	bl	800f0f0 <uxr_buffer_delete_entity>
 800e840:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e844:	6922      	ldr	r2, [r4, #16]
 800e846:	691b      	ldr	r3, [r3, #16]
 800e848:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800e84c:	4604      	mov	r4, r0
 800e84e:	6809      	ldr	r1, [r1, #0]
 800e850:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e854:	f000 fc4c 	bl	800f0f0 <uxr_buffer_delete_entity>
 800e858:	693e      	ldr	r6, [r7, #16]
 800e85a:	4622      	mov	r2, r4
 800e85c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800e860:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800e864:	4604      	mov	r4, r0
 800e866:	4630      	mov	r0, r6
 800e868:	f000 faec 	bl	800ee44 <run_xrce_session>
 800e86c:	693e      	ldr	r6, [r7, #16]
 800e86e:	4622      	mov	r2, r4
 800e870:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800e874:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800e878:	4604      	mov	r4, r0
 800e87a:	4630      	mov	r0, r6
 800e87c:	f000 fae2 	bl	800ee44 <run_xrce_session>
 800e880:	b12c      	cbz	r4, 800e88e <rmw_destroy_publisher+0x9e>
 800e882:	b120      	cbz	r0, 800e88e <rmw_destroy_publisher+0x9e>
 800e884:	2400      	movs	r4, #0
 800e886:	4628      	mov	r0, r5
 800e888:	f000 f982 	bl	800eb90 <rmw_uxrce_fini_publisher_memory>
 800e88c:	e7b9      	b.n	800e802 <rmw_destroy_publisher+0x12>
 800e88e:	2402      	movs	r4, #2
 800e890:	e7f9      	b.n	800e886 <rmw_destroy_publisher+0x96>
 800e892:	bf00      	nop

0800e894 <rmw_uxrce_init_service_memory>:
 800e894:	b1e2      	cbz	r2, 800e8d0 <rmw_uxrce_init_service_memory+0x3c>
 800e896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e89a:	7b05      	ldrb	r5, [r0, #12]
 800e89c:	4606      	mov	r6, r0
 800e89e:	b9ad      	cbnz	r5, 800e8cc <rmw_uxrce_init_service_memory+0x38>
 800e8a0:	23c8      	movs	r3, #200	; 0xc8
 800e8a2:	e9c0 5500 	strd	r5, r5, [r0]
 800e8a6:	6083      	str	r3, [r0, #8]
 800e8a8:	f240 1301 	movw	r3, #257	; 0x101
 800e8ac:	4617      	mov	r7, r2
 800e8ae:	8183      	strh	r3, [r0, #12]
 800e8b0:	460c      	mov	r4, r1
 800e8b2:	46a8      	mov	r8, r5
 800e8b4:	4621      	mov	r1, r4
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	3501      	adds	r5, #1
 800e8ba:	f006 fd69 	bl	8015390 <put_memory>
 800e8be:	42af      	cmp	r7, r5
 800e8c0:	60a4      	str	r4, [r4, #8]
 800e8c2:	f884 800c 	strb.w	r8, [r4, #12]
 800e8c6:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e8ca:	d1f3      	bne.n	800e8b4 <rmw_uxrce_init_service_memory+0x20>
 800e8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop

0800e8d4 <rmw_uxrce_init_client_memory>:
 800e8d4:	b1e2      	cbz	r2, 800e910 <rmw_uxrce_init_client_memory+0x3c>
 800e8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8da:	7b05      	ldrb	r5, [r0, #12]
 800e8dc:	4606      	mov	r6, r0
 800e8de:	b9ad      	cbnz	r5, 800e90c <rmw_uxrce_init_client_memory+0x38>
 800e8e0:	23c8      	movs	r3, #200	; 0xc8
 800e8e2:	e9c0 5500 	strd	r5, r5, [r0]
 800e8e6:	6083      	str	r3, [r0, #8]
 800e8e8:	f240 1301 	movw	r3, #257	; 0x101
 800e8ec:	4617      	mov	r7, r2
 800e8ee:	8183      	strh	r3, [r0, #12]
 800e8f0:	460c      	mov	r4, r1
 800e8f2:	46a8      	mov	r8, r5
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	3501      	adds	r5, #1
 800e8fa:	f006 fd49 	bl	8015390 <put_memory>
 800e8fe:	42af      	cmp	r7, r5
 800e900:	60a4      	str	r4, [r4, #8]
 800e902:	f884 800c 	strb.w	r8, [r4, #12]
 800e906:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e90a:	d1f3      	bne.n	800e8f4 <rmw_uxrce_init_client_memory+0x20>
 800e90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop

0800e914 <rmw_uxrce_init_publisher_memory>:
 800e914:	b1e2      	cbz	r2, 800e950 <rmw_uxrce_init_publisher_memory+0x3c>
 800e916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e91a:	7b05      	ldrb	r5, [r0, #12]
 800e91c:	4606      	mov	r6, r0
 800e91e:	b9ad      	cbnz	r5, 800e94c <rmw_uxrce_init_publisher_memory+0x38>
 800e920:	23d8      	movs	r3, #216	; 0xd8
 800e922:	e9c0 5500 	strd	r5, r5, [r0]
 800e926:	6083      	str	r3, [r0, #8]
 800e928:	f240 1301 	movw	r3, #257	; 0x101
 800e92c:	4617      	mov	r7, r2
 800e92e:	8183      	strh	r3, [r0, #12]
 800e930:	460c      	mov	r4, r1
 800e932:	46a8      	mov	r8, r5
 800e934:	4621      	mov	r1, r4
 800e936:	4630      	mov	r0, r6
 800e938:	3501      	adds	r5, #1
 800e93a:	f006 fd29 	bl	8015390 <put_memory>
 800e93e:	42af      	cmp	r7, r5
 800e940:	60a4      	str	r4, [r4, #8]
 800e942:	f884 800c 	strb.w	r8, [r4, #12]
 800e946:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e94a:	d1f3      	bne.n	800e934 <rmw_uxrce_init_publisher_memory+0x20>
 800e94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop

0800e954 <rmw_uxrce_init_subscription_memory>:
 800e954:	b1e2      	cbz	r2, 800e990 <rmw_uxrce_init_subscription_memory+0x3c>
 800e956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e95a:	7b05      	ldrb	r5, [r0, #12]
 800e95c:	4606      	mov	r6, r0
 800e95e:	b9ad      	cbnz	r5, 800e98c <rmw_uxrce_init_subscription_memory+0x38>
 800e960:	23d8      	movs	r3, #216	; 0xd8
 800e962:	e9c0 5500 	strd	r5, r5, [r0]
 800e966:	6083      	str	r3, [r0, #8]
 800e968:	f240 1301 	movw	r3, #257	; 0x101
 800e96c:	4617      	mov	r7, r2
 800e96e:	8183      	strh	r3, [r0, #12]
 800e970:	460c      	mov	r4, r1
 800e972:	46a8      	mov	r8, r5
 800e974:	4621      	mov	r1, r4
 800e976:	4630      	mov	r0, r6
 800e978:	3501      	adds	r5, #1
 800e97a:	f006 fd09 	bl	8015390 <put_memory>
 800e97e:	42af      	cmp	r7, r5
 800e980:	60a4      	str	r4, [r4, #8]
 800e982:	f884 800c 	strb.w	r8, [r4, #12]
 800e986:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e98a:	d1f3      	bne.n	800e974 <rmw_uxrce_init_subscription_memory+0x20>
 800e98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop

0800e994 <rmw_uxrce_init_node_memory>:
 800e994:	b1e2      	cbz	r2, 800e9d0 <rmw_uxrce_init_node_memory+0x3c>
 800e996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e99a:	7b05      	ldrb	r5, [r0, #12]
 800e99c:	4606      	mov	r6, r0
 800e99e:	b9ad      	cbnz	r5, 800e9cc <rmw_uxrce_init_node_memory+0x38>
 800e9a0:	23a4      	movs	r3, #164	; 0xa4
 800e9a2:	e9c0 5500 	strd	r5, r5, [r0]
 800e9a6:	6083      	str	r3, [r0, #8]
 800e9a8:	f240 1301 	movw	r3, #257	; 0x101
 800e9ac:	4617      	mov	r7, r2
 800e9ae:	8183      	strh	r3, [r0, #12]
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	46a8      	mov	r8, r5
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	3501      	adds	r5, #1
 800e9ba:	f006 fce9 	bl	8015390 <put_memory>
 800e9be:	42af      	cmp	r7, r5
 800e9c0:	60a4      	str	r4, [r4, #8]
 800e9c2:	f884 800c 	strb.w	r8, [r4, #12]
 800e9c6:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800e9ca:	d1f3      	bne.n	800e9b4 <rmw_uxrce_init_node_memory+0x20>
 800e9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop

0800e9d4 <rmw_uxrce_init_session_memory>:
 800e9d4:	b1ea      	cbz	r2, 800ea12 <rmw_uxrce_init_session_memory+0x3e>
 800e9d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9da:	7b05      	ldrb	r5, [r0, #12]
 800e9dc:	4606      	mov	r6, r0
 800e9de:	b9b5      	cbnz	r5, 800ea0e <rmw_uxrce_init_session_memory+0x3a>
 800e9e0:	e9c0 5500 	strd	r5, r5, [r0]
 800e9e4:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800e9e8:	f240 1301 	movw	r3, #257	; 0x101
 800e9ec:	4617      	mov	r7, r2
 800e9ee:	f8c0 8008 	str.w	r8, [r0, #8]
 800e9f2:	460c      	mov	r4, r1
 800e9f4:	8183      	strh	r3, [r0, #12]
 800e9f6:	46a9      	mov	r9, r5
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	3501      	adds	r5, #1
 800e9fe:	f006 fcc7 	bl	8015390 <put_memory>
 800ea02:	42af      	cmp	r7, r5
 800ea04:	60a4      	str	r4, [r4, #8]
 800ea06:	f884 900c 	strb.w	r9, [r4, #12]
 800ea0a:	4444      	add	r4, r8
 800ea0c:	d1f4      	bne.n	800e9f8 <rmw_uxrce_init_session_memory+0x24>
 800ea0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea12:	4770      	bx	lr

0800ea14 <rmw_uxrce_init_topic_memory>:
 800ea14:	b1e2      	cbz	r2, 800ea50 <rmw_uxrce_init_topic_memory+0x3c>
 800ea16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea1a:	7b05      	ldrb	r5, [r0, #12]
 800ea1c:	4606      	mov	r6, r0
 800ea1e:	b9ad      	cbnz	r5, 800ea4c <rmw_uxrce_init_topic_memory+0x38>
 800ea20:	231c      	movs	r3, #28
 800ea22:	e9c0 5500 	strd	r5, r5, [r0]
 800ea26:	6083      	str	r3, [r0, #8]
 800ea28:	f240 1301 	movw	r3, #257	; 0x101
 800ea2c:	4617      	mov	r7, r2
 800ea2e:	8183      	strh	r3, [r0, #12]
 800ea30:	460c      	mov	r4, r1
 800ea32:	46a8      	mov	r8, r5
 800ea34:	4621      	mov	r1, r4
 800ea36:	4630      	mov	r0, r6
 800ea38:	3501      	adds	r5, #1
 800ea3a:	f006 fca9 	bl	8015390 <put_memory>
 800ea3e:	42af      	cmp	r7, r5
 800ea40:	60a4      	str	r4, [r4, #8]
 800ea42:	f884 800c 	strb.w	r8, [r4, #12]
 800ea46:	f104 041c 	add.w	r4, r4, #28
 800ea4a:	d1f3      	bne.n	800ea34 <rmw_uxrce_init_topic_memory+0x20>
 800ea4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop

0800ea54 <rmw_uxrce_init_static_input_buffer_memory>:
 800ea54:	b1ea      	cbz	r2, 800ea92 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ea56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea5a:	7b05      	ldrb	r5, [r0, #12]
 800ea5c:	4606      	mov	r6, r0
 800ea5e:	b9b5      	cbnz	r5, 800ea8e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ea60:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800ea64:	e9c0 5500 	strd	r5, r5, [r0]
 800ea68:	6083      	str	r3, [r0, #8]
 800ea6a:	f240 1301 	movw	r3, #257	; 0x101
 800ea6e:	4617      	mov	r7, r2
 800ea70:	8183      	strh	r3, [r0, #12]
 800ea72:	460c      	mov	r4, r1
 800ea74:	46a8      	mov	r8, r5
 800ea76:	4621      	mov	r1, r4
 800ea78:	4630      	mov	r0, r6
 800ea7a:	3501      	adds	r5, #1
 800ea7c:	f006 fc88 	bl	8015390 <put_memory>
 800ea80:	42af      	cmp	r7, r5
 800ea82:	60a4      	str	r4, [r4, #8]
 800ea84:	f884 800c 	strb.w	r8, [r4, #12]
 800ea88:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800ea8c:	d1f3      	bne.n	800ea76 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ea8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea92:	4770      	bx	lr

0800ea94 <rmw_uxrce_init_init_options_impl_memory>:
 800ea94:	b1e2      	cbz	r2, 800ead0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ea96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea9a:	7b05      	ldrb	r5, [r0, #12]
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	b9ad      	cbnz	r5, 800eacc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800eaa0:	232c      	movs	r3, #44	; 0x2c
 800eaa2:	e9c0 5500 	strd	r5, r5, [r0]
 800eaa6:	6083      	str	r3, [r0, #8]
 800eaa8:	f240 1301 	movw	r3, #257	; 0x101
 800eaac:	4617      	mov	r7, r2
 800eaae:	8183      	strh	r3, [r0, #12]
 800eab0:	460c      	mov	r4, r1
 800eab2:	46a8      	mov	r8, r5
 800eab4:	4621      	mov	r1, r4
 800eab6:	4630      	mov	r0, r6
 800eab8:	3501      	adds	r5, #1
 800eaba:	f006 fc69 	bl	8015390 <put_memory>
 800eabe:	42af      	cmp	r7, r5
 800eac0:	60a4      	str	r4, [r4, #8]
 800eac2:	f884 800c 	strb.w	r8, [r4, #12]
 800eac6:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800eaca:	d1f3      	bne.n	800eab4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800eacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead0:	4770      	bx	lr
 800ead2:	bf00      	nop

0800ead4 <rmw_uxrce_init_wait_set_memory>:
 800ead4:	b1e2      	cbz	r2, 800eb10 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ead6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eada:	7b05      	ldrb	r5, [r0, #12]
 800eadc:	4606      	mov	r6, r0
 800eade:	b9ad      	cbnz	r5, 800eb0c <rmw_uxrce_init_wait_set_memory+0x38>
 800eae0:	231c      	movs	r3, #28
 800eae2:	e9c0 5500 	strd	r5, r5, [r0]
 800eae6:	6083      	str	r3, [r0, #8]
 800eae8:	f240 1301 	movw	r3, #257	; 0x101
 800eaec:	4617      	mov	r7, r2
 800eaee:	8183      	strh	r3, [r0, #12]
 800eaf0:	460c      	mov	r4, r1
 800eaf2:	46a8      	mov	r8, r5
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	3501      	adds	r5, #1
 800eafa:	f006 fc49 	bl	8015390 <put_memory>
 800eafe:	42af      	cmp	r7, r5
 800eb00:	60a4      	str	r4, [r4, #8]
 800eb02:	f884 800c 	strb.w	r8, [r4, #12]
 800eb06:	f104 041c 	add.w	r4, r4, #28
 800eb0a:	d1f3      	bne.n	800eaf4 <rmw_uxrce_init_wait_set_memory+0x20>
 800eb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop

0800eb14 <rmw_uxrce_init_guard_condition_memory>:
 800eb14:	b1e2      	cbz	r2, 800eb50 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800eb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1a:	7b05      	ldrb	r5, [r0, #12]
 800eb1c:	4606      	mov	r6, r0
 800eb1e:	b9ad      	cbnz	r5, 800eb4c <rmw_uxrce_init_guard_condition_memory+0x38>
 800eb20:	2320      	movs	r3, #32
 800eb22:	e9c0 5500 	strd	r5, r5, [r0]
 800eb26:	6083      	str	r3, [r0, #8]
 800eb28:	f240 1301 	movw	r3, #257	; 0x101
 800eb2c:	4617      	mov	r7, r2
 800eb2e:	8183      	strh	r3, [r0, #12]
 800eb30:	460c      	mov	r4, r1
 800eb32:	46a8      	mov	r8, r5
 800eb34:	4621      	mov	r1, r4
 800eb36:	4630      	mov	r0, r6
 800eb38:	3501      	adds	r5, #1
 800eb3a:	f006 fc29 	bl	8015390 <put_memory>
 800eb3e:	42af      	cmp	r7, r5
 800eb40:	60a4      	str	r4, [r4, #8]
 800eb42:	f884 800c 	strb.w	r8, [r4, #12]
 800eb46:	f104 0420 	add.w	r4, r4, #32
 800eb4a:	d1f3      	bne.n	800eb34 <rmw_uxrce_init_guard_condition_memory+0x20>
 800eb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop

0800eb54 <rmw_uxrce_fini_session_memory>:
 800eb54:	4601      	mov	r1, r0
 800eb56:	4801      	ldr	r0, [pc, #4]	; (800eb5c <rmw_uxrce_fini_session_memory+0x8>)
 800eb58:	f006 bc1a 	b.w	8015390 <put_memory>
 800eb5c:	2000dd64 	.word	0x2000dd64

0800eb60 <rmw_uxrce_fini_node_memory>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	4604      	mov	r4, r0
 800eb64:	6800      	ldr	r0, [r0, #0]
 800eb66:	b128      	cbz	r0, 800eb74 <rmw_uxrce_fini_node_memory+0x14>
 800eb68:	4b07      	ldr	r3, [pc, #28]	; (800eb88 <rmw_uxrce_fini_node_memory+0x28>)
 800eb6a:	6819      	ldr	r1, [r3, #0]
 800eb6c:	f7f1 fb30 	bl	80001d0 <strcmp>
 800eb70:	b940      	cbnz	r0, 800eb84 <rmw_uxrce_fini_node_memory+0x24>
 800eb72:	6020      	str	r0, [r4, #0]
 800eb74:	6861      	ldr	r1, [r4, #4]
 800eb76:	b129      	cbz	r1, 800eb84 <rmw_uxrce_fini_node_memory+0x24>
 800eb78:	2500      	movs	r5, #0
 800eb7a:	4804      	ldr	r0, [pc, #16]	; (800eb8c <rmw_uxrce_fini_node_memory+0x2c>)
 800eb7c:	610d      	str	r5, [r1, #16]
 800eb7e:	f006 fc07 	bl	8015390 <put_memory>
 800eb82:	6065      	str	r5, [r4, #4]
 800eb84:	bd38      	pop	{r3, r4, r5, pc}
 800eb86:	bf00      	nop
 800eb88:	0801ad64 	.word	0x0801ad64
 800eb8c:	2000dd34 	.word	0x2000dd34

0800eb90 <rmw_uxrce_fini_publisher_memory>:
 800eb90:	b510      	push	{r4, lr}
 800eb92:	4604      	mov	r4, r0
 800eb94:	6800      	ldr	r0, [r0, #0]
 800eb96:	b128      	cbz	r0, 800eba4 <rmw_uxrce_fini_publisher_memory+0x14>
 800eb98:	4b06      	ldr	r3, [pc, #24]	; (800ebb4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800eb9a:	6819      	ldr	r1, [r3, #0]
 800eb9c:	f7f1 fb18 	bl	80001d0 <strcmp>
 800eba0:	b938      	cbnz	r0, 800ebb2 <rmw_uxrce_fini_publisher_memory+0x22>
 800eba2:	6020      	str	r0, [r4, #0]
 800eba4:	6861      	ldr	r1, [r4, #4]
 800eba6:	b121      	cbz	r1, 800ebb2 <rmw_uxrce_fini_publisher_memory+0x22>
 800eba8:	4803      	ldr	r0, [pc, #12]	; (800ebb8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ebaa:	f006 fbf1 	bl	8015390 <put_memory>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	6063      	str	r3, [r4, #4]
 800ebb2:	bd10      	pop	{r4, pc}
 800ebb4:	0801ad64 	.word	0x0801ad64
 800ebb8:	2000dd44 	.word	0x2000dd44

0800ebbc <rmw_uxrce_fini_subscription_memory>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	6800      	ldr	r0, [r0, #0]
 800ebc2:	b128      	cbz	r0, 800ebd0 <rmw_uxrce_fini_subscription_memory+0x14>
 800ebc4:	4b06      	ldr	r3, [pc, #24]	; (800ebe0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ebc6:	6819      	ldr	r1, [r3, #0]
 800ebc8:	f7f1 fb02 	bl	80001d0 <strcmp>
 800ebcc:	b938      	cbnz	r0, 800ebde <rmw_uxrce_fini_subscription_memory+0x22>
 800ebce:	6020      	str	r0, [r4, #0]
 800ebd0:	6861      	ldr	r1, [r4, #4]
 800ebd2:	b121      	cbz	r1, 800ebde <rmw_uxrce_fini_subscription_memory+0x22>
 800ebd4:	4803      	ldr	r0, [pc, #12]	; (800ebe4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ebd6:	f006 fbdb 	bl	8015390 <put_memory>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	6063      	str	r3, [r4, #4]
 800ebde:	bd10      	pop	{r4, pc}
 800ebe0:	0801ad64 	.word	0x0801ad64
 800ebe4:	2000dd84 	.word	0x2000dd84

0800ebe8 <rmw_uxrce_fini_service_memory>:
 800ebe8:	b510      	push	{r4, lr}
 800ebea:	4604      	mov	r4, r0
 800ebec:	6800      	ldr	r0, [r0, #0]
 800ebee:	b128      	cbz	r0, 800ebfc <rmw_uxrce_fini_service_memory+0x14>
 800ebf0:	4b06      	ldr	r3, [pc, #24]	; (800ec0c <rmw_uxrce_fini_service_memory+0x24>)
 800ebf2:	6819      	ldr	r1, [r3, #0]
 800ebf4:	f7f1 faec 	bl	80001d0 <strcmp>
 800ebf8:	b938      	cbnz	r0, 800ec0a <rmw_uxrce_fini_service_memory+0x22>
 800ebfa:	6020      	str	r0, [r4, #0]
 800ebfc:	6861      	ldr	r1, [r4, #4]
 800ebfe:	b121      	cbz	r1, 800ec0a <rmw_uxrce_fini_service_memory+0x22>
 800ec00:	4803      	ldr	r0, [pc, #12]	; (800ec10 <rmw_uxrce_fini_service_memory+0x28>)
 800ec02:	f006 fbc5 	bl	8015390 <put_memory>
 800ec06:	2300      	movs	r3, #0
 800ec08:	6063      	str	r3, [r4, #4]
 800ec0a:	bd10      	pop	{r4, pc}
 800ec0c:	0801ad64 	.word	0x0801ad64
 800ec10:	2000dd54 	.word	0x2000dd54

0800ec14 <rmw_uxrce_fini_client_memory>:
 800ec14:	b510      	push	{r4, lr}
 800ec16:	4604      	mov	r4, r0
 800ec18:	6800      	ldr	r0, [r0, #0]
 800ec1a:	b128      	cbz	r0, 800ec28 <rmw_uxrce_fini_client_memory+0x14>
 800ec1c:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <rmw_uxrce_fini_client_memory+0x24>)
 800ec1e:	6819      	ldr	r1, [r3, #0]
 800ec20:	f7f1 fad6 	bl	80001d0 <strcmp>
 800ec24:	b938      	cbnz	r0, 800ec36 <rmw_uxrce_fini_client_memory+0x22>
 800ec26:	6020      	str	r0, [r4, #0]
 800ec28:	6861      	ldr	r1, [r4, #4]
 800ec2a:	b121      	cbz	r1, 800ec36 <rmw_uxrce_fini_client_memory+0x22>
 800ec2c:	4803      	ldr	r0, [pc, #12]	; (800ec3c <rmw_uxrce_fini_client_memory+0x28>)
 800ec2e:	f006 fbaf 	bl	8015390 <put_memory>
 800ec32:	2300      	movs	r3, #0
 800ec34:	6063      	str	r3, [r4, #4]
 800ec36:	bd10      	pop	{r4, pc}
 800ec38:	0801ad64 	.word	0x0801ad64
 800ec3c:	20009468 	.word	0x20009468

0800ec40 <rmw_uxrce_fini_topic_memory>:
 800ec40:	b510      	push	{r4, lr}
 800ec42:	4604      	mov	r4, r0
 800ec44:	4621      	mov	r1, r4
 800ec46:	4803      	ldr	r0, [pc, #12]	; (800ec54 <rmw_uxrce_fini_topic_memory+0x14>)
 800ec48:	f006 fba2 	bl	8015390 <put_memory>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	61a3      	str	r3, [r4, #24]
 800ec50:	bd10      	pop	{r4, pc}
 800ec52:	bf00      	nop
 800ec54:	2000dd94 	.word	0x2000dd94

0800ec58 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ec58:	b082      	sub	sp, #8
 800ec5a:	b530      	push	{r4, r5, lr}
 800ec5c:	4925      	ldr	r1, [pc, #148]	; (800ecf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ec5e:	680d      	ldr	r5, [r1, #0]
 800ec60:	ac03      	add	r4, sp, #12
 800ec62:	e884 000c 	stmia.w	r4, {r2, r3}
 800ec66:	461c      	mov	r4, r3
 800ec68:	2d00      	cmp	r5, #0
 800ec6a:	d041      	beq.n	800ecf0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ec6c:	462b      	mov	r3, r5
 800ec6e:	2100      	movs	r1, #0
 800ec70:	689a      	ldr	r2, [r3, #8]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800ec78:	4290      	cmp	r0, r2
 800ec7a:	bf08      	it	eq
 800ec7c:	3101      	addeq	r1, #1
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1f6      	bne.n	800ec70 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ec82:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ec86:	2b02      	cmp	r3, #2
 800ec88:	d029      	beq.n	800ecde <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ec8a:	d907      	bls.n	800ec9c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ec8c:	2b03      	cmp	r3, #3
 800ec8e:	d005      	beq.n	800ec9c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ec90:	2100      	movs	r1, #0
 800ec92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec96:	4608      	mov	r0, r1
 800ec98:	b002      	add	sp, #8
 800ec9a:	4770      	bx	lr
 800ec9c:	b314      	cbz	r4, 800ece4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ec9e:	428c      	cmp	r4, r1
 800eca0:	d820      	bhi.n	800ece4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800eca2:	2d00      	cmp	r5, #0
 800eca4:	d0f4      	beq.n	800ec90 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800eca6:	2100      	movs	r1, #0
 800eca8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ecac:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800ecb0:	e002      	b.n	800ecb8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ecb2:	686d      	ldr	r5, [r5, #4]
 800ecb4:	2d00      	cmp	r5, #0
 800ecb6:	d0ec      	beq.n	800ec92 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ecb8:	68ab      	ldr	r3, [r5, #8]
 800ecba:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800ecbe:	4290      	cmp	r0, r2
 800ecc0:	d1f7      	bne.n	800ecb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ecc2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800ecc6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800ecca:	4562      	cmp	r2, ip
 800eccc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ecd0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ecd4:	daed      	bge.n	800ecb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ecd6:	4694      	mov	ip, r2
 800ecd8:	461c      	mov	r4, r3
 800ecda:	4629      	mov	r1, r5
 800ecdc:	e7e9      	b.n	800ecb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ecde:	b10c      	cbz	r4, 800ece4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ece0:	428c      	cmp	r4, r1
 800ece2:	d9d5      	bls.n	800ec90 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ece4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ece8:	4802      	ldr	r0, [pc, #8]	; (800ecf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ecea:	b002      	add	sp, #8
 800ecec:	f006 bb40 	b.w	8015370 <get_memory>
 800ecf0:	4629      	mov	r1, r5
 800ecf2:	e7c6      	b.n	800ec82 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ecf4:	2000dd74 	.word	0x2000dd74

0800ecf8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ecf8:	4b11      	ldr	r3, [pc, #68]	; (800ed40 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	b530      	push	{r4, r5, lr}
 800ecfe:	b1e3      	cbz	r3, 800ed3a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ed00:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800ed04:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800ed08:	2400      	movs	r4, #0
 800ed0a:	e001      	b.n	800ed10 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	b193      	cbz	r3, 800ed36 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800ed10:	689a      	ldr	r2, [r3, #8]
 800ed12:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800ed16:	4288      	cmp	r0, r1
 800ed18:	d1f8      	bne.n	800ed0c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ed1a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800ed1e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800ed22:	4571      	cmp	r1, lr
 800ed24:	eb72 050c 	sbcs.w	r5, r2, ip
 800ed28:	daf0      	bge.n	800ed0c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ed2a:	461c      	mov	r4, r3
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	468e      	mov	lr, r1
 800ed30:	4694      	mov	ip, r2
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1ec      	bne.n	800ed10 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ed36:	4620      	mov	r0, r4
 800ed38:	bd30      	pop	{r4, r5, pc}
 800ed3a:	461c      	mov	r4, r3
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	bd30      	pop	{r4, r5, pc}
 800ed40:	2000dd74 	.word	0x2000dd74
 800ed44:	00000000 	.word	0x00000000

0800ed48 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ed48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed4c:	4b3c      	ldr	r3, [pc, #240]	; (800ee40 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ed4e:	ed2d 8b06 	vpush	{d8-d10}
 800ed52:	681f      	ldr	r7, [r3, #0]
 800ed54:	b08d      	sub	sp, #52	; 0x34
 800ed56:	f007 fc49 	bl	80165ec <rmw_uros_epoch_nanos>
 800ed5a:	2f00      	cmp	r7, #0
 800ed5c:	d05d      	beq.n	800ee1a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ed5e:	46b8      	mov	r8, r7
 800ed60:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800ee28 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ed64:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ed68:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800ed6c:	2b04      	cmp	r3, #4
 800ed6e:	ed9f ab30 	vldr	d10, [pc, #192]	; 800ee30 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ed72:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800ee38 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ed76:	4681      	mov	r9, r0
 800ed78:	468a      	mov	sl, r1
 800ed7a:	ac04      	add	r4, sp, #16
 800ed7c:	d03f      	beq.n	800edfe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ed7e:	2b05      	cmp	r3, #5
 800ed80:	d044      	beq.n	800ee0c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ed82:	2b03      	cmp	r3, #3
 800ed84:	d03b      	beq.n	800edfe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ed86:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ed8a:	ed8d ab06 	vstr	d10, [sp, #24]
 800ed8e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ed92:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800ed96:	ab08      	add	r3, sp, #32
 800ed98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed9a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ed9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800eda2:	f006 f919 	bl	8014fd8 <rmw_time_equal>
 800eda6:	b118      	cbz	r0, 800edb0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800eda8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800edac:	ed8d 8b06 	vstr	d8, [sp, #24]
 800edb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800edb4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800edb8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800edbc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800edc0:	f006 f95e 	bl	8015080 <rmw_time_total_nsec>
 800edc4:	1830      	adds	r0, r6, r0
 800edc6:	eb47 0101 	adc.w	r1, r7, r1
 800edca:	4548      	cmp	r0, r9
 800edcc:	eb71 030a 	sbcs.w	r3, r1, sl
 800edd0:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800edd4:	db05      	blt.n	800ede2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800edd6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800edda:	4591      	cmp	r9, r2
 800eddc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ede0:	da03      	bge.n	800edea <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ede2:	4817      	ldr	r0, [pc, #92]	; (800ee40 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ede4:	4641      	mov	r1, r8
 800ede6:	f006 fad3 	bl	8015390 <put_memory>
 800edea:	f1bb 0f00 	cmp.w	fp, #0
 800edee:	d014      	beq.n	800ee1a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800edf0:	46d8      	mov	r8, fp
 800edf2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800edf6:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800edfa:	2b04      	cmp	r3, #4
 800edfc:	d1bf      	bne.n	800ed7e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800edfe:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800ee02:	3340      	adds	r3, #64	; 0x40
 800ee04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ee0a:	e7c0      	b.n	800ed8e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ee0c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800ee10:	3348      	adds	r3, #72	; 0x48
 800ee12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ee18:	e7b9      	b.n	800ed8e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ee1a:	b00d      	add	sp, #52	; 0x34
 800ee1c:	ecbd 8b06 	vpop	{d8-d10}
 800ee20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee24:	f3af 8000 	nop.w
	...
 800ee30:	00000001 	.word	0x00000001
 800ee34:	00000000 	.word	0x00000000
 800ee38:	0000001e 	.word	0x0000001e
 800ee3c:	00000000 	.word	0x00000000
 800ee40:	2000dd74 	.word	0x2000dd74

0800ee44 <run_xrce_session>:
 800ee44:	b510      	push	{r4, lr}
 800ee46:	788c      	ldrb	r4, [r1, #2]
 800ee48:	b086      	sub	sp, #24
 800ee4a:	2c01      	cmp	r4, #1
 800ee4c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ee50:	d00c      	beq.n	800ee6c <run_xrce_session+0x28>
 800ee52:	4619      	mov	r1, r3
 800ee54:	2301      	movs	r3, #1
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	f10d 020e 	add.w	r2, sp, #14
 800ee5c:	f10d 0317 	add.w	r3, sp, #23
 800ee60:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee64:	f001 f87a 	bl	800ff5c <uxr_run_session_until_all_status>
 800ee68:	b006      	add	sp, #24
 800ee6a:	bd10      	pop	{r4, pc}
 800ee6c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee70:	f000 fc8e 	bl	800f790 <uxr_flash_output_streams>
 800ee74:	4620      	mov	r0, r4
 800ee76:	b006      	add	sp, #24
 800ee78:	bd10      	pop	{r4, pc}
 800ee7a:	bf00      	nop

0800ee7c <convert_qos_profile>:
 800ee7c:	7a4a      	ldrb	r2, [r1, #9]
 800ee7e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ee82:	2a02      	cmp	r2, #2
 800ee84:	bf18      	it	ne
 800ee86:	2200      	movne	r2, #0
 800ee88:	7002      	strb	r2, [r0, #0]
 800ee8a:	780a      	ldrb	r2, [r1, #0]
 800ee8c:	8889      	ldrh	r1, [r1, #4]
 800ee8e:	8081      	strh	r1, [r0, #4]
 800ee90:	f1ac 0c02 	sub.w	ip, ip, #2
 800ee94:	f1a2 0202 	sub.w	r2, r2, #2
 800ee98:	fabc fc8c 	clz	ip, ip
 800ee9c:	fab2 f282 	clz	r2, r2
 800eea0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800eea4:	0952      	lsrs	r2, r2, #5
 800eea6:	f880 c001 	strb.w	ip, [r0, #1]
 800eeaa:	7082      	strb	r2, [r0, #2]
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop

0800eeb0 <generate_type_name>:
 800eeb0:	b530      	push	{r4, r5, lr}
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	700b      	strb	r3, [r1, #0]
 800eeb6:	6803      	ldr	r3, [r0, #0]
 800eeb8:	b087      	sub	sp, #28
 800eeba:	4614      	mov	r4, r2
 800eebc:	b1d3      	cbz	r3, 800eef4 <generate_type_name+0x44>
 800eebe:	4a0f      	ldr	r2, [pc, #60]	; (800eefc <generate_type_name+0x4c>)
 800eec0:	4615      	mov	r5, r2
 800eec2:	9203      	str	r2, [sp, #12]
 800eec4:	9500      	str	r5, [sp, #0]
 800eec6:	6842      	ldr	r2, [r0, #4]
 800eec8:	480d      	ldr	r0, [pc, #52]	; (800ef00 <generate_type_name+0x50>)
 800eeca:	9001      	str	r0, [sp, #4]
 800eecc:	4608      	mov	r0, r1
 800eece:	490d      	ldr	r1, [pc, #52]	; (800ef04 <generate_type_name+0x54>)
 800eed0:	9204      	str	r2, [sp, #16]
 800eed2:	9105      	str	r1, [sp, #20]
 800eed4:	9102      	str	r1, [sp, #8]
 800eed6:	4a0c      	ldr	r2, [pc, #48]	; (800ef08 <generate_type_name+0x58>)
 800eed8:	4621      	mov	r1, r4
 800eeda:	f009 ff95 	bl	8018e08 <sniprintf>
 800eede:	2800      	cmp	r0, #0
 800eee0:	db05      	blt.n	800eeee <generate_type_name+0x3e>
 800eee2:	4284      	cmp	r4, r0
 800eee4:	bfd4      	ite	le
 800eee6:	2000      	movle	r0, #0
 800eee8:	2001      	movgt	r0, #1
 800eeea:	b007      	add	sp, #28
 800eeec:	bd30      	pop	{r4, r5, pc}
 800eeee:	2000      	movs	r0, #0
 800eef0:	b007      	add	sp, #28
 800eef2:	bd30      	pop	{r4, r5, pc}
 800eef4:	4b05      	ldr	r3, [pc, #20]	; (800ef0c <generate_type_name+0x5c>)
 800eef6:	4a01      	ldr	r2, [pc, #4]	; (800eefc <generate_type_name+0x4c>)
 800eef8:	461d      	mov	r5, r3
 800eefa:	e7e2      	b.n	800eec2 <generate_type_name+0x12>
 800eefc:	0801a640 	.word	0x0801a640
 800ef00:	0801a658 	.word	0x0801a658
 800ef04:	0801a654 	.word	0x0801a654
 800ef08:	0801a644 	.word	0x0801a644
 800ef0c:	0801ab3c 	.word	0x0801ab3c

0800ef10 <generate_topic_name>:
 800ef10:	b510      	push	{r4, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	4614      	mov	r4, r2
 800ef16:	9000      	str	r0, [sp, #0]
 800ef18:	4b08      	ldr	r3, [pc, #32]	; (800ef3c <generate_topic_name+0x2c>)
 800ef1a:	4a09      	ldr	r2, [pc, #36]	; (800ef40 <generate_topic_name+0x30>)
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	4621      	mov	r1, r4
 800ef20:	f009 ff72 	bl	8018e08 <sniprintf>
 800ef24:	2800      	cmp	r0, #0
 800ef26:	db05      	blt.n	800ef34 <generate_topic_name+0x24>
 800ef28:	4284      	cmp	r4, r0
 800ef2a:	bfd4      	ite	le
 800ef2c:	2000      	movle	r0, #0
 800ef2e:	2001      	movgt	r0, #1
 800ef30:	b002      	add	sp, #8
 800ef32:	bd10      	pop	{r4, pc}
 800ef34:	2000      	movs	r0, #0
 800ef36:	b002      	add	sp, #8
 800ef38:	bd10      	pop	{r4, pc}
 800ef3a:	bf00      	nop
 800ef3c:	0801a664 	.word	0x0801a664
 800ef40:	0801a65c 	.word	0x0801a65c

0800ef44 <is_uxrce_rmw_identifier_valid>:
 800ef44:	b510      	push	{r4, lr}
 800ef46:	4604      	mov	r4, r0
 800ef48:	b140      	cbz	r0, 800ef5c <is_uxrce_rmw_identifier_valid+0x18>
 800ef4a:	f006 fa79 	bl	8015440 <rmw_get_implementation_identifier>
 800ef4e:	4601      	mov	r1, r0
 800ef50:	4620      	mov	r0, r4
 800ef52:	f7f1 f93d 	bl	80001d0 <strcmp>
 800ef56:	fab0 f080 	clz	r0, r0
 800ef5a:	0940      	lsrs	r0, r0, #5
 800ef5c:	bd10      	pop	{r4, pc}
 800ef5e:	bf00      	nop

0800ef60 <get_message_typesupport_handle>:
 800ef60:	6883      	ldr	r3, [r0, #8]
 800ef62:	4718      	bx	r3

0800ef64 <get_message_typesupport_handle_function>:
 800ef64:	b510      	push	{r4, lr}
 800ef66:	4604      	mov	r4, r0
 800ef68:	6800      	ldr	r0, [r0, #0]
 800ef6a:	f7f1 f931 	bl	80001d0 <strcmp>
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	bf0c      	ite	eq
 800ef72:	4620      	moveq	r0, r4
 800ef74:	2000      	movne	r0, #0
 800ef76:	bd10      	pop	{r4, pc}

0800ef78 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800ef78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7c:	6805      	ldr	r5, [r0, #0]
 800ef7e:	4604      	mov	r4, r0
 800ef80:	4628      	mov	r0, r5
 800ef82:	460e      	mov	r6, r1
 800ef84:	f7f1 f924 	bl	80001d0 <strcmp>
 800ef88:	b1c8      	cbz	r0, 800efbe <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800ef8a:	4b11      	ldr	r3, [pc, #68]	; (800efd0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	429d      	cmp	r5, r3
 800ef90:	d112      	bne.n	800efb8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800ef92:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ef96:	f8d8 4000 	ldr.w	r4, [r8]
 800ef9a:	b16c      	cbz	r4, 800efb8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800ef9c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800efa0:	2700      	movs	r7, #0
 800efa2:	3d04      	subs	r5, #4
 800efa4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800efa8:	4631      	mov	r1, r6
 800efaa:	f7f1 f911 	bl	80001d0 <strcmp>
 800efae:	00bb      	lsls	r3, r7, #2
 800efb0:	b140      	cbz	r0, 800efc4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800efb2:	3701      	adds	r7, #1
 800efb4:	42bc      	cmp	r4, r7
 800efb6:	d1f5      	bne.n	800efa4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800efb8:	2000      	movs	r0, #0
 800efba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efbe:	4620      	mov	r0, r4
 800efc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800efc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efcc:	58d3      	ldr	r3, [r2, r3]
 800efce:	4718      	bx	r3
 800efd0:	2000034c 	.word	0x2000034c

0800efd4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800efd4:	4b04      	ldr	r3, [pc, #16]	; (800efe8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	b10a      	cbz	r2, 800efde <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800efda:	4803      	ldr	r0, [pc, #12]	; (800efe8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800efdc:	4770      	bx	lr
 800efde:	4a03      	ldr	r2, [pc, #12]	; (800efec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800efe0:	4801      	ldr	r0, [pc, #4]	; (800efe8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800efe2:	6812      	ldr	r2, [r2, #0]
 800efe4:	601a      	str	r2, [r3, #0]
 800efe6:	4770      	bx	lr
 800efe8:	2000035c 	.word	0x2000035c
 800efec:	2000034c 	.word	0x2000034c

0800eff0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800eff0:	4a02      	ldr	r2, [pc, #8]	; (800effc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800eff2:	4b03      	ldr	r3, [pc, #12]	; (800f000 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800eff4:	6812      	ldr	r2, [r2, #0]
 800eff6:	601a      	str	r2, [r3, #0]
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	2000034c 	.word	0x2000034c
 800f000:	2000035c 	.word	0x2000035c

0800f004 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800f004:	f007 bb00 	b.w	8016608 <std_msgs__msg__Int32__init>

0800f008 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800f008:	f007 bb02 	b.w	8016610 <std_msgs__msg__Int32__fini>

0800f00c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f00c:	4b04      	ldr	r3, [pc, #16]	; (800f020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	b10a      	cbz	r2, 800f016 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f012:	4803      	ldr	r0, [pc, #12]	; (800f020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f014:	4770      	bx	lr
 800f016:	4a03      	ldr	r2, [pc, #12]	; (800f024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f018:	4801      	ldr	r0, [pc, #4]	; (800f020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f01a:	6812      	ldr	r2, [r2, #0]
 800f01c:	601a      	str	r2, [r3, #0]
 800f01e:	4770      	bx	lr
 800f020:	200003a4 	.word	0x200003a4
 800f024:	20000350 	.word	0x20000350

0800f028 <_Int32__max_serialized_size>:
 800f028:	b508      	push	{r3, lr}
 800f02a:	2104      	movs	r1, #4
 800f02c:	2000      	movs	r0, #0
 800f02e:	f7fe f8f7 	bl	800d220 <ucdr_alignment>
 800f032:	3004      	adds	r0, #4
 800f034:	bd08      	pop	{r3, pc}
 800f036:	bf00      	nop

0800f038 <_Int32__cdr_deserialize>:
 800f038:	b109      	cbz	r1, 800f03e <_Int32__cdr_deserialize+0x6>
 800f03a:	f7fd be73 	b.w	800cd24 <ucdr_deserialize_int32_t>
 800f03e:	4608      	mov	r0, r1
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop

0800f044 <get_serialized_size_std_msgs__msg__Int32>:
 800f044:	b138      	cbz	r0, 800f056 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800f046:	b508      	push	{r3, lr}
 800f048:	460b      	mov	r3, r1
 800f04a:	4618      	mov	r0, r3
 800f04c:	2104      	movs	r1, #4
 800f04e:	f7fe f8e7 	bl	800d220 <ucdr_alignment>
 800f052:	3004      	adds	r0, #4
 800f054:	bd08      	pop	{r3, pc}
 800f056:	4770      	bx	lr

0800f058 <_Int32__cdr_serialize>:
 800f058:	460a      	mov	r2, r1
 800f05a:	b118      	cbz	r0, 800f064 <_Int32__cdr_serialize+0xc>
 800f05c:	6801      	ldr	r1, [r0, #0]
 800f05e:	4610      	mov	r0, r2
 800f060:	f7fd bdc8 	b.w	800cbf4 <ucdr_serialize_int32_t>
 800f064:	4770      	bx	lr
 800f066:	bf00      	nop

0800f068 <_Int32__get_serialized_size>:
 800f068:	b130      	cbz	r0, 800f078 <_Int32__get_serialized_size+0x10>
 800f06a:	b508      	push	{r3, lr}
 800f06c:	2104      	movs	r1, #4
 800f06e:	2000      	movs	r0, #0
 800f070:	f7fe f8d6 	bl	800d220 <ucdr_alignment>
 800f074:	3004      	adds	r0, #4
 800f076:	bd08      	pop	{r3, pc}
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop

0800f07c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f07c:	4800      	ldr	r0, [pc, #0]	; (800f080 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800f07e:	4770      	bx	lr
 800f080:	200003b0 	.word	0x200003b0

0800f084 <geometry_msgs__msg__Twist__init>:
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	4605      	mov	r5, r0
 800f088:	b1a8      	cbz	r0, 800f0b6 <geometry_msgs__msg__Twist__init+0x32>
 800f08a:	f000 f82b 	bl	800f0e4 <geometry_msgs__msg__Vector3__init>
 800f08e:	4604      	mov	r4, r0
 800f090:	b140      	cbz	r0, 800f0a4 <geometry_msgs__msg__Twist__init+0x20>
 800f092:	f105 0618 	add.w	r6, r5, #24
 800f096:	4630      	mov	r0, r6
 800f098:	f000 f824 	bl	800f0e4 <geometry_msgs__msg__Vector3__init>
 800f09c:	4604      	mov	r4, r0
 800f09e:	b168      	cbz	r0, 800f0bc <geometry_msgs__msg__Twist__init+0x38>
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	bd70      	pop	{r4, r5, r6, pc}
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	f000 f821 	bl	800f0ec <geometry_msgs__msg__Vector3__fini>
 800f0aa:	f105 0018 	add.w	r0, r5, #24
 800f0ae:	f000 f81d 	bl	800f0ec <geometry_msgs__msg__Vector3__fini>
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	bd70      	pop	{r4, r5, r6, pc}
 800f0bc:	4628      	mov	r0, r5
 800f0be:	f000 f815 	bl	800f0ec <geometry_msgs__msg__Vector3__fini>
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	f000 f812 	bl	800f0ec <geometry_msgs__msg__Vector3__fini>
 800f0c8:	e7ea      	b.n	800f0a0 <geometry_msgs__msg__Twist__init+0x1c>
 800f0ca:	bf00      	nop

0800f0cc <geometry_msgs__msg__Twist__fini>:
 800f0cc:	b148      	cbz	r0, 800f0e2 <geometry_msgs__msg__Twist__fini+0x16>
 800f0ce:	b510      	push	{r4, lr}
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	f000 f80b 	bl	800f0ec <geometry_msgs__msg__Vector3__fini>
 800f0d6:	f104 0018 	add.w	r0, r4, #24
 800f0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0de:	f000 b805 	b.w	800f0ec <geometry_msgs__msg__Vector3__fini>
 800f0e2:	4770      	bx	lr

0800f0e4 <geometry_msgs__msg__Vector3__init>:
 800f0e4:	3800      	subs	r0, #0
 800f0e6:	bf18      	it	ne
 800f0e8:	2001      	movne	r0, #1
 800f0ea:	4770      	bx	lr

0800f0ec <geometry_msgs__msg__Vector3__fini>:
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop

0800f0f0 <uxr_buffer_delete_entity>:
 800f0f0:	b510      	push	{r4, lr}
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	b08e      	sub	sp, #56	; 0x38
 800f0f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f0fa:	2303      	movs	r3, #3
 800f0fc:	9300      	str	r3, [sp, #0]
 800f0fe:	2204      	movs	r2, #4
 800f100:	ab06      	add	r3, sp, #24
 800f102:	4604      	mov	r4, r0
 800f104:	9103      	str	r1, [sp, #12]
 800f106:	f001 f951 	bl	80103ac <uxr_prepare_stream_to_write_submessage>
 800f10a:	b918      	cbnz	r0, 800f114 <uxr_buffer_delete_entity+0x24>
 800f10c:	4604      	mov	r4, r0
 800f10e:	4620      	mov	r0, r4
 800f110:	b00e      	add	sp, #56	; 0x38
 800f112:	bd10      	pop	{r4, pc}
 800f114:	9902      	ldr	r1, [sp, #8]
 800f116:	aa05      	add	r2, sp, #20
 800f118:	4620      	mov	r0, r4
 800f11a:	f001 fa7d 	bl	8010618 <uxr_init_base_object_request>
 800f11e:	a905      	add	r1, sp, #20
 800f120:	4604      	mov	r4, r0
 800f122:	a806      	add	r0, sp, #24
 800f124:	f002 fc9e 	bl	8011a64 <uxr_serialize_DELETE_Payload>
 800f128:	4620      	mov	r0, r4
 800f12a:	b00e      	add	sp, #56	; 0x38
 800f12c:	bd10      	pop	{r4, pc}
 800f12e:	bf00      	nop

0800f130 <uxr_common_create_entity>:
 800f130:	b510      	push	{r4, lr}
 800f132:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f136:	b08c      	sub	sp, #48	; 0x30
 800f138:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f13c:	f1bc 0f01 	cmp.w	ip, #1
 800f140:	bf0c      	ite	eq
 800f142:	f003 0201 	andeq.w	r2, r3, #1
 800f146:	2200      	movne	r2, #0
 800f148:	330e      	adds	r3, #14
 800f14a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800f14e:	9101      	str	r1, [sp, #4]
 800f150:	441a      	add	r2, r3
 800f152:	2301      	movs	r3, #1
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	9903      	ldr	r1, [sp, #12]
 800f158:	ab04      	add	r3, sp, #16
 800f15a:	b292      	uxth	r2, r2
 800f15c:	4604      	mov	r4, r0
 800f15e:	f001 f925 	bl	80103ac <uxr_prepare_stream_to_write_submessage>
 800f162:	b918      	cbnz	r0, 800f16c <uxr_common_create_entity+0x3c>
 800f164:	4604      	mov	r4, r0
 800f166:	4620      	mov	r0, r4
 800f168:	b00c      	add	sp, #48	; 0x30
 800f16a:	bd10      	pop	{r4, pc}
 800f16c:	9902      	ldr	r1, [sp, #8]
 800f16e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f170:	4620      	mov	r0, r4
 800f172:	f001 fa51 	bl	8010618 <uxr_init_base_object_request>
 800f176:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f178:	4604      	mov	r4, r0
 800f17a:	a804      	add	r0, sp, #16
 800f17c:	f002 fbce 	bl	801191c <uxr_serialize_CREATE_Payload>
 800f180:	4620      	mov	r0, r4
 800f182:	b00c      	add	sp, #48	; 0x30
 800f184:	bd10      	pop	{r4, pc}
 800f186:	bf00      	nop

0800f188 <uxr_buffer_create_participant_bin>:
 800f188:	b570      	push	{r4, r5, r6, lr}
 800f18a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800f18e:	ac11      	add	r4, sp, #68	; 0x44
 800f190:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800f194:	2303      	movs	r3, #3
 800f196:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f19a:	7223      	strb	r3, [r4, #8]
 800f19c:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800f19e:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	4605      	mov	r5, r0
 800f1a8:	7122      	strb	r2, [r4, #4]
 800f1aa:	f88d 1014 	strb.w	r1, [sp, #20]
 800f1ae:	b1cb      	cbz	r3, 800f1e4 <uxr_buffer_create_participant_bin+0x5c>
 800f1b0:	f88d 201c 	strb.w	r2, [sp, #28]
 800f1b4:	9308      	str	r3, [sp, #32]
 800f1b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1ba:	a915      	add	r1, sp, #84	; 0x54
 800f1bc:	a809      	add	r0, sp, #36	; 0x24
 800f1be:	f7fe f82b 	bl	800d218 <ucdr_init_buffer>
 800f1c2:	a905      	add	r1, sp, #20
 800f1c4:	a809      	add	r0, sp, #36	; 0x24
 800f1c6:	f001 ff8b 	bl	80110e0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f1ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1cc:	9600      	str	r6, [sp, #0]
 800f1ce:	9401      	str	r4, [sp, #4]
 800f1d0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f1d4:	60e3      	str	r3, [r4, #12]
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	f7ff ffa9 	bl	800f130 <uxr_common_create_entity>
 800f1de:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800f1e2:	bd70      	pop	{r4, r5, r6, pc}
 800f1e4:	f88d 301c 	strb.w	r3, [sp, #28]
 800f1e8:	e7e5      	b.n	800f1b6 <uxr_buffer_create_participant_bin+0x2e>
 800f1ea:	bf00      	nop

0800f1ec <uxr_buffer_create_topic_bin>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800f1f2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f1f6:	9105      	str	r1, [sp, #20]
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	a997      	add	r1, sp, #604	; 0x25c
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	2302      	movs	r3, #2
 800f200:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800f204:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800f208:	f000 f996 	bl	800f538 <uxr_object_id_to_raw>
 800f20c:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800f20e:	9306      	str	r3, [sp, #24]
 800f210:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800f212:	930a      	str	r3, [sp, #40]	; 0x28
 800f214:	2303      	movs	r3, #3
 800f216:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800f21a:	2301      	movs	r3, #1
 800f21c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f220:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800f224:	a917      	add	r1, sp, #92	; 0x5c
 800f226:	2300      	movs	r3, #0
 800f228:	a80b      	add	r0, sp, #44	; 0x2c
 800f22a:	f88d 301c 	strb.w	r3, [sp, #28]
 800f22e:	f7fd fff3 	bl	800d218 <ucdr_init_buffer>
 800f232:	a906      	add	r1, sp, #24
 800f234:	a80b      	add	r0, sp, #44	; 0x2c
 800f236:	f001 ff75 	bl	8011124 <uxr_serialize_OBJK_Topic_Binary>
 800f23a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f23c:	9316      	str	r3, [sp, #88]	; 0x58
 800f23e:	ac13      	add	r4, sp, #76	; 0x4c
 800f240:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f244:	9600      	str	r6, [sp, #0]
 800f246:	9401      	str	r4, [sp, #4]
 800f248:	b29b      	uxth	r3, r3
 800f24a:	4628      	mov	r0, r5
 800f24c:	f7ff ff70 	bl	800f130 <uxr_common_create_entity>
 800f250:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800f254:	bd70      	pop	{r4, r5, r6, pc}
 800f256:	bf00      	nop

0800f258 <uxr_buffer_create_publisher_bin>:
 800f258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f25a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800f25e:	4605      	mov	r5, r0
 800f260:	9105      	str	r1, [sp, #20]
 800f262:	4618      	mov	r0, r3
 800f264:	2603      	movs	r6, #3
 800f266:	a992      	add	r1, sp, #584	; 0x248
 800f268:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f26c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800f270:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800f274:	f000 f960 	bl	800f538 <uxr_object_id_to_raw>
 800f278:	2300      	movs	r3, #0
 800f27a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f27e:	a912      	add	r1, sp, #72	; 0x48
 800f280:	a806      	add	r0, sp, #24
 800f282:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800f286:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800f28a:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800f28e:	f7fd ffc3 	bl	800d218 <ucdr_init_buffer>
 800f292:	a993      	add	r1, sp, #588	; 0x24c
 800f294:	a806      	add	r0, sp, #24
 800f296:	f001 fff9 	bl	801128c <uxr_serialize_OBJK_Publisher_Binary>
 800f29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f29c:	9311      	str	r3, [sp, #68]	; 0x44
 800f29e:	ac0e      	add	r4, sp, #56	; 0x38
 800f2a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f2a4:	9700      	str	r7, [sp, #0]
 800f2a6:	9401      	str	r4, [sp, #4]
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	f7ff ff40 	bl	800f130 <uxr_common_create_entity>
 800f2b0:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800f2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2b6:	bf00      	nop

0800f2b8 <uxr_buffer_create_subscriber_bin>:
 800f2b8:	b570      	push	{r4, r5, r6, lr}
 800f2ba:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800f2be:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f2c2:	9105      	str	r1, [sp, #20]
 800f2c4:	4605      	mov	r5, r0
 800f2c6:	a992      	add	r1, sp, #584	; 0x248
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	2304      	movs	r3, #4
 800f2cc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800f2d0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800f2d4:	f000 f930 	bl	800f538 <uxr_object_id_to_raw>
 800f2d8:	2300      	movs	r3, #0
 800f2da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2de:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800f2e2:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800f2e6:	a912      	add	r1, sp, #72	; 0x48
 800f2e8:	2303      	movs	r3, #3
 800f2ea:	a806      	add	r0, sp, #24
 800f2ec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800f2f0:	f7fd ff92 	bl	800d218 <ucdr_init_buffer>
 800f2f4:	a993      	add	r1, sp, #588	; 0x24c
 800f2f6:	a806      	add	r0, sp, #24
 800f2f8:	f002 f878 	bl	80113ec <uxr_serialize_OBJK_Subscriber_Binary>
 800f2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2fe:	9311      	str	r3, [sp, #68]	; 0x44
 800f300:	ac0e      	add	r4, sp, #56	; 0x38
 800f302:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f306:	9600      	str	r6, [sp, #0]
 800f308:	9401      	str	r4, [sp, #4]
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	4628      	mov	r0, r5
 800f30e:	f7ff ff0f 	bl	800f130 <uxr_common_create_entity>
 800f312:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800f316:	bd70      	pop	{r4, r5, r6, pc}

0800f318 <uxr_buffer_create_datawriter_bin>:
 800f318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f31c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f320:	ac1d      	add	r4, sp, #116	; 0x74
 800f322:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f326:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800f32a:	9105      	str	r1, [sp, #20]
 800f32c:	4606      	mov	r6, r0
 800f32e:	a9a1      	add	r1, sp, #644	; 0x284
 800f330:	4618      	mov	r0, r3
 800f332:	2305      	movs	r3, #5
 800f334:	7123      	strb	r3, [r4, #4]
 800f336:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800f33a:	2703      	movs	r7, #3
 800f33c:	f000 f8fc 	bl	800f538 <uxr_object_id_to_raw>
 800f340:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800f342:	7227      	strb	r7, [r4, #8]
 800f344:	a90e      	add	r1, sp, #56	; 0x38
 800f346:	f000 f8f7 	bl	800f538 <uxr_object_id_to_raw>
 800f34a:	2300      	movs	r3, #0
 800f34c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800f350:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800f354:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800f358:	3d00      	subs	r5, #0
 800f35a:	bf18      	it	ne
 800f35c:	2501      	movne	r5, #1
 800f35e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800f362:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800f366:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800f36a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f36e:	2301      	movs	r3, #1
 800f370:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800f374:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800f378:	bb8a      	cbnz	r2, 800f3de <uxr_buffer_create_datawriter_bin+0xc6>
 800f37a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f37e:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800f382:	f04f 0c13 	mov.w	ip, #19
 800f386:	250b      	movs	r5, #11
 800f388:	2221      	movs	r2, #33	; 0x21
 800f38a:	2111      	movs	r1, #17
 800f38c:	2009      	movs	r0, #9
 800f38e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800f392:	b923      	cbnz	r3, 800f39e <uxr_buffer_create_datawriter_bin+0x86>
 800f394:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800f398:	4672      	mov	r2, lr
 800f39a:	4661      	mov	r1, ip
 800f39c:	4628      	mov	r0, r5
 800f39e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	d025      	beq.n	800f3f2 <uxr_buffer_create_datawriter_bin+0xda>
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d029      	beq.n	800f3fe <uxr_buffer_create_datawriter_bin+0xe6>
 800f3aa:	b32b      	cbz	r3, 800f3f8 <uxr_buffer_create_datawriter_bin+0xe0>
 800f3ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3b0:	a921      	add	r1, sp, #132	; 0x84
 800f3b2:	a806      	add	r0, sp, #24
 800f3b4:	f7fd ff30 	bl	800d218 <ucdr_init_buffer>
 800f3b8:	a90e      	add	r1, sp, #56	; 0x38
 800f3ba:	a806      	add	r0, sp, #24
 800f3bc:	f002 f8c8 	bl	8011550 <uxr_serialize_OBJK_DataWriter_Binary>
 800f3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3c2:	f8cd 8000 	str.w	r8, [sp]
 800f3c6:	9401      	str	r4, [sp, #4]
 800f3c8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f3cc:	60e3      	str	r3, [r4, #12]
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	f7ff fead 	bl	800f130 <uxr_common_create_entity>
 800f3d6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3de:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800f3e2:	f04f 0c12 	mov.w	ip, #18
 800f3e6:	250a      	movs	r5, #10
 800f3e8:	2220      	movs	r2, #32
 800f3ea:	2110      	movs	r1, #16
 800f3ec:	2008      	movs	r0, #8
 800f3ee:	2702      	movs	r7, #2
 800f3f0:	e7cd      	b.n	800f38e <uxr_buffer_create_datawriter_bin+0x76>
 800f3f2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800f3f6:	e7d9      	b.n	800f3ac <uxr_buffer_create_datawriter_bin+0x94>
 800f3f8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800f3fc:	e7d6      	b.n	800f3ac <uxr_buffer_create_datawriter_bin+0x94>
 800f3fe:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800f402:	e7d3      	b.n	800f3ac <uxr_buffer_create_datawriter_bin+0x94>

0800f404 <uxr_buffer_create_datareader_bin>:
 800f404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f408:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800f40c:	ac1f      	add	r4, sp, #124	; 0x7c
 800f40e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f412:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800f416:	9105      	str	r1, [sp, #20]
 800f418:	4606      	mov	r6, r0
 800f41a:	a9a3      	add	r1, sp, #652	; 0x28c
 800f41c:	4618      	mov	r0, r3
 800f41e:	2306      	movs	r3, #6
 800f420:	7123      	strb	r3, [r4, #4]
 800f422:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800f426:	2703      	movs	r7, #3
 800f428:	f000 f886 	bl	800f538 <uxr_object_id_to_raw>
 800f42c:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800f42e:	7227      	strb	r7, [r4, #8]
 800f430:	a90e      	add	r1, sp, #56	; 0x38
 800f432:	f000 f881 	bl	800f538 <uxr_object_id_to_raw>
 800f436:	2300      	movs	r3, #0
 800f438:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800f43c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800f440:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800f444:	3d00      	subs	r5, #0
 800f446:	bf18      	it	ne
 800f448:	2501      	movne	r5, #1
 800f44a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800f44e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800f452:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800f456:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800f45a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f45e:	2301      	movs	r3, #1
 800f460:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800f464:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800f468:	bb8a      	cbnz	r2, 800f4ce <uxr_buffer_create_datareader_bin+0xca>
 800f46a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f46e:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800f472:	f04f 0c13 	mov.w	ip, #19
 800f476:	250b      	movs	r5, #11
 800f478:	2221      	movs	r2, #33	; 0x21
 800f47a:	2111      	movs	r1, #17
 800f47c:	2009      	movs	r0, #9
 800f47e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800f482:	b923      	cbnz	r3, 800f48e <uxr_buffer_create_datareader_bin+0x8a>
 800f484:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800f488:	4672      	mov	r2, lr
 800f48a:	4661      	mov	r1, ip
 800f48c:	4628      	mov	r0, r5
 800f48e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800f492:	2b01      	cmp	r3, #1
 800f494:	d025      	beq.n	800f4e2 <uxr_buffer_create_datareader_bin+0xde>
 800f496:	2b03      	cmp	r3, #3
 800f498:	d029      	beq.n	800f4ee <uxr_buffer_create_datareader_bin+0xea>
 800f49a:	b32b      	cbz	r3, 800f4e8 <uxr_buffer_create_datareader_bin+0xe4>
 800f49c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f4a0:	a923      	add	r1, sp, #140	; 0x8c
 800f4a2:	a806      	add	r0, sp, #24
 800f4a4:	f7fd feb8 	bl	800d218 <ucdr_init_buffer>
 800f4a8:	a90e      	add	r1, sp, #56	; 0x38
 800f4aa:	a806      	add	r0, sp, #24
 800f4ac:	f002 f814 	bl	80114d8 <uxr_serialize_OBJK_DataReader_Binary>
 800f4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4b2:	f8cd 8000 	str.w	r8, [sp]
 800f4b6:	9401      	str	r4, [sp, #4]
 800f4b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f4bc:	60e3      	str	r3, [r4, #12]
 800f4be:	4630      	mov	r0, r6
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	f7ff fe35 	bl	800f130 <uxr_common_create_entity>
 800f4c6:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800f4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ce:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800f4d2:	f04f 0c12 	mov.w	ip, #18
 800f4d6:	250a      	movs	r5, #10
 800f4d8:	2220      	movs	r2, #32
 800f4da:	2110      	movs	r1, #16
 800f4dc:	2008      	movs	r0, #8
 800f4de:	2702      	movs	r7, #2
 800f4e0:	e7cd      	b.n	800f47e <uxr_buffer_create_datareader_bin+0x7a>
 800f4e2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800f4e6:	e7d9      	b.n	800f49c <uxr_buffer_create_datareader_bin+0x98>
 800f4e8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800f4ec:	e7d6      	b.n	800f49c <uxr_buffer_create_datareader_bin+0x98>
 800f4ee:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800f4f2:	e7d3      	b.n	800f49c <uxr_buffer_create_datareader_bin+0x98>

0800f4f4 <uxr_object_id>:
 800f4f4:	b082      	sub	sp, #8
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	f88d 1006 	strb.w	r1, [sp, #6]
 800f4fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f500:	f360 030f 	bfi	r3, r0, #0, #16
 800f504:	f362 431f 	bfi	r3, r2, #16, #16
 800f508:	4618      	mov	r0, r3
 800f50a:	b002      	add	sp, #8
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop

0800f510 <uxr_object_id_from_raw>:
 800f510:	7843      	ldrb	r3, [r0, #1]
 800f512:	7801      	ldrb	r1, [r0, #0]
 800f514:	b082      	sub	sp, #8
 800f516:	f003 020f 	and.w	r2, r3, #15
 800f51a:	f88d 2006 	strb.w	r2, [sp, #6]
 800f51e:	091b      	lsrs	r3, r3, #4
 800f520:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f524:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f528:	2000      	movs	r0, #0
 800f52a:	f363 000f 	bfi	r0, r3, #0, #16
 800f52e:	f362 401f 	bfi	r0, r2, #16, #16
 800f532:	b002      	add	sp, #8
 800f534:	4770      	bx	lr
 800f536:	bf00      	nop

0800f538 <uxr_object_id_to_raw>:
 800f538:	4602      	mov	r2, r0
 800f53a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f53e:	b082      	sub	sp, #8
 800f540:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f544:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f548:	f881 c000 	strb.w	ip, [r1]
 800f54c:	7048      	strb	r0, [r1, #1]
 800f54e:	b002      	add	sp, #8
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop

0800f554 <on_get_fragmentation_info>:
 800f554:	b500      	push	{lr}
 800f556:	b08b      	sub	sp, #44	; 0x2c
 800f558:	4601      	mov	r1, r0
 800f55a:	2204      	movs	r2, #4
 800f55c:	a802      	add	r0, sp, #8
 800f55e:	f7fd fe5b 	bl	800d218 <ucdr_init_buffer>
 800f562:	f10d 0305 	add.w	r3, sp, #5
 800f566:	f10d 0206 	add.w	r2, sp, #6
 800f56a:	a901      	add	r1, sp, #4
 800f56c:	a802      	add	r0, sp, #8
 800f56e:	f001 f9d5 	bl	801091c <uxr_read_submessage_header>
 800f572:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f576:	2b0d      	cmp	r3, #13
 800f578:	d003      	beq.n	800f582 <on_get_fragmentation_info+0x2e>
 800f57a:	2000      	movs	r0, #0
 800f57c:	b00b      	add	sp, #44	; 0x2c
 800f57e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f582:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f586:	f013 0f02 	tst.w	r3, #2
 800f58a:	bf14      	ite	ne
 800f58c:	2002      	movne	r0, #2
 800f58e:	2001      	moveq	r0, #1
 800f590:	b00b      	add	sp, #44	; 0x2c
 800f592:	f85d fb04 	ldr.w	pc, [sp], #4
 800f596:	bf00      	nop

0800f598 <read_submessage_get_info>:
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	2500      	movs	r5, #0
 800f59c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	f44f 7224 	mov.w	r2, #656	; 0x290
 800f5a6:	460e      	mov	r6, r1
 800f5a8:	a810      	add	r0, sp, #64	; 0x40
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f5b0:	f009 faca 	bl	8018b48 <memset>
 800f5b4:	a903      	add	r1, sp, #12
 800f5b6:	4630      	mov	r0, r6
 800f5b8:	f002 fa40 	bl	8011a3c <uxr_deserialize_GET_INFO_Payload>
 800f5bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f5c0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f001 f81f 	bl	8010608 <uxr_session_header_offset>
 800f5ca:	462b      	mov	r3, r5
 800f5cc:	9000      	str	r0, [sp, #0]
 800f5ce:	220c      	movs	r2, #12
 800f5d0:	a905      	add	r1, sp, #20
 800f5d2:	a808      	add	r0, sp, #32
 800f5d4:	f7fd fe0e 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 800f5d8:	a910      	add	r1, sp, #64	; 0x40
 800f5da:	a808      	add	r0, sp, #32
 800f5dc:	f002 faa0 	bl	8011b20 <uxr_serialize_INFO_Payload>
 800f5e0:	9b08      	ldr	r3, [sp, #32]
 800f5e2:	462a      	mov	r2, r5
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f000 ffb8 	bl	801055c <uxr_stamp_session_header>
 800f5ec:	a808      	add	r0, sp, #32
 800f5ee:	f7fd fe3f 	bl	800d270 <ucdr_buffer_length>
 800f5f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	a905      	add	r1, sp, #20
 800f5f8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f5fc:	47a0      	blx	r4
 800f5fe:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800f602:	bd70      	pop	{r4, r5, r6, pc}

0800f604 <write_submessage_acknack.isra.0>:
 800f604:	b570      	push	{r4, r5, r6, lr}
 800f606:	b092      	sub	sp, #72	; 0x48
 800f608:	4605      	mov	r5, r0
 800f60a:	460e      	mov	r6, r1
 800f60c:	4614      	mov	r4, r2
 800f60e:	f000 fffb 	bl	8010608 <uxr_session_header_offset>
 800f612:	a905      	add	r1, sp, #20
 800f614:	9000      	str	r0, [sp, #0]
 800f616:	2300      	movs	r3, #0
 800f618:	a80a      	add	r0, sp, #40	; 0x28
 800f61a:	2211      	movs	r2, #17
 800f61c:	f7fd fdea 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 800f620:	2218      	movs	r2, #24
 800f622:	fb02 5404 	mla	r4, r2, r4, r5
 800f626:	2300      	movs	r3, #0
 800f628:	2205      	movs	r2, #5
 800f62a:	3450      	adds	r4, #80	; 0x50
 800f62c:	210a      	movs	r1, #10
 800f62e:	a80a      	add	r0, sp, #40	; 0x28
 800f630:	f001 f95a 	bl	80108e8 <uxr_buffer_submessage_header>
 800f634:	a903      	add	r1, sp, #12
 800f636:	4620      	mov	r0, r4
 800f638:	f007 fbec 	bl	8016e14 <uxr_compute_acknack>
 800f63c:	ba40      	rev16	r0, r0
 800f63e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f642:	a903      	add	r1, sp, #12
 800f644:	a80a      	add	r0, sp, #40	; 0x28
 800f646:	f88d 6010 	strb.w	r6, [sp, #16]
 800f64a:	f002 fad9 	bl	8011c00 <uxr_serialize_ACKNACK_Payload>
 800f64e:	2200      	movs	r2, #0
 800f650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f652:	4611      	mov	r1, r2
 800f654:	4628      	mov	r0, r5
 800f656:	f000 ff81 	bl	801055c <uxr_stamp_session_header>
 800f65a:	a80a      	add	r0, sp, #40	; 0x28
 800f65c:	f7fd fe08 	bl	800d270 <ucdr_buffer_length>
 800f660:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f662:	4602      	mov	r2, r0
 800f664:	a905      	add	r1, sp, #20
 800f666:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f66a:	47a0      	blx	r4
 800f66c:	b012      	add	sp, #72	; 0x48
 800f66e:	bd70      	pop	{r4, r5, r6, pc}

0800f670 <uxr_init_session>:
 800f670:	b510      	push	{r4, lr}
 800f672:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800f6a8 <uxr_init_session+0x38>
 800f676:	2300      	movs	r3, #0
 800f678:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800f67c:	4604      	mov	r4, r0
 800f67e:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800f682:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800f686:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800f68a:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800f68e:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800f692:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800f696:	2181      	movs	r1, #129	; 0x81
 800f698:	f000 fecc 	bl	8010434 <uxr_init_session_info>
 800f69c:	f104 0008 	add.w	r0, r4, #8
 800f6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6a4:	f001 b83c 	b.w	8010720 <uxr_init_stream_storage>
	...

0800f6b0 <uxr_set_status_callback>:
 800f6b0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop

0800f6b8 <uxr_set_topic_callback>:
 800f6b8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop

0800f6c0 <uxr_set_request_callback>:
 800f6c0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop

0800f6c8 <uxr_set_reply_callback>:
 800f6c8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop

0800f6d0 <uxr_create_output_best_effort_stream>:
 800f6d0:	b510      	push	{r4, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	e9cd 2100 	strd	r2, r1, [sp]
 800f6d8:	4604      	mov	r4, r0
 800f6da:	f000 ff95 	bl	8010608 <uxr_session_header_offset>
 800f6de:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	f104 0008 	add.w	r0, r4, #8
 800f6e8:	b004      	add	sp, #16
 800f6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6ee:	f001 b861 	b.w	80107b4 <uxr_add_output_best_effort_buffer>
 800f6f2:	bf00      	nop

0800f6f4 <uxr_create_output_reliable_stream>:
 800f6f4:	b510      	push	{r4, lr}
 800f6f6:	b088      	sub	sp, #32
 800f6f8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	9303      	str	r3, [sp, #12]
 800f700:	f000 ff82 	bl	8010608 <uxr_session_header_offset>
 800f704:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f708:	9000      	str	r0, [sp, #0]
 800f70a:	9905      	ldr	r1, [sp, #20]
 800f70c:	f104 0008 	add.w	r0, r4, #8
 800f710:	f001 f864 	bl	80107dc <uxr_add_output_reliable_buffer>
 800f714:	2200      	movs	r2, #0
 800f716:	b2c3      	uxtb	r3, r0
 800f718:	f363 0207 	bfi	r2, r3, #0, #8
 800f71c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f720:	f363 220f 	bfi	r2, r3, #8, #8
 800f724:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f728:	f363 4217 	bfi	r2, r3, #16, #8
 800f72c:	0e03      	lsrs	r3, r0, #24
 800f72e:	f363 621f 	bfi	r2, r3, #24, #8
 800f732:	4610      	mov	r0, r2
 800f734:	b008      	add	sp, #32
 800f736:	bd10      	pop	{r4, pc}

0800f738 <uxr_create_input_best_effort_stream>:
 800f738:	b082      	sub	sp, #8
 800f73a:	3008      	adds	r0, #8
 800f73c:	b002      	add	sp, #8
 800f73e:	f001 b867 	b.w	8010810 <uxr_add_input_best_effort_buffer>
 800f742:	bf00      	nop

0800f744 <uxr_create_input_reliable_stream>:
 800f744:	b510      	push	{r4, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	4c0b      	ldr	r4, [pc, #44]	; (800f778 <uxr_create_input_reliable_stream+0x34>)
 800f74a:	9400      	str	r4, [sp, #0]
 800f74c:	3008      	adds	r0, #8
 800f74e:	f001 f875 	bl	801083c <uxr_add_input_reliable_buffer>
 800f752:	2200      	movs	r2, #0
 800f754:	b2c3      	uxtb	r3, r0
 800f756:	f363 0207 	bfi	r2, r3, #0, #8
 800f75a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f75e:	f363 220f 	bfi	r2, r3, #8, #8
 800f762:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f766:	f363 4217 	bfi	r2, r3, #16, #8
 800f76a:	0e03      	lsrs	r3, r0, #24
 800f76c:	f363 621f 	bfi	r2, r3, #24, #8
 800f770:	4610      	mov	r0, r2
 800f772:	b004      	add	sp, #16
 800f774:	bd10      	pop	{r4, pc}
 800f776:	bf00      	nop
 800f778:	0800f555 	.word	0x0800f555

0800f77c <uxr_epoch_nanos>:
 800f77c:	b510      	push	{r4, lr}
 800f77e:	4604      	mov	r4, r0
 800f780:	f7fd fdd4 	bl	800d32c <uxr_nanos>
 800f784:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800f788:	1ac0      	subs	r0, r0, r3
 800f78a:	eb61 0102 	sbc.w	r1, r1, r2
 800f78e:	bd10      	pop	{r4, pc}

0800f790 <uxr_flash_output_streams>:
 800f790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f794:	7e03      	ldrb	r3, [r0, #24]
 800f796:	b084      	sub	sp, #16
 800f798:	4604      	mov	r4, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d035      	beq.n	800f80a <uxr_flash_output_streams+0x7a>
 800f79e:	f04f 0900 	mov.w	r9, #0
 800f7a2:	4648      	mov	r0, r9
 800f7a4:	f10d 0802 	add.w	r8, sp, #2
 800f7a8:	af03      	add	r7, sp, #12
 800f7aa:	ae02      	add	r6, sp, #8
 800f7ac:	e006      	b.n	800f7bc <uxr_flash_output_streams+0x2c>
 800f7ae:	7e23      	ldrb	r3, [r4, #24]
 800f7b0:	f109 0901 	add.w	r9, r9, #1
 800f7b4:	fa5f f089 	uxtb.w	r0, r9
 800f7b8:	4283      	cmp	r3, r0
 800f7ba:	d926      	bls.n	800f80a <uxr_flash_output_streams+0x7a>
 800f7bc:	2201      	movs	r2, #1
 800f7be:	4611      	mov	r1, r2
 800f7c0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f7c4:	f000 ff58 	bl	8010678 <uxr_stream_id>
 800f7c8:	3508      	adds	r5, #8
 800f7ca:	4684      	mov	ip, r0
 800f7cc:	4643      	mov	r3, r8
 800f7ce:	463a      	mov	r2, r7
 800f7d0:	4631      	mov	r1, r6
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f8cd c004 	str.w	ip, [sp, #4]
 800f7d8:	f007 fba2 	bl	8016f20 <uxr_prepare_best_effort_buffer_to_send>
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d0e6      	beq.n	800f7ae <uxr_flash_output_streams+0x1e>
 800f7e0:	9b02      	ldr	r3, [sp, #8]
 800f7e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f7e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f000 feb6 	bl	801055c <uxr_stamp_session_header>
 800f7f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f7f2:	9a03      	ldr	r2, [sp, #12]
 800f7f4:	685d      	ldr	r5, [r3, #4]
 800f7f6:	6818      	ldr	r0, [r3, #0]
 800f7f8:	9902      	ldr	r1, [sp, #8]
 800f7fa:	47a8      	blx	r5
 800f7fc:	f109 0901 	add.w	r9, r9, #1
 800f800:	7e23      	ldrb	r3, [r4, #24]
 800f802:	fa5f f089 	uxtb.w	r0, r9
 800f806:	4283      	cmp	r3, r0
 800f808:	d8d8      	bhi.n	800f7bc <uxr_flash_output_streams+0x2c>
 800f80a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800f80e:	b38b      	cbz	r3, 800f874 <uxr_flash_output_streams+0xe4>
 800f810:	f04f 0900 	mov.w	r9, #0
 800f814:	f10d 0802 	add.w	r8, sp, #2
 800f818:	af03      	add	r7, sp, #12
 800f81a:	ae02      	add	r6, sp, #8
 800f81c:	4648      	mov	r0, r9
 800f81e:	2201      	movs	r2, #1
 800f820:	2102      	movs	r1, #2
 800f822:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f826:	f000 ff27 	bl	8010678 <uxr_stream_id>
 800f82a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f82e:	3520      	adds	r5, #32
 800f830:	9001      	str	r0, [sp, #4]
 800f832:	e00d      	b.n	800f850 <uxr_flash_output_streams+0xc0>
 800f834:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f838:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f83c:	9b02      	ldr	r3, [sp, #8]
 800f83e:	f000 fe8d 	bl	801055c <uxr_stamp_session_header>
 800f842:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f844:	9a03      	ldr	r2, [sp, #12]
 800f846:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f84a:	9902      	ldr	r1, [sp, #8]
 800f84c:	6818      	ldr	r0, [r3, #0]
 800f84e:	47d0      	blx	sl
 800f850:	4643      	mov	r3, r8
 800f852:	463a      	mov	r2, r7
 800f854:	4631      	mov	r1, r6
 800f856:	4628      	mov	r0, r5
 800f858:	f007 fd80 	bl	801735c <uxr_prepare_next_reliable_buffer_to_send>
 800f85c:	4603      	mov	r3, r0
 800f85e:	4620      	mov	r0, r4
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1e7      	bne.n	800f834 <uxr_flash_output_streams+0xa4>
 800f864:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800f868:	f109 0901 	add.w	r9, r9, #1
 800f86c:	fa5f f089 	uxtb.w	r0, r9
 800f870:	4283      	cmp	r3, r0
 800f872:	d8d4      	bhi.n	800f81e <uxr_flash_output_streams+0x8e>
 800f874:	b004      	add	sp, #16
 800f876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f87a:	bf00      	nop

0800f87c <read_submessage_info>:
 800f87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f880:	460d      	mov	r5, r1
 800f882:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800f886:	4669      	mov	r1, sp
 800f888:	4607      	mov	r7, r0
 800f88a:	4628      	mov	r0, r5
 800f88c:	f001 ffe4 	bl	8011858 <uxr_deserialize_BaseObjectReply>
 800f890:	a902      	add	r1, sp, #8
 800f892:	4604      	mov	r4, r0
 800f894:	4628      	mov	r0, r5
 800f896:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f89a:	f7fc fb63 	bl	800bf64 <ucdr_deserialize_bool>
 800f89e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f8a2:	4004      	ands	r4, r0
 800f8a4:	b2e4      	uxtb	r4, r4
 800f8a6:	b95b      	cbnz	r3, 800f8c0 <read_submessage_info+0x44>
 800f8a8:	a987      	add	r1, sp, #540	; 0x21c
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	f7fc fb5a 	bl	800bf64 <ucdr_deserialize_bool>
 800f8b0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800f8b4:	4606      	mov	r6, r0
 800f8b6:	b94b      	cbnz	r3, 800f8cc <read_submessage_info+0x50>
 800f8b8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800f8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8c0:	a903      	add	r1, sp, #12
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	f001 fe70 	bl	80115a8 <uxr_deserialize_ObjectVariant>
 800f8c8:	4004      	ands	r4, r0
 800f8ca:	e7ed      	b.n	800f8a8 <read_submessage_info+0x2c>
 800f8cc:	a988      	add	r1, sp, #544	; 0x220
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	f7fc fb76 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 800f8d4:	4234      	tst	r4, r6
 800f8d6:	d0ef      	beq.n	800f8b8 <read_submessage_info+0x3c>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d0ed      	beq.n	800f8b8 <read_submessage_info+0x3c>
 800f8dc:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800f8e0:	2b0d      	cmp	r3, #13
 800f8e2:	d1e9      	bne.n	800f8b8 <read_submessage_info+0x3c>
 800f8e4:	a98a      	add	r1, sp, #552	; 0x228
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	f7fd f910 	bl	800cb0c <ucdr_deserialize_int16_t>
 800f8ec:	b140      	cbz	r0, 800f900 <read_submessage_info+0x84>
 800f8ee:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	dd07      	ble.n	800f906 <read_submessage_info+0x8a>
 800f8f6:	f1b8 0f00 	cmp.w	r8, #0
 800f8fa:	bf14      	ite	ne
 800f8fc:	2001      	movne	r0, #1
 800f8fe:	2002      	moveq	r0, #2
 800f900:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800f904:	e7d8      	b.n	800f8b8 <read_submessage_info+0x3c>
 800f906:	2000      	movs	r0, #0
 800f908:	e7fa      	b.n	800f900 <read_submessage_info+0x84>
 800f90a:	bf00      	nop

0800f90c <read_submessage_list>:
 800f90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f910:	b097      	sub	sp, #92	; 0x5c
 800f912:	4ec1      	ldr	r6, [pc, #772]	; (800fc18 <read_submessage_list+0x30c>)
 800f914:	9209      	str	r2, [sp, #36]	; 0x24
 800f916:	4604      	mov	r4, r0
 800f918:	460d      	mov	r5, r1
 800f91a:	f04f 0801 	mov.w	r8, #1
 800f91e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800f922:	aa0c      	add	r2, sp, #48	; 0x30
 800f924:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800f928:	4628      	mov	r0, r5
 800f92a:	f000 fff7 	bl	801091c <uxr_read_submessage_header>
 800f92e:	2800      	cmp	r0, #0
 800f930:	f000 813e 	beq.w	800fbb0 <read_submessage_list+0x2a4>
 800f934:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800f938:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800f93c:	3b02      	subs	r3, #2
 800f93e:	2b0d      	cmp	r3, #13
 800f940:	d8ed      	bhi.n	800f91e <read_submessage_list+0x12>
 800f942:	a101      	add	r1, pc, #4	; (adr r1, 800f948 <read_submessage_list+0x3c>)
 800f944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f948:	0800fba7 	.word	0x0800fba7
 800f94c:	0800f91f 	.word	0x0800f91f
 800f950:	0800fb97 	.word	0x0800fb97
 800f954:	0800fb35 	.word	0x0800fb35
 800f958:	0800fb2b 	.word	0x0800fb2b
 800f95c:	0800f91f 	.word	0x0800f91f
 800f960:	0800f91f 	.word	0x0800f91f
 800f964:	0800fa8b 	.word	0x0800fa8b
 800f968:	0800fa1b 	.word	0x0800fa1b
 800f96c:	0800f9db 	.word	0x0800f9db
 800f970:	0800f91f 	.word	0x0800f91f
 800f974:	0800f91f 	.word	0x0800f91f
 800f978:	0800f91f 	.word	0x0800f91f
 800f97c:	0800f981 	.word	0x0800f981
 800f980:	a910      	add	r1, sp, #64	; 0x40
 800f982:	4628      	mov	r0, r5
 800f984:	f002 f98c 	bl	8011ca0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f988:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800f98c:	f1b9 0f00 	cmp.w	r9, #0
 800f990:	f000 8116 	beq.w	800fbc0 <read_submessage_list+0x2b4>
 800f994:	f7fd fcca 	bl	800d32c <uxr_nanos>
 800f998:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	468c      	mov	ip, r1
 800f9a4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f9a8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f9ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f9ae:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800f9b0:	468c      	mov	ip, r1
 800f9b2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f9b6:	46e2      	mov	sl, ip
 800f9b8:	46bc      	mov	ip, r7
 800f9ba:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800f9be:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f9c2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f9c6:	e9cd 7100 	strd	r7, r1, [sp]
 800f9ca:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800f9ce:	9106      	str	r1, [sp, #24]
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	47c8      	blx	r9
 800f9d4:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800f9d8:	e7a1      	b.n	800f91e <read_submessage_list+0x12>
 800f9da:	a910      	add	r1, sp, #64	; 0x40
 800f9dc:	4628      	mov	r0, r5
 800f9de:	f002 f94d 	bl	8011c7c <uxr_deserialize_HEARTBEAT_Payload>
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800f9e8:	f000 fe70 	bl	80106cc <uxr_stream_id_from_raw>
 800f9ec:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f9f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f9f2:	4639      	mov	r1, r7
 800f9f4:	f104 0008 	add.w	r0, r4, #8
 800f9f8:	f000 ff56 	bl	80108a8 <uxr_get_input_reliable_stream>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	d08e      	beq.n	800f91e <read_submessage_list+0x12>
 800fa00:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800fa04:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800fa08:	f007 f9f8 	bl	8016dfc <uxr_process_heartbeat>
 800fa0c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800fa10:	463a      	mov	r2, r7
 800fa12:	4620      	mov	r0, r4
 800fa14:	f7ff fdf6 	bl	800f604 <write_submessage_acknack.isra.0>
 800fa18:	e781      	b.n	800f91e <read_submessage_list+0x12>
 800fa1a:	a910      	add	r1, sp, #64	; 0x40
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	f002 f905 	bl	8011c2c <uxr_deserialize_ACKNACK_Payload>
 800fa22:	2100      	movs	r1, #0
 800fa24:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800fa28:	f000 fe50 	bl	80106cc <uxr_stream_id_from_raw>
 800fa2c:	900d      	str	r0, [sp, #52]	; 0x34
 800fa2e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800fa32:	f104 0008 	add.w	r0, r4, #8
 800fa36:	f000 ff23 	bl	8010880 <uxr_get_output_reliable_stream>
 800fa3a:	4607      	mov	r7, r0
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	f43f af6e 	beq.w	800f91e <read_submessage_list+0x12>
 800fa42:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800fa46:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800fa4a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800fa4e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fa52:	b289      	uxth	r1, r1
 800fa54:	f007 fd2c 	bl	80174b0 <uxr_process_acknack>
 800fa58:	4638      	mov	r0, r7
 800fa5a:	f007 fce9 	bl	8017430 <uxr_begin_output_nack_buffer_it>
 800fa5e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800fa62:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800fa66:	e006      	b.n	800fa76 <read_submessage_list+0x16a>
 800fa68:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fa6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa6c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800fa70:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fa72:	6818      	ldr	r0, [r3, #0]
 800fa74:	47c8      	blx	r9
 800fa76:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800fa7a:	aa0f      	add	r2, sp, #60	; 0x3c
 800fa7c:	4651      	mov	r1, sl
 800fa7e:	4638      	mov	r0, r7
 800fa80:	f007 fcd8 	bl	8017434 <uxr_next_reliable_nack_buffer_to_send>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d1ef      	bne.n	800fa68 <read_submessage_list+0x15c>
 800fa88:	e749      	b.n	800f91e <read_submessage_list+0x12>
 800fa8a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800fa8e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800fa92:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800fa96:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800fa9a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800fa9e:	4651      	mov	r1, sl
 800faa0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800faa4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800faa8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800faac:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800fab0:	4628      	mov	r0, r5
 800fab2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800fab6:	f001 fe19 	bl	80116ec <uxr_deserialize_BaseObjectRequest>
 800faba:	4650      	mov	r0, sl
 800fabc:	a90f      	add	r1, sp, #60	; 0x3c
 800fabe:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800fac2:	f000 fdc7 	bl	8010654 <uxr_parse_base_object_request>
 800fac6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800faca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800facc:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800fad0:	9110      	str	r1, [sp, #64]	; 0x40
 800fad2:	3f04      	subs	r7, #4
 800fad4:	f009 090e 	and.w	r9, r9, #14
 800fad8:	b2bf      	uxth	r7, r7
 800fada:	f1bb 0f00 	cmp.w	fp, #0
 800fade:	d006      	beq.n	800faee <read_submessage_list+0x1e2>
 800fae0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800fae4:	9300      	str	r3, [sp, #0]
 800fae6:	4652      	mov	r2, sl
 800fae8:	2300      	movs	r3, #0
 800faea:	4620      	mov	r0, r4
 800faec:	47d8      	blx	fp
 800faee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800faf0:	b16a      	cbz	r2, 800fb0e <read_submessage_list+0x202>
 800faf2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800faf4:	2100      	movs	r1, #0
 800faf6:	3802      	subs	r0, #2
 800faf8:	e002      	b.n	800fb00 <read_submessage_list+0x1f4>
 800fafa:	3101      	adds	r1, #1
 800fafc:	4291      	cmp	r1, r2
 800fafe:	d006      	beq.n	800fb0e <read_submessage_list+0x202>
 800fb00:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fb04:	4553      	cmp	r3, sl
 800fb06:	d1f8      	bne.n	800fafa <read_submessage_list+0x1ee>
 800fb08:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	545a      	strb	r2, [r3, r1]
 800fb0e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800fb12:	9102      	str	r1, [sp, #8]
 800fb14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fb16:	9101      	str	r1, [sp, #4]
 800fb18:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fb1a:	9100      	str	r1, [sp, #0]
 800fb1c:	464b      	mov	r3, r9
 800fb1e:	463a      	mov	r2, r7
 800fb20:	4629      	mov	r1, r5
 800fb22:	4620      	mov	r0, r4
 800fb24:	f007 fd82 	bl	801762c <read_submessage_format>
 800fb28:	e6f9      	b.n	800f91e <read_submessage_list+0x12>
 800fb2a:	4629      	mov	r1, r5
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f7ff fea5 	bl	800f87c <read_submessage_info>
 800fb32:	e6f4      	b.n	800f91e <read_submessage_list+0x12>
 800fb34:	2a00      	cmp	r2, #0
 800fb36:	d03e      	beq.n	800fbb6 <read_submessage_list+0x2aa>
 800fb38:	a910      	add	r1, sp, #64	; 0x40
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	f001 ffd2 	bl	8011ae4 <uxr_deserialize_STATUS_Payload>
 800fb40:	a90e      	add	r1, sp, #56	; 0x38
 800fb42:	aa0d      	add	r2, sp, #52	; 0x34
 800fb44:	a810      	add	r0, sp, #64	; 0x40
 800fb46:	f000 fd85 	bl	8010654 <uxr_parse_base_object_request>
 800fb4a:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800fb4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fb50:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800fb54:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800fb58:	910f      	str	r1, [sp, #60]	; 0x3c
 800fb5a:	f1ba 0f00 	cmp.w	sl, #0
 800fb5e:	d006      	beq.n	800fb6e <read_submessage_list+0x262>
 800fb60:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	463a      	mov	r2, r7
 800fb68:	464b      	mov	r3, r9
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	47d0      	blx	sl
 800fb6e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800fb70:	2a00      	cmp	r2, #0
 800fb72:	f43f aed4 	beq.w	800f91e <read_submessage_list+0x12>
 800fb76:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800fb78:	2100      	movs	r1, #0
 800fb7a:	3802      	subs	r0, #2
 800fb7c:	e003      	b.n	800fb86 <read_submessage_list+0x27a>
 800fb7e:	3101      	adds	r1, #1
 800fb80:	4291      	cmp	r1, r2
 800fb82:	f43f aecc 	beq.w	800f91e <read_submessage_list+0x12>
 800fb86:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fb8a:	42bb      	cmp	r3, r7
 800fb8c:	d1f7      	bne.n	800fb7e <read_submessage_list+0x272>
 800fb8e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800fb90:	f803 9001 	strb.w	r9, [r3, r1]
 800fb94:	e6c3      	b.n	800f91e <read_submessage_list+0x12>
 800fb96:	2a00      	cmp	r2, #0
 800fb98:	f47f aec1 	bne.w	800f91e <read_submessage_list+0x12>
 800fb9c:	4629      	mov	r1, r5
 800fb9e:	4620      	mov	r0, r4
 800fba0:	f000 fc9e 	bl	80104e0 <uxr_read_create_session_status>
 800fba4:	e6bb      	b.n	800f91e <read_submessage_list+0x12>
 800fba6:	4629      	mov	r1, r5
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f7ff fcf5 	bl	800f598 <read_submessage_get_info>
 800fbae:	e6b6      	b.n	800f91e <read_submessage_list+0x12>
 800fbb0:	b017      	add	sp, #92	; 0x5c
 800fbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	4620      	mov	r0, r4
 800fbba:	f000 fc9d 	bl	80104f8 <uxr_read_delete_session_status>
 800fbbe:	e6ae      	b.n	800f91e <read_submessage_list+0x12>
 800fbc0:	f7fd fbb4 	bl	800d32c <uxr_nanos>
 800fbc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fbc8:	464f      	mov	r7, r9
 800fbca:	fbc3 2706 	smlal	r2, r7, r3, r6
 800fbce:	1812      	adds	r2, r2, r0
 800fbd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fbd2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800fbd4:	eb47 0101 	adc.w	r1, r7, r1
 800fbd8:	464f      	mov	r7, r9
 800fbda:	fbc3 0706 	smlal	r0, r7, r3, r6
 800fbde:	463b      	mov	r3, r7
 800fbe0:	4684      	mov	ip, r0
 800fbe2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800fbe6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800fbea:	eb1c 0c00 	adds.w	ip, ip, r0
 800fbee:	464f      	mov	r7, r9
 800fbf0:	eb43 0307 	adc.w	r3, r3, r7
 800fbf4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800fbf8:	eb61 0303 	sbc.w	r3, r1, r3
 800fbfc:	0fda      	lsrs	r2, r3, #31
 800fbfe:	eb12 020c 	adds.w	r2, r2, ip
 800fc02:	f143 0300 	adc.w	r3, r3, #0
 800fc06:	0852      	lsrs	r2, r2, #1
 800fc08:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800fc0c:	105b      	asrs	r3, r3, #1
 800fc0e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800fc12:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800fc16:	e6dd      	b.n	800f9d4 <read_submessage_list+0xc8>
 800fc18:	3b9aca00 	.word	0x3b9aca00

0800fc1c <listen_message_reliably>:
 800fc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc20:	1e0b      	subs	r3, r1, #0
 800fc22:	b09d      	sub	sp, #116	; 0x74
 800fc24:	bfb8      	it	lt
 800fc26:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800fc2a:	4680      	mov	r8, r0
 800fc2c:	9305      	str	r3, [sp, #20]
 800fc2e:	f7fd fb63 	bl	800d2f8 <uxr_millis>
 800fc32:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800fc36:	4681      	mov	r9, r0
 800fc38:	2a00      	cmp	r2, #0
 800fc3a:	f000 80a1 	beq.w	800fd80 <listen_message_reliably+0x164>
 800fc3e:	2600      	movs	r6, #0
 800fc40:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fc44:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800fc48:	9303      	str	r3, [sp, #12]
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	460f      	mov	r7, r1
 800fc4e:	e00f      	b.n	800fc70 <listen_message_reliably+0x54>
 800fc50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fc54:	9903      	ldr	r1, [sp, #12]
 800fc56:	455a      	cmp	r2, fp
 800fc58:	f106 0601 	add.w	r6, r6, #1
 800fc5c:	eb73 0101 	sbcs.w	r1, r3, r1
 800fc60:	b2f0      	uxtb	r0, r6
 800fc62:	da01      	bge.n	800fc68 <listen_message_reliably+0x4c>
 800fc64:	4693      	mov	fp, r2
 800fc66:	9303      	str	r3, [sp, #12]
 800fc68:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800fc6c:	4283      	cmp	r3, r0
 800fc6e:	d960      	bls.n	800fd32 <listen_message_reliably+0x116>
 800fc70:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800fc74:	2102      	movs	r1, #2
 800fc76:	2201      	movs	r2, #1
 800fc78:	f000 fcfe 	bl	8010678 <uxr_stream_id>
 800fc7c:	00e4      	lsls	r4, r4, #3
 800fc7e:	f104 0520 	add.w	r5, r4, #32
 800fc82:	4445      	add	r5, r8
 800fc84:	4601      	mov	r1, r0
 800fc86:	463b      	mov	r3, r7
 800fc88:	464a      	mov	r2, r9
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	9109      	str	r1, [sp, #36]	; 0x24
 800fc8e:	f007 fba5 	bl	80173dc <uxr_update_output_stream_heartbeat_timestamp>
 800fc92:	eb08 0304 	add.w	r3, r8, r4
 800fc96:	2800      	cmp	r0, #0
 800fc98:	d0da      	beq.n	800fc50 <listen_message_reliably+0x34>
 800fc9a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800fc9e:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800fca2:	9304      	str	r3, [sp, #16]
 800fca4:	4640      	mov	r0, r8
 800fca6:	f000 fcaf 	bl	8010608 <uxr_session_header_offset>
 800fcaa:	3501      	adds	r5, #1
 800fcac:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800fcb0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800fcb4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800fcb8:	2300      	movs	r3, #0
 800fcba:	2211      	movs	r2, #17
 800fcbc:	9000      	str	r0, [sp, #0]
 800fcbe:	a90c      	add	r1, sp, #48	; 0x30
 800fcc0:	4650      	mov	r0, sl
 800fcc2:	f7fd fa97 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	2205      	movs	r2, #5
 800fcca:	210b      	movs	r1, #11
 800fccc:	4650      	mov	r0, sl
 800fcce:	f000 fe0b 	bl	80108e8 <uxr_buffer_submessage_header>
 800fcd2:	8968      	ldrh	r0, [r5, #10]
 800fcd4:	2101      	movs	r1, #1
 800fcd6:	f007 fd73 	bl	80177c0 <uxr_seq_num_add>
 800fcda:	892b      	ldrh	r3, [r5, #8]
 800fcdc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800fce0:	4602      	mov	r2, r0
 800fce2:	9b04      	ldr	r3, [sp, #16]
 800fce4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800fce8:	a90a      	add	r1, sp, #40	; 0x28
 800fcea:	4650      	mov	r0, sl
 800fcec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800fcf0:	f001 ffb0 	bl	8011c54 <uxr_serialize_HEARTBEAT_Payload>
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	4611      	mov	r1, r2
 800fcf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	f000 fc2e 	bl	801055c <uxr_stamp_session_header>
 800fd00:	4650      	mov	r0, sl
 800fd02:	f7fd fab5 	bl	800d270 <ucdr_buffer_length>
 800fd06:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	a90c      	add	r1, sp, #48	; 0x30
 800fd0e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fd12:	4444      	add	r4, r8
 800fd14:	47a8      	blx	r5
 800fd16:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800fd1a:	9903      	ldr	r1, [sp, #12]
 800fd1c:	455a      	cmp	r2, fp
 800fd1e:	f106 0601 	add.w	r6, r6, #1
 800fd22:	eb73 0101 	sbcs.w	r1, r3, r1
 800fd26:	b2f0      	uxtb	r0, r6
 800fd28:	db9c      	blt.n	800fc64 <listen_message_reliably+0x48>
 800fd2a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800fd2e:	4283      	cmp	r3, r0
 800fd30:	d89e      	bhi.n	800fc70 <listen_message_reliably+0x54>
 800fd32:	9a03      	ldr	r2, [sp, #12]
 800fd34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	bf08      	it	eq
 800fd3c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800fd40:	d01e      	beq.n	800fd80 <listen_message_reliably+0x164>
 800fd42:	ebab 0309 	sub.w	r3, fp, r9
 800fd46:	9905      	ldr	r1, [sp, #20]
 800fd48:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	bf08      	it	eq
 800fd50:	2301      	moveq	r3, #1
 800fd52:	4299      	cmp	r1, r3
 800fd54:	bfa8      	it	ge
 800fd56:	4619      	movge	r1, r3
 800fd58:	6894      	ldr	r4, [r2, #8]
 800fd5a:	6810      	ldr	r0, [r2, #0]
 800fd5c:	4689      	mov	r9, r1
 800fd5e:	460b      	mov	r3, r1
 800fd60:	aa08      	add	r2, sp, #32
 800fd62:	a907      	add	r1, sp, #28
 800fd64:	47a0      	blx	r4
 800fd66:	b968      	cbnz	r0, 800fd84 <listen_message_reliably+0x168>
 800fd68:	9b05      	ldr	r3, [sp, #20]
 800fd6a:	eba3 0309 	sub.w	r3, r3, r9
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	9305      	str	r3, [sp, #20]
 800fd72:	f73f af5c 	bgt.w	800fc2e <listen_message_reliably+0x12>
 800fd76:	4604      	mov	r4, r0
 800fd78:	4620      	mov	r0, r4
 800fd7a:	b01d      	add	sp, #116	; 0x74
 800fd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd80:	9b05      	ldr	r3, [sp, #20]
 800fd82:	e7e0      	b.n	800fd46 <listen_message_reliably+0x12a>
 800fd84:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fd88:	4604      	mov	r4, r0
 800fd8a:	a80c      	add	r0, sp, #48	; 0x30
 800fd8c:	f7fd fa44 	bl	800d218 <ucdr_init_buffer>
 800fd90:	2500      	movs	r5, #0
 800fd92:	f10d 031a 	add.w	r3, sp, #26
 800fd96:	aa06      	add	r2, sp, #24
 800fd98:	a90c      	add	r1, sp, #48	; 0x30
 800fd9a:	4640      	mov	r0, r8
 800fd9c:	f88d 5018 	strb.w	r5, [sp, #24]
 800fda0:	f000 fbf0 	bl	8010584 <uxr_read_session_header>
 800fda4:	b918      	cbnz	r0, 800fdae <listen_message_reliably+0x192>
 800fda6:	4620      	mov	r0, r4
 800fda8:	b01d      	add	sp, #116	; 0x74
 800fdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdae:	4629      	mov	r1, r5
 800fdb0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fdb4:	f000 fc8a 	bl	80106cc <uxr_stream_id_from_raw>
 800fdb8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800fdbc:	2d01      	cmp	r5, #1
 800fdbe:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800fdc2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800fdc6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fdca:	d04b      	beq.n	800fe64 <listen_message_reliably+0x248>
 800fdcc:	2d02      	cmp	r5, #2
 800fdce:	d00f      	beq.n	800fdf0 <listen_message_reliably+0x1d4>
 800fdd0:	2d00      	cmp	r5, #0
 800fdd2:	d1e8      	bne.n	800fda6 <listen_message_reliably+0x18a>
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	f000 fc78 	bl	80106cc <uxr_stream_id_from_raw>
 800fddc:	a90c      	add	r1, sp, #48	; 0x30
 800fdde:	4602      	mov	r2, r0
 800fde0:	4640      	mov	r0, r8
 800fde2:	920a      	str	r2, [sp, #40]	; 0x28
 800fde4:	f7ff fd92 	bl	800f90c <read_submessage_list>
 800fde8:	4620      	mov	r0, r4
 800fdea:	b01d      	add	sp, #116	; 0x74
 800fdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf0:	4631      	mov	r1, r6
 800fdf2:	f108 0008 	add.w	r0, r8, #8
 800fdf6:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800fdfa:	f000 fd55 	bl	80108a8 <uxr_get_input_reliable_stream>
 800fdfe:	4607      	mov	r7, r0
 800fe00:	b338      	cbz	r0, 800fe52 <listen_message_reliably+0x236>
 800fe02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe04:	9203      	str	r2, [sp, #12]
 800fe06:	a80c      	add	r0, sp, #48	; 0x30
 800fe08:	f7fd fa36 	bl	800d278 <ucdr_buffer_remaining>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	f10d 0019 	add.w	r0, sp, #25
 800fe12:	9000      	str	r0, [sp, #0]
 800fe14:	9a03      	ldr	r2, [sp, #12]
 800fe16:	4651      	mov	r1, sl
 800fe18:	4638      	mov	r0, r7
 800fe1a:	f006 fef5 	bl	8016c08 <uxr_receive_reliable_message>
 800fe1e:	b1c0      	cbz	r0, 800fe52 <listen_message_reliably+0x236>
 800fe20:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fe24:	b393      	cbz	r3, 800fe8c <listen_message_reliably+0x270>
 800fe26:	ad14      	add	r5, sp, #80	; 0x50
 800fe28:	f04f 0a02 	mov.w	sl, #2
 800fe2c:	e00a      	b.n	800fe44 <listen_message_reliably+0x228>
 800fe2e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800fe32:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800fe36:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800fe3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe3c:	4629      	mov	r1, r5
 800fe3e:	4640      	mov	r0, r8
 800fe40:	f7ff fd64 	bl	800f90c <read_submessage_list>
 800fe44:	2204      	movs	r2, #4
 800fe46:	4629      	mov	r1, r5
 800fe48:	4638      	mov	r0, r7
 800fe4a:	f006 ff5d 	bl	8016d08 <uxr_next_input_reliable_buffer_available>
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d1ed      	bne.n	800fe2e <listen_message_reliably+0x212>
 800fe52:	4640      	mov	r0, r8
 800fe54:	4632      	mov	r2, r6
 800fe56:	4649      	mov	r1, r9
 800fe58:	f7ff fbd4 	bl	800f604 <write_submessage_acknack.isra.0>
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	b01d      	add	sp, #116	; 0x74
 800fe60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe64:	4631      	mov	r1, r6
 800fe66:	f108 0008 	add.w	r0, r8, #8
 800fe6a:	f000 fd13 	bl	8010894 <uxr_get_input_best_effort_stream>
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	d099      	beq.n	800fda6 <listen_message_reliably+0x18a>
 800fe72:	4651      	mov	r1, sl
 800fe74:	f006 fe34 	bl	8016ae0 <uxr_receive_best_effort_message>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	d094      	beq.n	800fda6 <listen_message_reliably+0x18a>
 800fe7c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800fe80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe82:	a90c      	add	r1, sp, #48	; 0x30
 800fe84:	4640      	mov	r0, r8
 800fe86:	f7ff fd41 	bl	800f90c <read_submessage_list>
 800fe8a:	e78c      	b.n	800fda6 <listen_message_reliably+0x18a>
 800fe8c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800fe90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe92:	a90c      	add	r1, sp, #48	; 0x30
 800fe94:	4640      	mov	r0, r8
 800fe96:	f7ff fd39 	bl	800f90c <read_submessage_list>
 800fe9a:	e7c4      	b.n	800fe26 <listen_message_reliably+0x20a>

0800fe9c <uxr_run_session_timeout>:
 800fe9c:	b570      	push	{r4, r5, r6, lr}
 800fe9e:	4604      	mov	r4, r0
 800fea0:	460d      	mov	r5, r1
 800fea2:	f7fd fa29 	bl	800d2f8 <uxr_millis>
 800fea6:	4606      	mov	r6, r0
 800fea8:	4620      	mov	r0, r4
 800feaa:	f7ff fc71 	bl	800f790 <uxr_flash_output_streams>
 800feae:	4629      	mov	r1, r5
 800feb0:	4620      	mov	r0, r4
 800feb2:	f7ff feb3 	bl	800fc1c <listen_message_reliably>
 800feb6:	f7fd fa1f 	bl	800d2f8 <uxr_millis>
 800feba:	1b83      	subs	r3, r0, r6
 800febc:	1ae9      	subs	r1, r5, r3
 800febe:	2900      	cmp	r1, #0
 800fec0:	dcf6      	bgt.n	800feb0 <uxr_run_session_timeout+0x14>
 800fec2:	f104 0008 	add.w	r0, r4, #8
 800fec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800feca:	f000 bcf7 	b.w	80108bc <uxr_output_streams_confirmed>
 800fece:	bf00      	nop

0800fed0 <uxr_run_session_until_data>:
 800fed0:	b570      	push	{r4, r5, r6, lr}
 800fed2:	4604      	mov	r4, r0
 800fed4:	460d      	mov	r5, r1
 800fed6:	f7fd fa0f 	bl	800d2f8 <uxr_millis>
 800feda:	4606      	mov	r6, r0
 800fedc:	4620      	mov	r0, r4
 800fede:	f7ff fc57 	bl	800f790 <uxr_flash_output_streams>
 800fee2:	2300      	movs	r3, #0
 800fee4:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800fee8:	4629      	mov	r1, r5
 800feea:	e005      	b.n	800fef8 <uxr_run_session_until_data+0x28>
 800feec:	f7fd fa04 	bl	800d2f8 <uxr_millis>
 800fef0:	1b83      	subs	r3, r0, r6
 800fef2:	1ae9      	subs	r1, r5, r3
 800fef4:	2900      	cmp	r1, #0
 800fef6:	dd07      	ble.n	800ff08 <uxr_run_session_until_data+0x38>
 800fef8:	4620      	mov	r0, r4
 800fefa:	f7ff fe8f 	bl	800fc1c <listen_message_reliably>
 800fefe:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800ff02:	2800      	cmp	r0, #0
 800ff04:	d0f2      	beq.n	800feec <uxr_run_session_until_data+0x1c>
 800ff06:	bd70      	pop	{r4, r5, r6, pc}
 800ff08:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800ff0c:	bd70      	pop	{r4, r5, r6, pc}
 800ff0e:	bf00      	nop

0800ff10 <uxr_run_session_until_confirm_delivery>:
 800ff10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff14:	4606      	mov	r6, r0
 800ff16:	460d      	mov	r5, r1
 800ff18:	f7fd f9ee 	bl	800d2f8 <uxr_millis>
 800ff1c:	4607      	mov	r7, r0
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f7ff fc36 	bl	800f790 <uxr_flash_output_streams>
 800ff24:	2d00      	cmp	r5, #0
 800ff26:	f106 0808 	add.w	r8, r6, #8
 800ff2a:	bfa8      	it	ge
 800ff2c:	462c      	movge	r4, r5
 800ff2e:	da07      	bge.n	800ff40 <uxr_run_session_until_confirm_delivery+0x30>
 800ff30:	e00e      	b.n	800ff50 <uxr_run_session_until_confirm_delivery+0x40>
 800ff32:	f7ff fe73 	bl	800fc1c <listen_message_reliably>
 800ff36:	f7fd f9df 	bl	800d2f8 <uxr_millis>
 800ff3a:	1bc3      	subs	r3, r0, r7
 800ff3c:	1aec      	subs	r4, r5, r3
 800ff3e:	d407      	bmi.n	800ff50 <uxr_run_session_until_confirm_delivery+0x40>
 800ff40:	4640      	mov	r0, r8
 800ff42:	f000 fcbb 	bl	80108bc <uxr_output_streams_confirmed>
 800ff46:	4603      	mov	r3, r0
 800ff48:	4621      	mov	r1, r4
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d0f0      	beq.n	800ff32 <uxr_run_session_until_confirm_delivery+0x22>
 800ff50:	4640      	mov	r0, r8
 800ff52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff56:	f000 bcb1 	b.w	80108bc <uxr_output_streams_confirmed>
 800ff5a:	bf00      	nop

0800ff5c <uxr_run_session_until_all_status>:
 800ff5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff60:	9c08      	ldr	r4, [sp, #32]
 800ff62:	4606      	mov	r6, r0
 800ff64:	460f      	mov	r7, r1
 800ff66:	4691      	mov	r9, r2
 800ff68:	461d      	mov	r5, r3
 800ff6a:	f7ff fc11 	bl	800f790 <uxr_flash_output_streams>
 800ff6e:	b124      	cbz	r4, 800ff7a <uxr_run_session_until_all_status+0x1e>
 800ff70:	4622      	mov	r2, r4
 800ff72:	21ff      	movs	r1, #255	; 0xff
 800ff74:	4628      	mov	r0, r5
 800ff76:	f008 fde7 	bl	8018b48 <memset>
 800ff7a:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800ff7e:	67f4      	str	r4, [r6, #124]	; 0x7c
 800ff80:	f7fd f9ba 	bl	800d2f8 <uxr_millis>
 800ff84:	3d01      	subs	r5, #1
 800ff86:	f1a9 0902 	sub.w	r9, r9, #2
 800ff8a:	4680      	mov	r8, r0
 800ff8c:	4639      	mov	r1, r7
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f7ff fe44 	bl	800fc1c <listen_message_reliably>
 800ff94:	f7fd f9b0 	bl	800d2f8 <uxr_millis>
 800ff98:	eba0 0008 	sub.w	r0, r0, r8
 800ff9c:	1a39      	subs	r1, r7, r0
 800ff9e:	b344      	cbz	r4, 800fff2 <uxr_run_session_until_all_status+0x96>
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	46ac      	mov	ip, r5
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e002      	b.n	800ffae <uxr_run_session_until_all_status+0x52>
 800ffa8:	42a3      	cmp	r3, r4
 800ffaa:	d20d      	bcs.n	800ffc8 <uxr_run_session_until_all_status+0x6c>
 800ffac:	3301      	adds	r3, #1
 800ffae:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800ffb2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800ffb6:	d1f7      	bne.n	800ffa8 <uxr_run_session_until_all_status+0x4c>
 800ffb8:	42a3      	cmp	r3, r4
 800ffba:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800ffbe:	d213      	bcs.n	800ffe8 <uxr_run_session_until_all_status+0x8c>
 800ffc0:	2a00      	cmp	r2, #0
 800ffc2:	d0f3      	beq.n	800ffac <uxr_run_session_until_all_status+0x50>
 800ffc4:	2900      	cmp	r1, #0
 800ffc6:	dce2      	bgt.n	800ff8e <uxr_run_session_until_all_status+0x32>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	67f3      	str	r3, [r6, #124]	; 0x7c
 800ffcc:	442c      	add	r4, r5
 800ffce:	e001      	b.n	800ffd4 <uxr_run_session_until_all_status+0x78>
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d812      	bhi.n	800fffa <uxr_run_session_until_all_status+0x9e>
 800ffd4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ffd8:	4284      	cmp	r4, r0
 800ffda:	d1f9      	bne.n	800ffd0 <uxr_run_session_until_all_status+0x74>
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	bf8c      	ite	hi
 800ffe0:	2000      	movhi	r0, #0
 800ffe2:	2001      	movls	r0, #1
 800ffe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffe8:	2900      	cmp	r1, #0
 800ffea:	dded      	ble.n	800ffc8 <uxr_run_session_until_all_status+0x6c>
 800ffec:	2a00      	cmp	r2, #0
 800ffee:	d1ce      	bne.n	800ff8e <uxr_run_session_until_all_status+0x32>
 800fff0:	e7ea      	b.n	800ffc8 <uxr_run_session_until_all_status+0x6c>
 800fff2:	67f4      	str	r4, [r6, #124]	; 0x7c
 800fff4:	2001      	movs	r0, #1
 800fff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fffa:	2000      	movs	r0, #0
 800fffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010000 <wait_session_status>:
 8010000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010004:	4604      	mov	r4, r0
 8010006:	b09d      	sub	sp, #116	; 0x74
 8010008:	20ff      	movs	r0, #255	; 0xff
 801000a:	7160      	strb	r0, [r4, #5]
 801000c:	9303      	str	r3, [sp, #12]
 801000e:	2b00      	cmp	r3, #0
 8010010:	f000 80b6 	beq.w	8010180 <wait_session_status+0x180>
 8010014:	468a      	mov	sl, r1
 8010016:	4691      	mov	r9, r2
 8010018:	f04f 0b00 	mov.w	fp, #0
 801001c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801001e:	464a      	mov	r2, r9
 8010020:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010024:	4651      	mov	r1, sl
 8010026:	47a8      	blx	r5
 8010028:	f7fd f966 	bl	800d2f8 <uxr_millis>
 801002c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010030:	4605      	mov	r5, r0
 8010032:	e009      	b.n	8010048 <wait_session_status+0x48>
 8010034:	f7fd f960 	bl	800d2f8 <uxr_millis>
 8010038:	1b40      	subs	r0, r0, r5
 801003a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801003e:	2b00      	cmp	r3, #0
 8010040:	dd40      	ble.n	80100c4 <wait_session_status+0xc4>
 8010042:	7960      	ldrb	r0, [r4, #5]
 8010044:	28ff      	cmp	r0, #255	; 0xff
 8010046:	d145      	bne.n	80100d4 <wait_session_status+0xd4>
 8010048:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801004a:	a908      	add	r1, sp, #32
 801004c:	6896      	ldr	r6, [r2, #8]
 801004e:	6810      	ldr	r0, [r2, #0]
 8010050:	aa09      	add	r2, sp, #36	; 0x24
 8010052:	47b0      	blx	r6
 8010054:	2800      	cmp	r0, #0
 8010056:	d0ed      	beq.n	8010034 <wait_session_status+0x34>
 8010058:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801005c:	a80c      	add	r0, sp, #48	; 0x30
 801005e:	f7fd f8db 	bl	800d218 <ucdr_init_buffer>
 8010062:	2600      	movs	r6, #0
 8010064:	f10d 031e 	add.w	r3, sp, #30
 8010068:	aa07      	add	r2, sp, #28
 801006a:	a90c      	add	r1, sp, #48	; 0x30
 801006c:	4620      	mov	r0, r4
 801006e:	f88d 601c 	strb.w	r6, [sp, #28]
 8010072:	f000 fa87 	bl	8010584 <uxr_read_session_header>
 8010076:	2800      	cmp	r0, #0
 8010078:	d0dc      	beq.n	8010034 <wait_session_status+0x34>
 801007a:	4631      	mov	r1, r6
 801007c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010080:	f000 fb24 	bl	80106cc <uxr_stream_id_from_raw>
 8010084:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010088:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801008c:	9302      	str	r3, [sp, #8]
 801008e:	2f01      	cmp	r7, #1
 8010090:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8010094:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010098:	d05c      	beq.n	8010154 <wait_session_status+0x154>
 801009a:	2f02      	cmp	r7, #2
 801009c:	d020      	beq.n	80100e0 <wait_session_status+0xe0>
 801009e:	2f00      	cmp	r7, #0
 80100a0:	d1c8      	bne.n	8010034 <wait_session_status+0x34>
 80100a2:	4639      	mov	r1, r7
 80100a4:	4638      	mov	r0, r7
 80100a6:	f000 fb11 	bl	80106cc <uxr_stream_id_from_raw>
 80100aa:	a90c      	add	r1, sp, #48	; 0x30
 80100ac:	4602      	mov	r2, r0
 80100ae:	900b      	str	r0, [sp, #44]	; 0x2c
 80100b0:	4620      	mov	r0, r4
 80100b2:	f7ff fc2b 	bl	800f90c <read_submessage_list>
 80100b6:	f7fd f91f 	bl	800d2f8 <uxr_millis>
 80100ba:	1b40      	subs	r0, r0, r5
 80100bc:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	dcbe      	bgt.n	8010042 <wait_session_status+0x42>
 80100c4:	9b03      	ldr	r3, [sp, #12]
 80100c6:	7960      	ldrb	r0, [r4, #5]
 80100c8:	f10b 0b01 	add.w	fp, fp, #1
 80100cc:	455b      	cmp	r3, fp
 80100ce:	d001      	beq.n	80100d4 <wait_session_status+0xd4>
 80100d0:	28ff      	cmp	r0, #255	; 0xff
 80100d2:	d0a3      	beq.n	801001c <wait_session_status+0x1c>
 80100d4:	38ff      	subs	r0, #255	; 0xff
 80100d6:	bf18      	it	ne
 80100d8:	2001      	movne	r0, #1
 80100da:	b01d      	add	sp, #116	; 0x74
 80100dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80100e4:	9304      	str	r3, [sp, #16]
 80100e6:	4631      	mov	r1, r6
 80100e8:	f104 0008 	add.w	r0, r4, #8
 80100ec:	f000 fbdc 	bl	80108a8 <uxr_get_input_reliable_stream>
 80100f0:	4680      	mov	r8, r0
 80100f2:	b348      	cbz	r0, 8010148 <wait_session_status+0x148>
 80100f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100f6:	9205      	str	r2, [sp, #20]
 80100f8:	a80c      	add	r0, sp, #48	; 0x30
 80100fa:	f7fd f8bd 	bl	800d278 <ucdr_buffer_remaining>
 80100fe:	4603      	mov	r3, r0
 8010100:	f10d 001d 	add.w	r0, sp, #29
 8010104:	9000      	str	r0, [sp, #0]
 8010106:	9a05      	ldr	r2, [sp, #20]
 8010108:	9902      	ldr	r1, [sp, #8]
 801010a:	4640      	mov	r0, r8
 801010c:	f006 fd7c 	bl	8016c08 <uxr_receive_reliable_message>
 8010110:	b1d0      	cbz	r0, 8010148 <wait_session_status+0x148>
 8010112:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d03a      	beq.n	8010190 <wait_session_status+0x190>
 801011a:	9f04      	ldr	r7, [sp, #16]
 801011c:	e00a      	b.n	8010134 <wait_session_status+0x134>
 801011e:	f04f 0302 	mov.w	r3, #2
 8010122:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8010126:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801012a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 801012e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010130:	f7ff fbec 	bl	800f90c <read_submessage_list>
 8010134:	a914      	add	r1, sp, #80	; 0x50
 8010136:	2204      	movs	r2, #4
 8010138:	4640      	mov	r0, r8
 801013a:	f006 fde5 	bl	8016d08 <uxr_next_input_reliable_buffer_available>
 801013e:	4603      	mov	r3, r0
 8010140:	a914      	add	r1, sp, #80	; 0x50
 8010142:	4620      	mov	r0, r4
 8010144:	2b00      	cmp	r3, #0
 8010146:	d1ea      	bne.n	801011e <wait_session_status+0x11e>
 8010148:	9904      	ldr	r1, [sp, #16]
 801014a:	4632      	mov	r2, r6
 801014c:	4620      	mov	r0, r4
 801014e:	f7ff fa59 	bl	800f604 <write_submessage_acknack.isra.0>
 8010152:	e76f      	b.n	8010034 <wait_session_status+0x34>
 8010154:	4631      	mov	r1, r6
 8010156:	f104 0008 	add.w	r0, r4, #8
 801015a:	f000 fb9b 	bl	8010894 <uxr_get_input_best_effort_stream>
 801015e:	2800      	cmp	r0, #0
 8010160:	f43f af68 	beq.w	8010034 <wait_session_status+0x34>
 8010164:	9902      	ldr	r1, [sp, #8]
 8010166:	f006 fcbb 	bl	8016ae0 <uxr_receive_best_effort_message>
 801016a:	2800      	cmp	r0, #0
 801016c:	f43f af62 	beq.w	8010034 <wait_session_status+0x34>
 8010170:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010176:	a90c      	add	r1, sp, #48	; 0x30
 8010178:	4620      	mov	r0, r4
 801017a:	f7ff fbc7 	bl	800f90c <read_submessage_list>
 801017e:	e759      	b.n	8010034 <wait_session_status+0x34>
 8010180:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010182:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010186:	47a0      	blx	r4
 8010188:	2001      	movs	r0, #1
 801018a:	b01d      	add	sp, #116	; 0x74
 801018c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010190:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010196:	a90c      	add	r1, sp, #48	; 0x30
 8010198:	4620      	mov	r0, r4
 801019a:	f7ff fbb7 	bl	800f90c <read_submessage_list>
 801019e:	e7bc      	b.n	801011a <wait_session_status+0x11a>

080101a0 <uxr_delete_session_retries>:
 80101a0:	b530      	push	{r4, r5, lr}
 80101a2:	b08f      	sub	sp, #60	; 0x3c
 80101a4:	4604      	mov	r4, r0
 80101a6:	460d      	mov	r5, r1
 80101a8:	f000 fa2e 	bl	8010608 <uxr_session_header_offset>
 80101ac:	2300      	movs	r3, #0
 80101ae:	2210      	movs	r2, #16
 80101b0:	9000      	str	r0, [sp, #0]
 80101b2:	a902      	add	r1, sp, #8
 80101b4:	a806      	add	r0, sp, #24
 80101b6:	f7fd f81d 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 80101ba:	a906      	add	r1, sp, #24
 80101bc:	4620      	mov	r0, r4
 80101be:	f000 f973 	bl	80104a8 <uxr_buffer_delete_session>
 80101c2:	2200      	movs	r2, #0
 80101c4:	4611      	mov	r1, r2
 80101c6:	9b06      	ldr	r3, [sp, #24]
 80101c8:	4620      	mov	r0, r4
 80101ca:	f000 f9c7 	bl	801055c <uxr_stamp_session_header>
 80101ce:	a806      	add	r0, sp, #24
 80101d0:	f7fd f84e 	bl	800d270 <ucdr_buffer_length>
 80101d4:	462b      	mov	r3, r5
 80101d6:	4602      	mov	r2, r0
 80101d8:	a902      	add	r1, sp, #8
 80101da:	4620      	mov	r0, r4
 80101dc:	f7ff ff10 	bl	8010000 <wait_session_status>
 80101e0:	b118      	cbz	r0, 80101ea <uxr_delete_session_retries+0x4a>
 80101e2:	7960      	ldrb	r0, [r4, #5]
 80101e4:	fab0 f080 	clz	r0, r0
 80101e8:	0940      	lsrs	r0, r0, #5
 80101ea:	b00f      	add	sp, #60	; 0x3c
 80101ec:	bd30      	pop	{r4, r5, pc}
 80101ee:	bf00      	nop

080101f0 <uxr_create_session>:
 80101f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f4:	f100 0b08 	add.w	fp, r0, #8
 80101f8:	b0ab      	sub	sp, #172	; 0xac
 80101fa:	4604      	mov	r4, r0
 80101fc:	4658      	mov	r0, fp
 80101fe:	f000 fa99 	bl	8010734 <uxr_reset_stream_storage>
 8010202:	4620      	mov	r0, r4
 8010204:	f000 fa00 	bl	8010608 <uxr_session_header_offset>
 8010208:	2300      	movs	r3, #0
 801020a:	9000      	str	r0, [sp, #0]
 801020c:	221c      	movs	r2, #28
 801020e:	a90b      	add	r1, sp, #44	; 0x2c
 8010210:	a812      	add	r0, sp, #72	; 0x48
 8010212:	f7fc ffef 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 8010216:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010218:	8a1a      	ldrh	r2, [r3, #16]
 801021a:	3a04      	subs	r2, #4
 801021c:	b292      	uxth	r2, r2
 801021e:	a912      	add	r1, sp, #72	; 0x48
 8010220:	4620      	mov	r0, r4
 8010222:	f000 f917 	bl	8010454 <uxr_buffer_create_session>
 8010226:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010228:	4620      	mov	r0, r4
 801022a:	f000 f983 	bl	8010534 <uxr_stamp_create_session_header>
 801022e:	a812      	add	r0, sp, #72	; 0x48
 8010230:	f7fd f81e 	bl	800d270 <ucdr_buffer_length>
 8010234:	23ff      	movs	r3, #255	; 0xff
 8010236:	7163      	strb	r3, [r4, #5]
 8010238:	230a      	movs	r3, #10
 801023a:	46da      	mov	sl, fp
 801023c:	9303      	str	r3, [sp, #12]
 801023e:	4683      	mov	fp, r0
 8010240:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010242:	465a      	mov	r2, fp
 8010244:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010248:	a90b      	add	r1, sp, #44	; 0x2c
 801024a:	47a8      	blx	r5
 801024c:	f7fd f854 	bl	800d2f8 <uxr_millis>
 8010250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010254:	4605      	mov	r5, r0
 8010256:	e009      	b.n	801026c <uxr_create_session+0x7c>
 8010258:	f7fd f84e 	bl	800d2f8 <uxr_millis>
 801025c:	1b40      	subs	r0, r0, r5
 801025e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010262:	2b00      	cmp	r3, #0
 8010264:	7962      	ldrb	r2, [r4, #5]
 8010266:	dd38      	ble.n	80102da <uxr_create_session+0xea>
 8010268:	2aff      	cmp	r2, #255	; 0xff
 801026a:	d13c      	bne.n	80102e6 <uxr_create_session+0xf6>
 801026c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801026e:	a907      	add	r1, sp, #28
 8010270:	6896      	ldr	r6, [r2, #8]
 8010272:	6810      	ldr	r0, [r2, #0]
 8010274:	aa08      	add	r2, sp, #32
 8010276:	47b0      	blx	r6
 8010278:	2800      	cmp	r0, #0
 801027a:	d0ed      	beq.n	8010258 <uxr_create_session+0x68>
 801027c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010280:	a81a      	add	r0, sp, #104	; 0x68
 8010282:	f7fc ffc9 	bl	800d218 <ucdr_init_buffer>
 8010286:	2600      	movs	r6, #0
 8010288:	f10d 031a 	add.w	r3, sp, #26
 801028c:	aa06      	add	r2, sp, #24
 801028e:	a91a      	add	r1, sp, #104	; 0x68
 8010290:	4620      	mov	r0, r4
 8010292:	f88d 6018 	strb.w	r6, [sp, #24]
 8010296:	f000 f975 	bl	8010584 <uxr_read_session_header>
 801029a:	2800      	cmp	r0, #0
 801029c:	d0dc      	beq.n	8010258 <uxr_create_session+0x68>
 801029e:	4631      	mov	r1, r6
 80102a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80102a4:	f000 fa12 	bl	80106cc <uxr_stream_id_from_raw>
 80102a8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80102ac:	2e01      	cmp	r6, #1
 80102ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80102b2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80102b6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80102ba:	d053      	beq.n	8010364 <uxr_create_session+0x174>
 80102bc:	2e02      	cmp	r6, #2
 80102be:	d018      	beq.n	80102f2 <uxr_create_session+0x102>
 80102c0:	2e00      	cmp	r6, #0
 80102c2:	d1c9      	bne.n	8010258 <uxr_create_session+0x68>
 80102c4:	4631      	mov	r1, r6
 80102c6:	4630      	mov	r0, r6
 80102c8:	f000 fa00 	bl	80106cc <uxr_stream_id_from_raw>
 80102cc:	a91a      	add	r1, sp, #104	; 0x68
 80102ce:	4602      	mov	r2, r0
 80102d0:	900a      	str	r0, [sp, #40]	; 0x28
 80102d2:	4620      	mov	r0, r4
 80102d4:	f7ff fb1a 	bl	800f90c <read_submessage_list>
 80102d8:	e7be      	b.n	8010258 <uxr_create_session+0x68>
 80102da:	9b03      	ldr	r3, [sp, #12]
 80102dc:	3b01      	subs	r3, #1
 80102de:	9303      	str	r3, [sp, #12]
 80102e0:	d001      	beq.n	80102e6 <uxr_create_session+0xf6>
 80102e2:	2aff      	cmp	r2, #255	; 0xff
 80102e4:	d0ac      	beq.n	8010240 <uxr_create_session+0x50>
 80102e6:	2a00      	cmp	r2, #0
 80102e8:	d051      	beq.n	801038e <uxr_create_session+0x19e>
 80102ea:	2000      	movs	r0, #0
 80102ec:	b02b      	add	sp, #172	; 0xac
 80102ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80102f6:	9304      	str	r3, [sp, #16]
 80102f8:	4639      	mov	r1, r7
 80102fa:	4650      	mov	r0, sl
 80102fc:	f000 fad4 	bl	80108a8 <uxr_get_input_reliable_stream>
 8010300:	4680      	mov	r8, r0
 8010302:	b348      	cbz	r0, 8010358 <uxr_create_session+0x168>
 8010304:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010306:	9205      	str	r2, [sp, #20]
 8010308:	a81a      	add	r0, sp, #104	; 0x68
 801030a:	f7fc ffb5 	bl	800d278 <ucdr_buffer_remaining>
 801030e:	4603      	mov	r3, r0
 8010310:	f10d 0019 	add.w	r0, sp, #25
 8010314:	9000      	str	r0, [sp, #0]
 8010316:	9a05      	ldr	r2, [sp, #20]
 8010318:	4649      	mov	r1, r9
 801031a:	4640      	mov	r0, r8
 801031c:	f006 fc74 	bl	8016c08 <uxr_receive_reliable_message>
 8010320:	b1d0      	cbz	r0, 8010358 <uxr_create_session+0x168>
 8010322:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d038      	beq.n	801039c <uxr_create_session+0x1ac>
 801032a:	9e04      	ldr	r6, [sp, #16]
 801032c:	e00a      	b.n	8010344 <uxr_create_session+0x154>
 801032e:	f04f 0302 	mov.w	r3, #2
 8010332:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 8010336:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 801033a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801033e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010340:	f7ff fae4 	bl	800f90c <read_submessage_list>
 8010344:	a922      	add	r1, sp, #136	; 0x88
 8010346:	2204      	movs	r2, #4
 8010348:	4640      	mov	r0, r8
 801034a:	f006 fcdd 	bl	8016d08 <uxr_next_input_reliable_buffer_available>
 801034e:	4603      	mov	r3, r0
 8010350:	a922      	add	r1, sp, #136	; 0x88
 8010352:	4620      	mov	r0, r4
 8010354:	2b00      	cmp	r3, #0
 8010356:	d1ea      	bne.n	801032e <uxr_create_session+0x13e>
 8010358:	9904      	ldr	r1, [sp, #16]
 801035a:	463a      	mov	r2, r7
 801035c:	4620      	mov	r0, r4
 801035e:	f7ff f951 	bl	800f604 <write_submessage_acknack.isra.0>
 8010362:	e779      	b.n	8010258 <uxr_create_session+0x68>
 8010364:	4639      	mov	r1, r7
 8010366:	4650      	mov	r0, sl
 8010368:	f000 fa94 	bl	8010894 <uxr_get_input_best_effort_stream>
 801036c:	2800      	cmp	r0, #0
 801036e:	f43f af73 	beq.w	8010258 <uxr_create_session+0x68>
 8010372:	4649      	mov	r1, r9
 8010374:	f006 fbb4 	bl	8016ae0 <uxr_receive_best_effort_message>
 8010378:	2800      	cmp	r0, #0
 801037a:	f43f af6d 	beq.w	8010258 <uxr_create_session+0x68>
 801037e:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010384:	a91a      	add	r1, sp, #104	; 0x68
 8010386:	4620      	mov	r0, r4
 8010388:	f7ff fac0 	bl	800f90c <read_submessage_list>
 801038c:	e764      	b.n	8010258 <uxr_create_session+0x68>
 801038e:	4650      	mov	r0, sl
 8010390:	f000 f9d0 	bl	8010734 <uxr_reset_stream_storage>
 8010394:	2001      	movs	r0, #1
 8010396:	b02b      	add	sp, #172	; 0xac
 8010398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039c:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80103a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103a2:	a91a      	add	r1, sp, #104	; 0x68
 80103a4:	4620      	mov	r0, r4
 80103a6:	f7ff fab1 	bl	800f90c <read_submessage_list>
 80103aa:	e7be      	b.n	801032a <uxr_create_session+0x13a>

080103ac <uxr_prepare_stream_to_write_submessage>:
 80103ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103b0:	b082      	sub	sp, #8
 80103b2:	4682      	mov	sl, r0
 80103b4:	4610      	mov	r0, r2
 80103b6:	4615      	mov	r5, r2
 80103b8:	461e      	mov	r6, r3
 80103ba:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80103be:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80103c2:	9101      	str	r1, [sp, #4]
 80103c4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80103c8:	f000 face 	bl	8010968 <uxr_submessage_padding>
 80103cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80103d0:	f105 0904 	add.w	r9, r5, #4
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	4481      	add	r9, r0
 80103d8:	d01d      	beq.n	8010416 <uxr_prepare_stream_to_write_submessage+0x6a>
 80103da:	2b02      	cmp	r3, #2
 80103dc:	d116      	bne.n	801040c <uxr_prepare_stream_to_write_submessage+0x60>
 80103de:	4621      	mov	r1, r4
 80103e0:	f10a 0008 	add.w	r0, sl, #8
 80103e4:	f000 fa4c 	bl	8010880 <uxr_get_output_reliable_stream>
 80103e8:	4604      	mov	r4, r0
 80103ea:	b158      	cbz	r0, 8010404 <uxr_prepare_stream_to_write_submessage+0x58>
 80103ec:	4649      	mov	r1, r9
 80103ee:	4632      	mov	r2, r6
 80103f0:	f006 fe46 	bl	8017080 <uxr_prepare_reliable_buffer_to_write>
 80103f4:	4604      	mov	r4, r0
 80103f6:	b12c      	cbz	r4, 8010404 <uxr_prepare_stream_to_write_submessage+0x58>
 80103f8:	4643      	mov	r3, r8
 80103fa:	b2aa      	uxth	r2, r5
 80103fc:	4639      	mov	r1, r7
 80103fe:	4630      	mov	r0, r6
 8010400:	f000 fa72 	bl	80108e8 <uxr_buffer_submessage_header>
 8010404:	4620      	mov	r0, r4
 8010406:	b002      	add	sp, #8
 8010408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801040c:	2400      	movs	r4, #0
 801040e:	4620      	mov	r0, r4
 8010410:	b002      	add	sp, #8
 8010412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010416:	4621      	mov	r1, r4
 8010418:	f10a 0008 	add.w	r0, sl, #8
 801041c:	f000 fa28 	bl	8010870 <uxr_get_output_best_effort_stream>
 8010420:	4604      	mov	r4, r0
 8010422:	2800      	cmp	r0, #0
 8010424:	d0ee      	beq.n	8010404 <uxr_prepare_stream_to_write_submessage+0x58>
 8010426:	4649      	mov	r1, r9
 8010428:	4632      	mov	r2, r6
 801042a:	f006 fd59 	bl	8016ee0 <uxr_prepare_best_effort_buffer_to_write>
 801042e:	4604      	mov	r4, r0
 8010430:	e7e1      	b.n	80103f6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8010432:	bf00      	nop

08010434 <uxr_init_session_info>:
 8010434:	0e13      	lsrs	r3, r2, #24
 8010436:	7043      	strb	r3, [r0, #1]
 8010438:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801043c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010440:	7001      	strb	r1, [r0, #0]
 8010442:	70c3      	strb	r3, [r0, #3]
 8010444:	2109      	movs	r1, #9
 8010446:	23ff      	movs	r3, #255	; 0xff
 8010448:	f880 c002 	strb.w	ip, [r0, #2]
 801044c:	7102      	strb	r2, [r0, #4]
 801044e:	80c1      	strh	r1, [r0, #6]
 8010450:	7143      	strb	r3, [r0, #5]
 8010452:	4770      	bx	lr

08010454 <uxr_buffer_create_session>:
 8010454:	b530      	push	{r4, r5, lr}
 8010456:	b089      	sub	sp, #36	; 0x24
 8010458:	2300      	movs	r3, #0
 801045a:	4d12      	ldr	r5, [pc, #72]	; (80104a4 <uxr_buffer_create_session+0x50>)
 801045c:	9307      	str	r3, [sp, #28]
 801045e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010462:	2201      	movs	r2, #1
 8010464:	9301      	str	r3, [sp, #4]
 8010466:	80c2      	strh	r2, [r0, #6]
 8010468:	f88d 2004 	strb.w	r2, [sp, #4]
 801046c:	682a      	ldr	r2, [r5, #0]
 801046e:	9200      	str	r2, [sp, #0]
 8010470:	88aa      	ldrh	r2, [r5, #4]
 8010472:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010476:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801047a:	9202      	str	r2, [sp, #8]
 801047c:	460c      	mov	r4, r1
 801047e:	7802      	ldrb	r2, [r0, #0]
 8010480:	9303      	str	r3, [sp, #12]
 8010482:	4619      	mov	r1, r3
 8010484:	f88d 200c 	strb.w	r2, [sp, #12]
 8010488:	4620      	mov	r0, r4
 801048a:	2210      	movs	r2, #16
 801048c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010490:	9306      	str	r3, [sp, #24]
 8010492:	f000 fa29 	bl	80108e8 <uxr_buffer_submessage_header>
 8010496:	4669      	mov	r1, sp
 8010498:	4620      	mov	r0, r4
 801049a:	f001 fa3d 	bl	8011918 <uxr_serialize_CREATE_CLIENT_Payload>
 801049e:	b009      	add	sp, #36	; 0x24
 80104a0:	bd30      	pop	{r4, r5, pc}
 80104a2:	bf00      	nop
 80104a4:	0801a28c 	.word	0x0801a28c

080104a8 <uxr_buffer_delete_session>:
 80104a8:	b510      	push	{r4, lr}
 80104aa:	4b0c      	ldr	r3, [pc, #48]	; (80104dc <uxr_buffer_delete_session+0x34>)
 80104ac:	b082      	sub	sp, #8
 80104ae:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80104b2:	f8ad c006 	strh.w	ip, [sp, #6]
 80104b6:	460c      	mov	r4, r1
 80104b8:	2202      	movs	r2, #2
 80104ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104be:	80c2      	strh	r2, [r0, #6]
 80104c0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80104c4:	2204      	movs	r2, #4
 80104c6:	2300      	movs	r3, #0
 80104c8:	2103      	movs	r1, #3
 80104ca:	4620      	mov	r0, r4
 80104cc:	f000 fa0c 	bl	80108e8 <uxr_buffer_submessage_header>
 80104d0:	a901      	add	r1, sp, #4
 80104d2:	4620      	mov	r0, r4
 80104d4:	f001 fac6 	bl	8011a64 <uxr_serialize_DELETE_Payload>
 80104d8:	b002      	add	sp, #8
 80104da:	bd10      	pop	{r4, pc}
 80104dc:	0801a28c 	.word	0x0801a28c

080104e0 <uxr_read_create_session_status>:
 80104e0:	b510      	push	{r4, lr}
 80104e2:	b088      	sub	sp, #32
 80104e4:	4604      	mov	r4, r0
 80104e6:	4608      	mov	r0, r1
 80104e8:	a901      	add	r1, sp, #4
 80104ea:	f001 facb 	bl	8011a84 <uxr_deserialize_STATUS_AGENT_Payload>
 80104ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80104f2:	7163      	strb	r3, [r4, #5]
 80104f4:	b008      	add	sp, #32
 80104f6:	bd10      	pop	{r4, pc}

080104f8 <uxr_read_delete_session_status>:
 80104f8:	b510      	push	{r4, lr}
 80104fa:	4604      	mov	r4, r0
 80104fc:	b084      	sub	sp, #16
 80104fe:	4608      	mov	r0, r1
 8010500:	a902      	add	r1, sp, #8
 8010502:	f001 faef 	bl	8011ae4 <uxr_deserialize_STATUS_Payload>
 8010506:	88e3      	ldrh	r3, [r4, #6]
 8010508:	2b02      	cmp	r3, #2
 801050a:	d001      	beq.n	8010510 <uxr_read_delete_session_status+0x18>
 801050c:	b004      	add	sp, #16
 801050e:	bd10      	pop	{r4, pc}
 8010510:	f10d 000a 	add.w	r0, sp, #10
 8010514:	f7fe fffc 	bl	800f510 <uxr_object_id_from_raw>
 8010518:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801051c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010520:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010524:	b29b      	uxth	r3, r3
 8010526:	2b02      	cmp	r3, #2
 8010528:	bf04      	itt	eq
 801052a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801052e:	7163      	strbeq	r3, [r4, #5]
 8010530:	b004      	add	sp, #16
 8010532:	bd10      	pop	{r4, pc}

08010534 <uxr_stamp_create_session_header>:
 8010534:	b510      	push	{r4, lr}
 8010536:	2208      	movs	r2, #8
 8010538:	b08a      	sub	sp, #40	; 0x28
 801053a:	4604      	mov	r4, r0
 801053c:	eb0d 0002 	add.w	r0, sp, r2
 8010540:	f7fc fe6a 	bl	800d218 <ucdr_init_buffer>
 8010544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010548:	9400      	str	r4, [sp, #0]
 801054a:	2300      	movs	r3, #0
 801054c:	461a      	mov	r2, r3
 801054e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010552:	a802      	add	r0, sp, #8
 8010554:	f000 fb92 	bl	8010c7c <uxr_serialize_message_header>
 8010558:	b00a      	add	sp, #40	; 0x28
 801055a:	bd10      	pop	{r4, pc}

0801055c <uxr_stamp_session_header>:
 801055c:	b530      	push	{r4, r5, lr}
 801055e:	b08d      	sub	sp, #52	; 0x34
 8010560:	4604      	mov	r4, r0
 8010562:	460d      	mov	r5, r1
 8010564:	9203      	str	r2, [sp, #12]
 8010566:	4619      	mov	r1, r3
 8010568:	a804      	add	r0, sp, #16
 801056a:	2208      	movs	r2, #8
 801056c:	f7fc fe54 	bl	800d218 <ucdr_init_buffer>
 8010570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010574:	9b03      	ldr	r3, [sp, #12]
 8010576:	9400      	str	r4, [sp, #0]
 8010578:	462a      	mov	r2, r5
 801057a:	a804      	add	r0, sp, #16
 801057c:	f000 fb7e 	bl	8010c7c <uxr_serialize_message_header>
 8010580:	b00d      	add	sp, #52	; 0x34
 8010582:	bd30      	pop	{r4, r5, pc}

08010584 <uxr_read_session_header>:
 8010584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010588:	4607      	mov	r7, r0
 801058a:	b084      	sub	sp, #16
 801058c:	4608      	mov	r0, r1
 801058e:	460c      	mov	r4, r1
 8010590:	4615      	mov	r5, r2
 8010592:	461e      	mov	r6, r3
 8010594:	f7fc fe70 	bl	800d278 <ucdr_buffer_remaining>
 8010598:	2808      	cmp	r0, #8
 801059a:	d803      	bhi.n	80105a4 <uxr_read_session_header+0x20>
 801059c:	2000      	movs	r0, #0
 801059e:	b004      	add	sp, #16
 80105a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a4:	f10d 080c 	add.w	r8, sp, #12
 80105a8:	4633      	mov	r3, r6
 80105aa:	462a      	mov	r2, r5
 80105ac:	f8cd 8000 	str.w	r8, [sp]
 80105b0:	4620      	mov	r0, r4
 80105b2:	f10d 010b 	add.w	r1, sp, #11
 80105b6:	f000 fb7f 	bl	8010cb8 <uxr_deserialize_message_header>
 80105ba:	783a      	ldrb	r2, [r7, #0]
 80105bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d1eb      	bne.n	801059c <uxr_read_session_header+0x18>
 80105c4:	061b      	lsls	r3, r3, #24
 80105c6:	d41c      	bmi.n	8010602 <uxr_read_session_header+0x7e>
 80105c8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80105cc:	787b      	ldrb	r3, [r7, #1]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d003      	beq.n	80105da <uxr_read_session_header+0x56>
 80105d2:	2001      	movs	r0, #1
 80105d4:	f080 0001 	eor.w	r0, r0, #1
 80105d8:	e7e1      	b.n	801059e <uxr_read_session_header+0x1a>
 80105da:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80105de:	78bb      	ldrb	r3, [r7, #2]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	f107 0102 	add.w	r1, r7, #2
 80105e6:	d1f4      	bne.n	80105d2 <uxr_read_session_header+0x4e>
 80105e8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80105ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d1ee      	bne.n	80105d2 <uxr_read_session_header+0x4e>
 80105f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80105f8:	784b      	ldrb	r3, [r1, #1]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d1e9      	bne.n	80105d2 <uxr_read_session_header+0x4e>
 80105fe:	2000      	movs	r0, #0
 8010600:	e7e8      	b.n	80105d4 <uxr_read_session_header+0x50>
 8010602:	2001      	movs	r0, #1
 8010604:	e7cb      	b.n	801059e <uxr_read_session_header+0x1a>
 8010606:	bf00      	nop

08010608 <uxr_session_header_offset>:
 8010608:	f990 3000 	ldrsb.w	r3, [r0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	bfac      	ite	ge
 8010610:	2008      	movge	r0, #8
 8010612:	2004      	movlt	r0, #4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop

08010618 <uxr_init_base_object_request>:
 8010618:	b510      	push	{r4, lr}
 801061a:	88c3      	ldrh	r3, [r0, #6]
 801061c:	b082      	sub	sp, #8
 801061e:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8010622:	9101      	str	r1, [sp, #4]
 8010624:	f1a3 010a 	sub.w	r1, r3, #10
 8010628:	b289      	uxth	r1, r1
 801062a:	42a1      	cmp	r1, r4
 801062c:	d80e      	bhi.n	801064c <uxr_init_base_object_request+0x34>
 801062e:	3301      	adds	r3, #1
 8010630:	b29c      	uxth	r4, r3
 8010632:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010636:	b2db      	uxtb	r3, r3
 8010638:	80c4      	strh	r4, [r0, #6]
 801063a:	9801      	ldr	r0, [sp, #4]
 801063c:	7011      	strb	r1, [r2, #0]
 801063e:	7053      	strb	r3, [r2, #1]
 8010640:	1c91      	adds	r1, r2, #2
 8010642:	f7fe ff79 	bl	800f538 <uxr_object_id_to_raw>
 8010646:	4620      	mov	r0, r4
 8010648:	b002      	add	sp, #8
 801064a:	bd10      	pop	{r4, pc}
 801064c:	230a      	movs	r3, #10
 801064e:	2100      	movs	r1, #0
 8010650:	461c      	mov	r4, r3
 8010652:	e7f1      	b.n	8010638 <uxr_init_base_object_request+0x20>

08010654 <uxr_parse_base_object_request>:
 8010654:	b570      	push	{r4, r5, r6, lr}
 8010656:	4604      	mov	r4, r0
 8010658:	3002      	adds	r0, #2
 801065a:	460d      	mov	r5, r1
 801065c:	4616      	mov	r6, r2
 801065e:	f7fe ff57 	bl	800f510 <uxr_object_id_from_raw>
 8010662:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010666:	8028      	strh	r0, [r5, #0]
 8010668:	806b      	strh	r3, [r5, #2]
 801066a:	7822      	ldrb	r2, [r4, #0]
 801066c:	7863      	ldrb	r3, [r4, #1]
 801066e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010672:	8033      	strh	r3, [r6, #0]
 8010674:	bd70      	pop	{r4, r5, r6, pc}
 8010676:	bf00      	nop

08010678 <uxr_stream_id>:
 8010678:	2901      	cmp	r1, #1
 801067a:	b082      	sub	sp, #8
 801067c:	d01d      	beq.n	80106ba <uxr_stream_id+0x42>
 801067e:	2902      	cmp	r1, #2
 8010680:	f04f 0c00 	mov.w	ip, #0
 8010684:	d01e      	beq.n	80106c4 <uxr_stream_id+0x4c>
 8010686:	2300      	movs	r3, #0
 8010688:	f36c 0307 	bfi	r3, ip, #0, #8
 801068c:	f360 230f 	bfi	r3, r0, #8, #8
 8010690:	f361 4317 	bfi	r3, r1, #16, #8
 8010694:	f362 631f 	bfi	r3, r2, #24, #8
 8010698:	b2da      	uxtb	r2, r3
 801069a:	2000      	movs	r0, #0
 801069c:	f362 0007 	bfi	r0, r2, #0, #8
 80106a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80106a4:	f362 200f 	bfi	r0, r2, #8, #8
 80106a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80106ac:	f362 4017 	bfi	r0, r2, #16, #8
 80106b0:	0e1b      	lsrs	r3, r3, #24
 80106b2:	f363 601f 	bfi	r0, r3, #24, #8
 80106b6:	b002      	add	sp, #8
 80106b8:	4770      	bx	lr
 80106ba:	f100 0c01 	add.w	ip, r0, #1
 80106be:	fa5f fc8c 	uxtb.w	ip, ip
 80106c2:	e7e0      	b.n	8010686 <uxr_stream_id+0xe>
 80106c4:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 80106c8:	e7dd      	b.n	8010686 <uxr_stream_id+0xe>
 80106ca:	bf00      	nop

080106cc <uxr_stream_id_from_raw>:
 80106cc:	b082      	sub	sp, #8
 80106ce:	b130      	cbz	r0, 80106de <uxr_stream_id_from_raw+0x12>
 80106d0:	0603      	lsls	r3, r0, #24
 80106d2:	d420      	bmi.n	8010716 <uxr_stream_id_from_raw+0x4a>
 80106d4:	1e42      	subs	r2, r0, #1
 80106d6:	b2d2      	uxtb	r2, r2
 80106d8:	f04f 0c01 	mov.w	ip, #1
 80106dc:	e001      	b.n	80106e2 <uxr_stream_id_from_raw+0x16>
 80106de:	4684      	mov	ip, r0
 80106e0:	4602      	mov	r2, r0
 80106e2:	2300      	movs	r3, #0
 80106e4:	f360 0307 	bfi	r3, r0, #0, #8
 80106e8:	f362 230f 	bfi	r3, r2, #8, #8
 80106ec:	f36c 4317 	bfi	r3, ip, #16, #8
 80106f0:	f361 631f 	bfi	r3, r1, #24, #8
 80106f4:	b2da      	uxtb	r2, r3
 80106f6:	2000      	movs	r0, #0
 80106f8:	f362 0007 	bfi	r0, r2, #0, #8
 80106fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010700:	f362 200f 	bfi	r0, r2, #8, #8
 8010704:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010708:	f362 4017 	bfi	r0, r2, #16, #8
 801070c:	0e1b      	lsrs	r3, r3, #24
 801070e:	f363 601f 	bfi	r0, r3, #24, #8
 8010712:	b002      	add	sp, #8
 8010714:	4770      	bx	lr
 8010716:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801071a:	f04f 0c02 	mov.w	ip, #2
 801071e:	e7e0      	b.n	80106e2 <uxr_stream_id_from_raw+0x16>

08010720 <uxr_init_stream_storage>:
 8010720:	2300      	movs	r3, #0
 8010722:	7403      	strb	r3, [r0, #16]
 8010724:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8010728:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801072c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop

08010734 <uxr_reset_stream_storage>:
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	7c03      	ldrb	r3, [r0, #16]
 8010738:	4604      	mov	r4, r0
 801073a:	b153      	cbz	r3, 8010752 <uxr_reset_stream_storage+0x1e>
 801073c:	4606      	mov	r6, r0
 801073e:	2500      	movs	r5, #0
 8010740:	4630      	mov	r0, r6
 8010742:	f006 fbc7 	bl	8016ed4 <uxr_reset_output_best_effort_stream>
 8010746:	7c23      	ldrb	r3, [r4, #16]
 8010748:	3501      	adds	r5, #1
 801074a:	42ab      	cmp	r3, r5
 801074c:	f106 0610 	add.w	r6, r6, #16
 8010750:	d8f6      	bhi.n	8010740 <uxr_reset_stream_storage+0xc>
 8010752:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010756:	b163      	cbz	r3, 8010772 <uxr_reset_stream_storage+0x3e>
 8010758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801075c:	2500      	movs	r5, #0
 801075e:	4630      	mov	r0, r6
 8010760:	f006 f9ba 	bl	8016ad8 <uxr_reset_input_best_effort_stream>
 8010764:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010768:	3501      	adds	r5, #1
 801076a:	42ab      	cmp	r3, r5
 801076c:	f106 0602 	add.w	r6, r6, #2
 8010770:	d8f5      	bhi.n	801075e <uxr_reset_stream_storage+0x2a>
 8010772:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8010776:	b163      	cbz	r3, 8010792 <uxr_reset_stream_storage+0x5e>
 8010778:	f104 0618 	add.w	r6, r4, #24
 801077c:	2500      	movs	r5, #0
 801077e:	4630      	mov	r0, r6
 8010780:	f006 fc54 	bl	801702c <uxr_reset_output_reliable_stream>
 8010784:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8010788:	3501      	adds	r5, #1
 801078a:	42ab      	cmp	r3, r5
 801078c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8010790:	d8f5      	bhi.n	801077e <uxr_reset_stream_storage+0x4a>
 8010792:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8010796:	b163      	cbz	r3, 80107b2 <uxr_reset_stream_storage+0x7e>
 8010798:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801079c:	2500      	movs	r5, #0
 801079e:	4630      	mov	r0, r6
 80107a0:	f006 fa0e 	bl	8016bc0 <uxr_reset_input_reliable_stream>
 80107a4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80107a8:	3501      	adds	r5, #1
 80107aa:	42ab      	cmp	r3, r5
 80107ac:	f106 0618 	add.w	r6, r6, #24
 80107b0:	d8f5      	bhi.n	801079e <uxr_reset_stream_storage+0x6a>
 80107b2:	bd70      	pop	{r4, r5, r6, pc}

080107b4 <uxr_add_output_best_effort_buffer>:
 80107b4:	b510      	push	{r4, lr}
 80107b6:	7c04      	ldrb	r4, [r0, #16]
 80107b8:	f104 0c01 	add.w	ip, r4, #1
 80107bc:	b082      	sub	sp, #8
 80107be:	f880 c010 	strb.w	ip, [r0, #16]
 80107c2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80107c6:	f006 fb7b 	bl	8016ec0 <uxr_init_output_best_effort_stream>
 80107ca:	2201      	movs	r2, #1
 80107cc:	4611      	mov	r1, r2
 80107ce:	4620      	mov	r0, r4
 80107d0:	b002      	add	sp, #8
 80107d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107d6:	f7ff bf4f 	b.w	8010678 <uxr_stream_id>
 80107da:	bf00      	nop

080107dc <uxr_add_output_reliable_buffer>:
 80107dc:	b510      	push	{r4, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	4684      	mov	ip, r0
 80107e2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80107e6:	9000      	str	r0, [sp, #0]
 80107e8:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80107ec:	2028      	movs	r0, #40	; 0x28
 80107ee:	fb00 c004 	mla	r0, r0, r4, ip
 80107f2:	f104 0e01 	add.w	lr, r4, #1
 80107f6:	3018      	adds	r0, #24
 80107f8:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80107fc:	f006 fbde 	bl	8016fbc <uxr_init_output_reliable_stream>
 8010800:	2201      	movs	r2, #1
 8010802:	2102      	movs	r1, #2
 8010804:	4620      	mov	r0, r4
 8010806:	b004      	add	sp, #16
 8010808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801080c:	f7ff bf34 	b.w	8010678 <uxr_stream_id>

08010810 <uxr_add_input_best_effort_buffer>:
 8010810:	b510      	push	{r4, lr}
 8010812:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8010816:	4603      	mov	r3, r0
 8010818:	1c62      	adds	r2, r4, #1
 801081a:	f104 0021 	add.w	r0, r4, #33	; 0x21
 801081e:	b082      	sub	sp, #8
 8010820:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010828:	f006 f952 	bl	8016ad0 <uxr_init_input_best_effort_stream>
 801082c:	2200      	movs	r2, #0
 801082e:	2101      	movs	r1, #1
 8010830:	4620      	mov	r0, r4
 8010832:	b002      	add	sp, #8
 8010834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010838:	f7ff bf1e 	b.w	8010678 <uxr_stream_id>

0801083c <uxr_add_input_reliable_buffer>:
 801083c:	b510      	push	{r4, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	4684      	mov	ip, r0
 8010842:	9806      	ldr	r0, [sp, #24]
 8010844:	9000      	str	r0, [sp, #0]
 8010846:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 801084a:	2018      	movs	r0, #24
 801084c:	fb00 c004 	mla	r0, r0, r4, ip
 8010850:	f104 0e01 	add.w	lr, r4, #1
 8010854:	3048      	adds	r0, #72	; 0x48
 8010856:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801085a:	f006 f985 	bl	8016b68 <uxr_init_input_reliable_stream>
 801085e:	2200      	movs	r2, #0
 8010860:	2102      	movs	r1, #2
 8010862:	4620      	mov	r0, r4
 8010864:	b004      	add	sp, #16
 8010866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801086a:	f7ff bf05 	b.w	8010678 <uxr_stream_id>
 801086e:	bf00      	nop

08010870 <uxr_get_output_best_effort_stream>:
 8010870:	7c03      	ldrb	r3, [r0, #16]
 8010872:	428b      	cmp	r3, r1
 8010874:	bf8c      	ite	hi
 8010876:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801087a:	2000      	movls	r0, #0
 801087c:	4770      	bx	lr
 801087e:	bf00      	nop

08010880 <uxr_get_output_reliable_stream>:
 8010880:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8010884:	428b      	cmp	r3, r1
 8010886:	bf83      	ittte	hi
 8010888:	2328      	movhi	r3, #40	; 0x28
 801088a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801088e:	3018      	addhi	r0, #24
 8010890:	2000      	movls	r0, #0
 8010892:	4770      	bx	lr

08010894 <uxr_get_input_best_effort_stream>:
 8010894:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010898:	428b      	cmp	r3, r1
 801089a:	bf86      	itte	hi
 801089c:	3121      	addhi	r1, #33	; 0x21
 801089e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80108a2:	2000      	movls	r0, #0
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop

080108a8 <uxr_get_input_reliable_stream>:
 80108a8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80108ac:	428b      	cmp	r3, r1
 80108ae:	bf83      	ittte	hi
 80108b0:	2318      	movhi	r3, #24
 80108b2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80108b6:	3048      	addhi	r0, #72	; 0x48
 80108b8:	2000      	movls	r0, #0
 80108ba:	4770      	bx	lr

080108bc <uxr_output_streams_confirmed>:
 80108bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80108c0:	b183      	cbz	r3, 80108e4 <uxr_output_streams_confirmed+0x28>
 80108c2:	b570      	push	{r4, r5, r6, lr}
 80108c4:	4606      	mov	r6, r0
 80108c6:	f100 0518 	add.w	r5, r0, #24
 80108ca:	2400      	movs	r4, #0
 80108cc:	e001      	b.n	80108d2 <uxr_output_streams_confirmed+0x16>
 80108ce:	3528      	adds	r5, #40	; 0x28
 80108d0:	b138      	cbz	r0, 80108e2 <uxr_output_streams_confirmed+0x26>
 80108d2:	4628      	mov	r0, r5
 80108d4:	f006 fe1a 	bl	801750c <uxr_is_output_up_to_date>
 80108d8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80108dc:	3401      	adds	r4, #1
 80108de:	42a3      	cmp	r3, r4
 80108e0:	d8f5      	bhi.n	80108ce <uxr_output_streams_confirmed+0x12>
 80108e2:	bd70      	pop	{r4, r5, r6, pc}
 80108e4:	2001      	movs	r0, #1
 80108e6:	4770      	bx	lr

080108e8 <uxr_buffer_submessage_header>:
 80108e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ea:	4604      	mov	r4, r0
 80108ec:	460e      	mov	r6, r1
 80108ee:	2104      	movs	r1, #4
 80108f0:	4615      	mov	r5, r2
 80108f2:	461f      	mov	r7, r3
 80108f4:	f7fc fcaa 	bl	800d24c <ucdr_align_to>
 80108f8:	2301      	movs	r3, #1
 80108fa:	ea47 0203 	orr.w	r2, r7, r3
 80108fe:	4631      	mov	r1, r6
 8010900:	7523      	strb	r3, [r4, #20]
 8010902:	4620      	mov	r0, r4
 8010904:	462b      	mov	r3, r5
 8010906:	f000 f9f7 	bl	8010cf8 <uxr_serialize_submessage_header>
 801090a:	4620      	mov	r0, r4
 801090c:	f7fc fcb4 	bl	800d278 <ucdr_buffer_remaining>
 8010910:	42a8      	cmp	r0, r5
 8010912:	bf34      	ite	cc
 8010914:	2000      	movcc	r0, #0
 8010916:	2001      	movcs	r0, #1
 8010918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801091a:	bf00      	nop

0801091c <uxr_read_submessage_header>:
 801091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010920:	4604      	mov	r4, r0
 8010922:	460d      	mov	r5, r1
 8010924:	2104      	movs	r1, #4
 8010926:	4616      	mov	r6, r2
 8010928:	4698      	mov	r8, r3
 801092a:	f7fc fc8f 	bl	800d24c <ucdr_align_to>
 801092e:	4620      	mov	r0, r4
 8010930:	f7fc fca2 	bl	800d278 <ucdr_buffer_remaining>
 8010934:	2803      	cmp	r0, #3
 8010936:	bf8c      	ite	hi
 8010938:	2701      	movhi	r7, #1
 801093a:	2700      	movls	r7, #0
 801093c:	d802      	bhi.n	8010944 <uxr_read_submessage_header+0x28>
 801093e:	4638      	mov	r0, r7
 8010940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010944:	4633      	mov	r3, r6
 8010946:	4642      	mov	r2, r8
 8010948:	4620      	mov	r0, r4
 801094a:	4629      	mov	r1, r5
 801094c:	f000 f9e8 	bl	8010d20 <uxr_deserialize_submessage_header>
 8010950:	f898 3000 	ldrb.w	r3, [r8]
 8010954:	f003 0201 	and.w	r2, r3, #1
 8010958:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801095c:	f888 3000 	strb.w	r3, [r8]
 8010960:	7522      	strb	r2, [r4, #20]
 8010962:	4638      	mov	r0, r7
 8010964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010968 <uxr_submessage_padding>:
 8010968:	f010 0003 	ands.w	r0, r0, #3
 801096c:	bf18      	it	ne
 801096e:	f1c0 0004 	rsbne	r0, r0, #4
 8010972:	4770      	bx	lr

08010974 <on_full_output_buffer_fragmented>:
 8010974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010978:	460c      	mov	r4, r1
 801097a:	b08a      	sub	sp, #40	; 0x28
 801097c:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8010980:	4606      	mov	r6, r0
 8010982:	f104 0008 	add.w	r0, r4, #8
 8010986:	f7ff ff7b 	bl	8010880 <uxr_get_output_reliable_stream>
 801098a:	4605      	mov	r5, r0
 801098c:	f006 fdc8 	bl	8017520 <get_available_free_slots>
 8010990:	b968      	cbnz	r0, 80109ae <on_full_output_buffer_fragmented+0x3a>
 8010992:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8010996:	4620      	mov	r0, r4
 8010998:	4798      	blx	r3
 801099a:	b918      	cbnz	r0, 80109a4 <on_full_output_buffer_fragmented+0x30>
 801099c:	2001      	movs	r0, #1
 801099e:	b00a      	add	sp, #40	; 0x28
 80109a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a4:	4628      	mov	r0, r5
 80109a6:	f006 fdbb 	bl	8017520 <get_available_free_slots>
 80109aa:	2800      	cmp	r0, #0
 80109ac:	d0f6      	beq.n	801099c <on_full_output_buffer_fragmented+0x28>
 80109ae:	8929      	ldrh	r1, [r5, #8]
 80109b0:	89eb      	ldrh	r3, [r5, #14]
 80109b2:	7b28      	ldrb	r0, [r5, #12]
 80109b4:	686a      	ldr	r2, [r5, #4]
 80109b6:	fbb2 f8f1 	udiv	r8, r2, r1
 80109ba:	fbb3 f2f1 	udiv	r2, r3, r1
 80109be:	fb01 3112 	mls	r1, r1, r2, r3
 80109c2:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 80109c6:	b289      	uxth	r1, r1
 80109c8:	fb08 f101 	mul.w	r1, r8, r1
 80109cc:	30fc      	adds	r0, #252	; 0xfc
 80109ce:	f1a8 0804 	sub.w	r8, r8, #4
 80109d2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80109d6:	4440      	add	r0, r8
 80109d8:	b287      	uxth	r7, r0
 80109da:	1bdb      	subs	r3, r3, r7
 80109dc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	3104      	adds	r1, #4
 80109e4:	4419      	add	r1, r3
 80109e6:	4642      	mov	r2, r8
 80109e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109ec:	9300      	str	r3, [sp, #0]
 80109ee:	a802      	add	r0, sp, #8
 80109f0:	2300      	movs	r3, #0
 80109f2:	f7fc fbff 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 80109f6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80109fa:	f102 0308 	add.w	r3, r2, #8
 80109fe:	4543      	cmp	r3, r8
 8010a00:	d928      	bls.n	8010a54 <on_full_output_buffer_fragmented+0xe0>
 8010a02:	463a      	mov	r2, r7
 8010a04:	2300      	movs	r3, #0
 8010a06:	210d      	movs	r1, #13
 8010a08:	a802      	add	r0, sp, #8
 8010a0a:	f7ff ff6d 	bl	80108e8 <uxr_buffer_submessage_header>
 8010a0e:	8929      	ldrh	r1, [r5, #8]
 8010a10:	89eb      	ldrh	r3, [r5, #14]
 8010a12:	fbb3 f2f1 	udiv	r2, r3, r1
 8010a16:	fb01 3312 	mls	r3, r1, r2, r3
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	686a      	ldr	r2, [r5, #4]
 8010a1e:	fbb2 f2f1 	udiv	r2, r2, r1
 8010a22:	fb02 f303 	mul.w	r3, r2, r3
 8010a26:	682a      	ldr	r2, [r5, #0]
 8010a28:	f842 8003 	str.w	r8, [r2, r3]
 8010a2c:	89e8      	ldrh	r0, [r5, #14]
 8010a2e:	2101      	movs	r1, #1
 8010a30:	f006 fec6 	bl	80177c0 <uxr_seq_num_add>
 8010a34:	9904      	ldr	r1, [sp, #16]
 8010a36:	9a03      	ldr	r2, [sp, #12]
 8010a38:	81e8      	strh	r0, [r5, #14]
 8010a3a:	1a52      	subs	r2, r2, r1
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f7fc fbeb 	bl	800d218 <ucdr_init_buffer>
 8010a42:	4630      	mov	r0, r6
 8010a44:	490f      	ldr	r1, [pc, #60]	; (8010a84 <on_full_output_buffer_fragmented+0x110>)
 8010a46:	4622      	mov	r2, r4
 8010a48:	f7fc fbba 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 8010a4c:	2000      	movs	r0, #0
 8010a4e:	b00a      	add	sp, #40	; 0x28
 8010a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a54:	b292      	uxth	r2, r2
 8010a56:	2302      	movs	r3, #2
 8010a58:	210d      	movs	r1, #13
 8010a5a:	a802      	add	r0, sp, #8
 8010a5c:	f7ff ff44 	bl	80108e8 <uxr_buffer_submessage_header>
 8010a60:	8928      	ldrh	r0, [r5, #8]
 8010a62:	89eb      	ldrh	r3, [r5, #14]
 8010a64:	fbb3 f1f0 	udiv	r1, r3, r0
 8010a68:	fb00 3311 	mls	r3, r0, r1, r3
 8010a6c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8010a70:	6869      	ldr	r1, [r5, #4]
 8010a72:	fbb1 f1f0 	udiv	r1, r1, r0
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	fb01 f303 	mul.w	r3, r1, r3
 8010a7c:	6829      	ldr	r1, [r5, #0]
 8010a7e:	3208      	adds	r2, #8
 8010a80:	50ca      	str	r2, [r1, r3]
 8010a82:	e7d3      	b.n	8010a2c <on_full_output_buffer_fragmented+0xb8>
 8010a84:	08010975 	.word	0x08010975

08010a88 <uxr_prepare_output_stream>:
 8010a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a8a:	b087      	sub	sp, #28
 8010a8c:	2707      	movs	r7, #7
 8010a8e:	9202      	str	r2, [sp, #8]
 8010a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a92:	9103      	str	r1, [sp, #12]
 8010a94:	2500      	movs	r5, #0
 8010a96:	3204      	adds	r2, #4
 8010a98:	e9cd 7500 	strd	r7, r5, [sp]
 8010a9c:	461c      	mov	r4, r3
 8010a9e:	4606      	mov	r6, r0
 8010aa0:	f7ff fc84 	bl	80103ac <uxr_prepare_stream_to_write_submessage>
 8010aa4:	f080 0201 	eor.w	r2, r0, #1
 8010aa8:	b2d2      	uxtb	r2, r2
 8010aaa:	75a2      	strb	r2, [r4, #22]
 8010aac:	b112      	cbz	r2, 8010ab4 <uxr_prepare_output_stream+0x2c>
 8010aae:	4628      	mov	r0, r5
 8010ab0:	b007      	add	sp, #28
 8010ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ab4:	aa05      	add	r2, sp, #20
 8010ab6:	9902      	ldr	r1, [sp, #8]
 8010ab8:	4630      	mov	r0, r6
 8010aba:	f7ff fdad 	bl	8010618 <uxr_init_base_object_request>
 8010abe:	a905      	add	r1, sp, #20
 8010ac0:	4605      	mov	r5, r0
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f001 f88c 	bl	8011be0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010ac8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010acc:	69a6      	ldr	r6, [r4, #24]
 8010ace:	69e7      	ldr	r7, [r4, #28]
 8010ad0:	1a52      	subs	r2, r2, r1
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f7fc fba0 	bl	800d218 <ucdr_init_buffer>
 8010ad8:	4620      	mov	r0, r4
 8010ada:	463a      	mov	r2, r7
 8010adc:	4631      	mov	r1, r6
 8010ade:	f7fc fb6f 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	b007      	add	sp, #28
 8010ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ae8 <uxr_prepare_output_stream_fragmented>:
 8010ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aec:	b091      	sub	sp, #68	; 0x44
 8010aee:	4605      	mov	r5, r0
 8010af0:	9105      	str	r1, [sp, #20]
 8010af2:	3008      	adds	r0, #8
 8010af4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010af8:	461e      	mov	r6, r3
 8010afa:	9204      	str	r2, [sp, #16]
 8010afc:	f7ff fec0 	bl	8010880 <uxr_get_output_reliable_stream>
 8010b00:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010b04:	2b01      	cmp	r3, #1
 8010b06:	f000 8091 	beq.w	8010c2c <uxr_prepare_output_stream_fragmented+0x144>
 8010b0a:	4604      	mov	r4, r0
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	f000 808d 	beq.w	8010c2c <uxr_prepare_output_stream_fragmented+0x144>
 8010b12:	f006 fd05 	bl	8017520 <get_available_free_slots>
 8010b16:	2800      	cmp	r0, #0
 8010b18:	f000 8083 	beq.w	8010c22 <uxr_prepare_output_stream_fragmented+0x13a>
 8010b1c:	8922      	ldrh	r2, [r4, #8]
 8010b1e:	89e7      	ldrh	r7, [r4, #14]
 8010b20:	fbb7 f9f2 	udiv	r9, r7, r2
 8010b24:	fb02 7919 	mls	r9, r2, r9, r7
 8010b28:	fa1f f989 	uxth.w	r9, r9
 8010b2c:	6863      	ldr	r3, [r4, #4]
 8010b2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010b32:	6823      	ldr	r3, [r4, #0]
 8010b34:	9203      	str	r2, [sp, #12]
 8010b36:	fb02 f909 	mul.w	r9, r2, r9
 8010b3a:	f109 0904 	add.w	r9, r9, #4
 8010b3e:	4499      	add	r9, r3
 8010b40:	7b23      	ldrb	r3, [r4, #12]
 8010b42:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010b46:	4543      	cmp	r3, r8
 8010b48:	f1a2 0b04 	sub.w	fp, r2, #4
 8010b4c:	d37a      	bcc.n	8010c44 <uxr_prepare_output_stream_fragmented+0x15c>
 8010b4e:	f1ab 0a04 	sub.w	sl, fp, #4
 8010b52:	ebaa 0a03 	sub.w	sl, sl, r3
 8010b56:	465a      	mov	r2, fp
 8010b58:	2300      	movs	r3, #0
 8010b5a:	4649      	mov	r1, r9
 8010b5c:	a808      	add	r0, sp, #32
 8010b5e:	f8cd 8000 	str.w	r8, [sp]
 8010b62:	f7fc fb47 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 8010b66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010b68:	fa1f fa8a 	uxth.w	sl, sl
 8010b6c:	4652      	mov	r2, sl
 8010b6e:	f103 0a08 	add.w	sl, r3, #8
 8010b72:	45da      	cmp	sl, fp
 8010b74:	bf34      	ite	cc
 8010b76:	2302      	movcc	r3, #2
 8010b78:	2300      	movcs	r3, #0
 8010b7a:	210d      	movs	r1, #13
 8010b7c:	a808      	add	r0, sp, #32
 8010b7e:	f7ff feb3 	bl	80108e8 <uxr_buffer_submessage_header>
 8010b82:	8921      	ldrh	r1, [r4, #8]
 8010b84:	fbb7 f2f1 	udiv	r2, r7, r1
 8010b88:	fb01 7212 	mls	r2, r1, r2, r7
 8010b8c:	b292      	uxth	r2, r2
 8010b8e:	6863      	ldr	r3, [r4, #4]
 8010b90:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b94:	fb02 f303 	mul.w	r3, r2, r3
 8010b98:	6822      	ldr	r2, [r4, #0]
 8010b9a:	4638      	mov	r0, r7
 8010b9c:	f842 b003 	str.w	fp, [r2, r3]
 8010ba0:	2101      	movs	r1, #1
 8010ba2:	f006 fe0d 	bl	80177c0 <uxr_seq_num_add>
 8010ba6:	9b03      	ldr	r3, [sp, #12]
 8010ba8:	f108 0104 	add.w	r1, r8, #4
 8010bac:	f1a3 0208 	sub.w	r2, r3, #8
 8010bb0:	eba2 0208 	sub.w	r2, r2, r8
 8010bb4:	4449      	add	r1, r9
 8010bb6:	4607      	mov	r7, r0
 8010bb8:	4630      	mov	r0, r6
 8010bba:	f7fc fb2d 	bl	800d218 <ucdr_init_buffer>
 8010bbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010bc0:	81e7      	strh	r7, [r4, #14]
 8010bc2:	1d1a      	adds	r2, r3, #4
 8010bc4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010bc8:	bf28      	it	cs
 8010bca:	2200      	movcs	r2, #0
 8010bcc:	2300      	movs	r3, #0
 8010bce:	b292      	uxth	r2, r2
 8010bd0:	2107      	movs	r1, #7
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	f7ff fe88 	bl	80108e8 <uxr_buffer_submessage_header>
 8010bd8:	9904      	ldr	r1, [sp, #16]
 8010bda:	aa07      	add	r2, sp, #28
 8010bdc:	4628      	mov	r0, r5
 8010bde:	f7ff fd1b 	bl	8010618 <uxr_init_base_object_request>
 8010be2:	4604      	mov	r4, r0
 8010be4:	b318      	cbz	r0, 8010c2e <uxr_prepare_output_stream_fragmented+0x146>
 8010be6:	a907      	add	r1, sp, #28
 8010be8:	4630      	mov	r0, r6
 8010bea:	f000 fff9 	bl	8011be0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010bee:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	1a52      	subs	r2, r2, r1
 8010bf6:	f7fc fb0f 	bl	800d218 <ucdr_init_buffer>
 8010bfa:	9b05      	ldr	r3, [sp, #20]
 8010bfc:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8010c00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c02:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8010c06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010c08:	491b      	ldr	r1, [pc, #108]	; (8010c78 <uxr_prepare_output_stream_fragmented+0x190>)
 8010c0a:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 8010c0e:	4630      	mov	r0, r6
 8010c10:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8010c14:	462a      	mov	r2, r5
 8010c16:	f7fc fad3 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	b011      	add	sp, #68	; 0x44
 8010c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010c24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c26:	4628      	mov	r0, r5
 8010c28:	4798      	blx	r3
 8010c2a:	b920      	cbnz	r0, 8010c36 <uxr_prepare_output_stream_fragmented+0x14e>
 8010c2c:	2400      	movs	r4, #0
 8010c2e:	4620      	mov	r0, r4
 8010c30:	b011      	add	sp, #68	; 0x44
 8010c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c36:	4620      	mov	r0, r4
 8010c38:	f006 fc72 	bl	8017520 <get_available_free_slots>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	f47f af6d 	bne.w	8010b1c <uxr_prepare_output_stream_fragmented+0x34>
 8010c42:	e7f3      	b.n	8010c2c <uxr_prepare_output_stream_fragmented+0x144>
 8010c44:	4638      	mov	r0, r7
 8010c46:	2101      	movs	r1, #1
 8010c48:	f006 fdba 	bl	80177c0 <uxr_seq_num_add>
 8010c4c:	8921      	ldrh	r1, [r4, #8]
 8010c4e:	fbb0 f2f1 	udiv	r2, r0, r1
 8010c52:	fb01 0912 	mls	r9, r1, r2, r0
 8010c56:	fa1f f289 	uxth.w	r2, r9
 8010c5a:	6863      	ldr	r3, [r4, #4]
 8010c5c:	fbb3 f9f1 	udiv	r9, r3, r1
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	fb02 f909 	mul.w	r9, r2, r9
 8010c66:	f109 0904 	add.w	r9, r9, #4
 8010c6a:	4499      	add	r9, r3
 8010c6c:	4607      	mov	r7, r0
 8010c6e:	7b23      	ldrb	r3, [r4, #12]
 8010c70:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010c74:	e76b      	b.n	8010b4e <uxr_prepare_output_stream_fragmented+0x66>
 8010c76:	bf00      	nop
 8010c78:	08010975 	.word	0x08010975

08010c7c <uxr_serialize_message_header>:
 8010c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	4616      	mov	r6, r2
 8010c82:	4604      	mov	r4, r0
 8010c84:	9301      	str	r3, [sp, #4]
 8010c86:	460d      	mov	r5, r1
 8010c88:	9f08      	ldr	r7, [sp, #32]
 8010c8a:	f7fb f983 	bl	800bf94 <ucdr_serialize_uint8_t>
 8010c8e:	4631      	mov	r1, r6
 8010c90:	4620      	mov	r0, r4
 8010c92:	f7fb f97f 	bl	800bf94 <ucdr_serialize_uint8_t>
 8010c96:	9a01      	ldr	r2, [sp, #4]
 8010c98:	2101      	movs	r1, #1
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f7fb fa26 	bl	800c0ec <ucdr_serialize_endian_uint16_t>
 8010ca0:	062b      	lsls	r3, r5, #24
 8010ca2:	d501      	bpl.n	8010ca8 <uxr_serialize_message_header+0x2c>
 8010ca4:	b003      	add	sp, #12
 8010ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ca8:	2204      	movs	r2, #4
 8010caa:	4639      	mov	r1, r7
 8010cac:	4620      	mov	r0, r4
 8010cae:	b003      	add	sp, #12
 8010cb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010cb4:	f005 bd12 	b.w	80166dc <ucdr_serialize_array_uint8_t>

08010cb8 <uxr_deserialize_message_header>:
 8010cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cba:	b083      	sub	sp, #12
 8010cbc:	4616      	mov	r6, r2
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	9301      	str	r3, [sp, #4]
 8010cc2:	460d      	mov	r5, r1
 8010cc4:	9f08      	ldr	r7, [sp, #32]
 8010cc6:	f7fb f97b 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8010cca:	4631      	mov	r1, r6
 8010ccc:	4620      	mov	r0, r4
 8010cce:	f7fb f977 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8010cd2:	9a01      	ldr	r2, [sp, #4]
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f7fb fafc 	bl	800c2d4 <ucdr_deserialize_endian_uint16_t>
 8010cdc:	f995 3000 	ldrsb.w	r3, [r5]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	da01      	bge.n	8010ce8 <uxr_deserialize_message_header+0x30>
 8010ce4:	b003      	add	sp, #12
 8010ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ce8:	2204      	movs	r2, #4
 8010cea:	4639      	mov	r1, r7
 8010cec:	4620      	mov	r0, r4
 8010cee:	b003      	add	sp, #12
 8010cf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010cf4:	f005 bd56 	b.w	80167a4 <ucdr_deserialize_array_uint8_t>

08010cf8 <uxr_serialize_submessage_header>:
 8010cf8:	b530      	push	{r4, r5, lr}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	4615      	mov	r5, r2
 8010cfe:	4604      	mov	r4, r0
 8010d00:	9301      	str	r3, [sp, #4]
 8010d02:	f7fb f947 	bl	800bf94 <ucdr_serialize_uint8_t>
 8010d06:	4629      	mov	r1, r5
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f7fb f943 	bl	800bf94 <ucdr_serialize_uint8_t>
 8010d0e:	9a01      	ldr	r2, [sp, #4]
 8010d10:	2101      	movs	r1, #1
 8010d12:	4620      	mov	r0, r4
 8010d14:	b003      	add	sp, #12
 8010d16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d1a:	f7fb b9e7 	b.w	800c0ec <ucdr_serialize_endian_uint16_t>
 8010d1e:	bf00      	nop

08010d20 <uxr_deserialize_submessage_header>:
 8010d20:	b530      	push	{r4, r5, lr}
 8010d22:	b083      	sub	sp, #12
 8010d24:	4615      	mov	r5, r2
 8010d26:	4604      	mov	r4, r0
 8010d28:	9301      	str	r3, [sp, #4]
 8010d2a:	f7fb f949 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8010d2e:	4629      	mov	r1, r5
 8010d30:	4620      	mov	r0, r4
 8010d32:	f7fb f945 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8010d36:	9a01      	ldr	r2, [sp, #4]
 8010d38:	2101      	movs	r1, #1
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	b003      	add	sp, #12
 8010d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d42:	f7fb bac7 	b.w	800c2d4 <ucdr_deserialize_endian_uint16_t>
 8010d46:	bf00      	nop

08010d48 <uxr_serialize_CLIENT_Representation>:
 8010d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d4c:	2204      	movs	r2, #4
 8010d4e:	460e      	mov	r6, r1
 8010d50:	4605      	mov	r5, r0
 8010d52:	f005 fcc3 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8010d56:	2202      	movs	r2, #2
 8010d58:	4607      	mov	r7, r0
 8010d5a:	1d31      	adds	r1, r6, #4
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	f005 fcbd 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8010d62:	4038      	ands	r0, r7
 8010d64:	2202      	movs	r2, #2
 8010d66:	1db1      	adds	r1, r6, #6
 8010d68:	b2c7      	uxtb	r7, r0
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	f005 fcb6 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8010d70:	2204      	movs	r2, #4
 8010d72:	4007      	ands	r7, r0
 8010d74:	f106 0108 	add.w	r1, r6, #8
 8010d78:	4628      	mov	r0, r5
 8010d7a:	f005 fcaf 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8010d7e:	7b31      	ldrb	r1, [r6, #12]
 8010d80:	4007      	ands	r7, r0
 8010d82:	4628      	mov	r0, r5
 8010d84:	f7fb f906 	bl	800bf94 <ucdr_serialize_uint8_t>
 8010d88:	7b71      	ldrb	r1, [r6, #13]
 8010d8a:	4007      	ands	r7, r0
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	f7fb f8d3 	bl	800bf38 <ucdr_serialize_bool>
 8010d92:	7b73      	ldrb	r3, [r6, #13]
 8010d94:	ea07 0800 	and.w	r8, r7, r0
 8010d98:	b93b      	cbnz	r3, 8010daa <uxr_serialize_CLIENT_Representation+0x62>
 8010d9a:	8bb1      	ldrh	r1, [r6, #28]
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	f7fb f925 	bl	800bfec <ucdr_serialize_uint16_t>
 8010da2:	ea08 0000 	and.w	r0, r8, r0
 8010da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010daa:	6931      	ldr	r1, [r6, #16]
 8010dac:	4628      	mov	r0, r5
 8010dae:	f7fb fb07 	bl	800c3c0 <ucdr_serialize_uint32_t>
 8010db2:	6933      	ldr	r3, [r6, #16]
 8010db4:	b1e3      	cbz	r3, 8010df0 <uxr_serialize_CLIENT_Representation+0xa8>
 8010db6:	b1c0      	cbz	r0, 8010dea <uxr_serialize_CLIENT_Representation+0xa2>
 8010db8:	4637      	mov	r7, r6
 8010dba:	f04f 0900 	mov.w	r9, #0
 8010dbe:	e001      	b.n	8010dc4 <uxr_serialize_CLIENT_Representation+0x7c>
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	b194      	cbz	r4, 8010dea <uxr_serialize_CLIENT_Representation+0xa2>
 8010dc4:	6979      	ldr	r1, [r7, #20]
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f005 fda8 	bl	801691c <ucdr_serialize_string>
 8010dcc:	69b9      	ldr	r1, [r7, #24]
 8010dce:	4604      	mov	r4, r0
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	f005 fda3 	bl	801691c <ucdr_serialize_string>
 8010dd6:	6933      	ldr	r3, [r6, #16]
 8010dd8:	f109 0901 	add.w	r9, r9, #1
 8010ddc:	4004      	ands	r4, r0
 8010dde:	4599      	cmp	r9, r3
 8010de0:	b2e4      	uxtb	r4, r4
 8010de2:	d3ed      	bcc.n	8010dc0 <uxr_serialize_CLIENT_Representation+0x78>
 8010de4:	ea08 0804 	and.w	r8, r8, r4
 8010de8:	e7d7      	b.n	8010d9a <uxr_serialize_CLIENT_Representation+0x52>
 8010dea:	f04f 0800 	mov.w	r8, #0
 8010dee:	e7d4      	b.n	8010d9a <uxr_serialize_CLIENT_Representation+0x52>
 8010df0:	ea08 0800 	and.w	r8, r8, r0
 8010df4:	e7d1      	b.n	8010d9a <uxr_serialize_CLIENT_Representation+0x52>
 8010df6:	bf00      	nop

08010df8 <uxr_deserialize_CLIENT_Representation>:
 8010df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dfc:	2204      	movs	r2, #4
 8010dfe:	460c      	mov	r4, r1
 8010e00:	4605      	mov	r5, r0
 8010e02:	f005 fccf 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8010e06:	2202      	movs	r2, #2
 8010e08:	4607      	mov	r7, r0
 8010e0a:	1d21      	adds	r1, r4, #4
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	f005 fcc9 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8010e12:	4038      	ands	r0, r7
 8010e14:	2202      	movs	r2, #2
 8010e16:	1da1      	adds	r1, r4, #6
 8010e18:	b2c6      	uxtb	r6, r0
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f005 fcc2 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8010e20:	2204      	movs	r2, #4
 8010e22:	4006      	ands	r6, r0
 8010e24:	f104 0108 	add.w	r1, r4, #8
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f005 fcbb 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8010e2e:	f104 010c 	add.w	r1, r4, #12
 8010e32:	4006      	ands	r6, r0
 8010e34:	4628      	mov	r0, r5
 8010e36:	f7fb f8c3 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8010e3a:	f104 010d 	add.w	r1, r4, #13
 8010e3e:	ea06 0700 	and.w	r7, r6, r0
 8010e42:	4628      	mov	r0, r5
 8010e44:	f7fb f88e 	bl	800bf64 <ucdr_deserialize_bool>
 8010e48:	7b63      	ldrb	r3, [r4, #13]
 8010e4a:	4007      	ands	r7, r0
 8010e4c:	b93b      	cbnz	r3, 8010e5e <uxr_deserialize_CLIENT_Representation+0x66>
 8010e4e:	f104 011c 	add.w	r1, r4, #28
 8010e52:	4628      	mov	r0, r5
 8010e54:	f7fb f9ca 	bl	800c1ec <ucdr_deserialize_uint16_t>
 8010e58:	4038      	ands	r0, r7
 8010e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e5e:	f104 0110 	add.w	r1, r4, #16
 8010e62:	4628      	mov	r0, r5
 8010e64:	f7fb fbdc 	bl	800c620 <ucdr_deserialize_uint32_t>
 8010e68:	6923      	ldr	r3, [r4, #16]
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d903      	bls.n	8010e76 <uxr_deserialize_CLIENT_Representation+0x7e>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	75ab      	strb	r3, [r5, #22]
 8010e72:	2700      	movs	r7, #0
 8010e74:	e7eb      	b.n	8010e4e <uxr_deserialize_CLIENT_Representation+0x56>
 8010e76:	b30b      	cbz	r3, 8010ebc <uxr_deserialize_CLIENT_Representation+0xc4>
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	d0fa      	beq.n	8010e72 <uxr_deserialize_CLIENT_Representation+0x7a>
 8010e7c:	46a0      	mov	r8, r4
 8010e7e:	f04f 0900 	mov.w	r9, #0
 8010e82:	e001      	b.n	8010e88 <uxr_deserialize_CLIENT_Representation+0x90>
 8010e84:	2e00      	cmp	r6, #0
 8010e86:	d0f4      	beq.n	8010e72 <uxr_deserialize_CLIENT_Representation+0x7a>
 8010e88:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e90:	4628      	mov	r0, r5
 8010e92:	f005 fd53 	bl	801693c <ucdr_deserialize_string>
 8010e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	f005 fd4b 	bl	801693c <ucdr_deserialize_string>
 8010ea6:	6923      	ldr	r3, [r4, #16]
 8010ea8:	f109 0901 	add.w	r9, r9, #1
 8010eac:	4006      	ands	r6, r0
 8010eae:	4599      	cmp	r9, r3
 8010eb0:	f108 0808 	add.w	r8, r8, #8
 8010eb4:	b2f6      	uxtb	r6, r6
 8010eb6:	d3e5      	bcc.n	8010e84 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010eb8:	4037      	ands	r7, r6
 8010eba:	e7c8      	b.n	8010e4e <uxr_deserialize_CLIENT_Representation+0x56>
 8010ebc:	4007      	ands	r7, r0
 8010ebe:	e7c6      	b.n	8010e4e <uxr_deserialize_CLIENT_Representation+0x56>

08010ec0 <uxr_serialize_AGENT_Representation>:
 8010ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ec4:	2204      	movs	r2, #4
 8010ec6:	460f      	mov	r7, r1
 8010ec8:	4605      	mov	r5, r0
 8010eca:	f005 fc07 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8010ece:	2202      	movs	r2, #2
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	1d39      	adds	r1, r7, #4
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	f005 fc01 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8010eda:	4020      	ands	r0, r4
 8010edc:	2202      	movs	r2, #2
 8010ede:	1db9      	adds	r1, r7, #6
 8010ee0:	b2c4      	uxtb	r4, r0
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	f005 fbfa 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8010ee8:	7a39      	ldrb	r1, [r7, #8]
 8010eea:	4004      	ands	r4, r0
 8010eec:	4628      	mov	r0, r5
 8010eee:	f7fb f823 	bl	800bf38 <ucdr_serialize_bool>
 8010ef2:	7a3b      	ldrb	r3, [r7, #8]
 8010ef4:	ea00 0804 	and.w	r8, r0, r4
 8010ef8:	b913      	cbnz	r3, 8010f00 <uxr_serialize_AGENT_Representation+0x40>
 8010efa:	4640      	mov	r0, r8
 8010efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f00:	68f9      	ldr	r1, [r7, #12]
 8010f02:	4628      	mov	r0, r5
 8010f04:	f7fb fa5c 	bl	800c3c0 <ucdr_serialize_uint32_t>
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	b303      	cbz	r3, 8010f4e <uxr_serialize_AGENT_Representation+0x8e>
 8010f0c:	b1d0      	cbz	r0, 8010f44 <uxr_serialize_AGENT_Representation+0x84>
 8010f0e:	463e      	mov	r6, r7
 8010f10:	f04f 0900 	mov.w	r9, #0
 8010f14:	e001      	b.n	8010f1a <uxr_serialize_AGENT_Representation+0x5a>
 8010f16:	3608      	adds	r6, #8
 8010f18:	b1a4      	cbz	r4, 8010f44 <uxr_serialize_AGENT_Representation+0x84>
 8010f1a:	6931      	ldr	r1, [r6, #16]
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	f005 fcfd 	bl	801691c <ucdr_serialize_string>
 8010f22:	6971      	ldr	r1, [r6, #20]
 8010f24:	4604      	mov	r4, r0
 8010f26:	4628      	mov	r0, r5
 8010f28:	f005 fcf8 	bl	801691c <ucdr_serialize_string>
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f109 0901 	add.w	r9, r9, #1
 8010f32:	4004      	ands	r4, r0
 8010f34:	4599      	cmp	r9, r3
 8010f36:	b2e4      	uxtb	r4, r4
 8010f38:	d3ed      	bcc.n	8010f16 <uxr_serialize_AGENT_Representation+0x56>
 8010f3a:	ea08 0804 	and.w	r8, r8, r4
 8010f3e:	4640      	mov	r0, r8
 8010f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f44:	f04f 0800 	mov.w	r8, #0
 8010f48:	4640      	mov	r0, r8
 8010f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f4e:	ea08 0800 	and.w	r8, r8, r0
 8010f52:	e7d2      	b.n	8010efa <uxr_serialize_AGENT_Representation+0x3a>

08010f54 <uxr_serialize_DATAWRITER_Representation>:
 8010f54:	b570      	push	{r4, r5, r6, lr}
 8010f56:	460d      	mov	r5, r1
 8010f58:	7809      	ldrb	r1, [r1, #0]
 8010f5a:	4606      	mov	r6, r0
 8010f5c:	f7fb f81a 	bl	800bf94 <ucdr_serialize_uint8_t>
 8010f60:	4604      	mov	r4, r0
 8010f62:	b130      	cbz	r0, 8010f72 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010f64:	782b      	ldrb	r3, [r5, #0]
 8010f66:	2b02      	cmp	r3, #2
 8010f68:	d00c      	beq.n	8010f84 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010f6a:	2b03      	cmp	r3, #3
 8010f6c:	d010      	beq.n	8010f90 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d008      	beq.n	8010f84 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010f72:	2202      	movs	r2, #2
 8010f74:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8010f78:	4630      	mov	r0, r6
 8010f7a:	f005 fbaf 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8010f7e:	4020      	ands	r0, r4
 8010f80:	b2c0      	uxtb	r0, r0
 8010f82:	bd70      	pop	{r4, r5, r6, pc}
 8010f84:	6869      	ldr	r1, [r5, #4]
 8010f86:	4630      	mov	r0, r6
 8010f88:	f005 fcc8 	bl	801691c <ucdr_serialize_string>
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	e7f0      	b.n	8010f72 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010f90:	4629      	mov	r1, r5
 8010f92:	4630      	mov	r0, r6
 8010f94:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010f98:	3104      	adds	r1, #4
 8010f9a:	f005 fc93 	bl	80168c4 <ucdr_serialize_sequence_uint8_t>
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	e7e7      	b.n	8010f72 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010fa2:	bf00      	nop

08010fa4 <uxr_serialize_ObjectVariant.part.0>:
 8010fa4:	b570      	push	{r4, r5, r6, lr}
 8010fa6:	780b      	ldrb	r3, [r1, #0]
 8010fa8:	3b01      	subs	r3, #1
 8010faa:	460c      	mov	r4, r1
 8010fac:	4605      	mov	r5, r0
 8010fae:	2b0d      	cmp	r3, #13
 8010fb0:	d854      	bhi.n	801105c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010fb2:	e8df f003 	tbb	[pc, r3]
 8010fb6:	0730      	.short	0x0730
 8010fb8:	07071b1b 	.word	0x07071b1b
 8010fbc:	0c530707 	.word	0x0c530707
 8010fc0:	494e0c0c 	.word	0x494e0c0c
 8010fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fc8:	3104      	adds	r1, #4
 8010fca:	f7ff bfc3 	b.w	8010f54 <uxr_serialize_DATAWRITER_Representation>
 8010fce:	7909      	ldrb	r1, [r1, #4]
 8010fd0:	f7fa ffe0 	bl	800bf94 <ucdr_serialize_uint8_t>
 8010fd4:	b1e8      	cbz	r0, 8011012 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010fd6:	7923      	ldrb	r3, [r4, #4]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d001      	beq.n	8010fe0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	d13d      	bne.n	801105c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010fe0:	68a1      	ldr	r1, [r4, #8]
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fe8:	f005 bc98 	b.w	801691c <ucdr_serialize_string>
 8010fec:	7909      	ldrb	r1, [r1, #4]
 8010fee:	f7fa ffd1 	bl	800bf94 <ucdr_serialize_uint8_t>
 8010ff2:	4606      	mov	r6, r0
 8010ff4:	b120      	cbz	r0, 8011000 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010ff6:	7923      	ldrb	r3, [r4, #4]
 8010ff8:	2b02      	cmp	r3, #2
 8010ffa:	d039      	beq.n	8011070 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010ffc:	2b03      	cmp	r3, #3
 8010ffe:	d02f      	beq.n	8011060 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011000:	2202      	movs	r2, #2
 8011002:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8011006:	4628      	mov	r0, r5
 8011008:	f005 fb68 	bl	80166dc <ucdr_serialize_array_uint8_t>
 801100c:	4030      	ands	r0, r6
 801100e:	b2c0      	uxtb	r0, r0
 8011010:	bd70      	pop	{r4, r5, r6, pc}
 8011012:	2000      	movs	r0, #0
 8011014:	bd70      	pop	{r4, r5, r6, pc}
 8011016:	7909      	ldrb	r1, [r1, #4]
 8011018:	f7fa ffbc 	bl	800bf94 <ucdr_serialize_uint8_t>
 801101c:	4606      	mov	r6, r0
 801101e:	b158      	cbz	r0, 8011038 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011020:	7923      	ldrb	r3, [r4, #4]
 8011022:	2b02      	cmp	r3, #2
 8011024:	d003      	beq.n	801102e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8011026:	2b03      	cmp	r3, #3
 8011028:	d028      	beq.n	801107c <uxr_serialize_ObjectVariant.part.0+0xd8>
 801102a:	2b01      	cmp	r3, #1
 801102c:	d104      	bne.n	8011038 <uxr_serialize_ObjectVariant.part.0+0x94>
 801102e:	68a1      	ldr	r1, [r4, #8]
 8011030:	4628      	mov	r0, r5
 8011032:	f005 fc73 	bl	801691c <ucdr_serialize_string>
 8011036:	4606      	mov	r6, r0
 8011038:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 801103c:	4628      	mov	r0, r5
 801103e:	f7fb fce5 	bl	800ca0c <ucdr_serialize_int16_t>
 8011042:	4030      	ands	r0, r6
 8011044:	b2c0      	uxtb	r0, r0
 8011046:	bd70      	pop	{r4, r5, r6, pc}
 8011048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801104c:	3104      	adds	r1, #4
 801104e:	f7ff be7b 	b.w	8010d48 <uxr_serialize_CLIENT_Representation>
 8011052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011056:	3104      	adds	r1, #4
 8011058:	f7ff bf32 	b.w	8010ec0 <uxr_serialize_AGENT_Representation>
 801105c:	2001      	movs	r0, #1
 801105e:	bd70      	pop	{r4, r5, r6, pc}
 8011060:	68a2      	ldr	r2, [r4, #8]
 8011062:	f104 010c 	add.w	r1, r4, #12
 8011066:	4628      	mov	r0, r5
 8011068:	f005 fc2c 	bl	80168c4 <ucdr_serialize_sequence_uint8_t>
 801106c:	4606      	mov	r6, r0
 801106e:	e7c7      	b.n	8011000 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011070:	68a1      	ldr	r1, [r4, #8]
 8011072:	4628      	mov	r0, r5
 8011074:	f005 fc52 	bl	801691c <ucdr_serialize_string>
 8011078:	4606      	mov	r6, r0
 801107a:	e7c1      	b.n	8011000 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801107c:	68a2      	ldr	r2, [r4, #8]
 801107e:	f104 010c 	add.w	r1, r4, #12
 8011082:	4628      	mov	r0, r5
 8011084:	f005 fc1e 	bl	80168c4 <ucdr_serialize_sequence_uint8_t>
 8011088:	4606      	mov	r6, r0
 801108a:	e7d5      	b.n	8011038 <uxr_serialize_ObjectVariant.part.0+0x94>

0801108c <uxr_deserialize_DATAWRITER_Representation>:
 801108c:	b570      	push	{r4, r5, r6, lr}
 801108e:	4606      	mov	r6, r0
 8011090:	460d      	mov	r5, r1
 8011092:	f7fa ff95 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011096:	4604      	mov	r4, r0
 8011098:	b130      	cbz	r0, 80110a8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801109a:	782b      	ldrb	r3, [r5, #0]
 801109c:	2b02      	cmp	r3, #2
 801109e:	d00c      	beq.n	80110ba <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80110a0:	2b03      	cmp	r3, #3
 80110a2:	d012      	beq.n	80110ca <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d008      	beq.n	80110ba <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80110a8:	2202      	movs	r2, #2
 80110aa:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80110ae:	4630      	mov	r0, r6
 80110b0:	f005 fb78 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 80110b4:	4020      	ands	r0, r4
 80110b6:	b2c0      	uxtb	r0, r0
 80110b8:	bd70      	pop	{r4, r5, r6, pc}
 80110ba:	6869      	ldr	r1, [r5, #4]
 80110bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80110c0:	4630      	mov	r0, r6
 80110c2:	f005 fc3b 	bl	801693c <ucdr_deserialize_string>
 80110c6:	4604      	mov	r4, r0
 80110c8:	e7ee      	b.n	80110a8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80110ca:	1d2b      	adds	r3, r5, #4
 80110cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80110d0:	f105 0108 	add.w	r1, r5, #8
 80110d4:	4630      	mov	r0, r6
 80110d6:	f005 fc07 	bl	80168e8 <ucdr_deserialize_sequence_uint8_t>
 80110da:	4604      	mov	r4, r0
 80110dc:	e7e4      	b.n	80110a8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80110de:	bf00      	nop

080110e0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	460d      	mov	r5, r1
 80110e4:	7809      	ldrb	r1, [r1, #0]
 80110e6:	4606      	mov	r6, r0
 80110e8:	f7fa ff26 	bl	800bf38 <ucdr_serialize_bool>
 80110ec:	782b      	ldrb	r3, [r5, #0]
 80110ee:	4604      	mov	r4, r0
 80110f0:	b94b      	cbnz	r3, 8011106 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80110f2:	7a29      	ldrb	r1, [r5, #8]
 80110f4:	4630      	mov	r0, r6
 80110f6:	f7fa ff1f 	bl	800bf38 <ucdr_serialize_bool>
 80110fa:	7a2b      	ldrb	r3, [r5, #8]
 80110fc:	4004      	ands	r4, r0
 80110fe:	b2e4      	uxtb	r4, r4
 8011100:	b943      	cbnz	r3, 8011114 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011102:	4620      	mov	r0, r4
 8011104:	bd70      	pop	{r4, r5, r6, pc}
 8011106:	6869      	ldr	r1, [r5, #4]
 8011108:	4630      	mov	r0, r6
 801110a:	f005 fc07 	bl	801691c <ucdr_serialize_string>
 801110e:	4004      	ands	r4, r0
 8011110:	b2e4      	uxtb	r4, r4
 8011112:	e7ee      	b.n	80110f2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011114:	68e9      	ldr	r1, [r5, #12]
 8011116:	4630      	mov	r0, r6
 8011118:	f005 fc00 	bl	801691c <ucdr_serialize_string>
 801111c:	4004      	ands	r4, r0
 801111e:	4620      	mov	r0, r4
 8011120:	bd70      	pop	{r4, r5, r6, pc}
 8011122:	bf00      	nop

08011124 <uxr_serialize_OBJK_Topic_Binary>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	460d      	mov	r5, r1
 8011128:	6809      	ldr	r1, [r1, #0]
 801112a:	4606      	mov	r6, r0
 801112c:	f005 fbf6 	bl	801691c <ucdr_serialize_string>
 8011130:	7929      	ldrb	r1, [r5, #4]
 8011132:	4604      	mov	r4, r0
 8011134:	4630      	mov	r0, r6
 8011136:	f7fa feff 	bl	800bf38 <ucdr_serialize_bool>
 801113a:	792b      	ldrb	r3, [r5, #4]
 801113c:	4004      	ands	r4, r0
 801113e:	b2e4      	uxtb	r4, r4
 8011140:	b943      	cbnz	r3, 8011154 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011142:	7b29      	ldrb	r1, [r5, #12]
 8011144:	4630      	mov	r0, r6
 8011146:	f7fa fef7 	bl	800bf38 <ucdr_serialize_bool>
 801114a:	7b2b      	ldrb	r3, [r5, #12]
 801114c:	4004      	ands	r4, r0
 801114e:	b93b      	cbnz	r3, 8011160 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011150:	4620      	mov	r0, r4
 8011152:	bd70      	pop	{r4, r5, r6, pc}
 8011154:	68a9      	ldr	r1, [r5, #8]
 8011156:	4630      	mov	r0, r6
 8011158:	f005 fbe0 	bl	801691c <ucdr_serialize_string>
 801115c:	4004      	ands	r4, r0
 801115e:	e7f0      	b.n	8011142 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011160:	6929      	ldr	r1, [r5, #16]
 8011162:	4630      	mov	r0, r6
 8011164:	f005 fbda 	bl	801691c <ucdr_serialize_string>
 8011168:	4004      	ands	r4, r0
 801116a:	b2e4      	uxtb	r4, r4
 801116c:	4620      	mov	r0, r4
 801116e:	bd70      	pop	{r4, r5, r6, pc}

08011170 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011174:	460c      	mov	r4, r1
 8011176:	7809      	ldrb	r1, [r1, #0]
 8011178:	4606      	mov	r6, r0
 801117a:	f7fa fedd 	bl	800bf38 <ucdr_serialize_bool>
 801117e:	7823      	ldrb	r3, [r4, #0]
 8011180:	4605      	mov	r5, r0
 8011182:	b96b      	cbnz	r3, 80111a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011184:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011188:	4630      	mov	r0, r6
 801118a:	f7fa fed5 	bl	800bf38 <ucdr_serialize_bool>
 801118e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011192:	4005      	ands	r5, r0
 8011194:	b2ed      	uxtb	r5, r5
 8011196:	2b00      	cmp	r3, #0
 8011198:	d169      	bne.n	801126e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801119a:	4628      	mov	r0, r5
 801119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111a0:	6861      	ldr	r1, [r4, #4]
 80111a2:	4630      	mov	r0, r6
 80111a4:	f7fb f90c 	bl	800c3c0 <ucdr_serialize_uint32_t>
 80111a8:	6863      	ldr	r3, [r4, #4]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d06b      	beq.n	8011286 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80111ae:	2800      	cmp	r0, #0
 80111b0:	d067      	beq.n	8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111b2:	68a1      	ldr	r1, [r4, #8]
 80111b4:	4630      	mov	r0, r6
 80111b6:	f005 fbb1 	bl	801691c <ucdr_serialize_string>
 80111ba:	6863      	ldr	r3, [r4, #4]
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d953      	bls.n	8011268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d05e      	beq.n	8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111c4:	68e1      	ldr	r1, [r4, #12]
 80111c6:	4630      	mov	r0, r6
 80111c8:	f005 fba8 	bl	801691c <ucdr_serialize_string>
 80111cc:	6863      	ldr	r3, [r4, #4]
 80111ce:	2b02      	cmp	r3, #2
 80111d0:	d94a      	bls.n	8011268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80111d2:	2800      	cmp	r0, #0
 80111d4:	d055      	beq.n	8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111d6:	6921      	ldr	r1, [r4, #16]
 80111d8:	4630      	mov	r0, r6
 80111da:	f005 fb9f 	bl	801691c <ucdr_serialize_string>
 80111de:	6863      	ldr	r3, [r4, #4]
 80111e0:	2b03      	cmp	r3, #3
 80111e2:	d941      	bls.n	8011268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d04c      	beq.n	8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111e8:	6961      	ldr	r1, [r4, #20]
 80111ea:	4630      	mov	r0, r6
 80111ec:	f005 fb96 	bl	801691c <ucdr_serialize_string>
 80111f0:	6863      	ldr	r3, [r4, #4]
 80111f2:	2b04      	cmp	r3, #4
 80111f4:	d938      	bls.n	8011268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d043      	beq.n	8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80111fa:	69a1      	ldr	r1, [r4, #24]
 80111fc:	4630      	mov	r0, r6
 80111fe:	f005 fb8d 	bl	801691c <ucdr_serialize_string>
 8011202:	6863      	ldr	r3, [r4, #4]
 8011204:	2b05      	cmp	r3, #5
 8011206:	d92f      	bls.n	8011268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011208:	2800      	cmp	r0, #0
 801120a:	d03a      	beq.n	8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801120c:	69e1      	ldr	r1, [r4, #28]
 801120e:	4630      	mov	r0, r6
 8011210:	f005 fb84 	bl	801691c <ucdr_serialize_string>
 8011214:	6863      	ldr	r3, [r4, #4]
 8011216:	2b06      	cmp	r3, #6
 8011218:	d926      	bls.n	8011268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801121a:	b390      	cbz	r0, 8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801121c:	6a21      	ldr	r1, [r4, #32]
 801121e:	4630      	mov	r0, r6
 8011220:	f005 fb7c 	bl	801691c <ucdr_serialize_string>
 8011224:	6863      	ldr	r3, [r4, #4]
 8011226:	2b07      	cmp	r3, #7
 8011228:	d91e      	bls.n	8011268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801122a:	b350      	cbz	r0, 8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801122c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801122e:	4630      	mov	r0, r6
 8011230:	f005 fb74 	bl	801691c <ucdr_serialize_string>
 8011234:	6863      	ldr	r3, [r4, #4]
 8011236:	2b08      	cmp	r3, #8
 8011238:	d916      	bls.n	8011268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801123a:	b310      	cbz	r0, 8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801123c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801123e:	4630      	mov	r0, r6
 8011240:	f005 fb6c 	bl	801691c <ucdr_serialize_string>
 8011244:	6863      	ldr	r3, [r4, #4]
 8011246:	2b09      	cmp	r3, #9
 8011248:	d90e      	bls.n	8011268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801124a:	b1d0      	cbz	r0, 8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801124c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011250:	2709      	movs	r7, #9
 8011252:	e000      	b.n	8011256 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011254:	b1a8      	cbz	r0, 8011282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011256:	f858 1b04 	ldr.w	r1, [r8], #4
 801125a:	4630      	mov	r0, r6
 801125c:	f005 fb5e 	bl	801691c <ucdr_serialize_string>
 8011260:	6862      	ldr	r2, [r4, #4]
 8011262:	3701      	adds	r7, #1
 8011264:	4297      	cmp	r7, r2
 8011266:	d3f5      	bcc.n	8011254 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011268:	4005      	ands	r5, r0
 801126a:	b2ed      	uxtb	r5, r5
 801126c:	e78a      	b.n	8011184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801126e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011270:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011274:	4630      	mov	r0, r6
 8011276:	f005 fb25 	bl	80168c4 <ucdr_serialize_sequence_uint8_t>
 801127a:	4005      	ands	r5, r0
 801127c:	4628      	mov	r0, r5
 801127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011282:	2500      	movs	r5, #0
 8011284:	e77e      	b.n	8011184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011286:	4028      	ands	r0, r5
 8011288:	b2c5      	uxtb	r5, r0
 801128a:	e77b      	b.n	8011184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801128c <uxr_serialize_OBJK_Publisher_Binary>:
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	460d      	mov	r5, r1
 8011290:	7809      	ldrb	r1, [r1, #0]
 8011292:	4606      	mov	r6, r0
 8011294:	f7fa fe50 	bl	800bf38 <ucdr_serialize_bool>
 8011298:	782b      	ldrb	r3, [r5, #0]
 801129a:	4604      	mov	r4, r0
 801129c:	b94b      	cbnz	r3, 80112b2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801129e:	7a29      	ldrb	r1, [r5, #8]
 80112a0:	4630      	mov	r0, r6
 80112a2:	f7fa fe49 	bl	800bf38 <ucdr_serialize_bool>
 80112a6:	7a2b      	ldrb	r3, [r5, #8]
 80112a8:	4004      	ands	r4, r0
 80112aa:	b2e4      	uxtb	r4, r4
 80112ac:	b943      	cbnz	r3, 80112c0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80112ae:	4620      	mov	r0, r4
 80112b0:	bd70      	pop	{r4, r5, r6, pc}
 80112b2:	6869      	ldr	r1, [r5, #4]
 80112b4:	4630      	mov	r0, r6
 80112b6:	f005 fb31 	bl	801691c <ucdr_serialize_string>
 80112ba:	4004      	ands	r4, r0
 80112bc:	b2e4      	uxtb	r4, r4
 80112be:	e7ee      	b.n	801129e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80112c0:	f105 010c 	add.w	r1, r5, #12
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7ff ff53 	bl	8011170 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80112ca:	4004      	ands	r4, r0
 80112cc:	4620      	mov	r0, r4
 80112ce:	bd70      	pop	{r4, r5, r6, pc}

080112d0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80112d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112d4:	460c      	mov	r4, r1
 80112d6:	7809      	ldrb	r1, [r1, #0]
 80112d8:	4606      	mov	r6, r0
 80112da:	f7fa fe2d 	bl	800bf38 <ucdr_serialize_bool>
 80112de:	7823      	ldrb	r3, [r4, #0]
 80112e0:	4605      	mov	r5, r0
 80112e2:	b96b      	cbnz	r3, 8011300 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80112e4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80112e8:	4630      	mov	r0, r6
 80112ea:	f7fa fe25 	bl	800bf38 <ucdr_serialize_bool>
 80112ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80112f2:	4005      	ands	r5, r0
 80112f4:	b2ed      	uxtb	r5, r5
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d169      	bne.n	80113ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80112fa:	4628      	mov	r0, r5
 80112fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011300:	6861      	ldr	r1, [r4, #4]
 8011302:	4630      	mov	r0, r6
 8011304:	f7fb f85c 	bl	800c3c0 <ucdr_serialize_uint32_t>
 8011308:	6863      	ldr	r3, [r4, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d06b      	beq.n	80113e6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801130e:	2800      	cmp	r0, #0
 8011310:	d067      	beq.n	80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011312:	68a1      	ldr	r1, [r4, #8]
 8011314:	4630      	mov	r0, r6
 8011316:	f005 fb01 	bl	801691c <ucdr_serialize_string>
 801131a:	6863      	ldr	r3, [r4, #4]
 801131c:	2b01      	cmp	r3, #1
 801131e:	d953      	bls.n	80113c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011320:	2800      	cmp	r0, #0
 8011322:	d05e      	beq.n	80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011324:	68e1      	ldr	r1, [r4, #12]
 8011326:	4630      	mov	r0, r6
 8011328:	f005 faf8 	bl	801691c <ucdr_serialize_string>
 801132c:	6863      	ldr	r3, [r4, #4]
 801132e:	2b02      	cmp	r3, #2
 8011330:	d94a      	bls.n	80113c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011332:	2800      	cmp	r0, #0
 8011334:	d055      	beq.n	80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011336:	6921      	ldr	r1, [r4, #16]
 8011338:	4630      	mov	r0, r6
 801133a:	f005 faef 	bl	801691c <ucdr_serialize_string>
 801133e:	6863      	ldr	r3, [r4, #4]
 8011340:	2b03      	cmp	r3, #3
 8011342:	d941      	bls.n	80113c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011344:	2800      	cmp	r0, #0
 8011346:	d04c      	beq.n	80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011348:	6961      	ldr	r1, [r4, #20]
 801134a:	4630      	mov	r0, r6
 801134c:	f005 fae6 	bl	801691c <ucdr_serialize_string>
 8011350:	6863      	ldr	r3, [r4, #4]
 8011352:	2b04      	cmp	r3, #4
 8011354:	d938      	bls.n	80113c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011356:	2800      	cmp	r0, #0
 8011358:	d043      	beq.n	80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801135a:	69a1      	ldr	r1, [r4, #24]
 801135c:	4630      	mov	r0, r6
 801135e:	f005 fadd 	bl	801691c <ucdr_serialize_string>
 8011362:	6863      	ldr	r3, [r4, #4]
 8011364:	2b05      	cmp	r3, #5
 8011366:	d92f      	bls.n	80113c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011368:	2800      	cmp	r0, #0
 801136a:	d03a      	beq.n	80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801136c:	69e1      	ldr	r1, [r4, #28]
 801136e:	4630      	mov	r0, r6
 8011370:	f005 fad4 	bl	801691c <ucdr_serialize_string>
 8011374:	6863      	ldr	r3, [r4, #4]
 8011376:	2b06      	cmp	r3, #6
 8011378:	d926      	bls.n	80113c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801137a:	b390      	cbz	r0, 80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801137c:	6a21      	ldr	r1, [r4, #32]
 801137e:	4630      	mov	r0, r6
 8011380:	f005 facc 	bl	801691c <ucdr_serialize_string>
 8011384:	6863      	ldr	r3, [r4, #4]
 8011386:	2b07      	cmp	r3, #7
 8011388:	d91e      	bls.n	80113c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801138a:	b350      	cbz	r0, 80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801138c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801138e:	4630      	mov	r0, r6
 8011390:	f005 fac4 	bl	801691c <ucdr_serialize_string>
 8011394:	6863      	ldr	r3, [r4, #4]
 8011396:	2b08      	cmp	r3, #8
 8011398:	d916      	bls.n	80113c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801139a:	b310      	cbz	r0, 80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801139c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801139e:	4630      	mov	r0, r6
 80113a0:	f005 fabc 	bl	801691c <ucdr_serialize_string>
 80113a4:	6863      	ldr	r3, [r4, #4]
 80113a6:	2b09      	cmp	r3, #9
 80113a8:	d90e      	bls.n	80113c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80113aa:	b1d0      	cbz	r0, 80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80113ac:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80113b0:	2709      	movs	r7, #9
 80113b2:	e000      	b.n	80113b6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80113b4:	b1a8      	cbz	r0, 80113e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80113b6:	f858 1b04 	ldr.w	r1, [r8], #4
 80113ba:	4630      	mov	r0, r6
 80113bc:	f005 faae 	bl	801691c <ucdr_serialize_string>
 80113c0:	6862      	ldr	r2, [r4, #4]
 80113c2:	3701      	adds	r7, #1
 80113c4:	4297      	cmp	r7, r2
 80113c6:	d3f5      	bcc.n	80113b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80113c8:	4005      	ands	r5, r0
 80113ca:	b2ed      	uxtb	r5, r5
 80113cc:	e78a      	b.n	80112e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80113ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80113d0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80113d4:	4630      	mov	r0, r6
 80113d6:	f005 fa75 	bl	80168c4 <ucdr_serialize_sequence_uint8_t>
 80113da:	4005      	ands	r5, r0
 80113dc:	4628      	mov	r0, r5
 80113de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e2:	2500      	movs	r5, #0
 80113e4:	e77e      	b.n	80112e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80113e6:	4028      	ands	r0, r5
 80113e8:	b2c5      	uxtb	r5, r0
 80113ea:	e77b      	b.n	80112e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080113ec <uxr_serialize_OBJK_Subscriber_Binary>:
 80113ec:	b570      	push	{r4, r5, r6, lr}
 80113ee:	460d      	mov	r5, r1
 80113f0:	7809      	ldrb	r1, [r1, #0]
 80113f2:	4606      	mov	r6, r0
 80113f4:	f7fa fda0 	bl	800bf38 <ucdr_serialize_bool>
 80113f8:	782b      	ldrb	r3, [r5, #0]
 80113fa:	4604      	mov	r4, r0
 80113fc:	b94b      	cbnz	r3, 8011412 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80113fe:	7a29      	ldrb	r1, [r5, #8]
 8011400:	4630      	mov	r0, r6
 8011402:	f7fa fd99 	bl	800bf38 <ucdr_serialize_bool>
 8011406:	7a2b      	ldrb	r3, [r5, #8]
 8011408:	4004      	ands	r4, r0
 801140a:	b2e4      	uxtb	r4, r4
 801140c:	b943      	cbnz	r3, 8011420 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801140e:	4620      	mov	r0, r4
 8011410:	bd70      	pop	{r4, r5, r6, pc}
 8011412:	6869      	ldr	r1, [r5, #4]
 8011414:	4630      	mov	r0, r6
 8011416:	f005 fa81 	bl	801691c <ucdr_serialize_string>
 801141a:	4004      	ands	r4, r0
 801141c:	b2e4      	uxtb	r4, r4
 801141e:	e7ee      	b.n	80113fe <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8011420:	f105 010c 	add.w	r1, r5, #12
 8011424:	4630      	mov	r0, r6
 8011426:	f7ff ff53 	bl	80112d0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801142a:	4004      	ands	r4, r0
 801142c:	4620      	mov	r0, r4
 801142e:	bd70      	pop	{r4, r5, r6, pc}

08011430 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011430:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011434:	4688      	mov	r8, r1
 8011436:	8809      	ldrh	r1, [r1, #0]
 8011438:	4681      	mov	r9, r0
 801143a:	f7fa fdd7 	bl	800bfec <ucdr_serialize_uint16_t>
 801143e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8011442:	4606      	mov	r6, r0
 8011444:	4648      	mov	r0, r9
 8011446:	f7fa fd77 	bl	800bf38 <ucdr_serialize_bool>
 801144a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801144e:	4006      	ands	r6, r0
 8011450:	b2f5      	uxtb	r5, r6
 8011452:	b9eb      	cbnz	r3, 8011490 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011454:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011458:	4648      	mov	r0, r9
 801145a:	f7fa fd6d 	bl	800bf38 <ucdr_serialize_bool>
 801145e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011462:	4005      	ands	r5, r0
 8011464:	bb7b      	cbnz	r3, 80114c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011466:	f898 100c 	ldrb.w	r1, [r8, #12]
 801146a:	4648      	mov	r0, r9
 801146c:	f7fa fd64 	bl	800bf38 <ucdr_serialize_bool>
 8011470:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011474:	4005      	ands	r5, r0
 8011476:	b9f3      	cbnz	r3, 80114b6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011478:	f898 1014 	ldrb.w	r1, [r8, #20]
 801147c:	4648      	mov	r0, r9
 801147e:	f7fa fd5b 	bl	800bf38 <ucdr_serialize_bool>
 8011482:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011486:	4005      	ands	r5, r0
 8011488:	b94b      	cbnz	r3, 801149e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801148a:	4628      	mov	r0, r5
 801148c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011490:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011494:	4648      	mov	r0, r9
 8011496:	f7fa fda9 	bl	800bfec <ucdr_serialize_uint16_t>
 801149a:	4005      	ands	r5, r0
 801149c:	e7da      	b.n	8011454 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801149e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80114a2:	f108 011c 	add.w	r1, r8, #28
 80114a6:	4648      	mov	r0, r9
 80114a8:	f005 fa0c 	bl	80168c4 <ucdr_serialize_sequence_uint8_t>
 80114ac:	4028      	ands	r0, r5
 80114ae:	b2c5      	uxtb	r5, r0
 80114b0:	4628      	mov	r0, r5
 80114b2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80114b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80114ba:	4648      	mov	r0, r9
 80114bc:	f7fa ff80 	bl	800c3c0 <ucdr_serialize_uint32_t>
 80114c0:	4028      	ands	r0, r5
 80114c2:	b2c5      	uxtb	r5, r0
 80114c4:	e7d8      	b.n	8011478 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80114c6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80114ca:	4648      	mov	r0, r9
 80114cc:	f7fa ff78 	bl	800c3c0 <ucdr_serialize_uint32_t>
 80114d0:	4028      	ands	r0, r5
 80114d2:	b2c5      	uxtb	r5, r0
 80114d4:	e7c7      	b.n	8011466 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80114d6:	bf00      	nop

080114d8 <uxr_serialize_OBJK_DataReader_Binary>:
 80114d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114da:	2202      	movs	r2, #2
 80114dc:	460c      	mov	r4, r1
 80114de:	4606      	mov	r6, r0
 80114e0:	f005 f8fc 	bl	80166dc <ucdr_serialize_array_uint8_t>
 80114e4:	78a1      	ldrb	r1, [r4, #2]
 80114e6:	4605      	mov	r5, r0
 80114e8:	4630      	mov	r0, r6
 80114ea:	f7fa fd25 	bl	800bf38 <ucdr_serialize_bool>
 80114ee:	78a3      	ldrb	r3, [r4, #2]
 80114f0:	4005      	ands	r5, r0
 80114f2:	b2ed      	uxtb	r5, r5
 80114f4:	b90b      	cbnz	r3, 80114fa <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80114f6:	4628      	mov	r0, r5
 80114f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114fa:	f104 0108 	add.w	r1, r4, #8
 80114fe:	4630      	mov	r0, r6
 8011500:	f7ff ff96 	bl	8011430 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011504:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011508:	4607      	mov	r7, r0
 801150a:	4630      	mov	r0, r6
 801150c:	f7fa fd14 	bl	800bf38 <ucdr_serialize_bool>
 8011510:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011514:	4038      	ands	r0, r7
 8011516:	b2c7      	uxtb	r7, r0
 8011518:	b95b      	cbnz	r3, 8011532 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801151a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801151e:	4630      	mov	r0, r6
 8011520:	f7fa fd0a 	bl	800bf38 <ucdr_serialize_bool>
 8011524:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011528:	4007      	ands	r7, r0
 801152a:	b94b      	cbnz	r3, 8011540 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801152c:	403d      	ands	r5, r7
 801152e:	4628      	mov	r0, r5
 8011530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011532:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8011536:	4630      	mov	r0, r6
 8011538:	f7fb f998 	bl	800c86c <ucdr_serialize_uint64_t>
 801153c:	4007      	ands	r7, r0
 801153e:	e7ec      	b.n	801151a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8011540:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011542:	4630      	mov	r0, r6
 8011544:	f005 f9ea 	bl	801691c <ucdr_serialize_string>
 8011548:	4007      	ands	r7, r0
 801154a:	b2ff      	uxtb	r7, r7
 801154c:	e7ee      	b.n	801152c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801154e:	bf00      	nop

08011550 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011552:	2202      	movs	r2, #2
 8011554:	460d      	mov	r5, r1
 8011556:	4606      	mov	r6, r0
 8011558:	f005 f8c0 	bl	80166dc <ucdr_serialize_array_uint8_t>
 801155c:	78a9      	ldrb	r1, [r5, #2]
 801155e:	4604      	mov	r4, r0
 8011560:	4630      	mov	r0, r6
 8011562:	f7fa fce9 	bl	800bf38 <ucdr_serialize_bool>
 8011566:	78ab      	ldrb	r3, [r5, #2]
 8011568:	4004      	ands	r4, r0
 801156a:	b2e4      	uxtb	r4, r4
 801156c:	b90b      	cbnz	r3, 8011572 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801156e:	4620      	mov	r0, r4
 8011570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011572:	f105 0108 	add.w	r1, r5, #8
 8011576:	4630      	mov	r0, r6
 8011578:	f7ff ff5a 	bl	8011430 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801157c:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8011580:	4607      	mov	r7, r0
 8011582:	4630      	mov	r0, r6
 8011584:	f7fa fcd8 	bl	800bf38 <ucdr_serialize_bool>
 8011588:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801158c:	4038      	ands	r0, r7
 801158e:	b2c7      	uxtb	r7, r0
 8011590:	b913      	cbnz	r3, 8011598 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011592:	403c      	ands	r4, r7
 8011594:	4620      	mov	r0, r4
 8011596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011598:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801159c:	4630      	mov	r0, r6
 801159e:	f7fb f965 	bl	800c86c <ucdr_serialize_uint64_t>
 80115a2:	4007      	ands	r7, r0
 80115a4:	e7f5      	b.n	8011592 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80115a6:	bf00      	nop

080115a8 <uxr_deserialize_ObjectVariant>:
 80115a8:	b570      	push	{r4, r5, r6, lr}
 80115aa:	4605      	mov	r5, r0
 80115ac:	460e      	mov	r6, r1
 80115ae:	f7fa fd07 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 80115b2:	b168      	cbz	r0, 80115d0 <uxr_deserialize_ObjectVariant+0x28>
 80115b4:	7833      	ldrb	r3, [r6, #0]
 80115b6:	3b01      	subs	r3, #1
 80115b8:	4604      	mov	r4, r0
 80115ba:	2b0d      	cmp	r3, #13
 80115bc:	d809      	bhi.n	80115d2 <uxr_deserialize_ObjectVariant+0x2a>
 80115be:	e8df f003 	tbb	[pc, r3]
 80115c2:	0a41      	.short	0x0a41
 80115c4:	0a0a2323 	.word	0x0a0a2323
 80115c8:	10080a0a 	.word	0x10080a0a
 80115cc:	565c1010 	.word	0x565c1010
 80115d0:	2400      	movs	r4, #0
 80115d2:	4620      	mov	r0, r4
 80115d4:	bd70      	pop	{r4, r5, r6, pc}
 80115d6:	1d31      	adds	r1, r6, #4
 80115d8:	4628      	mov	r0, r5
 80115da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115de:	f7ff bd55 	b.w	801108c <uxr_deserialize_DATAWRITER_Representation>
 80115e2:	1d31      	adds	r1, r6, #4
 80115e4:	4628      	mov	r0, r5
 80115e6:	f7fa fceb 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 80115ea:	2800      	cmp	r0, #0
 80115ec:	d0f0      	beq.n	80115d0 <uxr_deserialize_ObjectVariant+0x28>
 80115ee:	7933      	ldrb	r3, [r6, #4]
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	d001      	beq.n	80115f8 <uxr_deserialize_ObjectVariant+0x50>
 80115f4:	2b02      	cmp	r3, #2
 80115f6:	d1ec      	bne.n	80115d2 <uxr_deserialize_ObjectVariant+0x2a>
 80115f8:	68b1      	ldr	r1, [r6, #8]
 80115fa:	4628      	mov	r0, r5
 80115fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011604:	f005 b99a 	b.w	801693c <ucdr_deserialize_string>
 8011608:	1d31      	adds	r1, r6, #4
 801160a:	4628      	mov	r0, r5
 801160c:	f7fa fcd8 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011610:	4604      	mov	r4, r0
 8011612:	b170      	cbz	r0, 8011632 <uxr_deserialize_ObjectVariant+0x8a>
 8011614:	7933      	ldrb	r3, [r6, #4]
 8011616:	2b02      	cmp	r3, #2
 8011618:	d04c      	beq.n	80116b4 <uxr_deserialize_ObjectVariant+0x10c>
 801161a:	2b03      	cmp	r3, #3
 801161c:	d109      	bne.n	8011632 <uxr_deserialize_ObjectVariant+0x8a>
 801161e:	f106 0308 	add.w	r3, r6, #8
 8011622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011626:	f106 010c 	add.w	r1, r6, #12
 801162a:	4628      	mov	r0, r5
 801162c:	f005 f95c 	bl	80168e8 <ucdr_deserialize_sequence_uint8_t>
 8011630:	4604      	mov	r4, r0
 8011632:	2202      	movs	r2, #2
 8011634:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8011638:	4628      	mov	r0, r5
 801163a:	f005 f8b3 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 801163e:	4020      	ands	r0, r4
 8011640:	b2c4      	uxtb	r4, r0
 8011642:	e7c6      	b.n	80115d2 <uxr_deserialize_ObjectVariant+0x2a>
 8011644:	1d31      	adds	r1, r6, #4
 8011646:	4628      	mov	r0, r5
 8011648:	f7fa fcba 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 801164c:	4604      	mov	r4, r0
 801164e:	b130      	cbz	r0, 801165e <uxr_deserialize_ObjectVariant+0xb6>
 8011650:	7933      	ldrb	r3, [r6, #4]
 8011652:	2b02      	cmp	r3, #2
 8011654:	d036      	beq.n	80116c4 <uxr_deserialize_ObjectVariant+0x11c>
 8011656:	2b03      	cmp	r3, #3
 8011658:	d03c      	beq.n	80116d4 <uxr_deserialize_ObjectVariant+0x12c>
 801165a:	2b01      	cmp	r3, #1
 801165c:	d032      	beq.n	80116c4 <uxr_deserialize_ObjectVariant+0x11c>
 801165e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8011662:	4628      	mov	r0, r5
 8011664:	f7fb fa52 	bl	800cb0c <ucdr_deserialize_int16_t>
 8011668:	4020      	ands	r0, r4
 801166a:	b2c4      	uxtb	r4, r0
 801166c:	e7b1      	b.n	80115d2 <uxr_deserialize_ObjectVariant+0x2a>
 801166e:	1d31      	adds	r1, r6, #4
 8011670:	4628      	mov	r0, r5
 8011672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011676:	f7ff bbbf 	b.w	8010df8 <uxr_deserialize_CLIENT_Representation>
 801167a:	2204      	movs	r2, #4
 801167c:	18b1      	adds	r1, r6, r2
 801167e:	4628      	mov	r0, r5
 8011680:	f005 f890 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011684:	2202      	movs	r2, #2
 8011686:	f106 0108 	add.w	r1, r6, #8
 801168a:	4604      	mov	r4, r0
 801168c:	4628      	mov	r0, r5
 801168e:	f005 f889 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011692:	2202      	movs	r2, #2
 8011694:	4004      	ands	r4, r0
 8011696:	f106 010a 	add.w	r1, r6, #10
 801169a:	4628      	mov	r0, r5
 801169c:	f005 f882 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 80116a0:	b2e4      	uxtb	r4, r4
 80116a2:	4603      	mov	r3, r0
 80116a4:	f106 010c 	add.w	r1, r6, #12
 80116a8:	4628      	mov	r0, r5
 80116aa:	401c      	ands	r4, r3
 80116ac:	f7fa fc5a 	bl	800bf64 <ucdr_deserialize_bool>
 80116b0:	4004      	ands	r4, r0
 80116b2:	e78e      	b.n	80115d2 <uxr_deserialize_ObjectVariant+0x2a>
 80116b4:	68b1      	ldr	r1, [r6, #8]
 80116b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80116ba:	4628      	mov	r0, r5
 80116bc:	f005 f93e 	bl	801693c <ucdr_deserialize_string>
 80116c0:	4604      	mov	r4, r0
 80116c2:	e7b6      	b.n	8011632 <uxr_deserialize_ObjectVariant+0x8a>
 80116c4:	68b1      	ldr	r1, [r6, #8]
 80116c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80116ca:	4628      	mov	r0, r5
 80116cc:	f005 f936 	bl	801693c <ucdr_deserialize_string>
 80116d0:	4604      	mov	r4, r0
 80116d2:	e7c4      	b.n	801165e <uxr_deserialize_ObjectVariant+0xb6>
 80116d4:	f106 0308 	add.w	r3, r6, #8
 80116d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80116dc:	f106 010c 	add.w	r1, r6, #12
 80116e0:	4628      	mov	r0, r5
 80116e2:	f005 f901 	bl	80168e8 <ucdr_deserialize_sequence_uint8_t>
 80116e6:	4604      	mov	r4, r0
 80116e8:	e7b9      	b.n	801165e <uxr_deserialize_ObjectVariant+0xb6>
 80116ea:	bf00      	nop

080116ec <uxr_deserialize_BaseObjectRequest>:
 80116ec:	b570      	push	{r4, r5, r6, lr}
 80116ee:	2202      	movs	r2, #2
 80116f0:	4605      	mov	r5, r0
 80116f2:	460e      	mov	r6, r1
 80116f4:	f005 f856 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 80116f8:	2202      	movs	r2, #2
 80116fa:	4604      	mov	r4, r0
 80116fc:	18b1      	adds	r1, r6, r2
 80116fe:	4628      	mov	r0, r5
 8011700:	f005 f850 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011704:	4020      	ands	r0, r4
 8011706:	b2c0      	uxtb	r0, r0
 8011708:	bd70      	pop	{r4, r5, r6, pc}
 801170a:	bf00      	nop

0801170c <uxr_serialize_ActivityInfoVariant>:
 801170c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011710:	460d      	mov	r5, r1
 8011712:	7809      	ldrb	r1, [r1, #0]
 8011714:	4607      	mov	r7, r0
 8011716:	f7fa fc3d 	bl	800bf94 <ucdr_serialize_uint8_t>
 801171a:	4681      	mov	r9, r0
 801171c:	b138      	cbz	r0, 801172e <uxr_serialize_ActivityInfoVariant+0x22>
 801171e:	782b      	ldrb	r3, [r5, #0]
 8011720:	2b06      	cmp	r3, #6
 8011722:	f000 8082 	beq.w	801182a <uxr_serialize_ActivityInfoVariant+0x11e>
 8011726:	2b0d      	cmp	r3, #13
 8011728:	d016      	beq.n	8011758 <uxr_serialize_ActivityInfoVariant+0x4c>
 801172a:	2b05      	cmp	r3, #5
 801172c:	d002      	beq.n	8011734 <uxr_serialize_ActivityInfoVariant+0x28>
 801172e:	4648      	mov	r0, r9
 8011730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011734:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011738:	4638      	mov	r0, r7
 801173a:	f7fb f967 	bl	800ca0c <ucdr_serialize_int16_t>
 801173e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011742:	4681      	mov	r9, r0
 8011744:	4638      	mov	r0, r7
 8011746:	f7fb f891 	bl	800c86c <ucdr_serialize_uint64_t>
 801174a:	ea09 0000 	and.w	r0, r9, r0
 801174e:	fa5f f980 	uxtb.w	r9, r0
 8011752:	4648      	mov	r0, r9
 8011754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011758:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801175c:	4638      	mov	r0, r7
 801175e:	f7fb f955 	bl	800ca0c <ucdr_serialize_int16_t>
 8011762:	68e9      	ldr	r1, [r5, #12]
 8011764:	4681      	mov	r9, r0
 8011766:	4638      	mov	r0, r7
 8011768:	f7fa fe2a 	bl	800c3c0 <ucdr_serialize_uint32_t>
 801176c:	68eb      	ldr	r3, [r5, #12]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d0eb      	beq.n	801174a <uxr_serialize_ActivityInfoVariant+0x3e>
 8011772:	b320      	cbz	r0, 80117be <uxr_serialize_ActivityInfoVariant+0xb2>
 8011774:	f105 080c 	add.w	r8, r5, #12
 8011778:	2600      	movs	r6, #0
 801177a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801177e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8011782:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011786:	4638      	mov	r0, r7
 8011788:	f7fa fc04 	bl	800bf94 <ucdr_serialize_uint8_t>
 801178c:	2800      	cmp	r0, #0
 801178e:	d053      	beq.n	8011838 <uxr_serialize_ActivityInfoVariant+0x12c>
 8011790:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011794:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011798:	0074      	lsls	r4, r6, #1
 801179a:	00c9      	lsls	r1, r1, #3
 801179c:	2b03      	cmp	r3, #3
 801179e:	d854      	bhi.n	801184a <uxr_serialize_ActivityInfoVariant+0x13e>
 80117a0:	e8df f003 	tbb	[pc, r3]
 80117a4:	02102132 	.word	0x02102132
 80117a8:	4441      	add	r1, r8
 80117aa:	4638      	mov	r0, r7
 80117ac:	6889      	ldr	r1, [r1, #8]
 80117ae:	f005 f8b5 	bl	801691c <ucdr_serialize_string>
 80117b2:	68ea      	ldr	r2, [r5, #12]
 80117b4:	3601      	adds	r6, #1
 80117b6:	4296      	cmp	r6, r2
 80117b8:	d242      	bcs.n	8011840 <uxr_serialize_ActivityInfoVariant+0x134>
 80117ba:	2800      	cmp	r0, #0
 80117bc:	d1dd      	bne.n	801177a <uxr_serialize_ActivityInfoVariant+0x6e>
 80117be:	f04f 0900 	mov.w	r9, #0
 80117c2:	e7b4      	b.n	801172e <uxr_serialize_ActivityInfoVariant+0x22>
 80117c4:	3108      	adds	r1, #8
 80117c6:	4441      	add	r1, r8
 80117c8:	2210      	movs	r2, #16
 80117ca:	4638      	mov	r0, r7
 80117cc:	f004 ff86 	bl	80166dc <ucdr_serialize_array_uint8_t>
 80117d0:	4434      	add	r4, r6
 80117d2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80117d6:	4604      	mov	r4, r0
 80117d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80117da:	4638      	mov	r0, r7
 80117dc:	f7fa fdf0 	bl	800c3c0 <ucdr_serialize_uint32_t>
 80117e0:	4020      	ands	r0, r4
 80117e2:	b2c0      	uxtb	r0, r0
 80117e4:	e7e5      	b.n	80117b2 <uxr_serialize_ActivityInfoVariant+0xa6>
 80117e6:	3108      	adds	r1, #8
 80117e8:	4441      	add	r1, r8
 80117ea:	2204      	movs	r2, #4
 80117ec:	4638      	mov	r0, r7
 80117ee:	f004 ff75 	bl	80166dc <ucdr_serialize_array_uint8_t>
 80117f2:	4434      	add	r4, r6
 80117f4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80117f8:	4604      	mov	r4, r0
 80117fa:	8b19      	ldrh	r1, [r3, #24]
 80117fc:	4638      	mov	r0, r7
 80117fe:	f7fa fbf5 	bl	800bfec <ucdr_serialize_uint16_t>
 8011802:	4020      	ands	r0, r4
 8011804:	b2c0      	uxtb	r0, r0
 8011806:	e7d4      	b.n	80117b2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8011808:	3108      	adds	r1, #8
 801180a:	4441      	add	r1, r8
 801180c:	2202      	movs	r2, #2
 801180e:	4638      	mov	r0, r7
 8011810:	f004 ff64 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011814:	4434      	add	r4, r6
 8011816:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801181a:	4604      	mov	r4, r0
 801181c:	7d99      	ldrb	r1, [r3, #22]
 801181e:	4638      	mov	r0, r7
 8011820:	f7fa fbb8 	bl	800bf94 <ucdr_serialize_uint8_t>
 8011824:	4020      	ands	r0, r4
 8011826:	b2c0      	uxtb	r0, r0
 8011828:	e7c3      	b.n	80117b2 <uxr_serialize_ActivityInfoVariant+0xa6>
 801182a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801182e:	4638      	mov	r0, r7
 8011830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011834:	f7fb b8ea 	b.w	800ca0c <ucdr_serialize_int16_t>
 8011838:	68ea      	ldr	r2, [r5, #12]
 801183a:	3601      	adds	r6, #1
 801183c:	42b2      	cmp	r2, r6
 801183e:	d8be      	bhi.n	80117be <uxr_serialize_ActivityInfoVariant+0xb2>
 8011840:	ea09 0900 	and.w	r9, r9, r0
 8011844:	fa5f f989 	uxtb.w	r9, r9
 8011848:	e771      	b.n	801172e <uxr_serialize_ActivityInfoVariant+0x22>
 801184a:	68eb      	ldr	r3, [r5, #12]
 801184c:	3601      	adds	r6, #1
 801184e:	429e      	cmp	r6, r3
 8011850:	f10a 0a18 	add.w	sl, sl, #24
 8011854:	d395      	bcc.n	8011782 <uxr_serialize_ActivityInfoVariant+0x76>
 8011856:	e76a      	b.n	801172e <uxr_serialize_ActivityInfoVariant+0x22>

08011858 <uxr_deserialize_BaseObjectReply>:
 8011858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801185c:	2202      	movs	r2, #2
 801185e:	4606      	mov	r6, r0
 8011860:	460f      	mov	r7, r1
 8011862:	f004 ff9f 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011866:	2202      	movs	r2, #2
 8011868:	18b9      	adds	r1, r7, r2
 801186a:	4605      	mov	r5, r0
 801186c:	4630      	mov	r0, r6
 801186e:	f004 ff99 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011872:	1d39      	adds	r1, r7, #4
 8011874:	4680      	mov	r8, r0
 8011876:	4630      	mov	r0, r6
 8011878:	f7fa fba2 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 801187c:	1d79      	adds	r1, r7, #5
 801187e:	4604      	mov	r4, r0
 8011880:	4630      	mov	r0, r6
 8011882:	f7fa fb9d 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011886:	ea05 0508 	and.w	r5, r5, r8
 801188a:	402c      	ands	r4, r5
 801188c:	4020      	ands	r0, r4
 801188e:	b2c0      	uxtb	r0, r0
 8011890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011894 <uxr_serialize_ReadSpecification>:
 8011894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011898:	460e      	mov	r6, r1
 801189a:	7809      	ldrb	r1, [r1, #0]
 801189c:	4607      	mov	r7, r0
 801189e:	f7fa fb79 	bl	800bf94 <ucdr_serialize_uint8_t>
 80118a2:	7871      	ldrb	r1, [r6, #1]
 80118a4:	4604      	mov	r4, r0
 80118a6:	4638      	mov	r0, r7
 80118a8:	f7fa fb74 	bl	800bf94 <ucdr_serialize_uint8_t>
 80118ac:	78b1      	ldrb	r1, [r6, #2]
 80118ae:	4004      	ands	r4, r0
 80118b0:	4638      	mov	r0, r7
 80118b2:	f7fa fb41 	bl	800bf38 <ucdr_serialize_bool>
 80118b6:	78b3      	ldrb	r3, [r6, #2]
 80118b8:	b2e4      	uxtb	r4, r4
 80118ba:	4004      	ands	r4, r0
 80118bc:	b94b      	cbnz	r3, 80118d2 <uxr_serialize_ReadSpecification+0x3e>
 80118be:	7a31      	ldrb	r1, [r6, #8]
 80118c0:	4638      	mov	r0, r7
 80118c2:	f7fa fb39 	bl	800bf38 <ucdr_serialize_bool>
 80118c6:	7a33      	ldrb	r3, [r6, #8]
 80118c8:	4004      	ands	r4, r0
 80118ca:	b943      	cbnz	r3, 80118de <uxr_serialize_ReadSpecification+0x4a>
 80118cc:	4620      	mov	r0, r4
 80118ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d2:	6871      	ldr	r1, [r6, #4]
 80118d4:	4638      	mov	r0, r7
 80118d6:	f005 f821 	bl	801691c <ucdr_serialize_string>
 80118da:	4004      	ands	r4, r0
 80118dc:	e7ef      	b.n	80118be <uxr_serialize_ReadSpecification+0x2a>
 80118de:	8971      	ldrh	r1, [r6, #10]
 80118e0:	4638      	mov	r0, r7
 80118e2:	f7fa fb83 	bl	800bfec <ucdr_serialize_uint16_t>
 80118e6:	89b1      	ldrh	r1, [r6, #12]
 80118e8:	4605      	mov	r5, r0
 80118ea:	4638      	mov	r0, r7
 80118ec:	f7fa fb7e 	bl	800bfec <ucdr_serialize_uint16_t>
 80118f0:	89f1      	ldrh	r1, [r6, #14]
 80118f2:	4005      	ands	r5, r0
 80118f4:	4638      	mov	r0, r7
 80118f6:	f7fa fb79 	bl	800bfec <ucdr_serialize_uint16_t>
 80118fa:	8a31      	ldrh	r1, [r6, #16]
 80118fc:	4680      	mov	r8, r0
 80118fe:	4638      	mov	r0, r7
 8011900:	f7fa fb74 	bl	800bfec <ucdr_serialize_uint16_t>
 8011904:	b2ed      	uxtb	r5, r5
 8011906:	4025      	ands	r5, r4
 8011908:	ea08 0505 	and.w	r5, r8, r5
 801190c:	ea00 0405 	and.w	r4, r0, r5
 8011910:	4620      	mov	r0, r4
 8011912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011916:	bf00      	nop

08011918 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011918:	f7ff ba16 	b.w	8010d48 <uxr_serialize_CLIENT_Representation>

0801191c <uxr_serialize_CREATE_Payload>:
 801191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801191e:	2202      	movs	r2, #2
 8011920:	4607      	mov	r7, r0
 8011922:	460e      	mov	r6, r1
 8011924:	f004 feda 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011928:	2202      	movs	r2, #2
 801192a:	18b1      	adds	r1, r6, r2
 801192c:	4605      	mov	r5, r0
 801192e:	4638      	mov	r0, r7
 8011930:	f004 fed4 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011934:	7931      	ldrb	r1, [r6, #4]
 8011936:	4604      	mov	r4, r0
 8011938:	4638      	mov	r0, r7
 801193a:	f7fa fb2b 	bl	800bf94 <ucdr_serialize_uint8_t>
 801193e:	b170      	cbz	r0, 801195e <uxr_serialize_CREATE_Payload+0x42>
 8011940:	7933      	ldrb	r3, [r6, #4]
 8011942:	402c      	ands	r4, r5
 8011944:	3b01      	subs	r3, #1
 8011946:	b2e4      	uxtb	r4, r4
 8011948:	2b0d      	cmp	r3, #13
 801194a:	d809      	bhi.n	8011960 <uxr_serialize_CREATE_Payload+0x44>
 801194c:	e8df f003 	tbb	[pc, r3]
 8011950:	23230a4c 	.word	0x23230a4c
 8011954:	0a0a0a0a 	.word	0x0a0a0a0a
 8011958:	12121208 	.word	0x12121208
 801195c:	3e45      	.short	0x3e45
 801195e:	2400      	movs	r4, #0
 8011960:	4620      	mov	r0, r4
 8011962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011964:	f106 0108 	add.w	r1, r6, #8
 8011968:	4638      	mov	r0, r7
 801196a:	f7ff faf3 	bl	8010f54 <uxr_serialize_DATAWRITER_Representation>
 801196e:	4004      	ands	r4, r0
 8011970:	4620      	mov	r0, r4
 8011972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011974:	7a31      	ldrb	r1, [r6, #8]
 8011976:	4638      	mov	r0, r7
 8011978:	f7fa fb0c 	bl	800bf94 <ucdr_serialize_uint8_t>
 801197c:	2800      	cmp	r0, #0
 801197e:	d0ee      	beq.n	801195e <uxr_serialize_CREATE_Payload+0x42>
 8011980:	7a33      	ldrb	r3, [r6, #8]
 8011982:	2b01      	cmp	r3, #1
 8011984:	d001      	beq.n	801198a <uxr_serialize_CREATE_Payload+0x6e>
 8011986:	2b02      	cmp	r3, #2
 8011988:	d1ea      	bne.n	8011960 <uxr_serialize_CREATE_Payload+0x44>
 801198a:	68f1      	ldr	r1, [r6, #12]
 801198c:	4638      	mov	r0, r7
 801198e:	f004 ffc5 	bl	801691c <ucdr_serialize_string>
 8011992:	4004      	ands	r4, r0
 8011994:	e7e4      	b.n	8011960 <uxr_serialize_CREATE_Payload+0x44>
 8011996:	7a31      	ldrb	r1, [r6, #8]
 8011998:	4638      	mov	r0, r7
 801199a:	f7fa fafb 	bl	800bf94 <ucdr_serialize_uint8_t>
 801199e:	4605      	mov	r5, r0
 80119a0:	b158      	cbz	r0, 80119ba <uxr_serialize_CREATE_Payload+0x9e>
 80119a2:	7a33      	ldrb	r3, [r6, #8]
 80119a4:	2b02      	cmp	r3, #2
 80119a6:	d034      	beq.n	8011a12 <uxr_serialize_CREATE_Payload+0xf6>
 80119a8:	2b03      	cmp	r3, #3
 80119aa:	d106      	bne.n	80119ba <uxr_serialize_CREATE_Payload+0x9e>
 80119ac:	68f2      	ldr	r2, [r6, #12]
 80119ae:	f106 0110 	add.w	r1, r6, #16
 80119b2:	4638      	mov	r0, r7
 80119b4:	f004 ff86 	bl	80168c4 <ucdr_serialize_sequence_uint8_t>
 80119b8:	4605      	mov	r5, r0
 80119ba:	2202      	movs	r2, #2
 80119bc:	f506 7104 	add.w	r1, r6, #528	; 0x210
 80119c0:	4638      	mov	r0, r7
 80119c2:	f004 fe8b 	bl	80166dc <ucdr_serialize_array_uint8_t>
 80119c6:	4028      	ands	r0, r5
 80119c8:	4004      	ands	r4, r0
 80119ca:	e7c9      	b.n	8011960 <uxr_serialize_CREATE_Payload+0x44>
 80119cc:	f106 0108 	add.w	r1, r6, #8
 80119d0:	4638      	mov	r0, r7
 80119d2:	f7ff f9b9 	bl	8010d48 <uxr_serialize_CLIENT_Representation>
 80119d6:	4004      	ands	r4, r0
 80119d8:	e7c2      	b.n	8011960 <uxr_serialize_CREATE_Payload+0x44>
 80119da:	f106 0108 	add.w	r1, r6, #8
 80119de:	4638      	mov	r0, r7
 80119e0:	f7ff fa6e 	bl	8010ec0 <uxr_serialize_AGENT_Representation>
 80119e4:	4004      	ands	r4, r0
 80119e6:	e7bb      	b.n	8011960 <uxr_serialize_CREATE_Payload+0x44>
 80119e8:	7a31      	ldrb	r1, [r6, #8]
 80119ea:	4638      	mov	r0, r7
 80119ec:	f7fa fad2 	bl	800bf94 <ucdr_serialize_uint8_t>
 80119f0:	4605      	mov	r5, r0
 80119f2:	b130      	cbz	r0, 8011a02 <uxr_serialize_CREATE_Payload+0xe6>
 80119f4:	7a33      	ldrb	r3, [r6, #8]
 80119f6:	2b02      	cmp	r3, #2
 80119f8:	d011      	beq.n	8011a1e <uxr_serialize_CREATE_Payload+0x102>
 80119fa:	2b03      	cmp	r3, #3
 80119fc:	d015      	beq.n	8011a2a <uxr_serialize_CREATE_Payload+0x10e>
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d00d      	beq.n	8011a1e <uxr_serialize_CREATE_Payload+0x102>
 8011a02:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8011a06:	4638      	mov	r0, r7
 8011a08:	f7fb f800 	bl	800ca0c <ucdr_serialize_int16_t>
 8011a0c:	4028      	ands	r0, r5
 8011a0e:	4004      	ands	r4, r0
 8011a10:	e7a6      	b.n	8011960 <uxr_serialize_CREATE_Payload+0x44>
 8011a12:	68f1      	ldr	r1, [r6, #12]
 8011a14:	4638      	mov	r0, r7
 8011a16:	f004 ff81 	bl	801691c <ucdr_serialize_string>
 8011a1a:	4605      	mov	r5, r0
 8011a1c:	e7cd      	b.n	80119ba <uxr_serialize_CREATE_Payload+0x9e>
 8011a1e:	68f1      	ldr	r1, [r6, #12]
 8011a20:	4638      	mov	r0, r7
 8011a22:	f004 ff7b 	bl	801691c <ucdr_serialize_string>
 8011a26:	4605      	mov	r5, r0
 8011a28:	e7eb      	b.n	8011a02 <uxr_serialize_CREATE_Payload+0xe6>
 8011a2a:	68f2      	ldr	r2, [r6, #12]
 8011a2c:	f106 0110 	add.w	r1, r6, #16
 8011a30:	4638      	mov	r0, r7
 8011a32:	f004 ff47 	bl	80168c4 <ucdr_serialize_sequence_uint8_t>
 8011a36:	4605      	mov	r5, r0
 8011a38:	e7e3      	b.n	8011a02 <uxr_serialize_CREATE_Payload+0xe6>
 8011a3a:	bf00      	nop

08011a3c <uxr_deserialize_GET_INFO_Payload>:
 8011a3c:	b570      	push	{r4, r5, r6, lr}
 8011a3e:	2202      	movs	r2, #2
 8011a40:	4605      	mov	r5, r0
 8011a42:	460e      	mov	r6, r1
 8011a44:	f004 feae 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011a48:	2202      	movs	r2, #2
 8011a4a:	18b1      	adds	r1, r6, r2
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	4628      	mov	r0, r5
 8011a50:	f004 fea8 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011a54:	1d31      	adds	r1, r6, #4
 8011a56:	4004      	ands	r4, r0
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7fa fde1 	bl	800c620 <ucdr_deserialize_uint32_t>
 8011a5e:	b2e4      	uxtb	r4, r4
 8011a60:	4020      	ands	r0, r4
 8011a62:	bd70      	pop	{r4, r5, r6, pc}

08011a64 <uxr_serialize_DELETE_Payload>:
 8011a64:	b570      	push	{r4, r5, r6, lr}
 8011a66:	2202      	movs	r2, #2
 8011a68:	4605      	mov	r5, r0
 8011a6a:	460e      	mov	r6, r1
 8011a6c:	f004 fe36 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011a70:	2202      	movs	r2, #2
 8011a72:	4604      	mov	r4, r0
 8011a74:	18b1      	adds	r1, r6, r2
 8011a76:	4628      	mov	r0, r5
 8011a78:	f004 fe30 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011a7c:	4020      	ands	r0, r4
 8011a7e:	b2c0      	uxtb	r0, r0
 8011a80:	bd70      	pop	{r4, r5, r6, pc}
 8011a82:	bf00      	nop

08011a84 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a88:	4605      	mov	r5, r0
 8011a8a:	460e      	mov	r6, r1
 8011a8c:	f7fa fa98 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011a90:	1c71      	adds	r1, r6, #1
 8011a92:	4604      	mov	r4, r0
 8011a94:	4628      	mov	r0, r5
 8011a96:	f7fa fa93 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011a9a:	2204      	movs	r2, #4
 8011a9c:	18b1      	adds	r1, r6, r2
 8011a9e:	4680      	mov	r8, r0
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	f004 fe7f 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011aa6:	f106 0108 	add.w	r1, r6, #8
 8011aaa:	4607      	mov	r7, r0
 8011aac:	2202      	movs	r2, #2
 8011aae:	4628      	mov	r0, r5
 8011ab0:	f004 fe78 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011ab4:	ea04 0308 	and.w	r3, r4, r8
 8011ab8:	b2db      	uxtb	r3, r3
 8011aba:	ea03 0407 	and.w	r4, r3, r7
 8011abe:	2202      	movs	r2, #2
 8011ac0:	4607      	mov	r7, r0
 8011ac2:	f106 010a 	add.w	r1, r6, #10
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	f004 fe6c 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011acc:	f106 010c 	add.w	r1, r6, #12
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	461d      	mov	r5, r3
 8011ad6:	f7fa fa45 	bl	800bf64 <ucdr_deserialize_bool>
 8011ada:	403c      	ands	r4, r7
 8011adc:	4025      	ands	r5, r4
 8011ade:	4028      	ands	r0, r5
 8011ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ae4 <uxr_deserialize_STATUS_Payload>:
 8011ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ae8:	2202      	movs	r2, #2
 8011aea:	4606      	mov	r6, r0
 8011aec:	460f      	mov	r7, r1
 8011aee:	f004 fe59 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011af2:	2202      	movs	r2, #2
 8011af4:	18b9      	adds	r1, r7, r2
 8011af6:	4605      	mov	r5, r0
 8011af8:	4630      	mov	r0, r6
 8011afa:	f004 fe53 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011afe:	1d39      	adds	r1, r7, #4
 8011b00:	4680      	mov	r8, r0
 8011b02:	4630      	mov	r0, r6
 8011b04:	f7fa fa5c 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011b08:	1d79      	adds	r1, r7, #5
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f7fa fa57 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011b12:	ea05 0508 	and.w	r5, r5, r8
 8011b16:	402c      	ands	r4, r5
 8011b18:	4020      	ands	r0, r4
 8011b1a:	b2c0      	uxtb	r0, r0
 8011b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b20 <uxr_serialize_INFO_Payload>:
 8011b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b24:	2202      	movs	r2, #2
 8011b26:	460c      	mov	r4, r1
 8011b28:	4605      	mov	r5, r0
 8011b2a:	f004 fdd7 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011b2e:	2202      	movs	r2, #2
 8011b30:	18a1      	adds	r1, r4, r2
 8011b32:	4680      	mov	r8, r0
 8011b34:	4628      	mov	r0, r5
 8011b36:	f004 fdd1 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011b3a:	7921      	ldrb	r1, [r4, #4]
 8011b3c:	4607      	mov	r7, r0
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f7fa fa28 	bl	800bf94 <ucdr_serialize_uint8_t>
 8011b44:	7961      	ldrb	r1, [r4, #5]
 8011b46:	4606      	mov	r6, r0
 8011b48:	4628      	mov	r0, r5
 8011b4a:	f7fa fa23 	bl	800bf94 <ucdr_serialize_uint8_t>
 8011b4e:	ea08 0807 	and.w	r8, r8, r7
 8011b52:	ea06 0608 	and.w	r6, r6, r8
 8011b56:	4006      	ands	r6, r0
 8011b58:	7a21      	ldrb	r1, [r4, #8]
 8011b5a:	4628      	mov	r0, r5
 8011b5c:	f7fa f9ec 	bl	800bf38 <ucdr_serialize_bool>
 8011b60:	7a23      	ldrb	r3, [r4, #8]
 8011b62:	b2f7      	uxtb	r7, r6
 8011b64:	4606      	mov	r6, r0
 8011b66:	b96b      	cbnz	r3, 8011b84 <uxr_serialize_INFO_Payload+0x64>
 8011b68:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f7fa f9e3 	bl	800bf38 <ucdr_serialize_bool>
 8011b72:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8011b76:	4030      	ands	r0, r6
 8011b78:	b2c6      	uxtb	r6, r0
 8011b7a:	b983      	cbnz	r3, 8011b9e <uxr_serialize_INFO_Payload+0x7e>
 8011b7c:	ea06 0007 	and.w	r0, r6, r7
 8011b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b84:	7b21      	ldrb	r1, [r4, #12]
 8011b86:	4628      	mov	r0, r5
 8011b88:	f7fa fa04 	bl	800bf94 <ucdr_serialize_uint8_t>
 8011b8c:	b188      	cbz	r0, 8011bb2 <uxr_serialize_INFO_Payload+0x92>
 8011b8e:	f104 010c 	add.w	r1, r4, #12
 8011b92:	4628      	mov	r0, r5
 8011b94:	f7ff fa06 	bl	8010fa4 <uxr_serialize_ObjectVariant.part.0>
 8011b98:	4030      	ands	r0, r6
 8011b9a:	b2c6      	uxtb	r6, r0
 8011b9c:	e7e4      	b.n	8011b68 <uxr_serialize_INFO_Payload+0x48>
 8011b9e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f7ff fdb2 	bl	801170c <uxr_serialize_ActivityInfoVariant>
 8011ba8:	4006      	ands	r6, r0
 8011baa:	ea06 0007 	and.w	r0, r6, r7
 8011bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bb2:	4606      	mov	r6, r0
 8011bb4:	e7d8      	b.n	8011b68 <uxr_serialize_INFO_Payload+0x48>
 8011bb6:	bf00      	nop

08011bb8 <uxr_serialize_READ_DATA_Payload>:
 8011bb8:	b570      	push	{r4, r5, r6, lr}
 8011bba:	2202      	movs	r2, #2
 8011bbc:	4605      	mov	r5, r0
 8011bbe:	460e      	mov	r6, r1
 8011bc0:	f004 fd8c 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011bc4:	2202      	movs	r2, #2
 8011bc6:	18b1      	adds	r1, r6, r2
 8011bc8:	4604      	mov	r4, r0
 8011bca:	4628      	mov	r0, r5
 8011bcc:	f004 fd86 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011bd0:	1d31      	adds	r1, r6, #4
 8011bd2:	4004      	ands	r4, r0
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f7ff fe5d 	bl	8011894 <uxr_serialize_ReadSpecification>
 8011bda:	b2e4      	uxtb	r4, r4
 8011bdc:	4020      	ands	r0, r4
 8011bde:	bd70      	pop	{r4, r5, r6, pc}

08011be0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011be0:	b570      	push	{r4, r5, r6, lr}
 8011be2:	2202      	movs	r2, #2
 8011be4:	4605      	mov	r5, r0
 8011be6:	460e      	mov	r6, r1
 8011be8:	f004 fd78 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011bec:	2202      	movs	r2, #2
 8011bee:	4604      	mov	r4, r0
 8011bf0:	18b1      	adds	r1, r6, r2
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	f004 fd72 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011bf8:	4020      	ands	r0, r4
 8011bfa:	b2c0      	uxtb	r0, r0
 8011bfc:	bd70      	pop	{r4, r5, r6, pc}
 8011bfe:	bf00      	nop

08011c00 <uxr_serialize_ACKNACK_Payload>:
 8011c00:	b570      	push	{r4, r5, r6, lr}
 8011c02:	460c      	mov	r4, r1
 8011c04:	460e      	mov	r6, r1
 8011c06:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	f7fa f9ee 	bl	800bfec <ucdr_serialize_uint16_t>
 8011c10:	2202      	movs	r2, #2
 8011c12:	4621      	mov	r1, r4
 8011c14:	4604      	mov	r4, r0
 8011c16:	4628      	mov	r0, r5
 8011c18:	f004 fd60 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011c1c:	7931      	ldrb	r1, [r6, #4]
 8011c1e:	4004      	ands	r4, r0
 8011c20:	4628      	mov	r0, r5
 8011c22:	f7fa f9b7 	bl	800bf94 <ucdr_serialize_uint8_t>
 8011c26:	b2e4      	uxtb	r4, r4
 8011c28:	4020      	ands	r0, r4
 8011c2a:	bd70      	pop	{r4, r5, r6, pc}

08011c2c <uxr_deserialize_ACKNACK_Payload>:
 8011c2c:	b570      	push	{r4, r5, r6, lr}
 8011c2e:	4605      	mov	r5, r0
 8011c30:	460e      	mov	r6, r1
 8011c32:	f7fa fadb 	bl	800c1ec <ucdr_deserialize_uint16_t>
 8011c36:	2202      	movs	r2, #2
 8011c38:	18b1      	adds	r1, r6, r2
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	f004 fdb1 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011c42:	1d31      	adds	r1, r6, #4
 8011c44:	4004      	ands	r4, r0
 8011c46:	4628      	mov	r0, r5
 8011c48:	f7fa f9ba 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011c4c:	b2e4      	uxtb	r4, r4
 8011c4e:	4020      	ands	r0, r4
 8011c50:	bd70      	pop	{r4, r5, r6, pc}
 8011c52:	bf00      	nop

08011c54 <uxr_serialize_HEARTBEAT_Payload>:
 8011c54:	b570      	push	{r4, r5, r6, lr}
 8011c56:	460d      	mov	r5, r1
 8011c58:	8809      	ldrh	r1, [r1, #0]
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	f7fa f9c6 	bl	800bfec <ucdr_serialize_uint16_t>
 8011c60:	8869      	ldrh	r1, [r5, #2]
 8011c62:	4604      	mov	r4, r0
 8011c64:	4630      	mov	r0, r6
 8011c66:	f7fa f9c1 	bl	800bfec <ucdr_serialize_uint16_t>
 8011c6a:	7929      	ldrb	r1, [r5, #4]
 8011c6c:	4004      	ands	r4, r0
 8011c6e:	4630      	mov	r0, r6
 8011c70:	f7fa f990 	bl	800bf94 <ucdr_serialize_uint8_t>
 8011c74:	b2e4      	uxtb	r4, r4
 8011c76:	4020      	ands	r0, r4
 8011c78:	bd70      	pop	{r4, r5, r6, pc}
 8011c7a:	bf00      	nop

08011c7c <uxr_deserialize_HEARTBEAT_Payload>:
 8011c7c:	b570      	push	{r4, r5, r6, lr}
 8011c7e:	4605      	mov	r5, r0
 8011c80:	460e      	mov	r6, r1
 8011c82:	f7fa fab3 	bl	800c1ec <ucdr_deserialize_uint16_t>
 8011c86:	1cb1      	adds	r1, r6, #2
 8011c88:	4604      	mov	r4, r0
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	f7fa faae 	bl	800c1ec <ucdr_deserialize_uint16_t>
 8011c90:	1d31      	adds	r1, r6, #4
 8011c92:	4004      	ands	r4, r0
 8011c94:	4628      	mov	r0, r5
 8011c96:	f7fa f993 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011c9a:	b2e4      	uxtb	r4, r4
 8011c9c:	4020      	ands	r0, r4
 8011c9e:	bd70      	pop	{r4, r5, r6, pc}

08011ca0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca4:	4605      	mov	r5, r0
 8011ca6:	460e      	mov	r6, r1
 8011ca8:	f7fb f83c 	bl	800cd24 <ucdr_deserialize_int32_t>
 8011cac:	1d31      	adds	r1, r6, #4
 8011cae:	4607      	mov	r7, r0
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	f7fa fcb5 	bl	800c620 <ucdr_deserialize_uint32_t>
 8011cb6:	f106 0108 	add.w	r1, r6, #8
 8011cba:	4680      	mov	r8, r0
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	f7fb f831 	bl	800cd24 <ucdr_deserialize_int32_t>
 8011cc2:	f106 010c 	add.w	r1, r6, #12
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	4628      	mov	r0, r5
 8011cca:	f7fa fca9 	bl	800c620 <ucdr_deserialize_uint32_t>
 8011cce:	ea07 0708 	and.w	r7, r7, r8
 8011cd2:	403c      	ands	r4, r7
 8011cd4:	f106 0110 	add.w	r1, r6, #16
 8011cd8:	4004      	ands	r4, r0
 8011cda:	4628      	mov	r0, r5
 8011cdc:	f7fb f822 	bl	800cd24 <ucdr_deserialize_int32_t>
 8011ce0:	f106 0114 	add.w	r1, r6, #20
 8011ce4:	4607      	mov	r7, r0
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	f7fa fc9a 	bl	800c620 <ucdr_deserialize_uint32_t>
 8011cec:	b2e4      	uxtb	r4, r4
 8011cee:	403c      	ands	r4, r7
 8011cf0:	4020      	ands	r0, r4
 8011cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cf6:	bf00      	nop

08011cf8 <uxr_serialize_SampleIdentity>:
 8011cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cfc:	220c      	movs	r2, #12
 8011cfe:	4604      	mov	r4, r0
 8011d00:	460d      	mov	r5, r1
 8011d02:	f004 fceb 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011d06:	2203      	movs	r2, #3
 8011d08:	f105 010c 	add.w	r1, r5, #12
 8011d0c:	4607      	mov	r7, r0
 8011d0e:	4620      	mov	r0, r4
 8011d10:	f004 fce4 	bl	80166dc <ucdr_serialize_array_uint8_t>
 8011d14:	7be9      	ldrb	r1, [r5, #15]
 8011d16:	4680      	mov	r8, r0
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f7fa f93b 	bl	800bf94 <ucdr_serialize_uint8_t>
 8011d1e:	6929      	ldr	r1, [r5, #16]
 8011d20:	4606      	mov	r6, r0
 8011d22:	4620      	mov	r0, r4
 8011d24:	f7fa ff66 	bl	800cbf4 <ucdr_serialize_int32_t>
 8011d28:	6969      	ldr	r1, [r5, #20]
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	ea07 0708 	and.w	r7, r7, r8
 8011d32:	461c      	mov	r4, r3
 8011d34:	f7fa fb44 	bl	800c3c0 <ucdr_serialize_uint32_t>
 8011d38:	403e      	ands	r6, r7
 8011d3a:	4034      	ands	r4, r6
 8011d3c:	4020      	ands	r0, r4
 8011d3e:	b2c0      	uxtb	r0, r0
 8011d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d44 <uxr_deserialize_SampleIdentity>:
 8011d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d48:	220c      	movs	r2, #12
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	460d      	mov	r5, r1
 8011d4e:	f004 fd29 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011d52:	2203      	movs	r2, #3
 8011d54:	f105 010c 	add.w	r1, r5, #12
 8011d58:	4607      	mov	r7, r0
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	f004 fd22 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8011d60:	f105 010f 	add.w	r1, r5, #15
 8011d64:	4680      	mov	r8, r0
 8011d66:	4620      	mov	r0, r4
 8011d68:	f7fa f92a 	bl	800bfc0 <ucdr_deserialize_uint8_t>
 8011d6c:	f105 0110 	add.w	r1, r5, #16
 8011d70:	4606      	mov	r6, r0
 8011d72:	4620      	mov	r0, r4
 8011d74:	f7fa ffd6 	bl	800cd24 <ucdr_deserialize_int32_t>
 8011d78:	f105 0114 	add.w	r1, r5, #20
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	4620      	mov	r0, r4
 8011d80:	ea07 0708 	and.w	r7, r7, r8
 8011d84:	461c      	mov	r4, r3
 8011d86:	f7fa fc4b 	bl	800c620 <ucdr_deserialize_uint32_t>
 8011d8a:	403e      	ands	r6, r7
 8011d8c:	4034      	ands	r4, r6
 8011d8e:	4020      	ands	r0, r4
 8011d90:	b2c0      	uxtb	r0, r0
 8011d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d96:	bf00      	nop

08011d98 <rcl_client_get_rmw_handle>:
 8011d98:	b118      	cbz	r0, 8011da2 <rcl_client_get_rmw_handle+0xa>
 8011d9a:	6800      	ldr	r0, [r0, #0]
 8011d9c:	b108      	cbz	r0, 8011da2 <rcl_client_get_rmw_handle+0xa>
 8011d9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011da2:	4770      	bx	lr

08011da4 <rcl_send_request>:
 8011da4:	b570      	push	{r4, r5, r6, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	b1e8      	cbz	r0, 8011de6 <rcl_send_request+0x42>
 8011daa:	4604      	mov	r4, r0
 8011dac:	6800      	ldr	r0, [r0, #0]
 8011dae:	b1d0      	cbz	r0, 8011de6 <rcl_send_request+0x42>
 8011db0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8011db4:	b1bb      	cbz	r3, 8011de6 <rcl_send_request+0x42>
 8011db6:	460e      	mov	r6, r1
 8011db8:	b1d1      	cbz	r1, 8011df0 <rcl_send_request+0x4c>
 8011dba:	4615      	mov	r5, r2
 8011dbc:	b1c2      	cbz	r2, 8011df0 <rcl_send_request+0x4c>
 8011dbe:	2105      	movs	r1, #5
 8011dc0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8011dc4:	f002 fd74 	bl	80148b0 <__atomic_load_8>
 8011dc8:	6823      	ldr	r3, [r4, #0]
 8011dca:	e9c5 0100 	strd	r0, r1, [r5]
 8011dce:	462a      	mov	r2, r5
 8011dd0:	4631      	mov	r1, r6
 8011dd2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8011dd6:	f003 ff1f 	bl	8015c18 <rmw_send_request>
 8011dda:	4606      	mov	r6, r0
 8011ddc:	b160      	cbz	r0, 8011df8 <rcl_send_request+0x54>
 8011dde:	2601      	movs	r6, #1
 8011de0:	4630      	mov	r0, r6
 8011de2:	b002      	add	sp, #8
 8011de4:	bd70      	pop	{r4, r5, r6, pc}
 8011de6:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8011dea:	4630      	mov	r0, r6
 8011dec:	b002      	add	sp, #8
 8011dee:	bd70      	pop	{r4, r5, r6, pc}
 8011df0:	260b      	movs	r6, #11
 8011df2:	4630      	mov	r0, r6
 8011df4:	b002      	add	sp, #8
 8011df6:	bd70      	pop	{r4, r5, r6, pc}
 8011df8:	6820      	ldr	r0, [r4, #0]
 8011dfa:	2105      	movs	r1, #5
 8011dfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011e00:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8011e04:	9100      	str	r1, [sp, #0]
 8011e06:	f002 fdbf 	bl	8014988 <__atomic_exchange_8>
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	b002      	add	sp, #8
 8011e0e:	bd70      	pop	{r4, r5, r6, pc}

08011e10 <rcl_take_response>:
 8011e10:	b570      	push	{r4, r5, r6, lr}
 8011e12:	468e      	mov	lr, r1
 8011e14:	460c      	mov	r4, r1
 8011e16:	4616      	mov	r6, r2
 8011e18:	4605      	mov	r5, r0
 8011e1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e1e:	b08c      	sub	sp, #48	; 0x30
 8011e20:	f10d 0c18 	add.w	ip, sp, #24
 8011e24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011e2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011e30:	b35d      	cbz	r5, 8011e8a <rcl_take_response+0x7a>
 8011e32:	682b      	ldr	r3, [r5, #0]
 8011e34:	b34b      	cbz	r3, 8011e8a <rcl_take_response+0x7a>
 8011e36:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8011e3a:	b330      	cbz	r0, 8011e8a <rcl_take_response+0x7a>
 8011e3c:	b346      	cbz	r6, 8011e90 <rcl_take_response+0x80>
 8011e3e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011e98 <rcl_take_response+0x88>
 8011e42:	2300      	movs	r3, #0
 8011e44:	f88d 3007 	strb.w	r3, [sp, #7]
 8011e48:	4632      	mov	r2, r6
 8011e4a:	f10d 0307 	add.w	r3, sp, #7
 8011e4e:	a902      	add	r1, sp, #8
 8011e50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011e58:	f003 ffe6 	bl	8015e28 <rmw_take_response>
 8011e5c:	4605      	mov	r5, r0
 8011e5e:	b9c8      	cbnz	r0, 8011e94 <rcl_take_response+0x84>
 8011e60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011e64:	f240 13f5 	movw	r3, #501	; 0x1f5
 8011e68:	2a00      	cmp	r2, #0
 8011e6a:	bf08      	it	eq
 8011e6c:	461d      	moveq	r5, r3
 8011e6e:	f10d 0e18 	add.w	lr, sp, #24
 8011e72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e76:	46a4      	mov	ip, r4
 8011e78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e7c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011e80:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011e84:	4628      	mov	r0, r5
 8011e86:	b00c      	add	sp, #48	; 0x30
 8011e88:	bd70      	pop	{r4, r5, r6, pc}
 8011e8a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8011e8e:	e7ee      	b.n	8011e6e <rcl_take_response+0x5e>
 8011e90:	250b      	movs	r5, #11
 8011e92:	e7ec      	b.n	8011e6e <rcl_take_response+0x5e>
 8011e94:	2501      	movs	r5, #1
 8011e96:	e7ea      	b.n	8011e6e <rcl_take_response+0x5e>
	...

08011ea0 <rcl_client_is_valid>:
 8011ea0:	b130      	cbz	r0, 8011eb0 <rcl_client_is_valid+0x10>
 8011ea2:	6800      	ldr	r0, [r0, #0]
 8011ea4:	b120      	cbz	r0, 8011eb0 <rcl_client_is_valid+0x10>
 8011ea6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011eaa:	3800      	subs	r0, #0
 8011eac:	bf18      	it	ne
 8011eae:	2001      	movne	r0, #1
 8011eb0:	4770      	bx	lr
 8011eb2:	bf00      	nop

08011eb4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011eb4:	280b      	cmp	r0, #11
 8011eb6:	dc0d      	bgt.n	8011ed4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	db09      	blt.n	8011ed0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011ebc:	280b      	cmp	r0, #11
 8011ebe:	d807      	bhi.n	8011ed0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011ec0:	e8df f000 	tbb	[pc, r0]
 8011ec4:	07060607 	.word	0x07060607
 8011ec8:	06060606 	.word	0x06060606
 8011ecc:	07070606 	.word	0x07070606
 8011ed0:	2001      	movs	r0, #1
 8011ed2:	4770      	bx	lr
 8011ed4:	28cb      	cmp	r0, #203	; 0xcb
 8011ed6:	bf18      	it	ne
 8011ed8:	2001      	movne	r0, #1
 8011eda:	4770      	bx	lr

08011edc <rcl_get_zero_initialized_context>:
 8011edc:	4a03      	ldr	r2, [pc, #12]	; (8011eec <rcl_get_zero_initialized_context+0x10>)
 8011ede:	4603      	mov	r3, r0
 8011ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ee4:	e883 0003 	stmia.w	r3, {r0, r1}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	4770      	bx	lr
 8011eec:	0801a7ac 	.word	0x0801a7ac

08011ef0 <rcl_context_is_valid>:
 8011ef0:	b118      	cbz	r0, 8011efa <rcl_context_is_valid+0xa>
 8011ef2:	6840      	ldr	r0, [r0, #4]
 8011ef4:	3800      	subs	r0, #0
 8011ef6:	bf18      	it	ne
 8011ef8:	2001      	movne	r0, #1
 8011efa:	4770      	bx	lr

08011efc <__cleanup_context>:
 8011efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f00:	4606      	mov	r6, r0
 8011f02:	6800      	ldr	r0, [r0, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	6073      	str	r3, [r6, #4]
 8011f08:	2800      	cmp	r0, #0
 8011f0a:	d049      	beq.n	8011fa0 <__cleanup_context+0xa4>
 8011f0c:	6947      	ldr	r7, [r0, #20]
 8011f0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011f12:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011f16:	b137      	cbz	r7, 8011f26 <__cleanup_context+0x2a>
 8011f18:	3014      	adds	r0, #20
 8011f1a:	f000 f9bb 	bl	8012294 <rcl_init_options_fini>
 8011f1e:	4607      	mov	r7, r0
 8011f20:	2800      	cmp	r0, #0
 8011f22:	d144      	bne.n	8011fae <__cleanup_context+0xb2>
 8011f24:	6830      	ldr	r0, [r6, #0]
 8011f26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011f28:	b143      	cbz	r3, 8011f3c <__cleanup_context+0x40>
 8011f2a:	3028      	adds	r0, #40	; 0x28
 8011f2c:	f003 fcbc 	bl	80158a8 <rmw_context_fini>
 8011f30:	b118      	cbz	r0, 8011f3a <__cleanup_context+0x3e>
 8011f32:	2f00      	cmp	r7, #0
 8011f34:	d03e      	beq.n	8011fb4 <__cleanup_context+0xb8>
 8011f36:	f7fc fa83 	bl	800e440 <rcutils_reset_error>
 8011f3a:	6830      	ldr	r0, [r6, #0]
 8011f3c:	6a03      	ldr	r3, [r0, #32]
 8011f3e:	b1db      	cbz	r3, 8011f78 <__cleanup_context+0x7c>
 8011f40:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011f44:	2a01      	cmp	r2, #1
 8011f46:	f17c 0100 	sbcs.w	r1, ip, #0
 8011f4a:	db11      	blt.n	8011f70 <__cleanup_context+0x74>
 8011f4c:	2400      	movs	r4, #0
 8011f4e:	4625      	mov	r5, r4
 8011f50:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011f54:	4649      	mov	r1, r9
 8011f56:	b1b8      	cbz	r0, 8011f88 <__cleanup_context+0x8c>
 8011f58:	47c0      	blx	r8
 8011f5a:	6833      	ldr	r3, [r6, #0]
 8011f5c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011f60:	3401      	adds	r4, #1
 8011f62:	f145 0500 	adc.w	r5, r5, #0
 8011f66:	4294      	cmp	r4, r2
 8011f68:	eb75 010c 	sbcs.w	r1, r5, ip
 8011f6c:	6a1b      	ldr	r3, [r3, #32]
 8011f6e:	dbef      	blt.n	8011f50 <__cleanup_context+0x54>
 8011f70:	4618      	mov	r0, r3
 8011f72:	4649      	mov	r1, r9
 8011f74:	47c0      	blx	r8
 8011f76:	6830      	ldr	r0, [r6, #0]
 8011f78:	4649      	mov	r1, r9
 8011f7a:	47c0      	blx	r8
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	e9c6 3300 	strd	r3, r3, [r6]
 8011f82:	4638      	mov	r0, r7
 8011f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f88:	3401      	adds	r4, #1
 8011f8a:	f145 0500 	adc.w	r5, r5, #0
 8011f8e:	4294      	cmp	r4, r2
 8011f90:	eb75 010c 	sbcs.w	r1, r5, ip
 8011f94:	dbdc      	blt.n	8011f50 <__cleanup_context+0x54>
 8011f96:	4618      	mov	r0, r3
 8011f98:	4649      	mov	r1, r9
 8011f9a:	47c0      	blx	r8
 8011f9c:	6830      	ldr	r0, [r6, #0]
 8011f9e:	e7eb      	b.n	8011f78 <__cleanup_context+0x7c>
 8011fa0:	4607      	mov	r7, r0
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	e9c6 3300 	strd	r3, r3, [r6]
 8011fa8:	4638      	mov	r0, r7
 8011faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fae:	f7fc fa47 	bl	800e440 <rcutils_reset_error>
 8011fb2:	e7b7      	b.n	8011f24 <__cleanup_context+0x28>
 8011fb4:	f7ff ff7e 	bl	8011eb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8011fb8:	4607      	mov	r7, r0
 8011fba:	e7bc      	b.n	8011f36 <__cleanup_context+0x3a>

08011fbc <rcl_init>:
 8011fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc0:	1e05      	subs	r5, r0, #0
 8011fc2:	b09e      	sub	sp, #120	; 0x78
 8011fc4:	460e      	mov	r6, r1
 8011fc6:	4690      	mov	r8, r2
 8011fc8:	461f      	mov	r7, r3
 8011fca:	f340 809c 	ble.w	8012106 <rcl_init+0x14a>
 8011fce:	2900      	cmp	r1, #0
 8011fd0:	f000 809c 	beq.w	801210c <rcl_init+0x150>
 8011fd4:	f1a1 0e04 	sub.w	lr, r1, #4
 8011fd8:	f04f 0c00 	mov.w	ip, #0
 8011fdc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011fe0:	f10c 0c01 	add.w	ip, ip, #1
 8011fe4:	2c00      	cmp	r4, #0
 8011fe6:	f000 8091 	beq.w	801210c <rcl_init+0x150>
 8011fea:	4565      	cmp	r5, ip
 8011fec:	d1f6      	bne.n	8011fdc <rcl_init+0x20>
 8011fee:	f1b8 0f00 	cmp.w	r8, #0
 8011ff2:	f000 808b 	beq.w	801210c <rcl_init+0x150>
 8011ff6:	f8d8 4000 	ldr.w	r4, [r8]
 8011ffa:	2c00      	cmp	r4, #0
 8011ffc:	f000 8086 	beq.w	801210c <rcl_init+0x150>
 8012000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012002:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8012006:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801200a:	6823      	ldr	r3, [r4, #0]
 801200c:	f8cc 3000 	str.w	r3, [ip]
 8012010:	a819      	add	r0, sp, #100	; 0x64
 8012012:	f7fc f9f1 	bl	800e3f8 <rcutils_allocator_is_valid>
 8012016:	2800      	cmp	r0, #0
 8012018:	d078      	beq.n	801210c <rcl_init+0x150>
 801201a:	2f00      	cmp	r7, #0
 801201c:	d076      	beq.n	801210c <rcl_init+0x150>
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d178      	bne.n	8012116 <rcl_init+0x15a>
 8012024:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012028:	2178      	movs	r1, #120	; 0x78
 801202a:	2001      	movs	r0, #1
 801202c:	4798      	blx	r3
 801202e:	4604      	mov	r4, r0
 8012030:	6038      	str	r0, [r7, #0]
 8012032:	2800      	cmp	r0, #0
 8012034:	f000 80b6 	beq.w	80121a4 <rcl_init+0x1e8>
 8012038:	a802      	add	r0, sp, #8
 801203a:	f002 ff89 	bl	8014f50 <rmw_get_zero_initialized_context>
 801203e:	a902      	add	r1, sp, #8
 8012040:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012044:	2250      	movs	r2, #80	; 0x50
 8012046:	ac19      	add	r4, sp, #100	; 0x64
 8012048:	f006 fd56 	bl	8018af8 <memcpy>
 801204c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801204e:	f8d7 e000 	ldr.w	lr, [r7]
 8012052:	46f4      	mov	ip, lr
 8012054:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012058:	6823      	ldr	r3, [r4, #0]
 801205a:	f8cc 3000 	str.w	r3, [ip]
 801205e:	f10e 0114 	add.w	r1, lr, #20
 8012062:	4640      	mov	r0, r8
 8012064:	f000 f940 	bl	80122e8 <rcl_init_options_copy>
 8012068:	4604      	mov	r4, r0
 801206a:	2800      	cmp	r0, #0
 801206c:	d144      	bne.n	80120f8 <rcl_init+0x13c>
 801206e:	f8d7 9000 	ldr.w	r9, [r7]
 8012072:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012076:	f8c9 0020 	str.w	r0, [r9, #32]
 801207a:	f8c9 5018 	str.w	r5, [r9, #24]
 801207e:	f8c9 801c 	str.w	r8, [r9, #28]
 8012082:	2d00      	cmp	r5, #0
 8012084:	d04e      	beq.n	8012124 <rcl_init+0x168>
 8012086:	2e00      	cmp	r6, #0
 8012088:	d04c      	beq.n	8012124 <rcl_init+0x168>
 801208a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801208e:	2104      	movs	r1, #4
 8012090:	4628      	mov	r0, r5
 8012092:	4798      	blx	r3
 8012094:	f8c9 0020 	str.w	r0, [r9, #32]
 8012098:	f8d7 9000 	ldr.w	r9, [r7]
 801209c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80120a0:	46ca      	mov	sl, r9
 80120a2:	b343      	cbz	r3, 80120f6 <rcl_init+0x13a>
 80120a4:	2d01      	cmp	r5, #1
 80120a6:	f178 0300 	sbcs.w	r3, r8, #0
 80120aa:	db3b      	blt.n	8012124 <rcl_init+0x168>
 80120ac:	2400      	movs	r4, #0
 80120ae:	3e04      	subs	r6, #4
 80120b0:	46a1      	mov	r9, r4
 80120b2:	e00b      	b.n	80120cc <rcl_init+0x110>
 80120b4:	6831      	ldr	r1, [r6, #0]
 80120b6:	f006 fd1f 	bl	8018af8 <memcpy>
 80120ba:	3401      	adds	r4, #1
 80120bc:	f149 0900 	adc.w	r9, r9, #0
 80120c0:	45c8      	cmp	r8, r9
 80120c2:	bf08      	it	eq
 80120c4:	42a5      	cmpeq	r5, r4
 80120c6:	d02b      	beq.n	8012120 <rcl_init+0x164>
 80120c8:	f8d7 a000 	ldr.w	sl, [r7]
 80120cc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80120d0:	f7ee f888 	bl	80001e4 <strlen>
 80120d4:	1c42      	adds	r2, r0, #1
 80120d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80120d8:	991d      	ldr	r1, [sp, #116]	; 0x74
 80120da:	f8da a020 	ldr.w	sl, [sl, #32]
 80120de:	9201      	str	r2, [sp, #4]
 80120e0:	4610      	mov	r0, r2
 80120e2:	4798      	blx	r3
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80120ea:	6a1b      	ldr	r3, [r3, #32]
 80120ec:	9a01      	ldr	r2, [sp, #4]
 80120ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80120f2:	2800      	cmp	r0, #0
 80120f4:	d1de      	bne.n	80120b4 <rcl_init+0xf8>
 80120f6:	240a      	movs	r4, #10
 80120f8:	4638      	mov	r0, r7
 80120fa:	f7ff feff 	bl	8011efc <__cleanup_context>
 80120fe:	4620      	mov	r0, r4
 8012100:	b01e      	add	sp, #120	; 0x78
 8012102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012106:	2900      	cmp	r1, #0
 8012108:	f43f af71 	beq.w	8011fee <rcl_init+0x32>
 801210c:	240b      	movs	r4, #11
 801210e:	4620      	mov	r0, r4
 8012110:	b01e      	add	sp, #120	; 0x78
 8012112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012116:	2464      	movs	r4, #100	; 0x64
 8012118:	4620      	mov	r0, r4
 801211a:	b01e      	add	sp, #120	; 0x78
 801211c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012120:	f8d7 9000 	ldr.w	r9, [r7]
 8012124:	4926      	ldr	r1, [pc, #152]	; (80121c0 <rcl_init+0x204>)
 8012126:	680b      	ldr	r3, [r1, #0]
 8012128:	3301      	adds	r3, #1
 801212a:	d036      	beq.n	801219a <rcl_init+0x1de>
 801212c:	600b      	str	r3, [r1, #0]
 801212e:	461a      	mov	r2, r3
 8012130:	2400      	movs	r4, #0
 8012132:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8012136:	607b      	str	r3, [r7, #4]
 8012138:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801213a:	3301      	adds	r3, #1
 801213c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8012140:	d034      	beq.n	80121ac <rcl_init+0x1f0>
 8012142:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8012146:	b93b      	cbnz	r3, 8012158 <rcl_init+0x19c>
 8012148:	3030      	adds	r0, #48	; 0x30
 801214a:	f000 f939 	bl	80123c0 <rcl_get_localhost_only>
 801214e:	4604      	mov	r4, r0
 8012150:	2800      	cmp	r0, #0
 8012152:	d1d1      	bne.n	80120f8 <rcl_init+0x13c>
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	6958      	ldr	r0, [r3, #20]
 8012158:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801215a:	aa18      	add	r2, sp, #96	; 0x60
 801215c:	a917      	add	r1, sp, #92	; 0x5c
 801215e:	f001 f841 	bl	80131e4 <rcl_validate_enclave_name>
 8012162:	4604      	mov	r4, r0
 8012164:	2800      	cmp	r0, #0
 8012166:	d1c7      	bne.n	80120f8 <rcl_init+0x13c>
 8012168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801216a:	b9eb      	cbnz	r3, 80121a8 <rcl_init+0x1ec>
 801216c:	6839      	ldr	r1, [r7, #0]
 801216e:	694b      	ldr	r3, [r1, #20]
 8012170:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012172:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8012176:	f000 fc3d 	bl	80129f4 <rcl_get_security_options_from_environment>
 801217a:	4604      	mov	r4, r0
 801217c:	2800      	cmp	r0, #0
 801217e:	d1bb      	bne.n	80120f8 <rcl_init+0x13c>
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	6948      	ldr	r0, [r1, #20]
 8012184:	3128      	adds	r1, #40	; 0x28
 8012186:	3018      	adds	r0, #24
 8012188:	f003 fa58 	bl	801563c <rmw_init>
 801218c:	4604      	mov	r4, r0
 801218e:	2800      	cmp	r0, #0
 8012190:	d0bd      	beq.n	801210e <rcl_init+0x152>
 8012192:	f7ff fe8f 	bl	8011eb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012196:	4604      	mov	r4, r0
 8012198:	e7ae      	b.n	80120f8 <rcl_init+0x13c>
 801219a:	2201      	movs	r2, #1
 801219c:	461c      	mov	r4, r3
 801219e:	600a      	str	r2, [r1, #0]
 80121a0:	4613      	mov	r3, r2
 80121a2:	e7c6      	b.n	8012132 <rcl_init+0x176>
 80121a4:	240a      	movs	r4, #10
 80121a6:	e7b2      	b.n	801210e <rcl_init+0x152>
 80121a8:	2401      	movs	r4, #1
 80121aa:	e7a5      	b.n	80120f8 <rcl_init+0x13c>
 80121ac:	3024      	adds	r0, #36	; 0x24
 80121ae:	f005 ffb9 	bl	8018124 <rcl_get_default_domain_id>
 80121b2:	4604      	mov	r4, r0
 80121b4:	2800      	cmp	r0, #0
 80121b6:	d19f      	bne.n	80120f8 <rcl_init+0x13c>
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	6958      	ldr	r0, [r3, #20]
 80121bc:	e7c1      	b.n	8012142 <rcl_init+0x186>
 80121be:	bf00      	nop
 80121c0:	2000ddb4 	.word	0x2000ddb4

080121c4 <rcl_get_zero_initialized_init_options>:
 80121c4:	2000      	movs	r0, #0
 80121c6:	4770      	bx	lr

080121c8 <rcl_init_options_init>:
 80121c8:	b084      	sub	sp, #16
 80121ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121cc:	b097      	sub	sp, #92	; 0x5c
 80121ce:	ae1d      	add	r6, sp, #116	; 0x74
 80121d0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80121d4:	2800      	cmp	r0, #0
 80121d6:	d058      	beq.n	801228a <rcl_init_options_init+0xc2>
 80121d8:	6803      	ldr	r3, [r0, #0]
 80121da:	4605      	mov	r5, r0
 80121dc:	b133      	cbz	r3, 80121ec <rcl_init_options_init+0x24>
 80121de:	2464      	movs	r4, #100	; 0x64
 80121e0:	4620      	mov	r0, r4
 80121e2:	b017      	add	sp, #92	; 0x5c
 80121e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80121e8:	b004      	add	sp, #16
 80121ea:	4770      	bx	lr
 80121ec:	4630      	mov	r0, r6
 80121ee:	f7fc f903 	bl	800e3f8 <rcutils_allocator_is_valid>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	d049      	beq.n	801228a <rcl_init_options_init+0xc2>
 80121f6:	46b4      	mov	ip, r6
 80121f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80121fc:	ac11      	add	r4, sp, #68	; 0x44
 80121fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012200:	f8dc 3000 	ldr.w	r3, [ip]
 8012204:	6023      	str	r3, [r4, #0]
 8012206:	9921      	ldr	r1, [sp, #132]	; 0x84
 8012208:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801220a:	2050      	movs	r0, #80	; 0x50
 801220c:	4798      	blx	r3
 801220e:	4604      	mov	r4, r0
 8012210:	6028      	str	r0, [r5, #0]
 8012212:	2800      	cmp	r0, #0
 8012214:	d03b      	beq.n	801228e <rcl_init_options_init+0xc6>
 8012216:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801221a:	4686      	mov	lr, r0
 801221c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012220:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012224:	f8dc 3000 	ldr.w	r3, [ip]
 8012228:	f8ce 3000 	str.w	r3, [lr]
 801222c:	a802      	add	r0, sp, #8
 801222e:	f002 fe9f 	bl	8014f70 <rmw_get_zero_initialized_init_options>
 8012232:	f10d 0e08 	add.w	lr, sp, #8
 8012236:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801223a:	f104 0c18 	add.w	ip, r4, #24
 801223e:	682f      	ldr	r7, [r5, #0]
 8012240:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012244:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012248:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801224c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012254:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012258:	ac20      	add	r4, sp, #128	; 0x80
 801225a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801225e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012262:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012266:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801226a:	f107 0018 	add.w	r0, r7, #24
 801226e:	f003 f8ed 	bl	801544c <rmw_init_options_init>
 8012272:	4604      	mov	r4, r0
 8012274:	2800      	cmp	r0, #0
 8012276:	d0b3      	beq.n	80121e0 <rcl_init_options_init+0x18>
 8012278:	9921      	ldr	r1, [sp, #132]	; 0x84
 801227a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801227c:	6828      	ldr	r0, [r5, #0]
 801227e:	4798      	blx	r3
 8012280:	4620      	mov	r0, r4
 8012282:	f7ff fe17 	bl	8011eb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012286:	4604      	mov	r4, r0
 8012288:	e7aa      	b.n	80121e0 <rcl_init_options_init+0x18>
 801228a:	240b      	movs	r4, #11
 801228c:	e7a8      	b.n	80121e0 <rcl_init_options_init+0x18>
 801228e:	240a      	movs	r4, #10
 8012290:	e7a6      	b.n	80121e0 <rcl_init_options_init+0x18>
 8012292:	bf00      	nop

08012294 <rcl_init_options_fini>:
 8012294:	b530      	push	{r4, r5, lr}
 8012296:	b087      	sub	sp, #28
 8012298:	b1f0      	cbz	r0, 80122d8 <rcl_init_options_fini+0x44>
 801229a:	6803      	ldr	r3, [r0, #0]
 801229c:	4604      	mov	r4, r0
 801229e:	b1db      	cbz	r3, 80122d8 <rcl_init_options_fini+0x44>
 80122a0:	469c      	mov	ip, r3
 80122a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80122a6:	f10d 0e04 	add.w	lr, sp, #4
 80122aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80122ae:	f8dc 3000 	ldr.w	r3, [ip]
 80122b2:	f8ce 3000 	str.w	r3, [lr]
 80122b6:	a801      	add	r0, sp, #4
 80122b8:	f7fc f89e 	bl	800e3f8 <rcutils_allocator_is_valid>
 80122bc:	b160      	cbz	r0, 80122d8 <rcl_init_options_fini+0x44>
 80122be:	6820      	ldr	r0, [r4, #0]
 80122c0:	3018      	adds	r0, #24
 80122c2:	f003 f973 	bl	80155ac <rmw_init_options_fini>
 80122c6:	4605      	mov	r5, r0
 80122c8:	b950      	cbnz	r0, 80122e0 <rcl_init_options_fini+0x4c>
 80122ca:	6820      	ldr	r0, [r4, #0]
 80122cc:	9b02      	ldr	r3, [sp, #8]
 80122ce:	9905      	ldr	r1, [sp, #20]
 80122d0:	4798      	blx	r3
 80122d2:	4628      	mov	r0, r5
 80122d4:	b007      	add	sp, #28
 80122d6:	bd30      	pop	{r4, r5, pc}
 80122d8:	250b      	movs	r5, #11
 80122da:	4628      	mov	r0, r5
 80122dc:	b007      	add	sp, #28
 80122de:	bd30      	pop	{r4, r5, pc}
 80122e0:	f7ff fde8 	bl	8011eb4 <rcl_convert_rmw_ret_to_rcl_ret>
 80122e4:	4605      	mov	r5, r0
 80122e6:	e7f8      	b.n	80122da <rcl_init_options_fini+0x46>

080122e8 <rcl_init_options_copy>:
 80122e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ec:	b094      	sub	sp, #80	; 0x50
 80122ee:	2800      	cmp	r0, #0
 80122f0:	d058      	beq.n	80123a4 <rcl_init_options_copy+0xbc>
 80122f2:	4604      	mov	r4, r0
 80122f4:	6800      	ldr	r0, [r0, #0]
 80122f6:	2800      	cmp	r0, #0
 80122f8:	d054      	beq.n	80123a4 <rcl_init_options_copy+0xbc>
 80122fa:	460e      	mov	r6, r1
 80122fc:	f7fc f87c 	bl	800e3f8 <rcutils_allocator_is_valid>
 8012300:	2800      	cmp	r0, #0
 8012302:	d04f      	beq.n	80123a4 <rcl_init_options_copy+0xbc>
 8012304:	2e00      	cmp	r6, #0
 8012306:	d04d      	beq.n	80123a4 <rcl_init_options_copy+0xbc>
 8012308:	6833      	ldr	r3, [r6, #0]
 801230a:	b123      	cbz	r3, 8012316 <rcl_init_options_copy+0x2e>
 801230c:	2464      	movs	r4, #100	; 0x64
 801230e:	4620      	mov	r0, r4
 8012310:	b014      	add	sp, #80	; 0x50
 8012312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012316:	6827      	ldr	r7, [r4, #0]
 8012318:	46bc      	mov	ip, r7
 801231a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801231e:	ad0f      	add	r5, sp, #60	; 0x3c
 8012320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012322:	f8dc 3000 	ldr.w	r3, [ip]
 8012326:	f8d7 8000 	ldr.w	r8, [r7]
 801232a:	602b      	str	r3, [r5, #0]
 801232c:	4619      	mov	r1, r3
 801232e:	2050      	movs	r0, #80	; 0x50
 8012330:	47c0      	blx	r8
 8012332:	4605      	mov	r5, r0
 8012334:	6030      	str	r0, [r6, #0]
 8012336:	b3d0      	cbz	r0, 80123ae <rcl_init_options_copy+0xc6>
 8012338:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 801233c:	4686      	mov	lr, r0
 801233e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012342:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012346:	f8dc 3000 	ldr.w	r3, [ip]
 801234a:	f8ce 3000 	str.w	r3, [lr]
 801234e:	4668      	mov	r0, sp
 8012350:	f002 fe0e 	bl	8014f70 <rmw_get_zero_initialized_init_options>
 8012354:	46ee      	mov	lr, sp
 8012356:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801235a:	f105 0c18 	add.w	ip, r5, #24
 801235e:	6824      	ldr	r4, [r4, #0]
 8012360:	6835      	ldr	r5, [r6, #0]
 8012362:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012366:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801236a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801236e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012372:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012376:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801237a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801237e:	f104 0018 	add.w	r0, r4, #24
 8012382:	f105 0118 	add.w	r1, r5, #24
 8012386:	f003 f8c9 	bl	801551c <rmw_init_options_copy>
 801238a:	4604      	mov	r4, r0
 801238c:	2800      	cmp	r0, #0
 801238e:	d0be      	beq.n	801230e <rcl_init_options_copy+0x26>
 8012390:	f7fc f840 	bl	800e414 <rcutils_get_error_string>
 8012394:	f7fc f854 	bl	800e440 <rcutils_reset_error>
 8012398:	4630      	mov	r0, r6
 801239a:	f7ff ff7b 	bl	8012294 <rcl_init_options_fini>
 801239e:	b140      	cbz	r0, 80123b2 <rcl_init_options_copy+0xca>
 80123a0:	4604      	mov	r4, r0
 80123a2:	e7b4      	b.n	801230e <rcl_init_options_copy+0x26>
 80123a4:	240b      	movs	r4, #11
 80123a6:	4620      	mov	r0, r4
 80123a8:	b014      	add	sp, #80	; 0x50
 80123aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ae:	240a      	movs	r4, #10
 80123b0:	e7ad      	b.n	801230e <rcl_init_options_copy+0x26>
 80123b2:	4620      	mov	r0, r4
 80123b4:	b014      	add	sp, #80	; 0x50
 80123b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123ba:	f7ff bd7b 	b.w	8011eb4 <rcl_convert_rmw_ret_to_rcl_ret>
 80123be:	bf00      	nop

080123c0 <rcl_get_localhost_only>:
 80123c0:	b510      	push	{r4, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	2300      	movs	r3, #0
 80123c6:	9301      	str	r3, [sp, #4]
 80123c8:	b1b8      	cbz	r0, 80123fa <rcl_get_localhost_only+0x3a>
 80123ca:	4604      	mov	r4, r0
 80123cc:	a901      	add	r1, sp, #4
 80123ce:	480c      	ldr	r0, [pc, #48]	; (8012400 <rcl_get_localhost_only+0x40>)
 80123d0:	f002 fb12 	bl	80149f8 <rcutils_get_env>
 80123d4:	b110      	cbz	r0, 80123dc <rcl_get_localhost_only+0x1c>
 80123d6:	2001      	movs	r0, #1
 80123d8:	b002      	add	sp, #8
 80123da:	bd10      	pop	{r4, pc}
 80123dc:	9b01      	ldr	r3, [sp, #4]
 80123de:	b113      	cbz	r3, 80123e6 <rcl_get_localhost_only+0x26>
 80123e0:	781a      	ldrb	r2, [r3, #0]
 80123e2:	2a31      	cmp	r2, #49	; 0x31
 80123e4:	d004      	beq.n	80123f0 <rcl_get_localhost_only+0x30>
 80123e6:	2302      	movs	r3, #2
 80123e8:	2000      	movs	r0, #0
 80123ea:	7023      	strb	r3, [r4, #0]
 80123ec:	b002      	add	sp, #8
 80123ee:	bd10      	pop	{r4, pc}
 80123f0:	785b      	ldrb	r3, [r3, #1]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1f7      	bne.n	80123e6 <rcl_get_localhost_only+0x26>
 80123f6:	2301      	movs	r3, #1
 80123f8:	e7f6      	b.n	80123e8 <rcl_get_localhost_only+0x28>
 80123fa:	200b      	movs	r0, #11
 80123fc:	b002      	add	sp, #8
 80123fe:	bd10      	pop	{r4, pc}
 8012400:	0801a7b4 	.word	0x0801a7b4

08012404 <rcl_get_zero_initialized_node>:
 8012404:	4a03      	ldr	r2, [pc, #12]	; (8012414 <rcl_get_zero_initialized_node+0x10>)
 8012406:	4603      	mov	r3, r0
 8012408:	e892 0003 	ldmia.w	r2, {r0, r1}
 801240c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012410:	4618      	mov	r0, r3
 8012412:	4770      	bx	lr
 8012414:	0801a7dc 	.word	0x0801a7dc

08012418 <rcl_node_init>:
 8012418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241c:	b0a9      	sub	sp, #164	; 0xa4
 801241e:	4604      	mov	r4, r0
 8012420:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8012424:	a823      	add	r0, sp, #140	; 0x8c
 8012426:	460e      	mov	r6, r1
 8012428:	4615      	mov	r5, r2
 801242a:	461f      	mov	r7, r3
 801242c:	f006 f8a2 	bl	8018574 <rcl_guard_condition_get_default_options>
 8012430:	f1b8 0f00 	cmp.w	r8, #0
 8012434:	f000 80e6 	beq.w	8012604 <rcl_node_init+0x1ec>
 8012438:	4640      	mov	r0, r8
 801243a:	f7fb ffdd 	bl	800e3f8 <rcutils_allocator_is_valid>
 801243e:	2800      	cmp	r0, #0
 8012440:	f000 80e0 	beq.w	8012604 <rcl_node_init+0x1ec>
 8012444:	2e00      	cmp	r6, #0
 8012446:	f000 80dd 	beq.w	8012604 <rcl_node_init+0x1ec>
 801244a:	2d00      	cmp	r5, #0
 801244c:	f000 80da 	beq.w	8012604 <rcl_node_init+0x1ec>
 8012450:	2c00      	cmp	r4, #0
 8012452:	f000 80d7 	beq.w	8012604 <rcl_node_init+0x1ec>
 8012456:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801245a:	f1b9 0f00 	cmp.w	r9, #0
 801245e:	f040 80fd 	bne.w	801265c <rcl_node_init+0x244>
 8012462:	2f00      	cmp	r7, #0
 8012464:	f000 80ce 	beq.w	8012604 <rcl_node_init+0x1ec>
 8012468:	4638      	mov	r0, r7
 801246a:	f7ff fd41 	bl	8011ef0 <rcl_context_is_valid>
 801246e:	4682      	mov	sl, r0
 8012470:	2800      	cmp	r0, #0
 8012472:	f000 80cd 	beq.w	8012610 <rcl_node_init+0x1f8>
 8012476:	464a      	mov	r2, r9
 8012478:	a922      	add	r1, sp, #136	; 0x88
 801247a:	4630      	mov	r0, r6
 801247c:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8012480:	f002 ff18 	bl	80152b4 <rmw_validate_node_name>
 8012484:	4681      	mov	r9, r0
 8012486:	2800      	cmp	r0, #0
 8012488:	f040 80be 	bne.w	8012608 <rcl_node_init+0x1f0>
 801248c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801248e:	2800      	cmp	r0, #0
 8012490:	f040 80f0 	bne.w	8012674 <rcl_node_init+0x25c>
 8012494:	4628      	mov	r0, r5
 8012496:	f7ed fea5 	bl	80001e4 <strlen>
 801249a:	2800      	cmp	r0, #0
 801249c:	f040 80bb 	bne.w	8012616 <rcl_node_init+0x1fe>
 80124a0:	4d7c      	ldr	r5, [pc, #496]	; (8012694 <rcl_node_init+0x27c>)
 80124a2:	a922      	add	r1, sp, #136	; 0x88
 80124a4:	2200      	movs	r2, #0
 80124a6:	4628      	mov	r0, r5
 80124a8:	f002 fee6 	bl	8015278 <rmw_validate_namespace>
 80124ac:	4681      	mov	r9, r0
 80124ae:	2800      	cmp	r0, #0
 80124b0:	f040 80aa 	bne.w	8012608 <rcl_node_init+0x1f0>
 80124b4:	4682      	mov	sl, r0
 80124b6:	9822      	ldr	r0, [sp, #136]	; 0x88
 80124b8:	2800      	cmp	r0, #0
 80124ba:	f040 80e0 	bne.w	801267e <rcl_node_init+0x266>
 80124be:	f8d8 3000 	ldr.w	r3, [r8]
 80124c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80124c6:	2078      	movs	r0, #120	; 0x78
 80124c8:	4798      	blx	r3
 80124ca:	4681      	mov	r9, r0
 80124cc:	6060      	str	r0, [r4, #4]
 80124ce:	2800      	cmp	r0, #0
 80124d0:	f000 80ca 	beq.w	8012668 <rcl_node_init+0x250>
 80124d4:	2200      	movs	r2, #0
 80124d6:	2300      	movs	r3, #0
 80124d8:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 80124dc:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 80124e0:	a808      	add	r0, sp, #32
 80124e2:	f000 f907 	bl	80126f4 <rcl_node_get_default_options>
 80124e6:	a908      	add	r1, sp, #32
 80124e8:	4648      	mov	r0, r9
 80124ea:	2268      	movs	r2, #104	; 0x68
 80124ec:	f006 fb04 	bl	8018af8 <memcpy>
 80124f0:	6861      	ldr	r1, [r4, #4]
 80124f2:	6027      	str	r7, [r4, #0]
 80124f4:	4640      	mov	r0, r8
 80124f6:	f000 f90b 	bl	8012710 <rcl_node_options_copy>
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d158      	bne.n	80125b0 <rcl_node_init+0x198>
 80124fe:	4628      	mov	r0, r5
 8012500:	f7ed fe70 	bl	80001e4 <strlen>
 8012504:	4428      	add	r0, r5
 8012506:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801250a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801250e:	2b2f      	cmp	r3, #47	; 0x2f
 8012510:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012514:	9300      	str	r3, [sp, #0]
 8012516:	bf0c      	ite	eq
 8012518:	4b5f      	ldreq	r3, [pc, #380]	; (8012698 <rcl_node_init+0x280>)
 801251a:	4b60      	ldrne	r3, [pc, #384]	; (801269c <rcl_node_init+0x284>)
 801251c:	9302      	str	r3, [sp, #8]
 801251e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012522:	9301      	str	r3, [sp, #4]
 8012524:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012528:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801252c:	f002 fa8c 	bl	8014a48 <rcutils_format_string_limit>
 8012530:	6823      	ldr	r3, [r4, #0]
 8012532:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8012536:	6818      	ldr	r0, [r3, #0]
 8012538:	4631      	mov	r1, r6
 801253a:	3028      	adds	r0, #40	; 0x28
 801253c:	462a      	mov	r2, r5
 801253e:	6866      	ldr	r6, [r4, #4]
 8012540:	f003 fad0 	bl	8015ae4 <rmw_create_node>
 8012544:	6863      	ldr	r3, [r4, #4]
 8012546:	66b0      	str	r0, [r6, #104]	; 0x68
 8012548:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801254a:	2800      	cmp	r0, #0
 801254c:	d032      	beq.n	80125b4 <rcl_node_init+0x19c>
 801254e:	f003 fb5d 	bl	8015c0c <rmw_node_get_graph_guard_condition>
 8012552:	4681      	mov	r9, r0
 8012554:	b360      	cbz	r0, 80125b0 <rcl_node_init+0x198>
 8012556:	f8d8 3000 	ldr.w	r3, [r8]
 801255a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801255e:	6866      	ldr	r6, [r4, #4]
 8012560:	2008      	movs	r0, #8
 8012562:	4798      	blx	r3
 8012564:	6863      	ldr	r3, [r4, #4]
 8012566:	66f0      	str	r0, [r6, #108]	; 0x6c
 8012568:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 801256c:	f1bb 0f00 	cmp.w	fp, #0
 8012570:	d020      	beq.n	80125b4 <rcl_node_init+0x19c>
 8012572:	a806      	add	r0, sp, #24
 8012574:	f005 ff6e 	bl	8018454 <rcl_get_zero_initialized_guard_condition>
 8012578:	a806      	add	r0, sp, #24
 801257a:	c803      	ldmia	r0, {r0, r1}
 801257c:	6863      	ldr	r3, [r4, #4]
 801257e:	46c4      	mov	ip, r8
 8012580:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8012584:	e88b 0003 	stmia.w	fp, {r0, r1}
 8012588:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801258c:	ae23      	add	r6, sp, #140	; 0x8c
 801258e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012590:	f8dc 3000 	ldr.w	r3, [ip]
 8012594:	6033      	str	r3, [r6, #0]
 8012596:	ab28      	add	r3, sp, #160	; 0xa0
 8012598:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801259c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80125a0:	4649      	mov	r1, r9
 80125a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80125a4:	463a      	mov	r2, r7
 80125a6:	4670      	mov	r0, lr
 80125a8:	f005 ff5e 	bl	8018468 <rcl_guard_condition_init_from_rmw>
 80125ac:	4681      	mov	r9, r0
 80125ae:	b328      	cbz	r0, 80125fc <rcl_node_init+0x1e4>
 80125b0:	6863      	ldr	r3, [r4, #4]
 80125b2:	b1f3      	cbz	r3, 80125f2 <rcl_node_init+0x1da>
 80125b4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80125b6:	b128      	cbz	r0, 80125c4 <rcl_node_init+0x1ac>
 80125b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80125bc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80125c0:	4798      	blx	r3
 80125c2:	6863      	ldr	r3, [r4, #4]
 80125c4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80125c6:	b110      	cbz	r0, 80125ce <rcl_node_init+0x1b6>
 80125c8:	f003 faa4 	bl	8015b14 <rmw_destroy_node>
 80125cc:	6863      	ldr	r3, [r4, #4]
 80125ce:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80125d0:	b148      	cbz	r0, 80125e6 <rcl_node_init+0x1ce>
 80125d2:	f005 ffa9 	bl	8018528 <rcl_guard_condition_fini>
 80125d6:	6863      	ldr	r3, [r4, #4]
 80125d8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80125dc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80125de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80125e2:	4798      	blx	r3
 80125e4:	6863      	ldr	r3, [r4, #4]
 80125e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80125ea:	4618      	mov	r0, r3
 80125ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80125f0:	4798      	blx	r3
 80125f2:	2300      	movs	r3, #0
 80125f4:	e9c4 3300 	strd	r3, r3, [r4]
 80125f8:	f04f 0901 	mov.w	r9, #1
 80125fc:	f1ba 0f00 	cmp.w	sl, #0
 8012600:	d125      	bne.n	801264e <rcl_node_init+0x236>
 8012602:	e001      	b.n	8012608 <rcl_node_init+0x1f0>
 8012604:	f04f 090b 	mov.w	r9, #11
 8012608:	4648      	mov	r0, r9
 801260a:	b029      	add	sp, #164	; 0xa4
 801260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012610:	f04f 0965 	mov.w	r9, #101	; 0x65
 8012614:	e7f8      	b.n	8012608 <rcl_node_init+0x1f0>
 8012616:	782b      	ldrb	r3, [r5, #0]
 8012618:	2b2f      	cmp	r3, #47	; 0x2f
 801261a:	f43f af42 	beq.w	80124a2 <rcl_node_init+0x8a>
 801261e:	9503      	str	r5, [sp, #12]
 8012620:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012624:	9300      	str	r3, [sp, #0]
 8012626:	4b1e      	ldr	r3, [pc, #120]	; (80126a0 <rcl_node_init+0x288>)
 8012628:	9302      	str	r3, [sp, #8]
 801262a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801262e:	9301      	str	r3, [sp, #4]
 8012630:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012634:	f002 fa08 	bl	8014a48 <rcutils_format_string_limit>
 8012638:	4605      	mov	r5, r0
 801263a:	b340      	cbz	r0, 801268e <rcl_node_init+0x276>
 801263c:	2200      	movs	r2, #0
 801263e:	a922      	add	r1, sp, #136	; 0x88
 8012640:	9222      	str	r2, [sp, #136]	; 0x88
 8012642:	f002 fe19 	bl	8015278 <rmw_validate_namespace>
 8012646:	4681      	mov	r9, r0
 8012648:	2800      	cmp	r0, #0
 801264a:	f43f af34 	beq.w	80124b6 <rcl_node_init+0x9e>
 801264e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012652:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012656:	4628      	mov	r0, r5
 8012658:	4798      	blx	r3
 801265a:	e7d5      	b.n	8012608 <rcl_node_init+0x1f0>
 801265c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8012660:	4648      	mov	r0, r9
 8012662:	b029      	add	sp, #164	; 0xa4
 8012664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012668:	f04f 090a 	mov.w	r9, #10
 801266c:	f1ba 0f00 	cmp.w	sl, #0
 8012670:	d1ed      	bne.n	801264e <rcl_node_init+0x236>
 8012672:	e7c9      	b.n	8012608 <rcl_node_init+0x1f0>
 8012674:	f002 fe70 	bl	8015358 <rmw_node_name_validation_result_string>
 8012678:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 801267c:	e7c4      	b.n	8012608 <rcl_node_init+0x1f0>
 801267e:	f002 fe0d 	bl	801529c <rmw_namespace_validation_result_string>
 8012682:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8012686:	f1ba 0f00 	cmp.w	sl, #0
 801268a:	d1e0      	bne.n	801264e <rcl_node_init+0x236>
 801268c:	e7bc      	b.n	8012608 <rcl_node_init+0x1f0>
 801268e:	f04f 090a 	mov.w	r9, #10
 8012692:	e7b9      	b.n	8012608 <rcl_node_init+0x1f0>
 8012694:	0801a7cc 	.word	0x0801a7cc
 8012698:	0801a65c 	.word	0x0801a65c
 801269c:	0801a7d4 	.word	0x0801a7d4
 80126a0:	0801a7d0 	.word	0x0801a7d0

080126a4 <rcl_node_is_valid>:
 80126a4:	b130      	cbz	r0, 80126b4 <rcl_node_is_valid+0x10>
 80126a6:	6843      	ldr	r3, [r0, #4]
 80126a8:	b123      	cbz	r3, 80126b4 <rcl_node_is_valid+0x10>
 80126aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126ac:	b113      	cbz	r3, 80126b4 <rcl_node_is_valid+0x10>
 80126ae:	6800      	ldr	r0, [r0, #0]
 80126b0:	f7ff bc1e 	b.w	8011ef0 <rcl_context_is_valid>
 80126b4:	2000      	movs	r0, #0
 80126b6:	4770      	bx	lr

080126b8 <rcl_node_get_name>:
 80126b8:	b120      	cbz	r0, 80126c4 <rcl_node_get_name+0xc>
 80126ba:	6840      	ldr	r0, [r0, #4]
 80126bc:	b110      	cbz	r0, 80126c4 <rcl_node_get_name+0xc>
 80126be:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80126c0:	b100      	cbz	r0, 80126c4 <rcl_node_get_name+0xc>
 80126c2:	6880      	ldr	r0, [r0, #8]
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop

080126c8 <rcl_node_get_namespace>:
 80126c8:	b120      	cbz	r0, 80126d4 <rcl_node_get_namespace+0xc>
 80126ca:	6840      	ldr	r0, [r0, #4]
 80126cc:	b110      	cbz	r0, 80126d4 <rcl_node_get_namespace+0xc>
 80126ce:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80126d0:	b100      	cbz	r0, 80126d4 <rcl_node_get_namespace+0xc>
 80126d2:	68c0      	ldr	r0, [r0, #12]
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop

080126d8 <rcl_node_get_options>:
 80126d8:	b128      	cbz	r0, 80126e6 <rcl_node_get_options+0xe>
 80126da:	6840      	ldr	r0, [r0, #4]
 80126dc:	b118      	cbz	r0, 80126e6 <rcl_node_get_options+0xe>
 80126de:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	bf08      	it	eq
 80126e4:	2000      	moveq	r0, #0
 80126e6:	4770      	bx	lr

080126e8 <rcl_node_get_rmw_handle>:
 80126e8:	b110      	cbz	r0, 80126f0 <rcl_node_get_rmw_handle+0x8>
 80126ea:	6840      	ldr	r0, [r0, #4]
 80126ec:	b100      	cbz	r0, 80126f0 <rcl_node_get_rmw_handle+0x8>
 80126ee:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80126f0:	4770      	bx	lr
 80126f2:	bf00      	nop

080126f4 <rcl_node_get_default_options>:
 80126f4:	b510      	push	{r4, lr}
 80126f6:	2268      	movs	r2, #104	; 0x68
 80126f8:	4604      	mov	r4, r0
 80126fa:	2100      	movs	r1, #0
 80126fc:	f006 fa24 	bl	8018b48 <memset>
 8012700:	4620      	mov	r0, r4
 8012702:	f7fb fe6b 	bl	800e3dc <rcutils_get_default_allocator>
 8012706:	2301      	movs	r3, #1
 8012708:	7523      	strb	r3, [r4, #20]
 801270a:	4620      	mov	r0, r4
 801270c:	bd10      	pop	{r4, pc}
 801270e:	bf00      	nop

08012710 <rcl_node_options_copy>:
 8012710:	b1d0      	cbz	r0, 8012748 <rcl_node_options_copy+0x38>
 8012712:	b570      	push	{r4, r5, r6, lr}
 8012714:	460c      	mov	r4, r1
 8012716:	b1a9      	cbz	r1, 8012744 <rcl_node_options_copy+0x34>
 8012718:	4288      	cmp	r0, r1
 801271a:	4684      	mov	ip, r0
 801271c:	d012      	beq.n	8012744 <rcl_node_options_copy+0x34>
 801271e:	4605      	mov	r5, r0
 8012720:	8a86      	ldrh	r6, [r0, #20]
 8012722:	468e      	mov	lr, r1
 8012724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012726:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801272a:	682b      	ldr	r3, [r5, #0]
 801272c:	f8ce 3000 	str.w	r3, [lr]
 8012730:	f10c 0118 	add.w	r1, ip, #24
 8012734:	2250      	movs	r2, #80	; 0x50
 8012736:	82a6      	strh	r6, [r4, #20]
 8012738:	f104 0018 	add.w	r0, r4, #24
 801273c:	f006 f9dc 	bl	8018af8 <memcpy>
 8012740:	2000      	movs	r0, #0
 8012742:	bd70      	pop	{r4, r5, r6, pc}
 8012744:	200b      	movs	r0, #11
 8012746:	bd70      	pop	{r4, r5, r6, pc}
 8012748:	200b      	movs	r0, #11
 801274a:	4770      	bx	lr

0801274c <rcl_node_resolve_name>:
 801274c:	b082      	sub	sp, #8
 801274e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012752:	b091      	sub	sp, #68	; 0x44
 8012754:	ac1a      	add	r4, sp, #104	; 0x68
 8012756:	e884 000c 	stmia.w	r4, {r2, r3}
 801275a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801275e:	2800      	cmp	r0, #0
 8012760:	d03b      	beq.n	80127da <rcl_node_resolve_name+0x8e>
 8012762:	460c      	mov	r4, r1
 8012764:	4605      	mov	r5, r0
 8012766:	f7ff ffb7 	bl	80126d8 <rcl_node_get_options>
 801276a:	2800      	cmp	r0, #0
 801276c:	d037      	beq.n	80127de <rcl_node_resolve_name+0x92>
 801276e:	4628      	mov	r0, r5
 8012770:	f7ff ffa2 	bl	80126b8 <rcl_node_get_name>
 8012774:	4606      	mov	r6, r0
 8012776:	4628      	mov	r0, r5
 8012778:	f7ff ffa6 	bl	80126c8 <rcl_node_get_namespace>
 801277c:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8012780:	4681      	mov	r9, r0
 8012782:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012786:	ad0b      	add	r5, sp, #44	; 0x2c
 8012788:	46ac      	mov	ip, r5
 801278a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801278e:	f8de 3000 	ldr.w	r3, [lr]
 8012792:	f8cc 3000 	str.w	r3, [ip]
 8012796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012798:	b1fb      	cbz	r3, 80127da <rcl_node_resolve_name+0x8e>
 801279a:	468a      	mov	sl, r1
 801279c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80127a0:	f002 faaa 	bl	8014cf8 <rcutils_get_zero_initialized_string_map>
 80127a4:	ab10      	add	r3, sp, #64	; 0x40
 80127a6:	9008      	str	r0, [sp, #32]
 80127a8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80127ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80127b0:	2100      	movs	r1, #0
 80127b2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80127b6:	a808      	add	r0, sp, #32
 80127b8:	f002 fb16 	bl	8014de8 <rcutils_string_map_init>
 80127bc:	4607      	mov	r7, r0
 80127be:	b180      	cbz	r0, 80127e2 <rcl_node_resolve_name+0x96>
 80127c0:	f7fb fe28 	bl	800e414 <rcutils_get_error_string>
 80127c4:	f7fb fe3c 	bl	800e440 <rcutils_reset_error>
 80127c8:	2f0a      	cmp	r7, #10
 80127ca:	bf18      	it	ne
 80127cc:	2701      	movne	r7, #1
 80127ce:	4638      	mov	r0, r7
 80127d0:	b011      	add	sp, #68	; 0x44
 80127d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d6:	b002      	add	sp, #8
 80127d8:	4770      	bx	lr
 80127da:	270b      	movs	r7, #11
 80127dc:	e7f7      	b.n	80127ce <rcl_node_resolve_name+0x82>
 80127de:	2701      	movs	r7, #1
 80127e0:	e7f5      	b.n	80127ce <rcl_node_resolve_name+0x82>
 80127e2:	9009      	str	r0, [sp, #36]	; 0x24
 80127e4:	9007      	str	r0, [sp, #28]
 80127e6:	a808      	add	r0, sp, #32
 80127e8:	f005 fe2e 	bl	8018448 <rcl_get_default_topic_name_substitutions>
 80127ec:	4607      	mov	r7, r0
 80127ee:	b1a8      	cbz	r0, 801281c <rcl_node_resolve_name+0xd0>
 80127f0:	280a      	cmp	r0, #10
 80127f2:	9c07      	ldr	r4, [sp, #28]
 80127f4:	d000      	beq.n	80127f8 <rcl_node_resolve_name+0xac>
 80127f6:	2701      	movs	r7, #1
 80127f8:	a808      	add	r0, sp, #32
 80127fa:	f002 fb35 	bl	8014e68 <rcutils_string_map_fini>
 80127fe:	2800      	cmp	r0, #0
 8012800:	d13d      	bne.n	801287e <rcl_node_resolve_name+0x132>
 8012802:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012804:	4659      	mov	r1, fp
 8012806:	47d0      	blx	sl
 8012808:	4659      	mov	r1, fp
 801280a:	4620      	mov	r0, r4
 801280c:	47d0      	blx	sl
 801280e:	f1b8 0f00 	cmp.w	r8, #0
 8012812:	d0dc      	beq.n	80127ce <rcl_node_resolve_name+0x82>
 8012814:	2f67      	cmp	r7, #103	; 0x67
 8012816:	bf08      	it	eq
 8012818:	2768      	moveq	r7, #104	; 0x68
 801281a:	e7d8      	b.n	80127ce <rcl_node_resolve_name+0x82>
 801281c:	ab09      	add	r3, sp, #36	; 0x24
 801281e:	9305      	str	r3, [sp, #20]
 8012820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012822:	46ec      	mov	ip, sp
 8012824:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012828:	682b      	ldr	r3, [r5, #0]
 801282a:	f8cc 3000 	str.w	r3, [ip]
 801282e:	464a      	mov	r2, r9
 8012830:	4631      	mov	r1, r6
 8012832:	4620      	mov	r0, r4
 8012834:	ab08      	add	r3, sp, #32
 8012836:	f005 fca9 	bl	801818c <rcl_expand_topic_name>
 801283a:	4607      	mov	r7, r0
 801283c:	b9b8      	cbnz	r0, 801286e <rcl_node_resolve_name+0x122>
 801283e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012840:	9009      	str	r0, [sp, #36]	; 0x24
 8012842:	4602      	mov	r2, r0
 8012844:	a90a      	add	r1, sp, #40	; 0x28
 8012846:	4620      	mov	r0, r4
 8012848:	f002 fc52 	bl	80150f0 <rmw_validate_full_topic_name>
 801284c:	b988      	cbnz	r0, 8012872 <rcl_node_resolve_name+0x126>
 801284e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012850:	b9d5      	cbnz	r5, 8012888 <rcl_node_resolve_name+0x13c>
 8012852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012854:	a808      	add	r0, sp, #32
 8012856:	601c      	str	r4, [r3, #0]
 8012858:	f002 fb06 	bl	8014e68 <rcutils_string_map_fini>
 801285c:	4607      	mov	r7, r0
 801285e:	b1a8      	cbz	r0, 801288c <rcl_node_resolve_name+0x140>
 8012860:	f7fb fdd8 	bl	800e414 <rcutils_get_error_string>
 8012864:	462c      	mov	r4, r5
 8012866:	f7fb fdeb 	bl	800e440 <rcutils_reset_error>
 801286a:	2701      	movs	r7, #1
 801286c:	e7c9      	b.n	8012802 <rcl_node_resolve_name+0xb6>
 801286e:	9c07      	ldr	r4, [sp, #28]
 8012870:	e7c2      	b.n	80127f8 <rcl_node_resolve_name+0xac>
 8012872:	f7fb fdcf 	bl	800e414 <rcutils_get_error_string>
 8012876:	2701      	movs	r7, #1
 8012878:	f7fb fde2 	bl	800e440 <rcutils_reset_error>
 801287c:	e7bc      	b.n	80127f8 <rcl_node_resolve_name+0xac>
 801287e:	f7fb fdc9 	bl	800e414 <rcutils_get_error_string>
 8012882:	f7fb fddd 	bl	800e440 <rcutils_reset_error>
 8012886:	e7bc      	b.n	8012802 <rcl_node_resolve_name+0xb6>
 8012888:	2767      	movs	r7, #103	; 0x67
 801288a:	e7b5      	b.n	80127f8 <rcl_node_resolve_name+0xac>
 801288c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801288e:	4659      	mov	r1, fp
 8012890:	47d0      	blx	sl
 8012892:	4659      	mov	r1, fp
 8012894:	4638      	mov	r0, r7
 8012896:	47d0      	blx	sl
 8012898:	e799      	b.n	80127ce <rcl_node_resolve_name+0x82>
 801289a:	bf00      	nop

0801289c <exact_match_lookup>:
 801289c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801289e:	f102 0708 	add.w	r7, r2, #8
 80128a2:	460b      	mov	r3, r1
 80128a4:	4614      	mov	r4, r2
 80128a6:	4606      	mov	r6, r0
 80128a8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80128ac:	b085      	sub	sp, #20
 80128ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80128b2:	4618      	mov	r0, r3
 80128b4:	4919      	ldr	r1, [pc, #100]	; (801291c <exact_match_lookup+0x80>)
 80128b6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80128ba:	f002 f8b7 	bl	8014a2c <rcutils_join_path>
 80128be:	7833      	ldrb	r3, [r6, #0]
 80128c0:	2b2f      	cmp	r3, #47	; 0x2f
 80128c2:	4605      	mov	r5, r0
 80128c4:	d023      	beq.n	801290e <exact_match_lookup+0x72>
 80128c6:	f104 030c 	add.w	r3, r4, #12
 80128ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80128ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 80128d2:	1c70      	adds	r0, r6, #1
 80128d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80128d8:	f002 f8ae 	bl	8014a38 <rcutils_to_native_path>
 80128dc:	4606      	mov	r6, r0
 80128de:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80128e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80128e6:	4631      	mov	r1, r6
 80128e8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80128ec:	4628      	mov	r0, r5
 80128ee:	f002 f89d 	bl	8014a2c <rcutils_join_path>
 80128f2:	6862      	ldr	r2, [r4, #4]
 80128f4:	6921      	ldr	r1, [r4, #16]
 80128f6:	4603      	mov	r3, r0
 80128f8:	4630      	mov	r0, r6
 80128fa:	461e      	mov	r6, r3
 80128fc:	4790      	blx	r2
 80128fe:	4628      	mov	r0, r5
 8012900:	6863      	ldr	r3, [r4, #4]
 8012902:	6921      	ldr	r1, [r4, #16]
 8012904:	4798      	blx	r3
 8012906:	4635      	mov	r5, r6
 8012908:	4628      	mov	r0, r5
 801290a:	b005      	add	sp, #20
 801290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801290e:	7873      	ldrb	r3, [r6, #1]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d1d8      	bne.n	80128c6 <exact_match_lookup+0x2a>
 8012914:	4628      	mov	r0, r5
 8012916:	b005      	add	sp, #20
 8012918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801291a:	bf00      	nop
 801291c:	0801a820 	.word	0x0801a820

08012920 <rcl_get_secure_root>:
 8012920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012924:	b085      	sub	sp, #20
 8012926:	b168      	cbz	r0, 8012944 <rcl_get_secure_root+0x24>
 8012928:	4607      	mov	r7, r0
 801292a:	4608      	mov	r0, r1
 801292c:	460c      	mov	r4, r1
 801292e:	f7fb fd63 	bl	800e3f8 <rcutils_allocator_is_valid>
 8012932:	b138      	cbz	r0, 8012944 <rcl_get_secure_root+0x24>
 8012934:	2300      	movs	r3, #0
 8012936:	482d      	ldr	r0, [pc, #180]	; (80129ec <rcl_get_secure_root+0xcc>)
 8012938:	9303      	str	r3, [sp, #12]
 801293a:	a903      	add	r1, sp, #12
 801293c:	f002 f85c 	bl	80149f8 <rcutils_get_env>
 8012940:	4605      	mov	r5, r0
 8012942:	b120      	cbz	r0, 801294e <rcl_get_secure_root+0x2e>
 8012944:	2500      	movs	r5, #0
 8012946:	4628      	mov	r0, r5
 8012948:	b005      	add	sp, #20
 801294a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801294e:	9b03      	ldr	r3, [sp, #12]
 8012950:	781a      	ldrb	r2, [r3, #0]
 8012952:	2a00      	cmp	r2, #0
 8012954:	d0f6      	beq.n	8012944 <rcl_get_secure_root+0x24>
 8012956:	f104 090c 	add.w	r9, r4, #12
 801295a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801295e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012962:	4618      	mov	r0, r3
 8012964:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012968:	f002 f988 	bl	8014c7c <rcutils_strdup>
 801296c:	4680      	mov	r8, r0
 801296e:	2800      	cmp	r0, #0
 8012970:	d0e8      	beq.n	8012944 <rcl_get_secure_root+0x24>
 8012972:	481f      	ldr	r0, [pc, #124]	; (80129f0 <rcl_get_secure_root+0xd0>)
 8012974:	9503      	str	r5, [sp, #12]
 8012976:	a903      	add	r1, sp, #12
 8012978:	f002 f83e 	bl	80149f8 <rcutils_get_env>
 801297c:	b160      	cbz	r0, 8012998 <rcl_get_secure_root+0x78>
 801297e:	2600      	movs	r6, #0
 8012980:	6863      	ldr	r3, [r4, #4]
 8012982:	6921      	ldr	r1, [r4, #16]
 8012984:	4630      	mov	r0, r6
 8012986:	4798      	blx	r3
 8012988:	4640      	mov	r0, r8
 801298a:	6863      	ldr	r3, [r4, #4]
 801298c:	6921      	ldr	r1, [r4, #16]
 801298e:	4798      	blx	r3
 8012990:	4628      	mov	r0, r5
 8012992:	b005      	add	sp, #20
 8012994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012998:	9b03      	ldr	r3, [sp, #12]
 801299a:	781e      	ldrb	r6, [r3, #0]
 801299c:	b1f6      	cbz	r6, 80129dc <rcl_get_secure_root+0xbc>
 801299e:	e899 0003 	ldmia.w	r9, {r0, r1}
 80129a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80129a6:	4618      	mov	r0, r3
 80129a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80129ac:	f002 f966 	bl	8014c7c <rcutils_strdup>
 80129b0:	4606      	mov	r6, r0
 80129b2:	2800      	cmp	r0, #0
 80129b4:	d0e3      	beq.n	801297e <rcl_get_secure_root+0x5e>
 80129b6:	4622      	mov	r2, r4
 80129b8:	4641      	mov	r1, r8
 80129ba:	f7ff ff6f 	bl	801289c <exact_match_lookup>
 80129be:	4605      	mov	r5, r0
 80129c0:	2d00      	cmp	r5, #0
 80129c2:	d0dd      	beq.n	8012980 <rcl_get_secure_root+0x60>
 80129c4:	4628      	mov	r0, r5
 80129c6:	f002 f82f 	bl	8014a28 <rcutils_is_directory>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2800      	cmp	r0, #0
 80129ce:	d1d7      	bne.n	8012980 <rcl_get_secure_root+0x60>
 80129d0:	4628      	mov	r0, r5
 80129d2:	6921      	ldr	r1, [r4, #16]
 80129d4:	461d      	mov	r5, r3
 80129d6:	6863      	ldr	r3, [r4, #4]
 80129d8:	4798      	blx	r3
 80129da:	e7d1      	b.n	8012980 <rcl_get_secure_root+0x60>
 80129dc:	4622      	mov	r2, r4
 80129de:	4638      	mov	r0, r7
 80129e0:	4641      	mov	r1, r8
 80129e2:	f7ff ff5b 	bl	801289c <exact_match_lookup>
 80129e6:	4605      	mov	r5, r0
 80129e8:	e7ea      	b.n	80129c0 <rcl_get_secure_root+0xa0>
 80129ea:	bf00      	nop
 80129ec:	0801a82c 	.word	0x0801a82c
 80129f0:	0801a844 	.word	0x0801a844

080129f4 <rcl_get_security_options_from_environment>:
 80129f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f8:	b082      	sub	sp, #8
 80129fa:	2300      	movs	r3, #0
 80129fc:	4606      	mov	r6, r0
 80129fe:	460f      	mov	r7, r1
 8012a00:	4820      	ldr	r0, [pc, #128]	; (8012a84 <rcl_get_security_options_from_environment+0x90>)
 8012a02:	9301      	str	r3, [sp, #4]
 8012a04:	a901      	add	r1, sp, #4
 8012a06:	4690      	mov	r8, r2
 8012a08:	f001 fff6 	bl	80149f8 <rcutils_get_env>
 8012a0c:	b120      	cbz	r0, 8012a18 <rcl_get_security_options_from_environment+0x24>
 8012a0e:	2501      	movs	r5, #1
 8012a10:	4628      	mov	r0, r5
 8012a12:	b002      	add	sp, #8
 8012a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a18:	491b      	ldr	r1, [pc, #108]	; (8012a88 <rcl_get_security_options_from_environment+0x94>)
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	9801      	ldr	r0, [sp, #4]
 8012a1e:	f7ed fbd7 	bl	80001d0 <strcmp>
 8012a22:	4605      	mov	r5, r0
 8012a24:	b9e8      	cbnz	r0, 8012a62 <rcl_get_security_options_from_environment+0x6e>
 8012a26:	9001      	str	r0, [sp, #4]
 8012a28:	f1b8 0f00 	cmp.w	r8, #0
 8012a2c:	d020      	beq.n	8012a70 <rcl_get_security_options_from_environment+0x7c>
 8012a2e:	4817      	ldr	r0, [pc, #92]	; (8012a8c <rcl_get_security_options_from_environment+0x98>)
 8012a30:	a901      	add	r1, sp, #4
 8012a32:	f001 ffe1 	bl	80149f8 <rcutils_get_env>
 8012a36:	2800      	cmp	r0, #0
 8012a38:	d1e9      	bne.n	8012a0e <rcl_get_security_options_from_environment+0x1a>
 8012a3a:	4915      	ldr	r1, [pc, #84]	; (8012a90 <rcl_get_security_options_from_environment+0x9c>)
 8012a3c:	9801      	ldr	r0, [sp, #4]
 8012a3e:	f7ed fbc7 	bl	80001d0 <strcmp>
 8012a42:	fab0 f080 	clz	r0, r0
 8012a46:	0940      	lsrs	r0, r0, #5
 8012a48:	f888 0000 	strb.w	r0, [r8]
 8012a4c:	4639      	mov	r1, r7
 8012a4e:	4630      	mov	r0, r6
 8012a50:	f7ff ff66 	bl	8012920 <rcl_get_secure_root>
 8012a54:	b170      	cbz	r0, 8012a74 <rcl_get_security_options_from_environment+0x80>
 8012a56:	f8c8 0004 	str.w	r0, [r8, #4]
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	b002      	add	sp, #8
 8012a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a62:	4625      	mov	r5, r4
 8012a64:	4628      	mov	r0, r5
 8012a66:	f888 4000 	strb.w	r4, [r8]
 8012a6a:	b002      	add	sp, #8
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a70:	250b      	movs	r5, #11
 8012a72:	e7cd      	b.n	8012a10 <rcl_get_security_options_from_environment+0x1c>
 8012a74:	f898 5000 	ldrb.w	r5, [r8]
 8012a78:	f1a5 0501 	sub.w	r5, r5, #1
 8012a7c:	fab5 f585 	clz	r5, r5
 8012a80:	096d      	lsrs	r5, r5, #5
 8012a82:	e7c5      	b.n	8012a10 <rcl_get_security_options_from_environment+0x1c>
 8012a84:	0801a7e4 	.word	0x0801a7e4
 8012a88:	0801a7f8 	.word	0x0801a7f8
 8012a8c:	0801a800 	.word	0x0801a800
 8012a90:	0801a818 	.word	0x0801a818

08012a94 <rcl_service_get_rmw_handle>:
 8012a94:	b118      	cbz	r0, 8012a9e <rcl_service_get_rmw_handle+0xa>
 8012a96:	6800      	ldr	r0, [r0, #0]
 8012a98:	b108      	cbz	r0, 8012a9e <rcl_service_get_rmw_handle+0xa>
 8012a9a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8012a9e:	4770      	bx	lr

08012aa0 <rcl_take_request>:
 8012aa0:	b570      	push	{r4, r5, r6, lr}
 8012aa2:	468e      	mov	lr, r1
 8012aa4:	460c      	mov	r4, r1
 8012aa6:	4616      	mov	r6, r2
 8012aa8:	4605      	mov	r5, r0
 8012aaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012aae:	b08c      	sub	sp, #48	; 0x30
 8012ab0:	f10d 0c18 	add.w	ip, sp, #24
 8012ab4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ab8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012abc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012ac0:	b30d      	cbz	r5, 8012b06 <rcl_take_request+0x66>
 8012ac2:	682b      	ldr	r3, [r5, #0]
 8012ac4:	b1fb      	cbz	r3, 8012b06 <rcl_take_request+0x66>
 8012ac6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8012aca:	b1e0      	cbz	r0, 8012b06 <rcl_take_request+0x66>
 8012acc:	b336      	cbz	r6, 8012b1c <rcl_take_request+0x7c>
 8012ace:	2300      	movs	r3, #0
 8012ad0:	f88d 3007 	strb.w	r3, [sp, #7]
 8012ad4:	4632      	mov	r2, r6
 8012ad6:	f10d 0307 	add.w	r3, sp, #7
 8012ada:	a902      	add	r1, sp, #8
 8012adc:	f003 f8ea 	bl	8015cb4 <rmw_take_request>
 8012ae0:	4605      	mov	r5, r0
 8012ae2:	b198      	cbz	r0, 8012b0c <rcl_take_request+0x6c>
 8012ae4:	280a      	cmp	r0, #10
 8012ae6:	bf18      	it	ne
 8012ae8:	2501      	movne	r5, #1
 8012aea:	f10d 0e18 	add.w	lr, sp, #24
 8012aee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012af2:	46a4      	mov	ip, r4
 8012af4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012af8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012afc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012b00:	4628      	mov	r0, r5
 8012b02:	b00c      	add	sp, #48	; 0x30
 8012b04:	bd70      	pop	{r4, r5, r6, pc}
 8012b06:	f44f 7516 	mov.w	r5, #600	; 0x258
 8012b0a:	e7ee      	b.n	8012aea <rcl_take_request+0x4a>
 8012b0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012b10:	f240 2359 	movw	r3, #601	; 0x259
 8012b14:	2a00      	cmp	r2, #0
 8012b16:	bf08      	it	eq
 8012b18:	461d      	moveq	r5, r3
 8012b1a:	e7e6      	b.n	8012aea <rcl_take_request+0x4a>
 8012b1c:	250b      	movs	r5, #11
 8012b1e:	e7e4      	b.n	8012aea <rcl_take_request+0x4a>

08012b20 <rcl_send_response>:
 8012b20:	b170      	cbz	r0, 8012b40 <rcl_send_response+0x20>
 8012b22:	6800      	ldr	r0, [r0, #0]
 8012b24:	b160      	cbz	r0, 8012b40 <rcl_send_response+0x20>
 8012b26:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8012b2a:	b148      	cbz	r0, 8012b40 <rcl_send_response+0x20>
 8012b2c:	b159      	cbz	r1, 8012b46 <rcl_send_response+0x26>
 8012b2e:	b510      	push	{r4, lr}
 8012b30:	b15a      	cbz	r2, 8012b4a <rcl_send_response+0x2a>
 8012b32:	f003 f91d 	bl	8015d70 <rmw_send_response>
 8012b36:	b110      	cbz	r0, 8012b3e <rcl_send_response+0x1e>
 8012b38:	2802      	cmp	r0, #2
 8012b3a:	bf18      	it	ne
 8012b3c:	2001      	movne	r0, #1
 8012b3e:	bd10      	pop	{r4, pc}
 8012b40:	f44f 7016 	mov.w	r0, #600	; 0x258
 8012b44:	4770      	bx	lr
 8012b46:	200b      	movs	r0, #11
 8012b48:	4770      	bx	lr
 8012b4a:	200b      	movs	r0, #11
 8012b4c:	bd10      	pop	{r4, pc}
 8012b4e:	bf00      	nop

08012b50 <rcl_service_is_valid>:
 8012b50:	b130      	cbz	r0, 8012b60 <rcl_service_is_valid+0x10>
 8012b52:	6800      	ldr	r0, [r0, #0]
 8012b54:	b120      	cbz	r0, 8012b60 <rcl_service_is_valid+0x10>
 8012b56:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8012b5a:	3800      	subs	r0, #0
 8012b5c:	bf18      	it	ne
 8012b5e:	2001      	movne	r0, #1
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop

08012b64 <rcl_get_zero_initialized_subscription>:
 8012b64:	4b01      	ldr	r3, [pc, #4]	; (8012b6c <rcl_get_zero_initialized_subscription+0x8>)
 8012b66:	6818      	ldr	r0, [r3, #0]
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	0801a864 	.word	0x0801a864

08012b70 <rcl_subscription_init>:
 8012b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b74:	b089      	sub	sp, #36	; 0x24
 8012b76:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8012b78:	b1d6      	cbz	r6, 8012bb0 <rcl_subscription_init+0x40>
 8012b7a:	f106 0950 	add.w	r9, r6, #80	; 0x50
 8012b7e:	4604      	mov	r4, r0
 8012b80:	4648      	mov	r0, r9
 8012b82:	460d      	mov	r5, r1
 8012b84:	4690      	mov	r8, r2
 8012b86:	461f      	mov	r7, r3
 8012b88:	f7fb fc36 	bl	800e3f8 <rcutils_allocator_is_valid>
 8012b8c:	b180      	cbz	r0, 8012bb0 <rcl_subscription_init+0x40>
 8012b8e:	b17c      	cbz	r4, 8012bb0 <rcl_subscription_init+0x40>
 8012b90:	4628      	mov	r0, r5
 8012b92:	f7ff fd87 	bl	80126a4 <rcl_node_is_valid>
 8012b96:	2800      	cmp	r0, #0
 8012b98:	d054      	beq.n	8012c44 <rcl_subscription_init+0xd4>
 8012b9a:	f1b8 0f00 	cmp.w	r8, #0
 8012b9e:	d007      	beq.n	8012bb0 <rcl_subscription_init+0x40>
 8012ba0:	b137      	cbz	r7, 8012bb0 <rcl_subscription_init+0x40>
 8012ba2:	6823      	ldr	r3, [r4, #0]
 8012ba4:	b14b      	cbz	r3, 8012bba <rcl_subscription_init+0x4a>
 8012ba6:	2764      	movs	r7, #100	; 0x64
 8012ba8:	4638      	mov	r0, r7
 8012baa:	b009      	add	sp, #36	; 0x24
 8012bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bb0:	270b      	movs	r7, #11
 8012bb2:	4638      	mov	r0, r7
 8012bb4:	b009      	add	sp, #36	; 0x24
 8012bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bba:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012bbe:	aa07      	add	r2, sp, #28
 8012bc0:	9205      	str	r2, [sp, #20]
 8012bc2:	9307      	str	r3, [sp, #28]
 8012bc4:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8012bc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012bcc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012bd0:	4639      	mov	r1, r7
 8012bd2:	e899 000c 	ldmia.w	r9, {r2, r3}
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f7ff fdb8 	bl	801274c <rcl_node_resolve_name>
 8012bdc:	4607      	mov	r7, r0
 8012bde:	2800      	cmp	r0, #0
 8012be0:	d15f      	bne.n	8012ca2 <rcl_subscription_init+0x132>
 8012be2:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 8012be6:	21c8      	movs	r1, #200	; 0xc8
 8012be8:	2001      	movs	r0, #1
 8012bea:	4798      	blx	r3
 8012bec:	6020      	str	r0, [r4, #0]
 8012bee:	2800      	cmp	r0, #0
 8012bf0:	d05d      	beq.n	8012cae <rcl_subscription_init+0x13e>
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	f7ff fd78 	bl	80126e8 <rcl_node_get_rmw_handle>
 8012bf8:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8012bfc:	9300      	str	r3, [sp, #0]
 8012bfe:	9a07      	ldr	r2, [sp, #28]
 8012c00:	6827      	ldr	r7, [r4, #0]
 8012c02:	4641      	mov	r1, r8
 8012c04:	4633      	mov	r3, r6
 8012c06:	f003 f99d 	bl	8015f44 <rmw_create_subscription>
 8012c0a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8012c0e:	6827      	ldr	r7, [r4, #0]
 8012c10:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8012c14:	b348      	cbz	r0, 8012c6a <rcl_subscription_init+0xfa>
 8012c16:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8012c1a:	f003 fa75 	bl	8016108 <rmw_subscription_get_actual_qos>
 8012c1e:	4607      	mov	r7, r0
 8012c20:	b9a8      	cbnz	r0, 8012c4e <rcl_subscription_init+0xde>
 8012c22:	6820      	ldr	r0, [r4, #0]
 8012c24:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8012c28:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8012c2c:	2270      	movs	r2, #112	; 0x70
 8012c2e:	4631      	mov	r1, r6
 8012c30:	f005 ff62 	bl	8018af8 <memcpy>
 8012c34:	9807      	ldr	r0, [sp, #28]
 8012c36:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8012c38:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8012c3a:	4798      	blx	r3
 8012c3c:	4638      	mov	r0, r7
 8012c3e:	b009      	add	sp, #36	; 0x24
 8012c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c44:	27c8      	movs	r7, #200	; 0xc8
 8012c46:	4638      	mov	r0, r7
 8012c48:	b009      	add	sp, #36	; 0x24
 8012c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c4e:	6827      	ldr	r7, [r4, #0]
 8012c50:	b32f      	cbz	r7, 8012c9e <rcl_subscription_init+0x12e>
 8012c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012c56:	b14b      	cbz	r3, 8012c6c <rcl_subscription_init+0xfc>
 8012c58:	4628      	mov	r0, r5
 8012c5a:	f7ff fd45 	bl	80126e8 <rcl_node_get_rmw_handle>
 8012c5e:	6823      	ldr	r3, [r4, #0]
 8012c60:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8012c64:	f003 fa60 	bl	8016128 <rmw_destroy_subscription>
 8012c68:	6827      	ldr	r7, [r4, #0]
 8012c6a:	b197      	cbz	r7, 8012c92 <rcl_subscription_init+0x122>
 8012c6c:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8012c70:	4628      	mov	r0, r5
 8012c72:	f7fb fbc1 	bl	800e3f8 <rcutils_allocator_is_valid>
 8012c76:	b158      	cbz	r0, 8012c90 <rcl_subscription_init+0x120>
 8012c78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012c7a:	b148      	cbz	r0, 8012c90 <rcl_subscription_init+0x120>
 8012c7c:	4629      	mov	r1, r5
 8012c7e:	f002 f98b 	bl	8014f98 <rmw_subscription_content_filter_options_fini>
 8012c82:	4605      	mov	r5, r0
 8012c84:	b9b8      	cbnz	r0, 8012cb6 <rcl_subscription_init+0x146>
 8012c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012c8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012c8c:	4798      	blx	r3
 8012c8e:	66fd      	str	r5, [r7, #108]	; 0x6c
 8012c90:	6827      	ldr	r7, [r4, #0]
 8012c92:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8012c94:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8012c96:	4638      	mov	r0, r7
 8012c98:	4798      	blx	r3
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	6023      	str	r3, [r4, #0]
 8012c9e:	2701      	movs	r7, #1
 8012ca0:	e7c8      	b.n	8012c34 <rcl_subscription_init+0xc4>
 8012ca2:	2867      	cmp	r0, #103	; 0x67
 8012ca4:	d0c6      	beq.n	8012c34 <rcl_subscription_init+0xc4>
 8012ca6:	2869      	cmp	r0, #105	; 0x69
 8012ca8:	d003      	beq.n	8012cb2 <rcl_subscription_init+0x142>
 8012caa:	280a      	cmp	r0, #10
 8012cac:	d1f7      	bne.n	8012c9e <rcl_subscription_init+0x12e>
 8012cae:	270a      	movs	r7, #10
 8012cb0:	e7c0      	b.n	8012c34 <rcl_subscription_init+0xc4>
 8012cb2:	2767      	movs	r7, #103	; 0x67
 8012cb4:	e7be      	b.n	8012c34 <rcl_subscription_init+0xc4>
 8012cb6:	f7ff f8fd 	bl	8011eb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012cba:	6827      	ldr	r7, [r4, #0]
 8012cbc:	e7e9      	b.n	8012c92 <rcl_subscription_init+0x122>
 8012cbe:	bf00      	nop

08012cc0 <rcl_subscription_get_default_options>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	4d14      	ldr	r5, [pc, #80]	; (8012d14 <rcl_subscription_get_default_options+0x54>)
 8012cc4:	4914      	ldr	r1, [pc, #80]	; (8012d18 <rcl_subscription_get_default_options+0x58>)
 8012cc6:	b08a      	sub	sp, #40	; 0x28
 8012cc8:	4604      	mov	r4, r0
 8012cca:	2250      	movs	r2, #80	; 0x50
 8012ccc:	4628      	mov	r0, r5
 8012cce:	f005 ff13 	bl	8018af8 <memcpy>
 8012cd2:	a804      	add	r0, sp, #16
 8012cd4:	f7fb fb82 	bl	800e3dc <rcutils_get_default_allocator>
 8012cd8:	f10d 0c10 	add.w	ip, sp, #16
 8012cdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ce0:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8012ce4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ce8:	466e      	mov	r6, sp
 8012cea:	f8dc 3000 	ldr.w	r3, [ip]
 8012cee:	f8ce 3000 	str.w	r3, [lr]
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	f002 f96a 	bl	8014fcc <rmw_get_default_subscription_options>
 8012cf8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012cfc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8012d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012d04:	2270      	movs	r2, #112	; 0x70
 8012d06:	4629      	mov	r1, r5
 8012d08:	4620      	mov	r0, r4
 8012d0a:	f005 fef5 	bl	8018af8 <memcpy>
 8012d0e:	4620      	mov	r0, r4
 8012d10:	b00a      	add	sp, #40	; 0x28
 8012d12:	bd70      	pop	{r4, r5, r6, pc}
 8012d14:	2000ddb8 	.word	0x2000ddb8
 8012d18:	0801a868 	.word	0x0801a868

08012d1c <rcl_take>:
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	d04a      	beq.n	8012db6 <rcl_take+0x9a>
 8012d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d24:	4604      	mov	r4, r0
 8012d26:	6800      	ldr	r0, [r0, #0]
 8012d28:	b0a4      	sub	sp, #144	; 0x90
 8012d2a:	2800      	cmp	r0, #0
 8012d2c:	d03b      	beq.n	8012da6 <rcl_take+0x8a>
 8012d2e:	461f      	mov	r7, r3
 8012d30:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d036      	beq.n	8012da6 <rcl_take+0x8a>
 8012d38:	460e      	mov	r6, r1
 8012d3a:	2900      	cmp	r1, #0
 8012d3c:	d039      	beq.n	8012db2 <rcl_take+0x96>
 8012d3e:	4615      	mov	r5, r2
 8012d40:	2a00      	cmp	r2, #0
 8012d42:	d03c      	beq.n	8012dbe <rcl_take+0xa2>
 8012d44:	a802      	add	r0, sp, #8
 8012d46:	f002 f9cb 	bl	80150e0 <rmw_get_zero_initialized_message_info>
 8012d4a:	f10d 0c08 	add.w	ip, sp, #8
 8012d4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d52:	46ae      	mov	lr, r5
 8012d54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d64:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d68:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012d6c:	f04f 0800 	mov.w	r8, #0
 8012d70:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012d74:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8012d78:	6822      	ldr	r2, [r4, #0]
 8012d7a:	462b      	mov	r3, r5
 8012d7c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 8012d80:	9700      	str	r7, [sp, #0]
 8012d82:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8012d86:	4631      	mov	r1, r6
 8012d88:	f003 fa2e 	bl	80161e8 <rmw_take_with_info>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	b9c0      	cbnz	r0, 8012dc2 <rcl_take+0xa6>
 8012d90:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8012d94:	f240 1291 	movw	r2, #401	; 0x191
 8012d98:	2900      	cmp	r1, #0
 8012d9a:	bf08      	it	eq
 8012d9c:	4613      	moveq	r3, r2
 8012d9e:	4618      	mov	r0, r3
 8012da0:	b024      	add	sp, #144	; 0x90
 8012da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012da6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012daa:	4618      	mov	r0, r3
 8012dac:	b024      	add	sp, #144	; 0x90
 8012dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012db2:	230b      	movs	r3, #11
 8012db4:	e7f3      	b.n	8012d9e <rcl_take+0x82>
 8012db6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012dba:	4618      	mov	r0, r3
 8012dbc:	4770      	bx	lr
 8012dbe:	ad14      	add	r5, sp, #80	; 0x50
 8012dc0:	e7c0      	b.n	8012d44 <rcl_take+0x28>
 8012dc2:	f7ff f877 	bl	8011eb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	e7e9      	b.n	8012d9e <rcl_take+0x82>
 8012dca:	bf00      	nop

08012dcc <rcl_subscription_get_rmw_handle>:
 8012dcc:	b118      	cbz	r0, 8012dd6 <rcl_subscription_get_rmw_handle+0xa>
 8012dce:	6800      	ldr	r0, [r0, #0]
 8012dd0:	b108      	cbz	r0, 8012dd6 <rcl_subscription_get_rmw_handle+0xa>
 8012dd2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8012dd6:	4770      	bx	lr

08012dd8 <rcl_subscription_is_valid>:
 8012dd8:	b130      	cbz	r0, 8012de8 <rcl_subscription_is_valid+0x10>
 8012dda:	6800      	ldr	r0, [r0, #0]
 8012ddc:	b120      	cbz	r0, 8012de8 <rcl_subscription_is_valid+0x10>
 8012dde:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8012de2:	3800      	subs	r0, #0
 8012de4:	bf18      	it	ne
 8012de6:	2001      	movne	r0, #1
 8012de8:	4770      	bx	lr
 8012dea:	bf00      	nop

08012dec <rcl_get_system_time>:
 8012dec:	4608      	mov	r0, r1
 8012dee:	f7fb bb43 	b.w	800e478 <rcutils_system_time_now>
 8012df2:	bf00      	nop

08012df4 <rcl_get_steady_time>:
 8012df4:	4608      	mov	r0, r1
 8012df6:	f7fb bb67 	b.w	800e4c8 <rcutils_steady_time_now>
 8012dfa:	bf00      	nop

08012dfc <rcl_get_ros_time>:
 8012dfc:	7a03      	ldrb	r3, [r0, #8]
 8012dfe:	b510      	push	{r4, lr}
 8012e00:	460c      	mov	r4, r1
 8012e02:	b133      	cbz	r3, 8012e12 <rcl_get_ros_time+0x16>
 8012e04:	2105      	movs	r1, #5
 8012e06:	f001 fd53 	bl	80148b0 <__atomic_load_8>
 8012e0a:	e9c4 0100 	strd	r0, r1, [r4]
 8012e0e:	2000      	movs	r0, #0
 8012e10:	bd10      	pop	{r4, pc}
 8012e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e16:	4608      	mov	r0, r1
 8012e18:	f7fb bb2e 	b.w	800e478 <rcutils_system_time_now>

08012e1c <rcl_clock_init>:
 8012e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e1e:	4605      	mov	r5, r0
 8012e20:	4610      	mov	r0, r2
 8012e22:	4614      	mov	r4, r2
 8012e24:	460e      	mov	r6, r1
 8012e26:	f7fb fae7 	bl	800e3f8 <rcutils_allocator_is_valid>
 8012e2a:	b128      	cbz	r0, 8012e38 <rcl_clock_init+0x1c>
 8012e2c:	2d03      	cmp	r5, #3
 8012e2e:	d803      	bhi.n	8012e38 <rcl_clock_init+0x1c>
 8012e30:	e8df f005 	tbb	[pc, r5]
 8012e34:	06532e1d 	.word	0x06532e1d
 8012e38:	f04f 0c0b 	mov.w	ip, #11
 8012e3c:	4660      	mov	r0, ip
 8012e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e40:	2e00      	cmp	r6, #0
 8012e42:	d0f9      	beq.n	8012e38 <rcl_clock_init+0x1c>
 8012e44:	2c00      	cmp	r4, #0
 8012e46:	d0f7      	beq.n	8012e38 <rcl_clock_init+0x1c>
 8012e48:	2300      	movs	r3, #0
 8012e4a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012e4e:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8012f04 <rcl_clock_init+0xe8>
 8012e52:	6133      	str	r3, [r6, #16]
 8012e54:	f106 0514 	add.w	r5, r6, #20
 8012e58:	469c      	mov	ip, r3
 8012e5a:	2703      	movs	r7, #3
 8012e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e60:	6823      	ldr	r3, [r4, #0]
 8012e62:	602b      	str	r3, [r5, #0]
 8012e64:	7037      	strb	r7, [r6, #0]
 8012e66:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012e6a:	4660      	mov	r0, ip
 8012e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e6e:	2e00      	cmp	r6, #0
 8012e70:	d0e2      	beq.n	8012e38 <rcl_clock_init+0x1c>
 8012e72:	2300      	movs	r3, #0
 8012e74:	7033      	strb	r3, [r6, #0]
 8012e76:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012e7a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012e7e:	469c      	mov	ip, r3
 8012e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e82:	f106 0514 	add.w	r5, r6, #20
 8012e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e88:	6823      	ldr	r3, [r4, #0]
 8012e8a:	602b      	str	r3, [r5, #0]
 8012e8c:	4660      	mov	r0, ip
 8012e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e90:	2e00      	cmp	r6, #0
 8012e92:	d0d1      	beq.n	8012e38 <rcl_clock_init+0x1c>
 8012e94:	2c00      	cmp	r4, #0
 8012e96:	d0cf      	beq.n	8012e38 <rcl_clock_init+0x1c>
 8012e98:	2700      	movs	r7, #0
 8012e9a:	7037      	strb	r7, [r6, #0]
 8012e9c:	46a4      	mov	ip, r4
 8012e9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ea2:	f106 0514 	add.w	r5, r6, #20
 8012ea6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012eaa:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012eb0:	f8dc 3000 	ldr.w	r3, [ip]
 8012eb4:	602b      	str	r3, [r5, #0]
 8012eb6:	6921      	ldr	r1, [r4, #16]
 8012eb8:	6823      	ldr	r3, [r4, #0]
 8012eba:	2010      	movs	r0, #16
 8012ebc:	4798      	blx	r3
 8012ebe:	6130      	str	r0, [r6, #16]
 8012ec0:	b1d0      	cbz	r0, 8012ef8 <rcl_clock_init+0xdc>
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	e9c0 2300 	strd	r2, r3, [r0]
 8012eca:	2301      	movs	r3, #1
 8012ecc:	7207      	strb	r7, [r0, #8]
 8012ece:	4a0c      	ldr	r2, [pc, #48]	; (8012f00 <rcl_clock_init+0xe4>)
 8012ed0:	7033      	strb	r3, [r6, #0]
 8012ed2:	46bc      	mov	ip, r7
 8012ed4:	60f2      	str	r2, [r6, #12]
 8012ed6:	4660      	mov	r0, ip
 8012ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eda:	2e00      	cmp	r6, #0
 8012edc:	d0ac      	beq.n	8012e38 <rcl_clock_init+0x1c>
 8012ede:	2c00      	cmp	r4, #0
 8012ee0:	d0aa      	beq.n	8012e38 <rcl_clock_init+0x1c>
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012ee8:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8012f08 <rcl_clock_init+0xec>
 8012eec:	6133      	str	r3, [r6, #16]
 8012eee:	f106 0514 	add.w	r5, r6, #20
 8012ef2:	469c      	mov	ip, r3
 8012ef4:	2702      	movs	r7, #2
 8012ef6:	e7b1      	b.n	8012e5c <rcl_clock_init+0x40>
 8012ef8:	f04f 0c0a 	mov.w	ip, #10
 8012efc:	e79e      	b.n	8012e3c <rcl_clock_init+0x20>
 8012efe:	bf00      	nop
 8012f00:	08012dfd 	.word	0x08012dfd
 8012f04:	08012df5 	.word	0x08012df5
 8012f08:	08012ded 	.word	0x08012ded

08012f0c <rcl_clock_get_now>:
 8012f0c:	b140      	cbz	r0, 8012f20 <rcl_clock_get_now+0x14>
 8012f0e:	b139      	cbz	r1, 8012f20 <rcl_clock_get_now+0x14>
 8012f10:	7803      	ldrb	r3, [r0, #0]
 8012f12:	b11b      	cbz	r3, 8012f1c <rcl_clock_get_now+0x10>
 8012f14:	68c3      	ldr	r3, [r0, #12]
 8012f16:	b10b      	cbz	r3, 8012f1c <rcl_clock_get_now+0x10>
 8012f18:	6900      	ldr	r0, [r0, #16]
 8012f1a:	4718      	bx	r3
 8012f1c:	2001      	movs	r0, #1
 8012f1e:	4770      	bx	lr
 8012f20:	200b      	movs	r0, #11
 8012f22:	4770      	bx	lr

08012f24 <rcl_timer_call>:
 8012f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f28:	b087      	sub	sp, #28
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	d06d      	beq.n	801300a <rcl_timer_call+0xe6>
 8012f2e:	6803      	ldr	r3, [r0, #0]
 8012f30:	4604      	mov	r4, r0
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d063      	beq.n	8012ffe <rcl_timer_call+0xda>
 8012f36:	f3bf 8f5b 	dmb	ish
 8012f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012f3e:	f3bf 8f5b 	dmb	ish
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d150      	bne.n	8012fe8 <rcl_timer_call+0xc4>
 8012f46:	6803      	ldr	r3, [r0, #0]
 8012f48:	a904      	add	r1, sp, #16
 8012f4a:	6818      	ldr	r0, [r3, #0]
 8012f4c:	f7ff ffde 	bl	8012f0c <rcl_clock_get_now>
 8012f50:	4605      	mov	r5, r0
 8012f52:	2800      	cmp	r0, #0
 8012f54:	d14a      	bne.n	8012fec <rcl_timer_call+0xc8>
 8012f56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	db4a      	blt.n	8012ff4 <rcl_timer_call+0xd0>
 8012f5e:	6820      	ldr	r0, [r4, #0]
 8012f60:	f04f 0a05 	mov.w	sl, #5
 8012f64:	f8cd a000 	str.w	sl, [sp]
 8012f68:	3020      	adds	r0, #32
 8012f6a:	f001 fd0d 	bl	8014988 <__atomic_exchange_8>
 8012f6e:	6823      	ldr	r3, [r4, #0]
 8012f70:	f3bf 8f5b 	dmb	ish
 8012f74:	4680      	mov	r8, r0
 8012f76:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012f7a:	f3bf 8f5b 	dmb	ish
 8012f7e:	6820      	ldr	r0, [r4, #0]
 8012f80:	4689      	mov	r9, r1
 8012f82:	3028      	adds	r0, #40	; 0x28
 8012f84:	4651      	mov	r1, sl
 8012f86:	f001 fc93 	bl	80148b0 <__atomic_load_8>
 8012f8a:	4606      	mov	r6, r0
 8012f8c:	6820      	ldr	r0, [r4, #0]
 8012f8e:	460f      	mov	r7, r1
 8012f90:	3018      	adds	r0, #24
 8012f92:	4651      	mov	r1, sl
 8012f94:	f001 fc8c 	bl	80148b0 <__atomic_load_8>
 8012f98:	1836      	adds	r6, r6, r0
 8012f9a:	4602      	mov	r2, r0
 8012f9c:	4682      	mov	sl, r0
 8012f9e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012fa2:	eb47 0701 	adc.w	r7, r7, r1
 8012fa6:	4286      	cmp	r6, r0
 8012fa8:	460b      	mov	r3, r1
 8012faa:	eb77 010c 	sbcs.w	r1, r7, ip
 8012fae:	da04      	bge.n	8012fba <rcl_timer_call+0x96>
 8012fb0:	ea53 0102 	orrs.w	r1, r3, r2
 8012fb4:	d12e      	bne.n	8013014 <rcl_timer_call+0xf0>
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	4667      	mov	r7, ip
 8012fba:	6820      	ldr	r0, [r4, #0]
 8012fbc:	2105      	movs	r1, #5
 8012fbe:	4632      	mov	r2, r6
 8012fc0:	463b      	mov	r3, r7
 8012fc2:	3028      	adds	r0, #40	; 0x28
 8012fc4:	9100      	str	r1, [sp, #0]
 8012fc6:	f001 fca9 	bl	801491c <__atomic_store_8>
 8012fca:	f1bb 0f00 	cmp.w	fp, #0
 8012fce:	d00d      	beq.n	8012fec <rcl_timer_call+0xc8>
 8012fd0:	9a04      	ldr	r2, [sp, #16]
 8012fd2:	9b05      	ldr	r3, [sp, #20]
 8012fd4:	ebb2 0208 	subs.w	r2, r2, r8
 8012fd8:	4620      	mov	r0, r4
 8012fda:	eb63 0309 	sbc.w	r3, r3, r9
 8012fde:	47d8      	blx	fp
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	b007      	add	sp, #28
 8012fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe8:	f240 3521 	movw	r5, #801	; 0x321
 8012fec:	4628      	mov	r0, r5
 8012fee:	b007      	add	sp, #28
 8012ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff4:	2501      	movs	r5, #1
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	b007      	add	sp, #28
 8012ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ffe:	f44f 7548 	mov.w	r5, #800	; 0x320
 8013002:	4628      	mov	r0, r5
 8013004:	b007      	add	sp, #28
 8013006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801300a:	250b      	movs	r5, #11
 801300c:	4628      	mov	r0, r5
 801300e:	b007      	add	sp, #28
 8013010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013014:	1b80      	subs	r0, r0, r6
 8013016:	eb6c 0107 	sbc.w	r1, ip, r7
 801301a:	3801      	subs	r0, #1
 801301c:	f161 0100 	sbc.w	r1, r1, #0
 8013020:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013024:	f7ed f9c4 	bl	80003b0 <__aeabi_ldivmod>
 8013028:	9b02      	ldr	r3, [sp, #8]
 801302a:	3001      	adds	r0, #1
 801302c:	f141 0100 	adc.w	r1, r1, #0
 8013030:	fb00 f303 	mul.w	r3, r0, r3
 8013034:	fb01 330a 	mla	r3, r1, sl, r3
 8013038:	fba0 0a0a 	umull	r0, sl, r0, sl
 801303c:	1986      	adds	r6, r0, r6
 801303e:	4453      	add	r3, sl
 8013040:	eb43 0707 	adc.w	r7, r3, r7
 8013044:	e7b9      	b.n	8012fba <rcl_timer_call+0x96>
 8013046:	bf00      	nop

08013048 <rcl_timer_is_ready>:
 8013048:	b570      	push	{r4, r5, r6, lr}
 801304a:	b082      	sub	sp, #8
 801304c:	b378      	cbz	r0, 80130ae <rcl_timer_is_ready+0x66>
 801304e:	6803      	ldr	r3, [r0, #0]
 8013050:	4604      	mov	r4, r0
 8013052:	b383      	cbz	r3, 80130b6 <rcl_timer_is_ready+0x6e>
 8013054:	460d      	mov	r5, r1
 8013056:	b351      	cbz	r1, 80130ae <rcl_timer_is_ready+0x66>
 8013058:	f3bf 8f5b 	dmb	ish
 801305c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013060:	f3bf 8f5b 	dmb	ish
 8013064:	b953      	cbnz	r3, 801307c <rcl_timer_is_ready+0x34>
 8013066:	6803      	ldr	r3, [r0, #0]
 8013068:	4669      	mov	r1, sp
 801306a:	6818      	ldr	r0, [r3, #0]
 801306c:	f7ff ff4e 	bl	8012f0c <rcl_clock_get_now>
 8013070:	4606      	mov	r6, r0
 8013072:	b140      	cbz	r0, 8013086 <rcl_timer_is_ready+0x3e>
 8013074:	f240 3321 	movw	r3, #801	; 0x321
 8013078:	4298      	cmp	r0, r3
 801307a:	d101      	bne.n	8013080 <rcl_timer_is_ready+0x38>
 801307c:	2600      	movs	r6, #0
 801307e:	702e      	strb	r6, [r5, #0]
 8013080:	4630      	mov	r0, r6
 8013082:	b002      	add	sp, #8
 8013084:	bd70      	pop	{r4, r5, r6, pc}
 8013086:	6820      	ldr	r0, [r4, #0]
 8013088:	2105      	movs	r1, #5
 801308a:	3028      	adds	r0, #40	; 0x28
 801308c:	f001 fc10 	bl	80148b0 <__atomic_load_8>
 8013090:	9b00      	ldr	r3, [sp, #0]
 8013092:	1ac0      	subs	r0, r0, r3
 8013094:	9b01      	ldr	r3, [sp, #4]
 8013096:	eb61 0103 	sbc.w	r1, r1, r3
 801309a:	2801      	cmp	r0, #1
 801309c:	f171 0300 	sbcs.w	r3, r1, #0
 80130a0:	bfb4      	ite	lt
 80130a2:	2301      	movlt	r3, #1
 80130a4:	2300      	movge	r3, #0
 80130a6:	4630      	mov	r0, r6
 80130a8:	702b      	strb	r3, [r5, #0]
 80130aa:	b002      	add	sp, #8
 80130ac:	bd70      	pop	{r4, r5, r6, pc}
 80130ae:	260b      	movs	r6, #11
 80130b0:	4630      	mov	r0, r6
 80130b2:	b002      	add	sp, #8
 80130b4:	bd70      	pop	{r4, r5, r6, pc}
 80130b6:	f44f 7648 	mov.w	r6, #800	; 0x320
 80130ba:	e7e1      	b.n	8013080 <rcl_timer_is_ready+0x38>

080130bc <rcl_timer_get_time_until_next_call>:
 80130bc:	b570      	push	{r4, r5, r6, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	b330      	cbz	r0, 8013110 <rcl_timer_get_time_until_next_call+0x54>
 80130c2:	6803      	ldr	r3, [r0, #0]
 80130c4:	4604      	mov	r4, r0
 80130c6:	b33b      	cbz	r3, 8013118 <rcl_timer_get_time_until_next_call+0x5c>
 80130c8:	460d      	mov	r5, r1
 80130ca:	b309      	cbz	r1, 8013110 <rcl_timer_get_time_until_next_call+0x54>
 80130cc:	f3bf 8f5b 	dmb	ish
 80130d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80130d4:	f3bf 8f5b 	dmb	ish
 80130d8:	b9ab      	cbnz	r3, 8013106 <rcl_timer_get_time_until_next_call+0x4a>
 80130da:	6803      	ldr	r3, [r0, #0]
 80130dc:	4669      	mov	r1, sp
 80130de:	6818      	ldr	r0, [r3, #0]
 80130e0:	f7ff ff14 	bl	8012f0c <rcl_clock_get_now>
 80130e4:	4606      	mov	r6, r0
 80130e6:	b958      	cbnz	r0, 8013100 <rcl_timer_get_time_until_next_call+0x44>
 80130e8:	6820      	ldr	r0, [r4, #0]
 80130ea:	2105      	movs	r1, #5
 80130ec:	3028      	adds	r0, #40	; 0x28
 80130ee:	f001 fbdf 	bl	80148b0 <__atomic_load_8>
 80130f2:	9b00      	ldr	r3, [sp, #0]
 80130f4:	1ac0      	subs	r0, r0, r3
 80130f6:	9b01      	ldr	r3, [sp, #4]
 80130f8:	6028      	str	r0, [r5, #0]
 80130fa:	eb61 0103 	sbc.w	r1, r1, r3
 80130fe:	6069      	str	r1, [r5, #4]
 8013100:	4630      	mov	r0, r6
 8013102:	b002      	add	sp, #8
 8013104:	bd70      	pop	{r4, r5, r6, pc}
 8013106:	f240 3621 	movw	r6, #801	; 0x321
 801310a:	4630      	mov	r0, r6
 801310c:	b002      	add	sp, #8
 801310e:	bd70      	pop	{r4, r5, r6, pc}
 8013110:	260b      	movs	r6, #11
 8013112:	4630      	mov	r0, r6
 8013114:	b002      	add	sp, #8
 8013116:	bd70      	pop	{r4, r5, r6, pc}
 8013118:	f44f 7648 	mov.w	r6, #800	; 0x320
 801311c:	e7f0      	b.n	8013100 <rcl_timer_get_time_until_next_call+0x44>
 801311e:	bf00      	nop

08013120 <rcl_timer_get_guard_condition>:
 8013120:	b130      	cbz	r0, 8013130 <rcl_timer_get_guard_condition+0x10>
 8013122:	6800      	ldr	r0, [r0, #0]
 8013124:	b120      	cbz	r0, 8013130 <rcl_timer_get_guard_condition+0x10>
 8013126:	68c3      	ldr	r3, [r0, #12]
 8013128:	b10b      	cbz	r3, 801312e <rcl_timer_get_guard_condition+0xe>
 801312a:	3008      	adds	r0, #8
 801312c:	4770      	bx	lr
 801312e:	4618      	mov	r0, r3
 8013130:	4770      	bx	lr
 8013132:	bf00      	nop

08013134 <rcl_validate_enclave_name_with_size>:
 8013134:	b378      	cbz	r0, 8013196 <rcl_validate_enclave_name_with_size+0x62>
 8013136:	b570      	push	{r4, r5, r6, lr}
 8013138:	4615      	mov	r5, r2
 801313a:	b0c2      	sub	sp, #264	; 0x108
 801313c:	b302      	cbz	r2, 8013180 <rcl_validate_enclave_name_with_size+0x4c>
 801313e:	461e      	mov	r6, r3
 8013140:	466a      	mov	r2, sp
 8013142:	ab01      	add	r3, sp, #4
 8013144:	460c      	mov	r4, r1
 8013146:	f002 f849 	bl	80151dc <rmw_validate_namespace_with_size>
 801314a:	4684      	mov	ip, r0
 801314c:	b9e8      	cbnz	r0, 801318a <rcl_validate_enclave_name_with_size+0x56>
 801314e:	9b00      	ldr	r3, [sp, #0]
 8013150:	b923      	cbnz	r3, 801315c <rcl_validate_enclave_name_with_size+0x28>
 8013152:	2300      	movs	r3, #0
 8013154:	602b      	str	r3, [r5, #0]
 8013156:	4660      	mov	r0, ip
 8013158:	b042      	add	sp, #264	; 0x108
 801315a:	bd70      	pop	{r4, r5, r6, pc}
 801315c:	2b07      	cmp	r3, #7
 801315e:	d007      	beq.n	8013170 <rcl_validate_enclave_name_with_size+0x3c>
 8013160:	1e5a      	subs	r2, r3, #1
 8013162:	2a05      	cmp	r2, #5
 8013164:	d833      	bhi.n	80131ce <rcl_validate_enclave_name_with_size+0x9a>
 8013166:	e8df f002 	tbb	[pc, r2]
 801316a:	2c2f      	.short	0x2c2f
 801316c:	1a232629 	.word	0x1a232629
 8013170:	2cff      	cmp	r4, #255	; 0xff
 8013172:	d9ee      	bls.n	8013152 <rcl_validate_enclave_name_with_size+0x1e>
 8013174:	602b      	str	r3, [r5, #0]
 8013176:	2e00      	cmp	r6, #0
 8013178:	d0ed      	beq.n	8013156 <rcl_validate_enclave_name_with_size+0x22>
 801317a:	23fe      	movs	r3, #254	; 0xfe
 801317c:	6033      	str	r3, [r6, #0]
 801317e:	e7ea      	b.n	8013156 <rcl_validate_enclave_name_with_size+0x22>
 8013180:	f04f 0c0b 	mov.w	ip, #11
 8013184:	4660      	mov	r0, ip
 8013186:	b042      	add	sp, #264	; 0x108
 8013188:	bd70      	pop	{r4, r5, r6, pc}
 801318a:	f7fe fe93 	bl	8011eb4 <rcl_convert_rmw_ret_to_rcl_ret>
 801318e:	4684      	mov	ip, r0
 8013190:	4660      	mov	r0, ip
 8013192:	b042      	add	sp, #264	; 0x108
 8013194:	bd70      	pop	{r4, r5, r6, pc}
 8013196:	f04f 0c0b 	mov.w	ip, #11
 801319a:	4660      	mov	r0, ip
 801319c:	4770      	bx	lr
 801319e:	2306      	movs	r3, #6
 80131a0:	602b      	str	r3, [r5, #0]
 80131a2:	2e00      	cmp	r6, #0
 80131a4:	d0d7      	beq.n	8013156 <rcl_validate_enclave_name_with_size+0x22>
 80131a6:	9b01      	ldr	r3, [sp, #4]
 80131a8:	6033      	str	r3, [r6, #0]
 80131aa:	4660      	mov	r0, ip
 80131ac:	b042      	add	sp, #264	; 0x108
 80131ae:	bd70      	pop	{r4, r5, r6, pc}
 80131b0:	2305      	movs	r3, #5
 80131b2:	602b      	str	r3, [r5, #0]
 80131b4:	e7f5      	b.n	80131a2 <rcl_validate_enclave_name_with_size+0x6e>
 80131b6:	2304      	movs	r3, #4
 80131b8:	602b      	str	r3, [r5, #0]
 80131ba:	e7f2      	b.n	80131a2 <rcl_validate_enclave_name_with_size+0x6e>
 80131bc:	2303      	movs	r3, #3
 80131be:	602b      	str	r3, [r5, #0]
 80131c0:	e7ef      	b.n	80131a2 <rcl_validate_enclave_name_with_size+0x6e>
 80131c2:	2302      	movs	r3, #2
 80131c4:	602b      	str	r3, [r5, #0]
 80131c6:	e7ec      	b.n	80131a2 <rcl_validate_enclave_name_with_size+0x6e>
 80131c8:	2301      	movs	r3, #1
 80131ca:	602b      	str	r3, [r5, #0]
 80131cc:	e7e9      	b.n	80131a2 <rcl_validate_enclave_name_with_size+0x6e>
 80131ce:	4a04      	ldr	r2, [pc, #16]	; (80131e0 <rcl_validate_enclave_name_with_size+0xac>)
 80131d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80131d4:	a802      	add	r0, sp, #8
 80131d6:	f001 fd25 	bl	8014c24 <rcutils_snprintf>
 80131da:	f04f 0c01 	mov.w	ip, #1
 80131de:	e7ba      	b.n	8013156 <rcl_validate_enclave_name_with_size+0x22>
 80131e0:	0801a8b8 	.word	0x0801a8b8

080131e4 <rcl_validate_enclave_name>:
 80131e4:	b168      	cbz	r0, 8013202 <rcl_validate_enclave_name+0x1e>
 80131e6:	b570      	push	{r4, r5, r6, lr}
 80131e8:	460d      	mov	r5, r1
 80131ea:	4616      	mov	r6, r2
 80131ec:	4604      	mov	r4, r0
 80131ee:	f7ec fff9 	bl	80001e4 <strlen>
 80131f2:	4633      	mov	r3, r6
 80131f4:	4601      	mov	r1, r0
 80131f6:	462a      	mov	r2, r5
 80131f8:	4620      	mov	r0, r4
 80131fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131fe:	f7ff bf99 	b.w	8013134 <rcl_validate_enclave_name_with_size>
 8013202:	200b      	movs	r0, #11
 8013204:	4770      	bx	lr
 8013206:	bf00      	nop

08013208 <rcl_get_zero_initialized_wait_set>:
 8013208:	b510      	push	{r4, lr}
 801320a:	4c08      	ldr	r4, [pc, #32]	; (801322c <rcl_get_zero_initialized_wait_set+0x24>)
 801320c:	4686      	mov	lr, r0
 801320e:	4684      	mov	ip, r0
 8013210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013212:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013218:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801321c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801321e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013222:	6823      	ldr	r3, [r4, #0]
 8013224:	f8cc 3000 	str.w	r3, [ip]
 8013228:	4670      	mov	r0, lr
 801322a:	bd10      	pop	{r4, pc}
 801322c:	0801a918 	.word	0x0801a918

08013230 <rcl_wait_set_is_valid>:
 8013230:	b118      	cbz	r0, 801323a <rcl_wait_set_is_valid+0xa>
 8013232:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013234:	3800      	subs	r0, #0
 8013236:	bf18      	it	ne
 8013238:	2001      	movne	r0, #1
 801323a:	4770      	bx	lr

0801323c <rcl_wait_set_fini>:
 801323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013240:	b082      	sub	sp, #8
 8013242:	2800      	cmp	r0, #0
 8013244:	f000 8095 	beq.w	8013372 <rcl_wait_set_fini+0x136>
 8013248:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801324a:	4604      	mov	r4, r0
 801324c:	2e00      	cmp	r6, #0
 801324e:	f000 808c 	beq.w	801336a <rcl_wait_set_fini+0x12e>
 8013252:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8013254:	f003 f9b6 	bl	80165c4 <rmw_destroy_wait_set>
 8013258:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801325a:	1e06      	subs	r6, r0, #0
 801325c:	bf18      	it	ne
 801325e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8013262:	2d00      	cmp	r5, #0
 8013264:	f000 8081 	beq.w	801336a <rcl_wait_set_fini+0x12e>
 8013268:	6820      	ldr	r0, [r4, #0]
 801326a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801326e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013270:	2700      	movs	r7, #0
 8013272:	6067      	str	r7, [r4, #4]
 8013274:	602f      	str	r7, [r5, #0]
 8013276:	b120      	cbz	r0, 8013282 <rcl_wait_set_fini+0x46>
 8013278:	9101      	str	r1, [sp, #4]
 801327a:	47c0      	blx	r8
 801327c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801327e:	9901      	ldr	r1, [sp, #4]
 8013280:	6027      	str	r7, [r4, #0]
 8013282:	68a8      	ldr	r0, [r5, #8]
 8013284:	b120      	cbz	r0, 8013290 <rcl_wait_set_fini+0x54>
 8013286:	47c0      	blx	r8
 8013288:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801328a:	2300      	movs	r3, #0
 801328c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013290:	68a0      	ldr	r0, [r4, #8]
 8013292:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013294:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013296:	f04f 0800 	mov.w	r8, #0
 801329a:	f8c4 800c 	str.w	r8, [r4, #12]
 801329e:	f8c5 800c 	str.w	r8, [r5, #12]
 80132a2:	b128      	cbz	r0, 80132b0 <rcl_wait_set_fini+0x74>
 80132a4:	47b8      	blx	r7
 80132a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80132a8:	f8c4 8008 	str.w	r8, [r4, #8]
 80132ac:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80132ae:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80132b0:	6968      	ldr	r0, [r5, #20]
 80132b2:	f04f 0800 	mov.w	r8, #0
 80132b6:	f8c5 8010 	str.w	r8, [r5, #16]
 80132ba:	b128      	cbz	r0, 80132c8 <rcl_wait_set_fini+0x8c>
 80132bc:	47b8      	blx	r7
 80132be:	f8c5 8014 	str.w	r8, [r5, #20]
 80132c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80132c4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80132c6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80132c8:	6920      	ldr	r0, [r4, #16]
 80132ca:	f04f 0800 	mov.w	r8, #0
 80132ce:	f8c4 8014 	str.w	r8, [r4, #20]
 80132d2:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 80132d6:	b128      	cbz	r0, 80132e4 <rcl_wait_set_fini+0xa8>
 80132d8:	47b8      	blx	r7
 80132da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80132dc:	f8c4 8010 	str.w	r8, [r4, #16]
 80132e0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80132e2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80132e4:	69a0      	ldr	r0, [r4, #24]
 80132e6:	f04f 0800 	mov.w	r8, #0
 80132ea:	f8c4 801c 	str.w	r8, [r4, #28]
 80132ee:	f8c5 8018 	str.w	r8, [r5, #24]
 80132f2:	b128      	cbz	r0, 8013300 <rcl_wait_set_fini+0xc4>
 80132f4:	9101      	str	r1, [sp, #4]
 80132f6:	47b8      	blx	r7
 80132f8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80132fa:	9901      	ldr	r1, [sp, #4]
 80132fc:	f8c4 8018 	str.w	r8, [r4, #24]
 8013300:	6a28      	ldr	r0, [r5, #32]
 8013302:	b120      	cbz	r0, 801330e <rcl_wait_set_fini+0xd2>
 8013304:	47b8      	blx	r7
 8013306:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013308:	2300      	movs	r3, #0
 801330a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801330e:	6a20      	ldr	r0, [r4, #32]
 8013310:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8013314:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013316:	2700      	movs	r7, #0
 8013318:	6267      	str	r7, [r4, #36]	; 0x24
 801331a:	626f      	str	r7, [r5, #36]	; 0x24
 801331c:	b120      	cbz	r0, 8013328 <rcl_wait_set_fini+0xec>
 801331e:	9101      	str	r1, [sp, #4]
 8013320:	47c0      	blx	r8
 8013322:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013324:	9901      	ldr	r1, [sp, #4]
 8013326:	6227      	str	r7, [r4, #32]
 8013328:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801332a:	b120      	cbz	r0, 8013336 <rcl_wait_set_fini+0xfa>
 801332c:	47c0      	blx	r8
 801332e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013330:	2300      	movs	r3, #0
 8013332:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8013336:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013338:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801333c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801333e:	2700      	movs	r7, #0
 8013340:	62e7      	str	r7, [r4, #44]	; 0x2c
 8013342:	632f      	str	r7, [r5, #48]	; 0x30
 8013344:	b120      	cbz	r0, 8013350 <rcl_wait_set_fini+0x114>
 8013346:	9101      	str	r1, [sp, #4]
 8013348:	47c0      	blx	r8
 801334a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801334c:	9901      	ldr	r1, [sp, #4]
 801334e:	62a7      	str	r7, [r4, #40]	; 0x28
 8013350:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8013352:	b120      	cbz	r0, 801335e <rcl_wait_set_fini+0x122>
 8013354:	47c0      	blx	r8
 8013356:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013358:	2300      	movs	r3, #0
 801335a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801335e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8013360:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013362:	4628      	mov	r0, r5
 8013364:	4798      	blx	r3
 8013366:	2300      	movs	r3, #0
 8013368:	6323      	str	r3, [r4, #48]	; 0x30
 801336a:	4630      	mov	r0, r6
 801336c:	b002      	add	sp, #8
 801336e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013372:	260b      	movs	r6, #11
 8013374:	4630      	mov	r0, r6
 8013376:	b002      	add	sp, #8
 8013378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801337c <rcl_wait_set_add_subscription>:
 801337c:	b318      	cbz	r0, 80133c6 <rcl_wait_set_add_subscription+0x4a>
 801337e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013380:	b570      	push	{r4, r5, r6, lr}
 8013382:	4604      	mov	r4, r0
 8013384:	b30b      	cbz	r3, 80133ca <rcl_wait_set_add_subscription+0x4e>
 8013386:	b319      	cbz	r1, 80133d0 <rcl_wait_set_add_subscription+0x54>
 8013388:	681d      	ldr	r5, [r3, #0]
 801338a:	6840      	ldr	r0, [r0, #4]
 801338c:	4285      	cmp	r5, r0
 801338e:	d217      	bcs.n	80133c0 <rcl_wait_set_add_subscription+0x44>
 8013390:	6820      	ldr	r0, [r4, #0]
 8013392:	1c6e      	adds	r6, r5, #1
 8013394:	601e      	str	r6, [r3, #0]
 8013396:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801339a:	b102      	cbz	r2, 801339e <rcl_wait_set_add_subscription+0x22>
 801339c:	6015      	str	r5, [r2, #0]
 801339e:	4608      	mov	r0, r1
 80133a0:	f7ff fd14 	bl	8012dcc <rcl_subscription_get_rmw_handle>
 80133a4:	b150      	cbz	r0, 80133bc <rcl_wait_set_add_subscription+0x40>
 80133a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80133a8:	6842      	ldr	r2, [r0, #4]
 80133aa:	689b      	ldr	r3, [r3, #8]
 80133ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80133b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80133b2:	6853      	ldr	r3, [r2, #4]
 80133b4:	3301      	adds	r3, #1
 80133b6:	2000      	movs	r0, #0
 80133b8:	6053      	str	r3, [r2, #4]
 80133ba:	bd70      	pop	{r4, r5, r6, pc}
 80133bc:	2001      	movs	r0, #1
 80133be:	bd70      	pop	{r4, r5, r6, pc}
 80133c0:	f240 3086 	movw	r0, #902	; 0x386
 80133c4:	bd70      	pop	{r4, r5, r6, pc}
 80133c6:	200b      	movs	r0, #11
 80133c8:	4770      	bx	lr
 80133ca:	f44f 7061 	mov.w	r0, #900	; 0x384
 80133ce:	bd70      	pop	{r4, r5, r6, pc}
 80133d0:	200b      	movs	r0, #11
 80133d2:	bd70      	pop	{r4, r5, r6, pc}

080133d4 <rcl_wait_set_clear>:
 80133d4:	2800      	cmp	r0, #0
 80133d6:	d073      	beq.n	80134c0 <rcl_wait_set_clear+0xec>
 80133d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80133da:	b510      	push	{r4, lr}
 80133dc:	4604      	mov	r4, r0
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d070      	beq.n	80134c4 <rcl_wait_set_clear+0xf0>
 80133e2:	6800      	ldr	r0, [r0, #0]
 80133e4:	b138      	cbz	r0, 80133f6 <rcl_wait_set_clear+0x22>
 80133e6:	6862      	ldr	r2, [r4, #4]
 80133e8:	2100      	movs	r1, #0
 80133ea:	0092      	lsls	r2, r2, #2
 80133ec:	f005 fbac 	bl	8018b48 <memset>
 80133f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80133f2:	2200      	movs	r2, #0
 80133f4:	601a      	str	r2, [r3, #0]
 80133f6:	68a0      	ldr	r0, [r4, #8]
 80133f8:	b138      	cbz	r0, 801340a <rcl_wait_set_clear+0x36>
 80133fa:	68e2      	ldr	r2, [r4, #12]
 80133fc:	2100      	movs	r1, #0
 80133fe:	0092      	lsls	r2, r2, #2
 8013400:	f005 fba2 	bl	8018b48 <memset>
 8013404:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013406:	2200      	movs	r2, #0
 8013408:	60da      	str	r2, [r3, #12]
 801340a:	69a0      	ldr	r0, [r4, #24]
 801340c:	b138      	cbz	r0, 801341e <rcl_wait_set_clear+0x4a>
 801340e:	69e2      	ldr	r2, [r4, #28]
 8013410:	2100      	movs	r1, #0
 8013412:	0092      	lsls	r2, r2, #2
 8013414:	f005 fb98 	bl	8018b48 <memset>
 8013418:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801341a:	2200      	movs	r2, #0
 801341c:	619a      	str	r2, [r3, #24]
 801341e:	6a20      	ldr	r0, [r4, #32]
 8013420:	b138      	cbz	r0, 8013432 <rcl_wait_set_clear+0x5e>
 8013422:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013424:	2100      	movs	r1, #0
 8013426:	0092      	lsls	r2, r2, #2
 8013428:	f005 fb8e 	bl	8018b48 <memset>
 801342c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801342e:	2200      	movs	r2, #0
 8013430:	625a      	str	r2, [r3, #36]	; 0x24
 8013432:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013434:	b138      	cbz	r0, 8013446 <rcl_wait_set_clear+0x72>
 8013436:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013438:	2100      	movs	r1, #0
 801343a:	0092      	lsls	r2, r2, #2
 801343c:	f005 fb84 	bl	8018b48 <memset>
 8013440:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013442:	2200      	movs	r2, #0
 8013444:	631a      	str	r2, [r3, #48]	; 0x30
 8013446:	6920      	ldr	r0, [r4, #16]
 8013448:	b138      	cbz	r0, 801345a <rcl_wait_set_clear+0x86>
 801344a:	6962      	ldr	r2, [r4, #20]
 801344c:	2100      	movs	r1, #0
 801344e:	0092      	lsls	r2, r2, #2
 8013450:	f005 fb7a 	bl	8018b48 <memset>
 8013454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013456:	2200      	movs	r2, #0
 8013458:	641a      	str	r2, [r3, #64]	; 0x40
 801345a:	6898      	ldr	r0, [r3, #8]
 801345c:	b138      	cbz	r0, 801346e <rcl_wait_set_clear+0x9a>
 801345e:	685a      	ldr	r2, [r3, #4]
 8013460:	2100      	movs	r1, #0
 8013462:	0092      	lsls	r2, r2, #2
 8013464:	f005 fb70 	bl	8018b48 <memset>
 8013468:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801346a:	2200      	movs	r2, #0
 801346c:	605a      	str	r2, [r3, #4]
 801346e:	6958      	ldr	r0, [r3, #20]
 8013470:	b138      	cbz	r0, 8013482 <rcl_wait_set_clear+0xae>
 8013472:	691a      	ldr	r2, [r3, #16]
 8013474:	2100      	movs	r1, #0
 8013476:	0092      	lsls	r2, r2, #2
 8013478:	f005 fb66 	bl	8018b48 <memset>
 801347c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801347e:	2200      	movs	r2, #0
 8013480:	611a      	str	r2, [r3, #16]
 8013482:	6a18      	ldr	r0, [r3, #32]
 8013484:	b138      	cbz	r0, 8013496 <rcl_wait_set_clear+0xc2>
 8013486:	69da      	ldr	r2, [r3, #28]
 8013488:	2100      	movs	r1, #0
 801348a:	0092      	lsls	r2, r2, #2
 801348c:	f005 fb5c 	bl	8018b48 <memset>
 8013490:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013492:	2200      	movs	r2, #0
 8013494:	61da      	str	r2, [r3, #28]
 8013496:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013498:	b138      	cbz	r0, 80134aa <rcl_wait_set_clear+0xd6>
 801349a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801349c:	2100      	movs	r1, #0
 801349e:	0092      	lsls	r2, r2, #2
 80134a0:	f005 fb52 	bl	8018b48 <memset>
 80134a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80134a6:	2200      	movs	r2, #0
 80134a8:	629a      	str	r2, [r3, #40]	; 0x28
 80134aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80134ac:	b138      	cbz	r0, 80134be <rcl_wait_set_clear+0xea>
 80134ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80134b0:	2100      	movs	r1, #0
 80134b2:	0092      	lsls	r2, r2, #2
 80134b4:	f005 fb48 	bl	8018b48 <memset>
 80134b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80134ba:	2000      	movs	r0, #0
 80134bc:	6358      	str	r0, [r3, #52]	; 0x34
 80134be:	bd10      	pop	{r4, pc}
 80134c0:	200b      	movs	r0, #11
 80134c2:	4770      	bx	lr
 80134c4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80134c8:	bd10      	pop	{r4, pc}
 80134ca:	bf00      	nop

080134cc <rcl_wait_set_resize>:
 80134cc:	2800      	cmp	r0, #0
 80134ce:	f000 8185 	beq.w	80137dc <rcl_wait_set_resize+0x310>
 80134d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80134d8:	b083      	sub	sp, #12
 80134da:	4605      	mov	r5, r0
 80134dc:	2c00      	cmp	r4, #0
 80134de:	f000 817f 	beq.w	80137e0 <rcl_wait_set_resize+0x314>
 80134e2:	f04f 0900 	mov.w	r9, #0
 80134e6:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80134ea:	461f      	mov	r7, r3
 80134ec:	4688      	mov	r8, r1
 80134ee:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80134f2:	4616      	mov	r6, r2
 80134f4:	f8c0 9004 	str.w	r9, [r0, #4]
 80134f8:	f8c4 9000 	str.w	r9, [r4]
 80134fc:	2900      	cmp	r1, #0
 80134fe:	f000 80bd 	beq.w	801367c <rcl_wait_set_resize+0x1b0>
 8013502:	008c      	lsls	r4, r1, #2
 8013504:	6800      	ldr	r0, [r0, #0]
 8013506:	9301      	str	r3, [sp, #4]
 8013508:	4652      	mov	r2, sl
 801350a:	4621      	mov	r1, r4
 801350c:	4798      	blx	r3
 801350e:	9b01      	ldr	r3, [sp, #4]
 8013510:	6028      	str	r0, [r5, #0]
 8013512:	2800      	cmp	r0, #0
 8013514:	f000 80cb 	beq.w	80136ae <rcl_wait_set_resize+0x1e2>
 8013518:	4622      	mov	r2, r4
 801351a:	4649      	mov	r1, r9
 801351c:	9301      	str	r3, [sp, #4]
 801351e:	f005 fb13 	bl	8018b48 <memset>
 8013522:	f8c5 8004 	str.w	r8, [r5, #4]
 8013526:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801352a:	9b01      	ldr	r3, [sp, #4]
 801352c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013530:	f8c8 9004 	str.w	r9, [r8, #4]
 8013534:	4652      	mov	r2, sl
 8013536:	4621      	mov	r1, r4
 8013538:	4798      	blx	r3
 801353a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801353c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013540:	689b      	ldr	r3, [r3, #8]
 8013542:	2b00      	cmp	r3, #0
 8013544:	f000 80ac 	beq.w	80136a0 <rcl_wait_set_resize+0x1d4>
 8013548:	4622      	mov	r2, r4
 801354a:	4649      	mov	r1, r9
 801354c:	4618      	mov	r0, r3
 801354e:	f005 fafb 	bl	8018b48 <memset>
 8013552:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8013554:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8013558:	f04f 0800 	mov.w	r8, #0
 801355c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8013560:	f8c5 800c 	str.w	r8, [r5, #12]
 8013564:	f8c4 800c 	str.w	r8, [r4, #12]
 8013568:	2e00      	cmp	r6, #0
 801356a:	f040 80a4 	bne.w	80136b6 <rcl_wait_set_resize+0x1ea>
 801356e:	68a8      	ldr	r0, [r5, #8]
 8013570:	b128      	cbz	r0, 801357e <rcl_wait_set_resize+0xb2>
 8013572:	4649      	mov	r1, r9
 8013574:	4790      	blx	r2
 8013576:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8013578:	60ae      	str	r6, [r5, #8]
 801357a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801357e:	f04f 0800 	mov.w	r8, #0
 8013582:	19f6      	adds	r6, r6, r7
 8013584:	f8c4 8010 	str.w	r8, [r4, #16]
 8013588:	f040 80ac 	bne.w	80136e4 <rcl_wait_set_resize+0x218>
 801358c:	6960      	ldr	r0, [r4, #20]
 801358e:	b130      	cbz	r0, 801359e <rcl_wait_set_resize+0xd2>
 8013590:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8013592:	4649      	mov	r1, r9
 8013594:	4798      	blx	r3
 8013596:	6166      	str	r6, [r4, #20]
 8013598:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801359a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801359e:	2600      	movs	r6, #0
 80135a0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80135a4:	616e      	str	r6, [r5, #20]
 80135a6:	6426      	str	r6, [r4, #64]	; 0x40
 80135a8:	2f00      	cmp	r7, #0
 80135aa:	f040 80ad 	bne.w	8013708 <rcl_wait_set_resize+0x23c>
 80135ae:	6928      	ldr	r0, [r5, #16]
 80135b0:	b138      	cbz	r0, 80135c2 <rcl_wait_set_resize+0xf6>
 80135b2:	4649      	mov	r1, r9
 80135b4:	47d0      	blx	sl
 80135b6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80135b8:	612f      	str	r7, [r5, #16]
 80135ba:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80135be:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80135c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135c4:	2600      	movs	r6, #0
 80135c6:	61ee      	str	r6, [r5, #28]
 80135c8:	61a6      	str	r6, [r4, #24]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	f040 80af 	bne.w	801372e <rcl_wait_set_resize+0x262>
 80135d0:	69a8      	ldr	r0, [r5, #24]
 80135d2:	b120      	cbz	r0, 80135de <rcl_wait_set_resize+0x112>
 80135d4:	4649      	mov	r1, r9
 80135d6:	47d0      	blx	sl
 80135d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135da:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80135dc:	61ab      	str	r3, [r5, #24]
 80135de:	6a20      	ldr	r0, [r4, #32]
 80135e0:	b128      	cbz	r0, 80135ee <rcl_wait_set_resize+0x122>
 80135e2:	4649      	mov	r1, r9
 80135e4:	47d0      	blx	sl
 80135e6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80135e8:	2300      	movs	r3, #0
 80135ea:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80135ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135f0:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80135f2:	2600      	movs	r6, #0
 80135f4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80135f8:	626e      	str	r6, [r5, #36]	; 0x24
 80135fa:	6266      	str	r6, [r4, #36]	; 0x24
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f000 80b6 	beq.w	801376e <rcl_wait_set_resize+0x2a2>
 8013602:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8013606:	6a28      	ldr	r0, [r5, #32]
 8013608:	463a      	mov	r2, r7
 801360a:	4651      	mov	r1, sl
 801360c:	47c8      	blx	r9
 801360e:	6228      	str	r0, [r5, #32]
 8013610:	2800      	cmp	r0, #0
 8013612:	d04c      	beq.n	80136ae <rcl_wait_set_resize+0x1e2>
 8013614:	4652      	mov	r2, sl
 8013616:	4631      	mov	r1, r6
 8013618:	f005 fa96 	bl	8018b48 <memset>
 801361c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801361e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013620:	626b      	str	r3, [r5, #36]	; 0x24
 8013622:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013624:	62a6      	str	r6, [r4, #40]	; 0x28
 8013626:	463a      	mov	r2, r7
 8013628:	4651      	mov	r1, sl
 801362a:	47c8      	blx	r9
 801362c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801362e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8013630:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013632:	2c00      	cmp	r4, #0
 8013634:	f000 80f0 	beq.w	8013818 <rcl_wait_set_resize+0x34c>
 8013638:	4620      	mov	r0, r4
 801363a:	4652      	mov	r2, sl
 801363c:	4631      	mov	r1, r6
 801363e:	f005 fa83 	bl	8018b48 <memset>
 8013642:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8013644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013646:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8013648:	2600      	movs	r6, #0
 801364a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801364e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8013650:	6326      	str	r6, [r4, #48]	; 0x30
 8013652:	2b00      	cmp	r3, #0
 8013654:	f040 809d 	bne.w	8013792 <rcl_wait_set_resize+0x2c6>
 8013658:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801365a:	b120      	cbz	r0, 8013666 <rcl_wait_set_resize+0x19a>
 801365c:	4639      	mov	r1, r7
 801365e:	47c0      	blx	r8
 8013660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013662:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8013664:	62ab      	str	r3, [r5, #40]	; 0x28
 8013666:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8013668:	b310      	cbz	r0, 80136b0 <rcl_wait_set_resize+0x1e4>
 801366a:	4639      	mov	r1, r7
 801366c:	47c0      	blx	r8
 801366e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013670:	2000      	movs	r0, #0
 8013672:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8013676:	b003      	add	sp, #12
 8013678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367c:	6800      	ldr	r0, [r0, #0]
 801367e:	b120      	cbz	r0, 801368a <rcl_wait_set_resize+0x1be>
 8013680:	4651      	mov	r1, sl
 8013682:	47d8      	blx	fp
 8013684:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8013686:	f8c5 8000 	str.w	r8, [r5]
 801368a:	68a0      	ldr	r0, [r4, #8]
 801368c:	2800      	cmp	r0, #0
 801368e:	f43f af61 	beq.w	8013554 <rcl_wait_set_resize+0x88>
 8013692:	4651      	mov	r1, sl
 8013694:	47d8      	blx	fp
 8013696:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8013698:	2300      	movs	r3, #0
 801369a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801369e:	e759      	b.n	8013554 <rcl_wait_set_resize+0x88>
 80136a0:	6828      	ldr	r0, [r5, #0]
 80136a2:	9301      	str	r3, [sp, #4]
 80136a4:	4651      	mov	r1, sl
 80136a6:	47d8      	blx	fp
 80136a8:	9b01      	ldr	r3, [sp, #4]
 80136aa:	e9c5 3300 	strd	r3, r3, [r5]
 80136ae:	200a      	movs	r0, #10
 80136b0:	b003      	add	sp, #12
 80136b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136b6:	00b4      	lsls	r4, r6, #2
 80136b8:	68a8      	ldr	r0, [r5, #8]
 80136ba:	464a      	mov	r2, r9
 80136bc:	4621      	mov	r1, r4
 80136be:	4798      	blx	r3
 80136c0:	60a8      	str	r0, [r5, #8]
 80136c2:	2800      	cmp	r0, #0
 80136c4:	d0f3      	beq.n	80136ae <rcl_wait_set_resize+0x1e2>
 80136c6:	4622      	mov	r2, r4
 80136c8:	4641      	mov	r1, r8
 80136ca:	f005 fa3d 	bl	8018b48 <memset>
 80136ce:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80136d0:	60ee      	str	r6, [r5, #12]
 80136d2:	f04f 0800 	mov.w	r8, #0
 80136d6:	19f6      	adds	r6, r6, r7
 80136d8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80136dc:	f8c4 8010 	str.w	r8, [r4, #16]
 80136e0:	f43f af54 	beq.w	801358c <rcl_wait_set_resize+0xc0>
 80136e4:	00b6      	lsls	r6, r6, #2
 80136e6:	464a      	mov	r2, r9
 80136e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80136ea:	6960      	ldr	r0, [r4, #20]
 80136ec:	4631      	mov	r1, r6
 80136ee:	4798      	blx	r3
 80136f0:	4681      	mov	r9, r0
 80136f2:	6160      	str	r0, [r4, #20]
 80136f4:	2800      	cmp	r0, #0
 80136f6:	d076      	beq.n	80137e6 <rcl_wait_set_resize+0x31a>
 80136f8:	4632      	mov	r2, r6
 80136fa:	4641      	mov	r1, r8
 80136fc:	f005 fa24 	bl	8018b48 <memset>
 8013700:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8013702:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8013706:	e74a      	b.n	801359e <rcl_wait_set_resize+0xd2>
 8013708:	00bc      	lsls	r4, r7, #2
 801370a:	6928      	ldr	r0, [r5, #16]
 801370c:	464a      	mov	r2, r9
 801370e:	4621      	mov	r1, r4
 8013710:	47c0      	blx	r8
 8013712:	6128      	str	r0, [r5, #16]
 8013714:	2800      	cmp	r0, #0
 8013716:	d0ca      	beq.n	80136ae <rcl_wait_set_resize+0x1e2>
 8013718:	4622      	mov	r2, r4
 801371a:	4631      	mov	r1, r6
 801371c:	f005 fa14 	bl	8018b48 <memset>
 8013720:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8013722:	616f      	str	r7, [r5, #20]
 8013724:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8013728:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801372c:	e749      	b.n	80135c2 <rcl_wait_set_resize+0xf6>
 801372e:	009c      	lsls	r4, r3, #2
 8013730:	69a8      	ldr	r0, [r5, #24]
 8013732:	464a      	mov	r2, r9
 8013734:	4621      	mov	r1, r4
 8013736:	47c0      	blx	r8
 8013738:	61a8      	str	r0, [r5, #24]
 801373a:	2800      	cmp	r0, #0
 801373c:	d0b7      	beq.n	80136ae <rcl_wait_set_resize+0x1e2>
 801373e:	4622      	mov	r2, r4
 8013740:	4631      	mov	r1, r6
 8013742:	f005 fa01 	bl	8018b48 <memset>
 8013746:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8013748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801374a:	61eb      	str	r3, [r5, #28]
 801374c:	6a38      	ldr	r0, [r7, #32]
 801374e:	61fe      	str	r6, [r7, #28]
 8013750:	464a      	mov	r2, r9
 8013752:	4621      	mov	r1, r4
 8013754:	47c0      	blx	r8
 8013756:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013758:	6238      	str	r0, [r7, #32]
 801375a:	6a1f      	ldr	r7, [r3, #32]
 801375c:	2f00      	cmp	r7, #0
 801375e:	d054      	beq.n	801380a <rcl_wait_set_resize+0x33e>
 8013760:	4622      	mov	r2, r4
 8013762:	4631      	mov	r1, r6
 8013764:	4638      	mov	r0, r7
 8013766:	f005 f9ef 	bl	8018b48 <memset>
 801376a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801376c:	e73f      	b.n	80135ee <rcl_wait_set_resize+0x122>
 801376e:	6a28      	ldr	r0, [r5, #32]
 8013770:	b120      	cbz	r0, 801377c <rcl_wait_set_resize+0x2b0>
 8013772:	4639      	mov	r1, r7
 8013774:	47c0      	blx	r8
 8013776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013778:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801377a:	622b      	str	r3, [r5, #32]
 801377c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801377e:	2800      	cmp	r0, #0
 8013780:	f43f af60 	beq.w	8013644 <rcl_wait_set_resize+0x178>
 8013784:	4639      	mov	r1, r7
 8013786:	47c0      	blx	r8
 8013788:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801378a:	2300      	movs	r3, #0
 801378c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8013790:	e758      	b.n	8013644 <rcl_wait_set_resize+0x178>
 8013792:	009c      	lsls	r4, r3, #2
 8013794:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8013796:	463a      	mov	r2, r7
 8013798:	4621      	mov	r1, r4
 801379a:	47c8      	blx	r9
 801379c:	62a8      	str	r0, [r5, #40]	; 0x28
 801379e:	2800      	cmp	r0, #0
 80137a0:	d085      	beq.n	80136ae <rcl_wait_set_resize+0x1e2>
 80137a2:	4622      	mov	r2, r4
 80137a4:	4631      	mov	r1, r6
 80137a6:	f005 f9cf 	bl	8018b48 <memset>
 80137aa:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80137ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137b0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80137b2:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80137b6:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 80137ba:	463a      	mov	r2, r7
 80137bc:	4621      	mov	r1, r4
 80137be:	47c8      	blx	r9
 80137c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80137c2:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80137c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137c8:	b36b      	cbz	r3, 8013826 <rcl_wait_set_resize+0x35a>
 80137ca:	4622      	mov	r2, r4
 80137cc:	4631      	mov	r1, r6
 80137ce:	4618      	mov	r0, r3
 80137d0:	f005 f9ba 	bl	8018b48 <memset>
 80137d4:	4630      	mov	r0, r6
 80137d6:	b003      	add	sp, #12
 80137d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137dc:	200b      	movs	r0, #11
 80137de:	4770      	bx	lr
 80137e0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80137e4:	e764      	b.n	80136b0 <rcl_wait_set_resize+0x1e4>
 80137e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80137e8:	68a8      	ldr	r0, [r5, #8]
 80137ea:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80137ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137ee:	4798      	blx	r3
 80137f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80137f2:	6928      	ldr	r0, [r5, #16]
 80137f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80137f6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80137f8:	f8c5 900c 	str.w	r9, [r5, #12]
 80137fc:	f8c5 9008 	str.w	r9, [r5, #8]
 8013800:	4790      	blx	r2
 8013802:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013806:	200a      	movs	r0, #10
 8013808:	e752      	b.n	80136b0 <rcl_wait_set_resize+0x1e4>
 801380a:	69a8      	ldr	r0, [r5, #24]
 801380c:	4649      	mov	r1, r9
 801380e:	47d0      	blx	sl
 8013810:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013814:	200a      	movs	r0, #10
 8013816:	e74b      	b.n	80136b0 <rcl_wait_set_resize+0x1e4>
 8013818:	6a28      	ldr	r0, [r5, #32]
 801381a:	4639      	mov	r1, r7
 801381c:	47c0      	blx	r8
 801381e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013822:	200a      	movs	r0, #10
 8013824:	e744      	b.n	80136b0 <rcl_wait_set_resize+0x1e4>
 8013826:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8013828:	9301      	str	r3, [sp, #4]
 801382a:	4639      	mov	r1, r7
 801382c:	47c0      	blx	r8
 801382e:	9b01      	ldr	r3, [sp, #4]
 8013830:	200a      	movs	r0, #10
 8013832:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8013836:	e73b      	b.n	80136b0 <rcl_wait_set_resize+0x1e4>

08013838 <rcl_wait_set_init>:
 8013838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801383c:	b084      	sub	sp, #16
 801383e:	4604      	mov	r4, r0
 8013840:	a810      	add	r0, sp, #64	; 0x40
 8013842:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8013846:	460f      	mov	r7, r1
 8013848:	4690      	mov	r8, r2
 801384a:	4699      	mov	r9, r3
 801384c:	f7fa fdd4 	bl	800e3f8 <rcutils_allocator_is_valid>
 8013850:	2800      	cmp	r0, #0
 8013852:	d06b      	beq.n	801392c <rcl_wait_set_init+0xf4>
 8013854:	2c00      	cmp	r4, #0
 8013856:	d069      	beq.n	801392c <rcl_wait_set_init+0xf4>
 8013858:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801385a:	b125      	cbz	r5, 8013866 <rcl_wait_set_init+0x2e>
 801385c:	2564      	movs	r5, #100	; 0x64
 801385e:	4628      	mov	r0, r5
 8013860:	b004      	add	sp, #16
 8013862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013866:	f1ba 0f00 	cmp.w	sl, #0
 801386a:	d05f      	beq.n	801392c <rcl_wait_set_init+0xf4>
 801386c:	4650      	mov	r0, sl
 801386e:	f7fe fb3f 	bl	8011ef0 <rcl_context_is_valid>
 8013872:	2800      	cmp	r0, #0
 8013874:	d067      	beq.n	8013946 <rcl_wait_set_init+0x10e>
 8013876:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013878:	9914      	ldr	r1, [sp, #80]	; 0x50
 801387a:	205c      	movs	r0, #92	; 0x5c
 801387c:	4798      	blx	r3
 801387e:	6320      	str	r0, [r4, #48]	; 0x30
 8013880:	2800      	cmp	r0, #0
 8013882:	d062      	beq.n	801394a <rcl_wait_set_init+0x112>
 8013884:	4629      	mov	r1, r5
 8013886:	225c      	movs	r2, #92	; 0x5c
 8013888:	f005 f95e 	bl	8018b48 <memset>
 801388c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8013890:	eb03 0e02 	add.w	lr, r3, r2
 8013894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013896:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8013898:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801389c:	449e      	add	lr, r3
 801389e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138a2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80138a6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80138aa:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80138ae:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80138b2:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 80138b6:	f106 0548 	add.w	r5, r6, #72	; 0x48
 80138ba:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80138be:	f8da a000 	ldr.w	sl, [sl]
 80138c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80138c4:	44c6      	add	lr, r8
 80138c6:	f8dc 3000 	ldr.w	r3, [ip]
 80138ca:	602b      	str	r3, [r5, #0]
 80138cc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80138d0:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 80138d4:	f002 fe6c 	bl	80165b0 <rmw_create_wait_set>
 80138d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80138da:	63f0      	str	r0, [r6, #60]	; 0x3c
 80138dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80138de:	b350      	cbz	r0, 8013936 <rcl_wait_set_init+0xfe>
 80138e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138e2:	9302      	str	r3, [sp, #8]
 80138e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	4642      	mov	r2, r8
 80138ee:	464b      	mov	r3, r9
 80138f0:	4639      	mov	r1, r7
 80138f2:	4620      	mov	r0, r4
 80138f4:	f7ff fdea 	bl	80134cc <rcl_wait_set_resize>
 80138f8:	4605      	mov	r5, r0
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d0af      	beq.n	801385e <rcl_wait_set_init+0x26>
 80138fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013900:	bb2b      	cbnz	r3, 801394e <rcl_wait_set_init+0x116>
 8013902:	2600      	movs	r6, #0
 8013904:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013908:	9600      	str	r6, [sp, #0]
 801390a:	4633      	mov	r3, r6
 801390c:	4632      	mov	r2, r6
 801390e:	4631      	mov	r1, r6
 8013910:	4620      	mov	r0, r4
 8013912:	f7ff fddb 	bl	80134cc <rcl_wait_set_resize>
 8013916:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013918:	2800      	cmp	r0, #0
 801391a:	d0a0      	beq.n	801385e <rcl_wait_set_init+0x26>
 801391c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801391e:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8013920:	4798      	blx	r3
 8013922:	4628      	mov	r0, r5
 8013924:	6326      	str	r6, [r4, #48]	; 0x30
 8013926:	b004      	add	sp, #16
 8013928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801392c:	250b      	movs	r5, #11
 801392e:	4628      	mov	r0, r5
 8013930:	b004      	add	sp, #16
 8013932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013936:	2501      	movs	r5, #1
 8013938:	f002 fe44 	bl	80165c4 <rmw_destroy_wait_set>
 801393c:	2800      	cmp	r0, #0
 801393e:	bf18      	it	ne
 8013940:	f44f 7561 	movne.w	r5, #900	; 0x384
 8013944:	e7dd      	b.n	8013902 <rcl_wait_set_init+0xca>
 8013946:	2565      	movs	r5, #101	; 0x65
 8013948:	e789      	b.n	801385e <rcl_wait_set_init+0x26>
 801394a:	250a      	movs	r5, #10
 801394c:	e787      	b.n	801385e <rcl_wait_set_init+0x26>
 801394e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8013950:	e7f2      	b.n	8013938 <rcl_wait_set_init+0x100>
 8013952:	bf00      	nop

08013954 <rcl_wait_set_add_guard_condition>:
 8013954:	b318      	cbz	r0, 801399e <rcl_wait_set_add_guard_condition+0x4a>
 8013956:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013958:	b570      	push	{r4, r5, r6, lr}
 801395a:	4604      	mov	r4, r0
 801395c:	b30b      	cbz	r3, 80139a2 <rcl_wait_set_add_guard_condition+0x4e>
 801395e:	b319      	cbz	r1, 80139a8 <rcl_wait_set_add_guard_condition+0x54>
 8013960:	68dd      	ldr	r5, [r3, #12]
 8013962:	68c0      	ldr	r0, [r0, #12]
 8013964:	4285      	cmp	r5, r0
 8013966:	d217      	bcs.n	8013998 <rcl_wait_set_add_guard_condition+0x44>
 8013968:	68a0      	ldr	r0, [r4, #8]
 801396a:	1c6e      	adds	r6, r5, #1
 801396c:	60de      	str	r6, [r3, #12]
 801396e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013972:	b102      	cbz	r2, 8013976 <rcl_wait_set_add_guard_condition+0x22>
 8013974:	6015      	str	r5, [r2, #0]
 8013976:	4608      	mov	r0, r1
 8013978:	f004 fe18 	bl	80185ac <rcl_guard_condition_get_rmw_handle>
 801397c:	b150      	cbz	r0, 8013994 <rcl_wait_set_add_guard_condition+0x40>
 801397e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013980:	6842      	ldr	r2, [r0, #4]
 8013982:	695b      	ldr	r3, [r3, #20]
 8013984:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013988:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801398a:	6913      	ldr	r3, [r2, #16]
 801398c:	3301      	adds	r3, #1
 801398e:	2000      	movs	r0, #0
 8013990:	6113      	str	r3, [r2, #16]
 8013992:	bd70      	pop	{r4, r5, r6, pc}
 8013994:	2001      	movs	r0, #1
 8013996:	bd70      	pop	{r4, r5, r6, pc}
 8013998:	f240 3086 	movw	r0, #902	; 0x386
 801399c:	bd70      	pop	{r4, r5, r6, pc}
 801399e:	200b      	movs	r0, #11
 80139a0:	4770      	bx	lr
 80139a2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80139a6:	bd70      	pop	{r4, r5, r6, pc}
 80139a8:	200b      	movs	r0, #11
 80139aa:	bd70      	pop	{r4, r5, r6, pc}

080139ac <rcl_wait_set_add_timer>:
 80139ac:	b328      	cbz	r0, 80139fa <rcl_wait_set_add_timer+0x4e>
 80139ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80139b0:	b570      	push	{r4, r5, r6, lr}
 80139b2:	4604      	mov	r4, r0
 80139b4:	b31b      	cbz	r3, 80139fe <rcl_wait_set_add_timer+0x52>
 80139b6:	b329      	cbz	r1, 8013a04 <rcl_wait_set_add_timer+0x58>
 80139b8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80139ba:	6965      	ldr	r5, [r4, #20]
 80139bc:	42a8      	cmp	r0, r5
 80139be:	d219      	bcs.n	80139f4 <rcl_wait_set_add_timer+0x48>
 80139c0:	6925      	ldr	r5, [r4, #16]
 80139c2:	1c46      	adds	r6, r0, #1
 80139c4:	641e      	str	r6, [r3, #64]	; 0x40
 80139c6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80139ca:	b102      	cbz	r2, 80139ce <rcl_wait_set_add_timer+0x22>
 80139cc:	6010      	str	r0, [r2, #0]
 80139ce:	4608      	mov	r0, r1
 80139d0:	f7ff fba6 	bl	8013120 <rcl_timer_get_guard_condition>
 80139d4:	b168      	cbz	r0, 80139f2 <rcl_wait_set_add_timer+0x46>
 80139d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80139d8:	68e3      	ldr	r3, [r4, #12]
 80139da:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80139dc:	3b01      	subs	r3, #1
 80139de:	441d      	add	r5, r3
 80139e0:	f004 fde4 	bl	80185ac <rcl_guard_condition_get_rmw_handle>
 80139e4:	b180      	cbz	r0, 8013a08 <rcl_wait_set_add_timer+0x5c>
 80139e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80139e8:	6842      	ldr	r2, [r0, #4]
 80139ea:	695b      	ldr	r3, [r3, #20]
 80139ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80139f0:	2000      	movs	r0, #0
 80139f2:	bd70      	pop	{r4, r5, r6, pc}
 80139f4:	f240 3086 	movw	r0, #902	; 0x386
 80139f8:	bd70      	pop	{r4, r5, r6, pc}
 80139fa:	200b      	movs	r0, #11
 80139fc:	4770      	bx	lr
 80139fe:	f44f 7061 	mov.w	r0, #900	; 0x384
 8013a02:	bd70      	pop	{r4, r5, r6, pc}
 8013a04:	200b      	movs	r0, #11
 8013a06:	bd70      	pop	{r4, r5, r6, pc}
 8013a08:	2001      	movs	r0, #1
 8013a0a:	bd70      	pop	{r4, r5, r6, pc}

08013a0c <rcl_wait_set_add_client>:
 8013a0c:	b318      	cbz	r0, 8013a56 <rcl_wait_set_add_client+0x4a>
 8013a0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013a10:	b570      	push	{r4, r5, r6, lr}
 8013a12:	4604      	mov	r4, r0
 8013a14:	b30b      	cbz	r3, 8013a5a <rcl_wait_set_add_client+0x4e>
 8013a16:	b319      	cbz	r1, 8013a60 <rcl_wait_set_add_client+0x54>
 8013a18:	699d      	ldr	r5, [r3, #24]
 8013a1a:	69c0      	ldr	r0, [r0, #28]
 8013a1c:	4285      	cmp	r5, r0
 8013a1e:	d217      	bcs.n	8013a50 <rcl_wait_set_add_client+0x44>
 8013a20:	69a0      	ldr	r0, [r4, #24]
 8013a22:	1c6e      	adds	r6, r5, #1
 8013a24:	619e      	str	r6, [r3, #24]
 8013a26:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013a2a:	b102      	cbz	r2, 8013a2e <rcl_wait_set_add_client+0x22>
 8013a2c:	6015      	str	r5, [r2, #0]
 8013a2e:	4608      	mov	r0, r1
 8013a30:	f7fe f9b2 	bl	8011d98 <rcl_client_get_rmw_handle>
 8013a34:	b150      	cbz	r0, 8013a4c <rcl_wait_set_add_client+0x40>
 8013a36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013a38:	6842      	ldr	r2, [r0, #4]
 8013a3a:	6a1b      	ldr	r3, [r3, #32]
 8013a3c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013a42:	69d3      	ldr	r3, [r2, #28]
 8013a44:	3301      	adds	r3, #1
 8013a46:	2000      	movs	r0, #0
 8013a48:	61d3      	str	r3, [r2, #28]
 8013a4a:	bd70      	pop	{r4, r5, r6, pc}
 8013a4c:	2001      	movs	r0, #1
 8013a4e:	bd70      	pop	{r4, r5, r6, pc}
 8013a50:	f240 3086 	movw	r0, #902	; 0x386
 8013a54:	bd70      	pop	{r4, r5, r6, pc}
 8013a56:	200b      	movs	r0, #11
 8013a58:	4770      	bx	lr
 8013a5a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8013a5e:	bd70      	pop	{r4, r5, r6, pc}
 8013a60:	200b      	movs	r0, #11
 8013a62:	bd70      	pop	{r4, r5, r6, pc}

08013a64 <rcl_wait_set_add_service>:
 8013a64:	b318      	cbz	r0, 8013aae <rcl_wait_set_add_service+0x4a>
 8013a66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013a68:	b570      	push	{r4, r5, r6, lr}
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	b30b      	cbz	r3, 8013ab2 <rcl_wait_set_add_service+0x4e>
 8013a6e:	b319      	cbz	r1, 8013ab8 <rcl_wait_set_add_service+0x54>
 8013a70:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8013a72:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013a74:	4285      	cmp	r5, r0
 8013a76:	d217      	bcs.n	8013aa8 <rcl_wait_set_add_service+0x44>
 8013a78:	6a20      	ldr	r0, [r4, #32]
 8013a7a:	1c6e      	adds	r6, r5, #1
 8013a7c:	625e      	str	r6, [r3, #36]	; 0x24
 8013a7e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013a82:	b102      	cbz	r2, 8013a86 <rcl_wait_set_add_service+0x22>
 8013a84:	6015      	str	r5, [r2, #0]
 8013a86:	4608      	mov	r0, r1
 8013a88:	f7ff f804 	bl	8012a94 <rcl_service_get_rmw_handle>
 8013a8c:	b150      	cbz	r0, 8013aa4 <rcl_wait_set_add_service+0x40>
 8013a8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013a90:	6842      	ldr	r2, [r0, #4]
 8013a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013a9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	2000      	movs	r0, #0
 8013aa0:	6293      	str	r3, [r2, #40]	; 0x28
 8013aa2:	bd70      	pop	{r4, r5, r6, pc}
 8013aa4:	2001      	movs	r0, #1
 8013aa6:	bd70      	pop	{r4, r5, r6, pc}
 8013aa8:	f240 3086 	movw	r0, #902	; 0x386
 8013aac:	bd70      	pop	{r4, r5, r6, pc}
 8013aae:	200b      	movs	r0, #11
 8013ab0:	4770      	bx	lr
 8013ab2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8013ab6:	bd70      	pop	{r4, r5, r6, pc}
 8013ab8:	200b      	movs	r0, #11
 8013aba:	bd70      	pop	{r4, r5, r6, pc}
 8013abc:	0000      	movs	r0, r0
	...

08013ac0 <rcl_wait>:
 8013ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac4:	ed2d 8b02 	vpush	{d8}
 8013ac8:	b08d      	sub	sp, #52	; 0x34
 8013aca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	f000 8143 	beq.w	8013d5a <rcl_wait+0x29a>
 8013ad4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8013ad6:	4605      	mov	r5, r0
 8013ad8:	2e00      	cmp	r6, #0
 8013ada:	f000 8112 	beq.w	8013d02 <rcl_wait+0x242>
 8013ade:	6843      	ldr	r3, [r0, #4]
 8013ae0:	b983      	cbnz	r3, 8013b04 <rcl_wait+0x44>
 8013ae2:	68eb      	ldr	r3, [r5, #12]
 8013ae4:	b973      	cbnz	r3, 8013b04 <rcl_wait+0x44>
 8013ae6:	696b      	ldr	r3, [r5, #20]
 8013ae8:	b963      	cbnz	r3, 8013b04 <rcl_wait+0x44>
 8013aea:	69eb      	ldr	r3, [r5, #28]
 8013aec:	b953      	cbnz	r3, 8013b04 <rcl_wait+0x44>
 8013aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013af0:	b943      	cbnz	r3, 8013b04 <rcl_wait+0x44>
 8013af2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8013af4:	b933      	cbnz	r3, 8013b04 <rcl_wait+0x44>
 8013af6:	f240 3085 	movw	r0, #901	; 0x385
 8013afa:	b00d      	add	sp, #52	; 0x34
 8013afc:	ecbd 8b02 	vpop	{d8}
 8013b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b04:	9b04      	ldr	r3, [sp, #16]
 8013b06:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	9b05      	ldr	r3, [sp, #20]
 8013b0c:	f173 0300 	sbcs.w	r3, r3, #0
 8013b10:	f2c0 80f0 	blt.w	8013cf4 <rcl_wait+0x234>
 8013b14:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013b18:	4643      	mov	r3, r8
 8013b1a:	2a00      	cmp	r2, #0
 8013b1c:	f000 8133 	beq.w	8013d86 <rcl_wait+0x2c6>
 8013b20:	2400      	movs	r4, #0
 8013b22:	4613      	mov	r3, r2
 8013b24:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8013d98 <rcl_wait+0x2d8>
 8013b28:	46a2      	mov	sl, r4
 8013b2a:	46a3      	mov	fp, r4
 8013b2c:	f240 3921 	movw	r9, #801	; 0x321
 8013b30:	4632      	mov	r2, r6
 8013b32:	e014      	b.n	8013b5e <rcl_wait+0x9e>
 8013b34:	2800      	cmp	r0, #0
 8013b36:	d1e0      	bne.n	8013afa <rcl_wait+0x3a>
 8013b38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b3c:	4542      	cmp	r2, r8
 8013b3e:	eb73 0107 	sbcs.w	r1, r3, r7
 8013b42:	da03      	bge.n	8013b4c <rcl_wait+0x8c>
 8013b44:	4690      	mov	r8, r2
 8013b46:	461f      	mov	r7, r3
 8013b48:	f04f 0b01 	mov.w	fp, #1
 8013b4c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8013b4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013b50:	3401      	adds	r4, #1
 8013b52:	f14a 0a00 	adc.w	sl, sl, #0
 8013b56:	429c      	cmp	r4, r3
 8013b58:	f17a 0100 	sbcs.w	r1, sl, #0
 8013b5c:	d228      	bcs.n	8013bb0 <rcl_wait+0xf0>
 8013b5e:	6928      	ldr	r0, [r5, #16]
 8013b60:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013b64:	a908      	add	r1, sp, #32
 8013b66:	00a6      	lsls	r6, r4, #2
 8013b68:	2800      	cmp	r0, #0
 8013b6a:	d0f1      	beq.n	8013b50 <rcl_wait+0x90>
 8013b6c:	68eb      	ldr	r3, [r5, #12]
 8013b6e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013b72:	4423      	add	r3, r4
 8013b74:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013b78:	f1be 0f00 	cmp.w	lr, #0
 8013b7c:	d006      	beq.n	8013b8c <rcl_wait+0xcc>
 8013b7e:	6913      	ldr	r3, [r2, #16]
 8013b80:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013b84:	3301      	adds	r3, #1
 8013b86:	6113      	str	r3, [r2, #16]
 8013b88:	692b      	ldr	r3, [r5, #16]
 8013b8a:	5998      	ldr	r0, [r3, r6]
 8013b8c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013b90:	f7ff fa94 	bl	80130bc <rcl_timer_get_time_until_next_call>
 8013b94:	4548      	cmp	r0, r9
 8013b96:	d1cd      	bne.n	8013b34 <rcl_wait+0x74>
 8013b98:	692b      	ldr	r3, [r5, #16]
 8013b9a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8013b9c:	2100      	movs	r1, #0
 8013b9e:	5199      	str	r1, [r3, r6]
 8013ba0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013ba2:	3401      	adds	r4, #1
 8013ba4:	f14a 0a00 	adc.w	sl, sl, #0
 8013ba8:	429c      	cmp	r4, r3
 8013baa:	f17a 0100 	sbcs.w	r1, sl, #0
 8013bae:	d3d6      	bcc.n	8013b5e <rcl_wait+0x9e>
 8013bb0:	4616      	mov	r6, r2
 8013bb2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	46d9      	mov	r9, fp
 8013bba:	f040 80a9 	bne.w	8013d10 <rcl_wait+0x250>
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013bc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013bca:	ab08      	add	r3, sp, #32
 8013bcc:	9302      	str	r3, [sp, #8]
 8013bce:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8013bd0:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8013bd4:	e9cd 3200 	strd	r3, r2, [sp]
 8013bd8:	f106 0110 	add.w	r1, r6, #16
 8013bdc:	f106 031c 	add.w	r3, r6, #28
 8013be0:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8013be4:	1d30      	adds	r0, r6, #4
 8013be6:	f002 fb6b 	bl	80162c0 <rmw_wait>
 8013bea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013bee:	4680      	mov	r8, r0
 8013bf0:	b1ca      	cbz	r2, 8013c26 <rcl_wait+0x166>
 8013bf2:	2400      	movs	r4, #0
 8013bf4:	4627      	mov	r7, r4
 8013bf6:	692a      	ldr	r2, [r5, #16]
 8013bf8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013bfc:	f10d 011f 	add.w	r1, sp, #31
 8013c00:	00a6      	lsls	r6, r4, #2
 8013c02:	b160      	cbz	r0, 8013c1e <rcl_wait+0x15e>
 8013c04:	f88d 701f 	strb.w	r7, [sp, #31]
 8013c08:	f7ff fa1e 	bl	8013048 <rcl_timer_is_ready>
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	f47f af74 	bne.w	8013afa <rcl_wait+0x3a>
 8013c12:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013c16:	b90b      	cbnz	r3, 8013c1c <rcl_wait+0x15c>
 8013c18:	692a      	ldr	r2, [r5, #16]
 8013c1a:	5193      	str	r3, [r2, r6]
 8013c1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013c20:	3401      	adds	r4, #1
 8013c22:	42a2      	cmp	r2, r4
 8013c24:	d8e7      	bhi.n	8013bf6 <rcl_wait+0x136>
 8013c26:	f038 0002 	bics.w	r0, r8, #2
 8013c2a:	f040 8090 	bne.w	8013d4e <rcl_wait+0x28e>
 8013c2e:	686e      	ldr	r6, [r5, #4]
 8013c30:	4602      	mov	r2, r0
 8013c32:	b91e      	cbnz	r6, 8013c3c <rcl_wait+0x17c>
 8013c34:	e00d      	b.n	8013c52 <rcl_wait+0x192>
 8013c36:	3201      	adds	r2, #1
 8013c38:	42b2      	cmp	r2, r6
 8013c3a:	d00a      	beq.n	8013c52 <rcl_wait+0x192>
 8013c3c:	6899      	ldr	r1, [r3, #8]
 8013c3e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c42:	2900      	cmp	r1, #0
 8013c44:	d1f7      	bne.n	8013c36 <rcl_wait+0x176>
 8013c46:	682c      	ldr	r4, [r5, #0]
 8013c48:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c4c:	3201      	adds	r2, #1
 8013c4e:	42b2      	cmp	r2, r6
 8013c50:	d1f4      	bne.n	8013c3c <rcl_wait+0x17c>
 8013c52:	68ee      	ldr	r6, [r5, #12]
 8013c54:	2200      	movs	r2, #0
 8013c56:	b91e      	cbnz	r6, 8013c60 <rcl_wait+0x1a0>
 8013c58:	e00d      	b.n	8013c76 <rcl_wait+0x1b6>
 8013c5a:	3201      	adds	r2, #1
 8013c5c:	42b2      	cmp	r2, r6
 8013c5e:	d00a      	beq.n	8013c76 <rcl_wait+0x1b6>
 8013c60:	6959      	ldr	r1, [r3, #20]
 8013c62:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c66:	2900      	cmp	r1, #0
 8013c68:	d1f7      	bne.n	8013c5a <rcl_wait+0x19a>
 8013c6a:	68ac      	ldr	r4, [r5, #8]
 8013c6c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c70:	3201      	adds	r2, #1
 8013c72:	42b2      	cmp	r2, r6
 8013c74:	d1f4      	bne.n	8013c60 <rcl_wait+0x1a0>
 8013c76:	69ee      	ldr	r6, [r5, #28]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	b91e      	cbnz	r6, 8013c84 <rcl_wait+0x1c4>
 8013c7c:	e00d      	b.n	8013c9a <rcl_wait+0x1da>
 8013c7e:	3201      	adds	r2, #1
 8013c80:	42b2      	cmp	r2, r6
 8013c82:	d00a      	beq.n	8013c9a <rcl_wait+0x1da>
 8013c84:	6a19      	ldr	r1, [r3, #32]
 8013c86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c8a:	2900      	cmp	r1, #0
 8013c8c:	d1f7      	bne.n	8013c7e <rcl_wait+0x1be>
 8013c8e:	69ac      	ldr	r4, [r5, #24]
 8013c90:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c94:	3201      	adds	r2, #1
 8013c96:	42b2      	cmp	r2, r6
 8013c98:	d1f4      	bne.n	8013c84 <rcl_wait+0x1c4>
 8013c9a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	b91e      	cbnz	r6, 8013ca8 <rcl_wait+0x1e8>
 8013ca0:	e00d      	b.n	8013cbe <rcl_wait+0x1fe>
 8013ca2:	3201      	adds	r2, #1
 8013ca4:	4296      	cmp	r6, r2
 8013ca6:	d00a      	beq.n	8013cbe <rcl_wait+0x1fe>
 8013ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013caa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013cae:	2900      	cmp	r1, #0
 8013cb0:	d1f7      	bne.n	8013ca2 <rcl_wait+0x1e2>
 8013cb2:	6a2c      	ldr	r4, [r5, #32]
 8013cb4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013cb8:	3201      	adds	r2, #1
 8013cba:	4296      	cmp	r6, r2
 8013cbc:	d1f4      	bne.n	8013ca8 <rcl_wait+0x1e8>
 8013cbe:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	b91e      	cbnz	r6, 8013ccc <rcl_wait+0x20c>
 8013cc4:	e00d      	b.n	8013ce2 <rcl_wait+0x222>
 8013cc6:	3201      	adds	r2, #1
 8013cc8:	42b2      	cmp	r2, r6
 8013cca:	d00a      	beq.n	8013ce2 <rcl_wait+0x222>
 8013ccc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013cce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013cd2:	2900      	cmp	r1, #0
 8013cd4:	d1f7      	bne.n	8013cc6 <rcl_wait+0x206>
 8013cd6:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8013cd8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013cdc:	3201      	adds	r2, #1
 8013cde:	42b2      	cmp	r2, r6
 8013ce0:	d1f4      	bne.n	8013ccc <rcl_wait+0x20c>
 8013ce2:	f1b8 0f02 	cmp.w	r8, #2
 8013ce6:	f47f af08 	bne.w	8013afa <rcl_wait+0x3a>
 8013cea:	464b      	mov	r3, r9
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	bf08      	it	eq
 8013cf0:	2002      	moveq	r0, #2
 8013cf2:	e702      	b.n	8013afa <rcl_wait+0x3a>
 8013cf4:	2a00      	cmp	r2, #0
 8013cf6:	d03a      	beq.n	8013d6e <rcl_wait+0x2ae>
 8013cf8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8013cfc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8013d00:	e70e      	b.n	8013b20 <rcl_wait+0x60>
 8013d02:	f44f 7061 	mov.w	r0, #900	; 0x384
 8013d06:	b00d      	add	sp, #52	; 0x34
 8013d08:	ecbd 8b02 	vpop	{d8}
 8013d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d10:	9b04      	ldr	r3, [sp, #16]
 8013d12:	2b01      	cmp	r3, #1
 8013d14:	9b05      	ldr	r3, [sp, #20]
 8013d16:	f173 0300 	sbcs.w	r3, r3, #0
 8013d1a:	db24      	blt.n	8013d66 <rcl_wait+0x2a6>
 8013d1c:	2f00      	cmp	r7, #0
 8013d1e:	bfbc      	itt	lt
 8013d20:	f04f 0800 	movlt.w	r8, #0
 8013d24:	4647      	movlt	r7, r8
 8013d26:	a31e      	add	r3, pc, #120	; (adr r3, 8013da0 <rcl_wait+0x2e0>)
 8013d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2c:	4640      	mov	r0, r8
 8013d2e:	4639      	mov	r1, r7
 8013d30:	f7ec fb3e 	bl	80003b0 <__aeabi_ldivmod>
 8013d34:	a31a      	add	r3, pc, #104	; (adr r3, 8013da0 <rcl_wait+0x2e0>)
 8013d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013d3e:	4640      	mov	r0, r8
 8013d40:	4639      	mov	r1, r7
 8013d42:	f7ec fb35 	bl	80003b0 <__aeabi_ldivmod>
 8013d46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013d4a:	ab08      	add	r3, sp, #32
 8013d4c:	e73e      	b.n	8013bcc <rcl_wait+0x10c>
 8013d4e:	2001      	movs	r0, #1
 8013d50:	b00d      	add	sp, #52	; 0x34
 8013d52:	ecbd 8b02 	vpop	{d8}
 8013d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d5a:	200b      	movs	r0, #11
 8013d5c:	b00d      	add	sp, #52	; 0x34
 8013d5e:	ecbd 8b02 	vpop	{d8}
 8013d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d66:	465b      	mov	r3, fp
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d1d7      	bne.n	8013d1c <rcl_wait+0x25c>
 8013d6c:	e72e      	b.n	8013bcc <rcl_wait+0x10c>
 8013d6e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013d72:	430b      	orrs	r3, r1
 8013d74:	bf08      	it	eq
 8013d76:	4691      	moveq	r9, r2
 8013d78:	f43f af21 	beq.w	8013bbe <rcl_wait+0xfe>
 8013d7c:	9b04      	ldr	r3, [sp, #16]
 8013d7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8013d82:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	9b05      	ldr	r3, [sp, #20]
 8013d8a:	f173 0300 	sbcs.w	r3, r3, #0
 8013d8e:	f04f 0300 	mov.w	r3, #0
 8013d92:	4699      	mov	r9, r3
 8013d94:	dac2      	bge.n	8013d1c <rcl_wait+0x25c>
 8013d96:	e719      	b.n	8013bcc <rcl_wait+0x10c>
 8013d98:	ffffffff 	.word	0xffffffff
 8013d9c:	7fffffff 	.word	0x7fffffff
 8013da0:	3b9aca00 	.word	0x3b9aca00
 8013da4:	00000000 	.word	0x00000000

08013da8 <rcl_action_take_goal_response>:
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d039      	beq.n	8013e20 <rcl_action_take_goal_response+0x78>
 8013dac:	b570      	push	{r4, r5, r6, lr}
 8013dae:	4604      	mov	r4, r0
 8013db0:	6800      	ldr	r0, [r0, #0]
 8013db2:	b380      	cbz	r0, 8013e16 <rcl_action_take_goal_response+0x6e>
 8013db4:	460d      	mov	r5, r1
 8013db6:	4616      	mov	r6, r2
 8013db8:	f7fe f872 	bl	8011ea0 <rcl_client_is_valid>
 8013dbc:	b330      	cbz	r0, 8013e0c <rcl_action_take_goal_response+0x64>
 8013dbe:	6820      	ldr	r0, [r4, #0]
 8013dc0:	3004      	adds	r0, #4
 8013dc2:	f7fe f86d 	bl	8011ea0 <rcl_client_is_valid>
 8013dc6:	b308      	cbz	r0, 8013e0c <rcl_action_take_goal_response+0x64>
 8013dc8:	6820      	ldr	r0, [r4, #0]
 8013dca:	3008      	adds	r0, #8
 8013dcc:	f7fe f868 	bl	8011ea0 <rcl_client_is_valid>
 8013dd0:	b1e0      	cbz	r0, 8013e0c <rcl_action_take_goal_response+0x64>
 8013dd2:	6820      	ldr	r0, [r4, #0]
 8013dd4:	300c      	adds	r0, #12
 8013dd6:	f7fe ffff 	bl	8012dd8 <rcl_subscription_is_valid>
 8013dda:	b1b8      	cbz	r0, 8013e0c <rcl_action_take_goal_response+0x64>
 8013ddc:	6820      	ldr	r0, [r4, #0]
 8013dde:	3010      	adds	r0, #16
 8013de0:	f7fe fffa 	bl	8012dd8 <rcl_subscription_is_valid>
 8013de4:	b190      	cbz	r0, 8013e0c <rcl_action_take_goal_response+0x64>
 8013de6:	b1cd      	cbz	r5, 8013e1c <rcl_action_take_goal_response+0x74>
 8013de8:	b1c6      	cbz	r6, 8013e1c <rcl_action_take_goal_response+0x74>
 8013dea:	6820      	ldr	r0, [r4, #0]
 8013dec:	4632      	mov	r2, r6
 8013dee:	4629      	mov	r1, r5
 8013df0:	f7fe f80e 	bl	8011e10 <rcl_take_response>
 8013df4:	b148      	cbz	r0, 8013e0a <rcl_action_take_goal_response+0x62>
 8013df6:	280a      	cmp	r0, #10
 8013df8:	d007      	beq.n	8013e0a <rcl_action_take_goal_response+0x62>
 8013dfa:	f240 12f5 	movw	r2, #501	; 0x1f5
 8013dfe:	f640 0337 	movw	r3, #2103	; 0x837
 8013e02:	4290      	cmp	r0, r2
 8013e04:	bf0c      	ite	eq
 8013e06:	4618      	moveq	r0, r3
 8013e08:	2001      	movne	r0, #1
 8013e0a:	bd70      	pop	{r4, r5, r6, pc}
 8013e0c:	f7fa fb18 	bl	800e440 <rcutils_reset_error>
 8013e10:	f640 0036 	movw	r0, #2102	; 0x836
 8013e14:	bd70      	pop	{r4, r5, r6, pc}
 8013e16:	f640 0036 	movw	r0, #2102	; 0x836
 8013e1a:	bd70      	pop	{r4, r5, r6, pc}
 8013e1c:	200b      	movs	r0, #11
 8013e1e:	bd70      	pop	{r4, r5, r6, pc}
 8013e20:	f640 0036 	movw	r0, #2102	; 0x836
 8013e24:	4770      	bx	lr
 8013e26:	bf00      	nop

08013e28 <rcl_action_send_result_request>:
 8013e28:	b390      	cbz	r0, 8013e90 <rcl_action_send_result_request+0x68>
 8013e2a:	b570      	push	{r4, r5, r6, lr}
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	6800      	ldr	r0, [r0, #0]
 8013e30:	b348      	cbz	r0, 8013e86 <rcl_action_send_result_request+0x5e>
 8013e32:	460d      	mov	r5, r1
 8013e34:	4616      	mov	r6, r2
 8013e36:	f7fe f833 	bl	8011ea0 <rcl_client_is_valid>
 8013e3a:	b1f8      	cbz	r0, 8013e7c <rcl_action_send_result_request+0x54>
 8013e3c:	6820      	ldr	r0, [r4, #0]
 8013e3e:	3004      	adds	r0, #4
 8013e40:	f7fe f82e 	bl	8011ea0 <rcl_client_is_valid>
 8013e44:	b1d0      	cbz	r0, 8013e7c <rcl_action_send_result_request+0x54>
 8013e46:	6820      	ldr	r0, [r4, #0]
 8013e48:	3008      	adds	r0, #8
 8013e4a:	f7fe f829 	bl	8011ea0 <rcl_client_is_valid>
 8013e4e:	b1a8      	cbz	r0, 8013e7c <rcl_action_send_result_request+0x54>
 8013e50:	6820      	ldr	r0, [r4, #0]
 8013e52:	300c      	adds	r0, #12
 8013e54:	f7fe ffc0 	bl	8012dd8 <rcl_subscription_is_valid>
 8013e58:	b180      	cbz	r0, 8013e7c <rcl_action_send_result_request+0x54>
 8013e5a:	6820      	ldr	r0, [r4, #0]
 8013e5c:	3010      	adds	r0, #16
 8013e5e:	f7fe ffbb 	bl	8012dd8 <rcl_subscription_is_valid>
 8013e62:	b158      	cbz	r0, 8013e7c <rcl_action_send_result_request+0x54>
 8013e64:	b195      	cbz	r5, 8013e8c <rcl_action_send_result_request+0x64>
 8013e66:	b18e      	cbz	r6, 8013e8c <rcl_action_send_result_request+0x64>
 8013e68:	6820      	ldr	r0, [r4, #0]
 8013e6a:	4632      	mov	r2, r6
 8013e6c:	4629      	mov	r1, r5
 8013e6e:	3008      	adds	r0, #8
 8013e70:	f7fd ff98 	bl	8011da4 <rcl_send_request>
 8013e74:	3800      	subs	r0, #0
 8013e76:	bf18      	it	ne
 8013e78:	2001      	movne	r0, #1
 8013e7a:	bd70      	pop	{r4, r5, r6, pc}
 8013e7c:	f7fa fae0 	bl	800e440 <rcutils_reset_error>
 8013e80:	f640 0036 	movw	r0, #2102	; 0x836
 8013e84:	bd70      	pop	{r4, r5, r6, pc}
 8013e86:	f640 0036 	movw	r0, #2102	; 0x836
 8013e8a:	bd70      	pop	{r4, r5, r6, pc}
 8013e8c:	200b      	movs	r0, #11
 8013e8e:	bd70      	pop	{r4, r5, r6, pc}
 8013e90:	f640 0036 	movw	r0, #2102	; 0x836
 8013e94:	4770      	bx	lr
 8013e96:	bf00      	nop

08013e98 <rcl_action_take_result_response>:
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	d03a      	beq.n	8013f12 <rcl_action_take_result_response+0x7a>
 8013e9c:	b570      	push	{r4, r5, r6, lr}
 8013e9e:	4604      	mov	r4, r0
 8013ea0:	6800      	ldr	r0, [r0, #0]
 8013ea2:	b388      	cbz	r0, 8013f08 <rcl_action_take_result_response+0x70>
 8013ea4:	460d      	mov	r5, r1
 8013ea6:	4616      	mov	r6, r2
 8013ea8:	f7fd fffa 	bl	8011ea0 <rcl_client_is_valid>
 8013eac:	b338      	cbz	r0, 8013efe <rcl_action_take_result_response+0x66>
 8013eae:	6820      	ldr	r0, [r4, #0]
 8013eb0:	3004      	adds	r0, #4
 8013eb2:	f7fd fff5 	bl	8011ea0 <rcl_client_is_valid>
 8013eb6:	b310      	cbz	r0, 8013efe <rcl_action_take_result_response+0x66>
 8013eb8:	6820      	ldr	r0, [r4, #0]
 8013eba:	3008      	adds	r0, #8
 8013ebc:	f7fd fff0 	bl	8011ea0 <rcl_client_is_valid>
 8013ec0:	b1e8      	cbz	r0, 8013efe <rcl_action_take_result_response+0x66>
 8013ec2:	6820      	ldr	r0, [r4, #0]
 8013ec4:	300c      	adds	r0, #12
 8013ec6:	f7fe ff87 	bl	8012dd8 <rcl_subscription_is_valid>
 8013eca:	b1c0      	cbz	r0, 8013efe <rcl_action_take_result_response+0x66>
 8013ecc:	6820      	ldr	r0, [r4, #0]
 8013ece:	3010      	adds	r0, #16
 8013ed0:	f7fe ff82 	bl	8012dd8 <rcl_subscription_is_valid>
 8013ed4:	b198      	cbz	r0, 8013efe <rcl_action_take_result_response+0x66>
 8013ed6:	b1d5      	cbz	r5, 8013f0e <rcl_action_take_result_response+0x76>
 8013ed8:	b1ce      	cbz	r6, 8013f0e <rcl_action_take_result_response+0x76>
 8013eda:	6820      	ldr	r0, [r4, #0]
 8013edc:	4632      	mov	r2, r6
 8013ede:	4629      	mov	r1, r5
 8013ee0:	3008      	adds	r0, #8
 8013ee2:	f7fd ff95 	bl	8011e10 <rcl_take_response>
 8013ee6:	b148      	cbz	r0, 8013efc <rcl_action_take_result_response+0x64>
 8013ee8:	280a      	cmp	r0, #10
 8013eea:	d007      	beq.n	8013efc <rcl_action_take_result_response+0x64>
 8013eec:	f240 12f5 	movw	r2, #501	; 0x1f5
 8013ef0:	f640 0337 	movw	r3, #2103	; 0x837
 8013ef4:	4290      	cmp	r0, r2
 8013ef6:	bf0c      	ite	eq
 8013ef8:	4618      	moveq	r0, r3
 8013efa:	2001      	movne	r0, #1
 8013efc:	bd70      	pop	{r4, r5, r6, pc}
 8013efe:	f7fa fa9f 	bl	800e440 <rcutils_reset_error>
 8013f02:	f640 0036 	movw	r0, #2102	; 0x836
 8013f06:	bd70      	pop	{r4, r5, r6, pc}
 8013f08:	f640 0036 	movw	r0, #2102	; 0x836
 8013f0c:	bd70      	pop	{r4, r5, r6, pc}
 8013f0e:	200b      	movs	r0, #11
 8013f10:	bd70      	pop	{r4, r5, r6, pc}
 8013f12:	f640 0036 	movw	r0, #2102	; 0x836
 8013f16:	4770      	bx	lr

08013f18 <rcl_action_take_cancel_response>:
 8013f18:	2800      	cmp	r0, #0
 8013f1a:	d03a      	beq.n	8013f92 <rcl_action_take_cancel_response+0x7a>
 8013f1c:	b570      	push	{r4, r5, r6, lr}
 8013f1e:	4604      	mov	r4, r0
 8013f20:	6800      	ldr	r0, [r0, #0]
 8013f22:	b388      	cbz	r0, 8013f88 <rcl_action_take_cancel_response+0x70>
 8013f24:	460d      	mov	r5, r1
 8013f26:	4616      	mov	r6, r2
 8013f28:	f7fd ffba 	bl	8011ea0 <rcl_client_is_valid>
 8013f2c:	b338      	cbz	r0, 8013f7e <rcl_action_take_cancel_response+0x66>
 8013f2e:	6820      	ldr	r0, [r4, #0]
 8013f30:	3004      	adds	r0, #4
 8013f32:	f7fd ffb5 	bl	8011ea0 <rcl_client_is_valid>
 8013f36:	b310      	cbz	r0, 8013f7e <rcl_action_take_cancel_response+0x66>
 8013f38:	6820      	ldr	r0, [r4, #0]
 8013f3a:	3008      	adds	r0, #8
 8013f3c:	f7fd ffb0 	bl	8011ea0 <rcl_client_is_valid>
 8013f40:	b1e8      	cbz	r0, 8013f7e <rcl_action_take_cancel_response+0x66>
 8013f42:	6820      	ldr	r0, [r4, #0]
 8013f44:	300c      	adds	r0, #12
 8013f46:	f7fe ff47 	bl	8012dd8 <rcl_subscription_is_valid>
 8013f4a:	b1c0      	cbz	r0, 8013f7e <rcl_action_take_cancel_response+0x66>
 8013f4c:	6820      	ldr	r0, [r4, #0]
 8013f4e:	3010      	adds	r0, #16
 8013f50:	f7fe ff42 	bl	8012dd8 <rcl_subscription_is_valid>
 8013f54:	b198      	cbz	r0, 8013f7e <rcl_action_take_cancel_response+0x66>
 8013f56:	b1d5      	cbz	r5, 8013f8e <rcl_action_take_cancel_response+0x76>
 8013f58:	b1ce      	cbz	r6, 8013f8e <rcl_action_take_cancel_response+0x76>
 8013f5a:	6820      	ldr	r0, [r4, #0]
 8013f5c:	4632      	mov	r2, r6
 8013f5e:	4629      	mov	r1, r5
 8013f60:	3004      	adds	r0, #4
 8013f62:	f7fd ff55 	bl	8011e10 <rcl_take_response>
 8013f66:	b148      	cbz	r0, 8013f7c <rcl_action_take_cancel_response+0x64>
 8013f68:	280a      	cmp	r0, #10
 8013f6a:	d007      	beq.n	8013f7c <rcl_action_take_cancel_response+0x64>
 8013f6c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8013f70:	f640 0337 	movw	r3, #2103	; 0x837
 8013f74:	4290      	cmp	r0, r2
 8013f76:	bf0c      	ite	eq
 8013f78:	4618      	moveq	r0, r3
 8013f7a:	2001      	movne	r0, #1
 8013f7c:	bd70      	pop	{r4, r5, r6, pc}
 8013f7e:	f7fa fa5f 	bl	800e440 <rcutils_reset_error>
 8013f82:	f640 0036 	movw	r0, #2102	; 0x836
 8013f86:	bd70      	pop	{r4, r5, r6, pc}
 8013f88:	f640 0036 	movw	r0, #2102	; 0x836
 8013f8c:	bd70      	pop	{r4, r5, r6, pc}
 8013f8e:	200b      	movs	r0, #11
 8013f90:	bd70      	pop	{r4, r5, r6, pc}
 8013f92:	f640 0036 	movw	r0, #2102	; 0x836
 8013f96:	4770      	bx	lr

08013f98 <rcl_action_take_feedback>:
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	d038      	beq.n	801400e <rcl_action_take_feedback+0x76>
 8013f9c:	b530      	push	{r4, r5, lr}
 8013f9e:	4604      	mov	r4, r0
 8013fa0:	6800      	ldr	r0, [r0, #0]
 8013fa2:	b091      	sub	sp, #68	; 0x44
 8013fa4:	b378      	cbz	r0, 8014006 <rcl_action_take_feedback+0x6e>
 8013fa6:	460d      	mov	r5, r1
 8013fa8:	f7fd ff7a 	bl	8011ea0 <rcl_client_is_valid>
 8013fac:	b328      	cbz	r0, 8013ffa <rcl_action_take_feedback+0x62>
 8013fae:	6820      	ldr	r0, [r4, #0]
 8013fb0:	3004      	adds	r0, #4
 8013fb2:	f7fd ff75 	bl	8011ea0 <rcl_client_is_valid>
 8013fb6:	b300      	cbz	r0, 8013ffa <rcl_action_take_feedback+0x62>
 8013fb8:	6820      	ldr	r0, [r4, #0]
 8013fba:	3008      	adds	r0, #8
 8013fbc:	f7fd ff70 	bl	8011ea0 <rcl_client_is_valid>
 8013fc0:	b1d8      	cbz	r0, 8013ffa <rcl_action_take_feedback+0x62>
 8013fc2:	6820      	ldr	r0, [r4, #0]
 8013fc4:	300c      	adds	r0, #12
 8013fc6:	f7fe ff07 	bl	8012dd8 <rcl_subscription_is_valid>
 8013fca:	b1b0      	cbz	r0, 8013ffa <rcl_action_take_feedback+0x62>
 8013fcc:	6820      	ldr	r0, [r4, #0]
 8013fce:	3010      	adds	r0, #16
 8013fd0:	f7fe ff02 	bl	8012dd8 <rcl_subscription_is_valid>
 8013fd4:	b188      	cbz	r0, 8013ffa <rcl_action_take_feedback+0x62>
 8013fd6:	b1ed      	cbz	r5, 8014014 <rcl_action_take_feedback+0x7c>
 8013fd8:	6820      	ldr	r0, [r4, #0]
 8013fda:	2300      	movs	r3, #0
 8013fdc:	466a      	mov	r2, sp
 8013fde:	4629      	mov	r1, r5
 8013fe0:	300c      	adds	r0, #12
 8013fe2:	f7fe fe9b 	bl	8012d1c <rcl_take>
 8013fe6:	b160      	cbz	r0, 8014002 <rcl_action_take_feedback+0x6a>
 8013fe8:	f240 1391 	movw	r3, #401	; 0x191
 8013fec:	4298      	cmp	r0, r3
 8013fee:	d014      	beq.n	801401a <rcl_action_take_feedback+0x82>
 8013ff0:	280a      	cmp	r0, #10
 8013ff2:	bf18      	it	ne
 8013ff4:	2001      	movne	r0, #1
 8013ff6:	b011      	add	sp, #68	; 0x44
 8013ff8:	bd30      	pop	{r4, r5, pc}
 8013ffa:	f7fa fa21 	bl	800e440 <rcutils_reset_error>
 8013ffe:	f640 0036 	movw	r0, #2102	; 0x836
 8014002:	b011      	add	sp, #68	; 0x44
 8014004:	bd30      	pop	{r4, r5, pc}
 8014006:	f640 0036 	movw	r0, #2102	; 0x836
 801400a:	b011      	add	sp, #68	; 0x44
 801400c:	bd30      	pop	{r4, r5, pc}
 801400e:	f640 0036 	movw	r0, #2102	; 0x836
 8014012:	4770      	bx	lr
 8014014:	200b      	movs	r0, #11
 8014016:	b011      	add	sp, #68	; 0x44
 8014018:	bd30      	pop	{r4, r5, pc}
 801401a:	f640 0037 	movw	r0, #2103	; 0x837
 801401e:	e7f0      	b.n	8014002 <rcl_action_take_feedback+0x6a>

08014020 <rcl_action_wait_set_add_action_client>:
 8014020:	2800      	cmp	r0, #0
 8014022:	d048      	beq.n	80140b6 <rcl_action_wait_set_add_action_client+0x96>
 8014024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014026:	460c      	mov	r4, r1
 8014028:	2900      	cmp	r1, #0
 801402a:	d03c      	beq.n	80140a6 <rcl_action_wait_set_add_action_client+0x86>
 801402c:	4605      	mov	r5, r0
 801402e:	6808      	ldr	r0, [r1, #0]
 8014030:	2800      	cmp	r0, #0
 8014032:	d038      	beq.n	80140a6 <rcl_action_wait_set_add_action_client+0x86>
 8014034:	4617      	mov	r7, r2
 8014036:	461e      	mov	r6, r3
 8014038:	f7fd ff32 	bl	8011ea0 <rcl_client_is_valid>
 801403c:	b3b0      	cbz	r0, 80140ac <rcl_action_wait_set_add_action_client+0x8c>
 801403e:	6820      	ldr	r0, [r4, #0]
 8014040:	3004      	adds	r0, #4
 8014042:	f7fd ff2d 	bl	8011ea0 <rcl_client_is_valid>
 8014046:	b388      	cbz	r0, 80140ac <rcl_action_wait_set_add_action_client+0x8c>
 8014048:	6820      	ldr	r0, [r4, #0]
 801404a:	3008      	adds	r0, #8
 801404c:	f7fd ff28 	bl	8011ea0 <rcl_client_is_valid>
 8014050:	b360      	cbz	r0, 80140ac <rcl_action_wait_set_add_action_client+0x8c>
 8014052:	6820      	ldr	r0, [r4, #0]
 8014054:	300c      	adds	r0, #12
 8014056:	f7fe febf 	bl	8012dd8 <rcl_subscription_is_valid>
 801405a:	b338      	cbz	r0, 80140ac <rcl_action_wait_set_add_action_client+0x8c>
 801405c:	6820      	ldr	r0, [r4, #0]
 801405e:	3010      	adds	r0, #16
 8014060:	f7fe feba 	bl	8012dd8 <rcl_subscription_is_valid>
 8014064:	b310      	cbz	r0, 80140ac <rcl_action_wait_set_add_action_client+0x8c>
 8014066:	6821      	ldr	r1, [r4, #0]
 8014068:	4628      	mov	r0, r5
 801406a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801406e:	f7ff fccd 	bl	8013a0c <rcl_wait_set_add_client>
 8014072:	b9b8      	cbnz	r0, 80140a4 <rcl_action_wait_set_add_action_client+0x84>
 8014074:	6821      	ldr	r1, [r4, #0]
 8014076:	4628      	mov	r0, r5
 8014078:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801407c:	3104      	adds	r1, #4
 801407e:	f7ff fcc5 	bl	8013a0c <rcl_wait_set_add_client>
 8014082:	b978      	cbnz	r0, 80140a4 <rcl_action_wait_set_add_action_client+0x84>
 8014084:	6821      	ldr	r1, [r4, #0]
 8014086:	4628      	mov	r0, r5
 8014088:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801408c:	3108      	adds	r1, #8
 801408e:	f7ff fcbd 	bl	8013a0c <rcl_wait_set_add_client>
 8014092:	b938      	cbnz	r0, 80140a4 <rcl_action_wait_set_add_action_client+0x84>
 8014094:	6821      	ldr	r1, [r4, #0]
 8014096:	4628      	mov	r0, r5
 8014098:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801409c:	310c      	adds	r1, #12
 801409e:	f7ff f96d 	bl	801337c <rcl_wait_set_add_subscription>
 80140a2:	b158      	cbz	r0, 80140bc <rcl_action_wait_set_add_action_client+0x9c>
 80140a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a6:	f640 0036 	movw	r0, #2102	; 0x836
 80140aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140ac:	f7fa f9c8 	bl	800e440 <rcutils_reset_error>
 80140b0:	f640 0036 	movw	r0, #2102	; 0x836
 80140b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140b6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80140ba:	4770      	bx	lr
 80140bc:	6821      	ldr	r1, [r4, #0]
 80140be:	4628      	mov	r0, r5
 80140c0:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 80140c4:	3110      	adds	r1, #16
 80140c6:	f7ff f959 	bl	801337c <rcl_wait_set_add_subscription>
 80140ca:	2800      	cmp	r0, #0
 80140cc:	d1ea      	bne.n	80140a4 <rcl_action_wait_set_add_action_client+0x84>
 80140ce:	b11f      	cbz	r7, 80140d8 <rcl_action_wait_set_add_action_client+0xb8>
 80140d0:	6823      	ldr	r3, [r4, #0]
 80140d2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80140d6:	603b      	str	r3, [r7, #0]
 80140d8:	2e00      	cmp	r6, #0
 80140da:	d0e3      	beq.n	80140a4 <rcl_action_wait_set_add_action_client+0x84>
 80140dc:	6823      	ldr	r3, [r4, #0]
 80140de:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80140e2:	6033      	str	r3, [r6, #0]
 80140e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140e6:	bf00      	nop

080140e8 <rcl_action_client_wait_set_get_entities_ready>:
 80140e8:	2800      	cmp	r0, #0
 80140ea:	f000 808d 	beq.w	8014208 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80140ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140f2:	460c      	mov	r4, r1
 80140f4:	2900      	cmp	r1, #0
 80140f6:	d077      	beq.n	80141e8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80140f8:	4605      	mov	r5, r0
 80140fa:	6808      	ldr	r0, [r1, #0]
 80140fc:	2800      	cmp	r0, #0
 80140fe:	d073      	beq.n	80141e8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014100:	4616      	mov	r6, r2
 8014102:	461f      	mov	r7, r3
 8014104:	f7fd fecc 	bl	8011ea0 <rcl_client_is_valid>
 8014108:	2800      	cmp	r0, #0
 801410a:	d071      	beq.n	80141f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801410c:	6820      	ldr	r0, [r4, #0]
 801410e:	3004      	adds	r0, #4
 8014110:	f7fd fec6 	bl	8011ea0 <rcl_client_is_valid>
 8014114:	2800      	cmp	r0, #0
 8014116:	d06b      	beq.n	80141f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014118:	6820      	ldr	r0, [r4, #0]
 801411a:	3008      	adds	r0, #8
 801411c:	f7fd fec0 	bl	8011ea0 <rcl_client_is_valid>
 8014120:	2800      	cmp	r0, #0
 8014122:	d065      	beq.n	80141f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014124:	6820      	ldr	r0, [r4, #0]
 8014126:	300c      	adds	r0, #12
 8014128:	f7fe fe56 	bl	8012dd8 <rcl_subscription_is_valid>
 801412c:	2800      	cmp	r0, #0
 801412e:	d05f      	beq.n	80141f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014130:	6820      	ldr	r0, [r4, #0]
 8014132:	3010      	adds	r0, #16
 8014134:	f7fe fe50 	bl	8012dd8 <rcl_subscription_is_valid>
 8014138:	2800      	cmp	r0, #0
 801413a:	d059      	beq.n	80141f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801413c:	2e00      	cmp	r6, #0
 801413e:	d060      	beq.n	8014202 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014140:	2f00      	cmp	r7, #0
 8014142:	d05e      	beq.n	8014202 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014144:	9b06      	ldr	r3, [sp, #24]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d05b      	beq.n	8014202 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801414a:	9b07      	ldr	r3, [sp, #28]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d058      	beq.n	8014202 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014150:	9b08      	ldr	r3, [sp, #32]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d055      	beq.n	8014202 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014156:	6823      	ldr	r3, [r4, #0]
 8014158:	686a      	ldr	r2, [r5, #4]
 801415a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 801415e:	428a      	cmp	r2, r1
 8014160:	d94c      	bls.n	80141fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014162:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8014166:	4282      	cmp	r2, r0
 8014168:	d948      	bls.n	80141fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801416a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 801416e:	69ea      	ldr	r2, [r5, #28]
 8014170:	42a2      	cmp	r2, r4
 8014172:	d943      	bls.n	80141fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014174:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8014178:	4562      	cmp	r2, ip
 801417a:	d93f      	bls.n	80141fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801417c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8014180:	4572      	cmp	r2, lr
 8014182:	d93b      	bls.n	80141fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014184:	69aa      	ldr	r2, [r5, #24]
 8014186:	682d      	ldr	r5, [r5, #0]
 8014188:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801418c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014190:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8014194:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014198:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801419c:	f103 0c0c 	add.w	ip, r3, #12
 80141a0:	eba5 050c 	sub.w	r5, r5, ip
 80141a4:	fab5 f585 	clz	r5, r5
 80141a8:	096d      	lsrs	r5, r5, #5
 80141aa:	7035      	strb	r5, [r6, #0]
 80141ac:	f103 0510 	add.w	r5, r3, #16
 80141b0:	1b64      	subs	r4, r4, r5
 80141b2:	fab4 f484 	clz	r4, r4
 80141b6:	0964      	lsrs	r4, r4, #5
 80141b8:	703c      	strb	r4, [r7, #0]
 80141ba:	eba3 0008 	sub.w	r0, r3, r8
 80141be:	1d1c      	adds	r4, r3, #4
 80141c0:	3308      	adds	r3, #8
 80141c2:	1ad3      	subs	r3, r2, r3
 80141c4:	fab0 f080 	clz	r0, r0
 80141c8:	9a06      	ldr	r2, [sp, #24]
 80141ca:	0940      	lsrs	r0, r0, #5
 80141cc:	1b09      	subs	r1, r1, r4
 80141ce:	7010      	strb	r0, [r2, #0]
 80141d0:	fab1 f181 	clz	r1, r1
 80141d4:	9a07      	ldr	r2, [sp, #28]
 80141d6:	0949      	lsrs	r1, r1, #5
 80141d8:	7011      	strb	r1, [r2, #0]
 80141da:	fab3 f383 	clz	r3, r3
 80141de:	9a08      	ldr	r2, [sp, #32]
 80141e0:	095b      	lsrs	r3, r3, #5
 80141e2:	2000      	movs	r0, #0
 80141e4:	7013      	strb	r3, [r2, #0]
 80141e6:	e001      	b.n	80141ec <rcl_action_client_wait_set_get_entities_ready+0x104>
 80141e8:	f640 0036 	movw	r0, #2102	; 0x836
 80141ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141f0:	f7fa f926 	bl	800e440 <rcutils_reset_error>
 80141f4:	f640 0036 	movw	r0, #2102	; 0x836
 80141f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141fc:	2001      	movs	r0, #1
 80141fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014202:	200b      	movs	r0, #11
 8014204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014208:	f44f 7061 	mov.w	r0, #900	; 0x384
 801420c:	4770      	bx	lr
 801420e:	bf00      	nop

08014210 <rcl_action_take_goal_request>:
 8014210:	2800      	cmp	r0, #0
 8014212:	d039      	beq.n	8014288 <rcl_action_take_goal_request+0x78>
 8014214:	b570      	push	{r4, r5, r6, lr}
 8014216:	4604      	mov	r4, r0
 8014218:	6800      	ldr	r0, [r0, #0]
 801421a:	b380      	cbz	r0, 801427e <rcl_action_take_goal_request+0x6e>
 801421c:	460d      	mov	r5, r1
 801421e:	4616      	mov	r6, r2
 8014220:	f7fe fc96 	bl	8012b50 <rcl_service_is_valid>
 8014224:	b330      	cbz	r0, 8014274 <rcl_action_take_goal_request+0x64>
 8014226:	6820      	ldr	r0, [r4, #0]
 8014228:	3004      	adds	r0, #4
 801422a:	f7fe fc91 	bl	8012b50 <rcl_service_is_valid>
 801422e:	b308      	cbz	r0, 8014274 <rcl_action_take_goal_request+0x64>
 8014230:	6820      	ldr	r0, [r4, #0]
 8014232:	3008      	adds	r0, #8
 8014234:	f7fe fc8c 	bl	8012b50 <rcl_service_is_valid>
 8014238:	b1e0      	cbz	r0, 8014274 <rcl_action_take_goal_request+0x64>
 801423a:	6820      	ldr	r0, [r4, #0]
 801423c:	300c      	adds	r0, #12
 801423e:	f7f9 f979 	bl	800d534 <rcl_publisher_is_valid>
 8014242:	b1b8      	cbz	r0, 8014274 <rcl_action_take_goal_request+0x64>
 8014244:	6820      	ldr	r0, [r4, #0]
 8014246:	3010      	adds	r0, #16
 8014248:	f7f9 f974 	bl	800d534 <rcl_publisher_is_valid>
 801424c:	b190      	cbz	r0, 8014274 <rcl_action_take_goal_request+0x64>
 801424e:	b1cd      	cbz	r5, 8014284 <rcl_action_take_goal_request+0x74>
 8014250:	b1c6      	cbz	r6, 8014284 <rcl_action_take_goal_request+0x74>
 8014252:	6820      	ldr	r0, [r4, #0]
 8014254:	4632      	mov	r2, r6
 8014256:	4629      	mov	r1, r5
 8014258:	f7fe fc22 	bl	8012aa0 <rcl_take_request>
 801425c:	b148      	cbz	r0, 8014272 <rcl_action_take_goal_request+0x62>
 801425e:	280a      	cmp	r0, #10
 8014260:	d007      	beq.n	8014272 <rcl_action_take_goal_request+0x62>
 8014262:	f240 2259 	movw	r2, #601	; 0x259
 8014266:	f640 0399 	movw	r3, #2201	; 0x899
 801426a:	4290      	cmp	r0, r2
 801426c:	bf0c      	ite	eq
 801426e:	4618      	moveq	r0, r3
 8014270:	2001      	movne	r0, #1
 8014272:	bd70      	pop	{r4, r5, r6, pc}
 8014274:	f7fa f8e4 	bl	800e440 <rcutils_reset_error>
 8014278:	f640 0098 	movw	r0, #2200	; 0x898
 801427c:	bd70      	pop	{r4, r5, r6, pc}
 801427e:	f640 0098 	movw	r0, #2200	; 0x898
 8014282:	bd70      	pop	{r4, r5, r6, pc}
 8014284:	200b      	movs	r0, #11
 8014286:	bd70      	pop	{r4, r5, r6, pc}
 8014288:	f640 0098 	movw	r0, #2200	; 0x898
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop

08014290 <rcl_action_send_goal_response>:
 8014290:	b390      	cbz	r0, 80142f8 <rcl_action_send_goal_response+0x68>
 8014292:	b570      	push	{r4, r5, r6, lr}
 8014294:	4604      	mov	r4, r0
 8014296:	6800      	ldr	r0, [r0, #0]
 8014298:	b348      	cbz	r0, 80142ee <rcl_action_send_goal_response+0x5e>
 801429a:	460d      	mov	r5, r1
 801429c:	4616      	mov	r6, r2
 801429e:	f7fe fc57 	bl	8012b50 <rcl_service_is_valid>
 80142a2:	b1f8      	cbz	r0, 80142e4 <rcl_action_send_goal_response+0x54>
 80142a4:	6820      	ldr	r0, [r4, #0]
 80142a6:	3004      	adds	r0, #4
 80142a8:	f7fe fc52 	bl	8012b50 <rcl_service_is_valid>
 80142ac:	b1d0      	cbz	r0, 80142e4 <rcl_action_send_goal_response+0x54>
 80142ae:	6820      	ldr	r0, [r4, #0]
 80142b0:	3008      	adds	r0, #8
 80142b2:	f7fe fc4d 	bl	8012b50 <rcl_service_is_valid>
 80142b6:	b1a8      	cbz	r0, 80142e4 <rcl_action_send_goal_response+0x54>
 80142b8:	6820      	ldr	r0, [r4, #0]
 80142ba:	300c      	adds	r0, #12
 80142bc:	f7f9 f93a 	bl	800d534 <rcl_publisher_is_valid>
 80142c0:	b180      	cbz	r0, 80142e4 <rcl_action_send_goal_response+0x54>
 80142c2:	6820      	ldr	r0, [r4, #0]
 80142c4:	3010      	adds	r0, #16
 80142c6:	f7f9 f935 	bl	800d534 <rcl_publisher_is_valid>
 80142ca:	b158      	cbz	r0, 80142e4 <rcl_action_send_goal_response+0x54>
 80142cc:	b195      	cbz	r5, 80142f4 <rcl_action_send_goal_response+0x64>
 80142ce:	b18e      	cbz	r6, 80142f4 <rcl_action_send_goal_response+0x64>
 80142d0:	6820      	ldr	r0, [r4, #0]
 80142d2:	4632      	mov	r2, r6
 80142d4:	4629      	mov	r1, r5
 80142d6:	f7fe fc23 	bl	8012b20 <rcl_send_response>
 80142da:	b110      	cbz	r0, 80142e2 <rcl_action_send_goal_response+0x52>
 80142dc:	2802      	cmp	r0, #2
 80142de:	bf18      	it	ne
 80142e0:	2001      	movne	r0, #1
 80142e2:	bd70      	pop	{r4, r5, r6, pc}
 80142e4:	f7fa f8ac 	bl	800e440 <rcutils_reset_error>
 80142e8:	f640 0098 	movw	r0, #2200	; 0x898
 80142ec:	bd70      	pop	{r4, r5, r6, pc}
 80142ee:	f640 0098 	movw	r0, #2200	; 0x898
 80142f2:	bd70      	pop	{r4, r5, r6, pc}
 80142f4:	200b      	movs	r0, #11
 80142f6:	bd70      	pop	{r4, r5, r6, pc}
 80142f8:	f640 0098 	movw	r0, #2200	; 0x898
 80142fc:	4770      	bx	lr
 80142fe:	bf00      	nop

08014300 <rcl_action_take_result_request>:
 8014300:	2800      	cmp	r0, #0
 8014302:	d03a      	beq.n	801437a <rcl_action_take_result_request+0x7a>
 8014304:	b570      	push	{r4, r5, r6, lr}
 8014306:	4604      	mov	r4, r0
 8014308:	6800      	ldr	r0, [r0, #0]
 801430a:	b388      	cbz	r0, 8014370 <rcl_action_take_result_request+0x70>
 801430c:	460d      	mov	r5, r1
 801430e:	4616      	mov	r6, r2
 8014310:	f7fe fc1e 	bl	8012b50 <rcl_service_is_valid>
 8014314:	b338      	cbz	r0, 8014366 <rcl_action_take_result_request+0x66>
 8014316:	6820      	ldr	r0, [r4, #0]
 8014318:	3004      	adds	r0, #4
 801431a:	f7fe fc19 	bl	8012b50 <rcl_service_is_valid>
 801431e:	b310      	cbz	r0, 8014366 <rcl_action_take_result_request+0x66>
 8014320:	6820      	ldr	r0, [r4, #0]
 8014322:	3008      	adds	r0, #8
 8014324:	f7fe fc14 	bl	8012b50 <rcl_service_is_valid>
 8014328:	b1e8      	cbz	r0, 8014366 <rcl_action_take_result_request+0x66>
 801432a:	6820      	ldr	r0, [r4, #0]
 801432c:	300c      	adds	r0, #12
 801432e:	f7f9 f901 	bl	800d534 <rcl_publisher_is_valid>
 8014332:	b1c0      	cbz	r0, 8014366 <rcl_action_take_result_request+0x66>
 8014334:	6820      	ldr	r0, [r4, #0]
 8014336:	3010      	adds	r0, #16
 8014338:	f7f9 f8fc 	bl	800d534 <rcl_publisher_is_valid>
 801433c:	b198      	cbz	r0, 8014366 <rcl_action_take_result_request+0x66>
 801433e:	b1d5      	cbz	r5, 8014376 <rcl_action_take_result_request+0x76>
 8014340:	b1ce      	cbz	r6, 8014376 <rcl_action_take_result_request+0x76>
 8014342:	6820      	ldr	r0, [r4, #0]
 8014344:	4632      	mov	r2, r6
 8014346:	4629      	mov	r1, r5
 8014348:	3008      	adds	r0, #8
 801434a:	f7fe fba9 	bl	8012aa0 <rcl_take_request>
 801434e:	b148      	cbz	r0, 8014364 <rcl_action_take_result_request+0x64>
 8014350:	280a      	cmp	r0, #10
 8014352:	d007      	beq.n	8014364 <rcl_action_take_result_request+0x64>
 8014354:	f240 2259 	movw	r2, #601	; 0x259
 8014358:	f640 0399 	movw	r3, #2201	; 0x899
 801435c:	4290      	cmp	r0, r2
 801435e:	bf0c      	ite	eq
 8014360:	4618      	moveq	r0, r3
 8014362:	2001      	movne	r0, #1
 8014364:	bd70      	pop	{r4, r5, r6, pc}
 8014366:	f7fa f86b 	bl	800e440 <rcutils_reset_error>
 801436a:	f640 0098 	movw	r0, #2200	; 0x898
 801436e:	bd70      	pop	{r4, r5, r6, pc}
 8014370:	f640 0098 	movw	r0, #2200	; 0x898
 8014374:	bd70      	pop	{r4, r5, r6, pc}
 8014376:	200b      	movs	r0, #11
 8014378:	bd70      	pop	{r4, r5, r6, pc}
 801437a:	f640 0098 	movw	r0, #2200	; 0x898
 801437e:	4770      	bx	lr

08014380 <rcl_action_take_cancel_request>:
 8014380:	2800      	cmp	r0, #0
 8014382:	d03a      	beq.n	80143fa <rcl_action_take_cancel_request+0x7a>
 8014384:	b570      	push	{r4, r5, r6, lr}
 8014386:	4604      	mov	r4, r0
 8014388:	6800      	ldr	r0, [r0, #0]
 801438a:	b388      	cbz	r0, 80143f0 <rcl_action_take_cancel_request+0x70>
 801438c:	460d      	mov	r5, r1
 801438e:	4616      	mov	r6, r2
 8014390:	f7fe fbde 	bl	8012b50 <rcl_service_is_valid>
 8014394:	b338      	cbz	r0, 80143e6 <rcl_action_take_cancel_request+0x66>
 8014396:	6820      	ldr	r0, [r4, #0]
 8014398:	3004      	adds	r0, #4
 801439a:	f7fe fbd9 	bl	8012b50 <rcl_service_is_valid>
 801439e:	b310      	cbz	r0, 80143e6 <rcl_action_take_cancel_request+0x66>
 80143a0:	6820      	ldr	r0, [r4, #0]
 80143a2:	3008      	adds	r0, #8
 80143a4:	f7fe fbd4 	bl	8012b50 <rcl_service_is_valid>
 80143a8:	b1e8      	cbz	r0, 80143e6 <rcl_action_take_cancel_request+0x66>
 80143aa:	6820      	ldr	r0, [r4, #0]
 80143ac:	300c      	adds	r0, #12
 80143ae:	f7f9 f8c1 	bl	800d534 <rcl_publisher_is_valid>
 80143b2:	b1c0      	cbz	r0, 80143e6 <rcl_action_take_cancel_request+0x66>
 80143b4:	6820      	ldr	r0, [r4, #0]
 80143b6:	3010      	adds	r0, #16
 80143b8:	f7f9 f8bc 	bl	800d534 <rcl_publisher_is_valid>
 80143bc:	b198      	cbz	r0, 80143e6 <rcl_action_take_cancel_request+0x66>
 80143be:	b1d5      	cbz	r5, 80143f6 <rcl_action_take_cancel_request+0x76>
 80143c0:	b1ce      	cbz	r6, 80143f6 <rcl_action_take_cancel_request+0x76>
 80143c2:	6820      	ldr	r0, [r4, #0]
 80143c4:	4632      	mov	r2, r6
 80143c6:	4629      	mov	r1, r5
 80143c8:	3004      	adds	r0, #4
 80143ca:	f7fe fb69 	bl	8012aa0 <rcl_take_request>
 80143ce:	b148      	cbz	r0, 80143e4 <rcl_action_take_cancel_request+0x64>
 80143d0:	280a      	cmp	r0, #10
 80143d2:	d007      	beq.n	80143e4 <rcl_action_take_cancel_request+0x64>
 80143d4:	f240 2259 	movw	r2, #601	; 0x259
 80143d8:	f640 0399 	movw	r3, #2201	; 0x899
 80143dc:	4290      	cmp	r0, r2
 80143de:	bf0c      	ite	eq
 80143e0:	4618      	moveq	r0, r3
 80143e2:	2001      	movne	r0, #1
 80143e4:	bd70      	pop	{r4, r5, r6, pc}
 80143e6:	f7fa f82b 	bl	800e440 <rcutils_reset_error>
 80143ea:	f640 0098 	movw	r0, #2200	; 0x898
 80143ee:	bd70      	pop	{r4, r5, r6, pc}
 80143f0:	f640 0098 	movw	r0, #2200	; 0x898
 80143f4:	bd70      	pop	{r4, r5, r6, pc}
 80143f6:	200b      	movs	r0, #11
 80143f8:	bd70      	pop	{r4, r5, r6, pc}
 80143fa:	f640 0098 	movw	r0, #2200	; 0x898
 80143fe:	4770      	bx	lr

08014400 <rcl_action_send_cancel_response>:
 8014400:	b398      	cbz	r0, 801446a <rcl_action_send_cancel_response+0x6a>
 8014402:	b570      	push	{r4, r5, r6, lr}
 8014404:	4604      	mov	r4, r0
 8014406:	6800      	ldr	r0, [r0, #0]
 8014408:	b350      	cbz	r0, 8014460 <rcl_action_send_cancel_response+0x60>
 801440a:	460d      	mov	r5, r1
 801440c:	4616      	mov	r6, r2
 801440e:	f7fe fb9f 	bl	8012b50 <rcl_service_is_valid>
 8014412:	b300      	cbz	r0, 8014456 <rcl_action_send_cancel_response+0x56>
 8014414:	6820      	ldr	r0, [r4, #0]
 8014416:	3004      	adds	r0, #4
 8014418:	f7fe fb9a 	bl	8012b50 <rcl_service_is_valid>
 801441c:	b1d8      	cbz	r0, 8014456 <rcl_action_send_cancel_response+0x56>
 801441e:	6820      	ldr	r0, [r4, #0]
 8014420:	3008      	adds	r0, #8
 8014422:	f7fe fb95 	bl	8012b50 <rcl_service_is_valid>
 8014426:	b1b0      	cbz	r0, 8014456 <rcl_action_send_cancel_response+0x56>
 8014428:	6820      	ldr	r0, [r4, #0]
 801442a:	300c      	adds	r0, #12
 801442c:	f7f9 f882 	bl	800d534 <rcl_publisher_is_valid>
 8014430:	b188      	cbz	r0, 8014456 <rcl_action_send_cancel_response+0x56>
 8014432:	6820      	ldr	r0, [r4, #0]
 8014434:	3010      	adds	r0, #16
 8014436:	f7f9 f87d 	bl	800d534 <rcl_publisher_is_valid>
 801443a:	b160      	cbz	r0, 8014456 <rcl_action_send_cancel_response+0x56>
 801443c:	b19d      	cbz	r5, 8014466 <rcl_action_send_cancel_response+0x66>
 801443e:	b196      	cbz	r6, 8014466 <rcl_action_send_cancel_response+0x66>
 8014440:	6820      	ldr	r0, [r4, #0]
 8014442:	4632      	mov	r2, r6
 8014444:	4629      	mov	r1, r5
 8014446:	3004      	adds	r0, #4
 8014448:	f7fe fb6a 	bl	8012b20 <rcl_send_response>
 801444c:	b110      	cbz	r0, 8014454 <rcl_action_send_cancel_response+0x54>
 801444e:	2802      	cmp	r0, #2
 8014450:	bf18      	it	ne
 8014452:	2001      	movne	r0, #1
 8014454:	bd70      	pop	{r4, r5, r6, pc}
 8014456:	f7f9 fff3 	bl	800e440 <rcutils_reset_error>
 801445a:	f640 0098 	movw	r0, #2200	; 0x898
 801445e:	bd70      	pop	{r4, r5, r6, pc}
 8014460:	f640 0098 	movw	r0, #2200	; 0x898
 8014464:	bd70      	pop	{r4, r5, r6, pc}
 8014466:	200b      	movs	r0, #11
 8014468:	bd70      	pop	{r4, r5, r6, pc}
 801446a:	f640 0098 	movw	r0, #2200	; 0x898
 801446e:	4770      	bx	lr

08014470 <rcl_action_wait_set_add_action_server>:
 8014470:	2800      	cmp	r0, #0
 8014472:	d04d      	beq.n	8014510 <rcl_action_wait_set_add_action_server+0xa0>
 8014474:	b570      	push	{r4, r5, r6, lr}
 8014476:	460c      	mov	r4, r1
 8014478:	b159      	cbz	r1, 8014492 <rcl_action_wait_set_add_action_server+0x22>
 801447a:	4605      	mov	r5, r0
 801447c:	6808      	ldr	r0, [r1, #0]
 801447e:	b140      	cbz	r0, 8014492 <rcl_action_wait_set_add_action_server+0x22>
 8014480:	4616      	mov	r6, r2
 8014482:	f7fe fb65 	bl	8012b50 <rcl_service_is_valid>
 8014486:	b120      	cbz	r0, 8014492 <rcl_action_wait_set_add_action_server+0x22>
 8014488:	6820      	ldr	r0, [r4, #0]
 801448a:	3004      	adds	r0, #4
 801448c:	f7fe fb60 	bl	8012b50 <rcl_service_is_valid>
 8014490:	b910      	cbnz	r0, 8014498 <rcl_action_wait_set_add_action_server+0x28>
 8014492:	f640 0098 	movw	r0, #2200	; 0x898
 8014496:	bd70      	pop	{r4, r5, r6, pc}
 8014498:	6820      	ldr	r0, [r4, #0]
 801449a:	3008      	adds	r0, #8
 801449c:	f7fe fb58 	bl	8012b50 <rcl_service_is_valid>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	d0f6      	beq.n	8014492 <rcl_action_wait_set_add_action_server+0x22>
 80144a4:	6820      	ldr	r0, [r4, #0]
 80144a6:	300c      	adds	r0, #12
 80144a8:	f7f9 f85c 	bl	800d564 <rcl_publisher_is_valid_except_context>
 80144ac:	2800      	cmp	r0, #0
 80144ae:	d0f0      	beq.n	8014492 <rcl_action_wait_set_add_action_server+0x22>
 80144b0:	6820      	ldr	r0, [r4, #0]
 80144b2:	3010      	adds	r0, #16
 80144b4:	f7f9 f856 	bl	800d564 <rcl_publisher_is_valid_except_context>
 80144b8:	2800      	cmp	r0, #0
 80144ba:	d0ea      	beq.n	8014492 <rcl_action_wait_set_add_action_server+0x22>
 80144bc:	6821      	ldr	r1, [r4, #0]
 80144be:	4628      	mov	r0, r5
 80144c0:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 80144c4:	f7ff face 	bl	8013a64 <rcl_wait_set_add_service>
 80144c8:	2800      	cmp	r0, #0
 80144ca:	d1e4      	bne.n	8014496 <rcl_action_wait_set_add_action_server+0x26>
 80144cc:	6821      	ldr	r1, [r4, #0]
 80144ce:	4628      	mov	r0, r5
 80144d0:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 80144d4:	3104      	adds	r1, #4
 80144d6:	f7ff fac5 	bl	8013a64 <rcl_wait_set_add_service>
 80144da:	2800      	cmp	r0, #0
 80144dc:	d1db      	bne.n	8014496 <rcl_action_wait_set_add_action_server+0x26>
 80144de:	6821      	ldr	r1, [r4, #0]
 80144e0:	4628      	mov	r0, r5
 80144e2:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80144e6:	3108      	adds	r1, #8
 80144e8:	f7ff fabc 	bl	8013a64 <rcl_wait_set_add_service>
 80144ec:	2800      	cmp	r0, #0
 80144ee:	d1d2      	bne.n	8014496 <rcl_action_wait_set_add_action_server+0x26>
 80144f0:	6821      	ldr	r1, [r4, #0]
 80144f2:	4628      	mov	r0, r5
 80144f4:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80144f8:	3114      	adds	r1, #20
 80144fa:	f7ff fa57 	bl	80139ac <rcl_wait_set_add_timer>
 80144fe:	2800      	cmp	r0, #0
 8014500:	d1c9      	bne.n	8014496 <rcl_action_wait_set_add_action_server+0x26>
 8014502:	2e00      	cmp	r6, #0
 8014504:	d0c7      	beq.n	8014496 <rcl_action_wait_set_add_action_server+0x26>
 8014506:	6823      	ldr	r3, [r4, #0]
 8014508:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801450c:	6033      	str	r3, [r6, #0]
 801450e:	bd70      	pop	{r4, r5, r6, pc}
 8014510:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014514:	4770      	bx	lr
 8014516:	bf00      	nop

08014518 <rcl_action_server_wait_set_get_entities_ready>:
 8014518:	2800      	cmp	r0, #0
 801451a:	d05a      	beq.n	80145d2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451e:	460c      	mov	r4, r1
 8014520:	b161      	cbz	r1, 801453c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014522:	4605      	mov	r5, r0
 8014524:	6808      	ldr	r0, [r1, #0]
 8014526:	b148      	cbz	r0, 801453c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014528:	4616      	mov	r6, r2
 801452a:	461f      	mov	r7, r3
 801452c:	f7fe fb10 	bl	8012b50 <rcl_service_is_valid>
 8014530:	b120      	cbz	r0, 801453c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014532:	6820      	ldr	r0, [r4, #0]
 8014534:	3004      	adds	r0, #4
 8014536:	f7fe fb0b 	bl	8012b50 <rcl_service_is_valid>
 801453a:	b910      	cbnz	r0, 8014542 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801453c:	f640 0098 	movw	r0, #2200	; 0x898
 8014540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014542:	6820      	ldr	r0, [r4, #0]
 8014544:	3008      	adds	r0, #8
 8014546:	f7fe fb03 	bl	8012b50 <rcl_service_is_valid>
 801454a:	2800      	cmp	r0, #0
 801454c:	d0f6      	beq.n	801453c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801454e:	6820      	ldr	r0, [r4, #0]
 8014550:	300c      	adds	r0, #12
 8014552:	f7f9 f807 	bl	800d564 <rcl_publisher_is_valid_except_context>
 8014556:	2800      	cmp	r0, #0
 8014558:	d0f0      	beq.n	801453c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801455a:	6820      	ldr	r0, [r4, #0]
 801455c:	3010      	adds	r0, #16
 801455e:	f7f9 f801 	bl	800d564 <rcl_publisher_is_valid_except_context>
 8014562:	2800      	cmp	r0, #0
 8014564:	d0ea      	beq.n	801453c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014566:	b3be      	cbz	r6, 80145d8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014568:	b3b7      	cbz	r7, 80145d8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801456a:	9b06      	ldr	r3, [sp, #24]
 801456c:	b3a3      	cbz	r3, 80145d8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801456e:	9b07      	ldr	r3, [sp, #28]
 8014570:	b393      	cbz	r3, 80145d8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014572:	6821      	ldr	r1, [r4, #0]
 8014574:	692a      	ldr	r2, [r5, #16]
 8014576:	6a2c      	ldr	r4, [r5, #32]
 8014578:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 801457c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8014580:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8014584:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 8014588:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 801458c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014590:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014594:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014598:	1a64      	subs	r4, r4, r1
 801459a:	fab4 f484 	clz	r4, r4
 801459e:	0964      	lsrs	r4, r4, #5
 80145a0:	7034      	strb	r4, [r6, #0]
 80145a2:	1d0c      	adds	r4, r1, #4
 80145a4:	1b1b      	subs	r3, r3, r4
 80145a6:	fab3 f383 	clz	r3, r3
 80145aa:	095b      	lsrs	r3, r3, #5
 80145ac:	f101 0408 	add.w	r4, r1, #8
 80145b0:	703b      	strb	r3, [r7, #0]
 80145b2:	f101 0314 	add.w	r3, r1, #20
 80145b6:	1b01      	subs	r1, r0, r4
 80145b8:	1ad3      	subs	r3, r2, r3
 80145ba:	fab1 f181 	clz	r1, r1
 80145be:	9a06      	ldr	r2, [sp, #24]
 80145c0:	0949      	lsrs	r1, r1, #5
 80145c2:	7011      	strb	r1, [r2, #0]
 80145c4:	fab3 f383 	clz	r3, r3
 80145c8:	9a07      	ldr	r2, [sp, #28]
 80145ca:	095b      	lsrs	r3, r3, #5
 80145cc:	2000      	movs	r0, #0
 80145ce:	7013      	strb	r3, [r2, #0]
 80145d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145d2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80145d6:	4770      	bx	lr
 80145d8:	200b      	movs	r0, #11
 80145da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080145dc <_execute_event_handler>:
 80145dc:	2002      	movs	r0, #2
 80145de:	4770      	bx	lr

080145e0 <_cancel_goal_event_handler>:
 80145e0:	2003      	movs	r0, #3
 80145e2:	4770      	bx	lr

080145e4 <_succeed_event_handler>:
 80145e4:	2004      	movs	r0, #4
 80145e6:	4770      	bx	lr

080145e8 <_abort_event_handler>:
 80145e8:	2006      	movs	r0, #6
 80145ea:	4770      	bx	lr

080145ec <_canceled_event_handler>:
 80145ec:	2005      	movs	r0, #5
 80145ee:	4770      	bx	lr

080145f0 <rcl_action_transition_goal_state>:
 80145f0:	b2c2      	uxtb	r2, r0
 80145f2:	2a06      	cmp	r2, #6
 80145f4:	d80c      	bhi.n	8014610 <rcl_action_transition_goal_state+0x20>
 80145f6:	2904      	cmp	r1, #4
 80145f8:	d80a      	bhi.n	8014610 <rcl_action_transition_goal_state+0x20>
 80145fa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80145fe:	b410      	push	{r4}
 8014600:	1853      	adds	r3, r2, r1
 8014602:	4c06      	ldr	r4, [pc, #24]	; (801461c <rcl_action_transition_goal_state+0x2c>)
 8014604:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014608:	b123      	cbz	r3, 8014614 <rcl_action_transition_goal_state+0x24>
 801460a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801460e:	4718      	bx	r3
 8014610:	2000      	movs	r0, #0
 8014612:	4770      	bx	lr
 8014614:	2000      	movs	r0, #0
 8014616:	f85d 4b04 	ldr.w	r4, [sp], #4
 801461a:	4770      	bx	lr
 801461c:	0801a94c 	.word	0x0801a94c

08014620 <rcl_action_get_zero_initialized_cancel_response>:
 8014620:	b510      	push	{r4, lr}
 8014622:	4c07      	ldr	r4, [pc, #28]	; (8014640 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014624:	4686      	mov	lr, r0
 8014626:	4684      	mov	ip, r0
 8014628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801462a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801462e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014630:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014634:	6823      	ldr	r3, [r4, #0]
 8014636:	f8cc 3000 	str.w	r3, [ip]
 801463a:	4670      	mov	r0, lr
 801463c:	bd10      	pop	{r4, pc}
 801463e:	bf00      	nop
 8014640:	0801a9d8 	.word	0x0801a9d8

08014644 <rclc_action_send_result_request>:
 8014644:	b1d0      	cbz	r0, 801467c <rclc_action_send_result_request+0x38>
 8014646:	b500      	push	{lr}
 8014648:	4684      	mov	ip, r0
 801464a:	b087      	sub	sp, #28
 801464c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014650:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014654:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014658:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801465c:	f10d 0e08 	add.w	lr, sp, #8
 8014660:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014664:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014668:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801466c:	a902      	add	r1, sp, #8
 801466e:	3010      	adds	r0, #16
 8014670:	f7ff fbda 	bl	8013e28 <rcl_action_send_result_request>
 8014674:	b920      	cbnz	r0, 8014680 <rclc_action_send_result_request+0x3c>
 8014676:	b007      	add	sp, #28
 8014678:	f85d fb04 	ldr.w	pc, [sp], #4
 801467c:	200b      	movs	r0, #11
 801467e:	4770      	bx	lr
 8014680:	9001      	str	r0, [sp, #4]
 8014682:	f7f9 fedd 	bl	800e440 <rcutils_reset_error>
 8014686:	9801      	ldr	r0, [sp, #4]
 8014688:	b007      	add	sp, #28
 801468a:	f85d fb04 	ldr.w	pc, [sp], #4
 801468e:	bf00      	nop

08014690 <rclc_action_take_goal_handle>:
 8014690:	b160      	cbz	r0, 80146ac <rclc_action_take_goal_handle+0x1c>
 8014692:	6883      	ldr	r3, [r0, #8]
 8014694:	b143      	cbz	r3, 80146a8 <rclc_action_take_goal_handle+0x18>
 8014696:	6819      	ldr	r1, [r3, #0]
 8014698:	6081      	str	r1, [r0, #8]
 801469a:	2200      	movs	r2, #0
 801469c:	721a      	strb	r2, [r3, #8]
 801469e:	68c1      	ldr	r1, [r0, #12]
 80146a0:	6019      	str	r1, [r3, #0]
 80146a2:	621a      	str	r2, [r3, #32]
 80146a4:	849a      	strh	r2, [r3, #36]	; 0x24
 80146a6:	60c3      	str	r3, [r0, #12]
 80146a8:	4618      	mov	r0, r3
 80146aa:	4770      	bx	lr
 80146ac:	4603      	mov	r3, r0
 80146ae:	e7fb      	b.n	80146a8 <rclc_action_take_goal_handle+0x18>

080146b0 <rclc_action_remove_used_goal_handle>:
 80146b0:	b180      	cbz	r0, 80146d4 <rclc_action_remove_used_goal_handle+0x24>
 80146b2:	b179      	cbz	r1, 80146d4 <rclc_action_remove_used_goal_handle+0x24>
 80146b4:	68c3      	ldr	r3, [r0, #12]
 80146b6:	4299      	cmp	r1, r3
 80146b8:	d00d      	beq.n	80146d6 <rclc_action_remove_used_goal_handle+0x26>
 80146ba:	b12b      	cbz	r3, 80146c8 <rclc_action_remove_used_goal_handle+0x18>
 80146bc:	681a      	ldr	r2, [r3, #0]
 80146be:	4291      	cmp	r1, r2
 80146c0:	d003      	beq.n	80146ca <rclc_action_remove_used_goal_handle+0x1a>
 80146c2:	4613      	mov	r3, r2
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d1f9      	bne.n	80146bc <rclc_action_remove_used_goal_handle+0xc>
 80146c8:	4770      	bx	lr
 80146ca:	680a      	ldr	r2, [r1, #0]
 80146cc:	601a      	str	r2, [r3, #0]
 80146ce:	6883      	ldr	r3, [r0, #8]
 80146d0:	600b      	str	r3, [r1, #0]
 80146d2:	6081      	str	r1, [r0, #8]
 80146d4:	4770      	bx	lr
 80146d6:	680b      	ldr	r3, [r1, #0]
 80146d8:	60c3      	str	r3, [r0, #12]
 80146da:	e7f8      	b.n	80146ce <rclc_action_remove_used_goal_handle+0x1e>

080146dc <rclc_action_find_goal_handle_by_uuid>:
 80146dc:	b538      	push	{r3, r4, r5, lr}
 80146de:	b180      	cbz	r0, 8014702 <rclc_action_find_goal_handle_by_uuid+0x26>
 80146e0:	460d      	mov	r5, r1
 80146e2:	b181      	cbz	r1, 8014706 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80146e4:	68c4      	ldr	r4, [r0, #12]
 80146e6:	b914      	cbnz	r4, 80146ee <rclc_action_find_goal_handle_by_uuid+0x12>
 80146e8:	e009      	b.n	80146fe <rclc_action_find_goal_handle_by_uuid+0x22>
 80146ea:	6824      	ldr	r4, [r4, #0]
 80146ec:	b13c      	cbz	r4, 80146fe <rclc_action_find_goal_handle_by_uuid+0x22>
 80146ee:	f104 0009 	add.w	r0, r4, #9
 80146f2:	2210      	movs	r2, #16
 80146f4:	4629      	mov	r1, r5
 80146f6:	f004 f9f1 	bl	8018adc <memcmp>
 80146fa:	2800      	cmp	r0, #0
 80146fc:	d1f5      	bne.n	80146ea <rclc_action_find_goal_handle_by_uuid+0xe>
 80146fe:	4620      	mov	r0, r4
 8014700:	bd38      	pop	{r3, r4, r5, pc}
 8014702:	4604      	mov	r4, r0
 8014704:	e7fb      	b.n	80146fe <rclc_action_find_goal_handle_by_uuid+0x22>
 8014706:	460c      	mov	r4, r1
 8014708:	e7f9      	b.n	80146fe <rclc_action_find_goal_handle_by_uuid+0x22>
 801470a:	bf00      	nop

0801470c <rclc_action_find_first_handle_by_status>:
 801470c:	b140      	cbz	r0, 8014720 <rclc_action_find_first_handle_by_status+0x14>
 801470e:	68c0      	ldr	r0, [r0, #12]
 8014710:	b910      	cbnz	r0, 8014718 <rclc_action_find_first_handle_by_status+0xc>
 8014712:	e005      	b.n	8014720 <rclc_action_find_first_handle_by_status+0x14>
 8014714:	6800      	ldr	r0, [r0, #0]
 8014716:	b118      	cbz	r0, 8014720 <rclc_action_find_first_handle_by_status+0x14>
 8014718:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801471c:	428b      	cmp	r3, r1
 801471e:	d1f9      	bne.n	8014714 <rclc_action_find_first_handle_by_status+0x8>
 8014720:	4770      	bx	lr
 8014722:	bf00      	nop

08014724 <rclc_action_find_first_terminated_handle>:
 8014724:	b140      	cbz	r0, 8014738 <rclc_action_find_first_terminated_handle+0x14>
 8014726:	68c0      	ldr	r0, [r0, #12]
 8014728:	b910      	cbnz	r0, 8014730 <rclc_action_find_first_terminated_handle+0xc>
 801472a:	e005      	b.n	8014738 <rclc_action_find_first_terminated_handle+0x14>
 801472c:	6800      	ldr	r0, [r0, #0]
 801472e:	b118      	cbz	r0, 8014738 <rclc_action_find_first_terminated_handle+0x14>
 8014730:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014734:	2b03      	cmp	r3, #3
 8014736:	ddf9      	ble.n	801472c <rclc_action_find_first_terminated_handle+0x8>
 8014738:	4770      	bx	lr
 801473a:	bf00      	nop

0801473c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801473c:	b170      	cbz	r0, 801475c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801473e:	68c0      	ldr	r0, [r0, #12]
 8014740:	b160      	cbz	r0, 801475c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014742:	b410      	push	{r4}
 8014744:	e001      	b.n	801474a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014746:	6800      	ldr	r0, [r0, #0]
 8014748:	b128      	cbz	r0, 8014756 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801474a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801474e:	4299      	cmp	r1, r3
 8014750:	bf08      	it	eq
 8014752:	4294      	cmpeq	r4, r2
 8014754:	d1f7      	bne.n	8014746 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014756:	f85d 4b04 	ldr.w	r4, [sp], #4
 801475a:	4770      	bx	lr
 801475c:	4770      	bx	lr
 801475e:	bf00      	nop

08014760 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014760:	b170      	cbz	r0, 8014780 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014762:	68c0      	ldr	r0, [r0, #12]
 8014764:	b160      	cbz	r0, 8014780 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014766:	b410      	push	{r4}
 8014768:	e001      	b.n	801476e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801476a:	6800      	ldr	r0, [r0, #0]
 801476c:	b128      	cbz	r0, 801477a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801476e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8014772:	4299      	cmp	r1, r3
 8014774:	bf08      	it	eq
 8014776:	4294      	cmpeq	r4, r2
 8014778:	d1f7      	bne.n	801476a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801477a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	4770      	bx	lr
 8014782:	bf00      	nop

08014784 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014784:	b170      	cbz	r0, 80147a4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014786:	68c0      	ldr	r0, [r0, #12]
 8014788:	b160      	cbz	r0, 80147a4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801478a:	b410      	push	{r4}
 801478c:	e001      	b.n	8014792 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801478e:	6800      	ldr	r0, [r0, #0]
 8014790:	b128      	cbz	r0, 801479e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014792:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8014796:	4299      	cmp	r1, r3
 8014798:	bf08      	it	eq
 801479a:	4294      	cmpeq	r4, r2
 801479c:	d1f7      	bne.n	801478e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801479e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147a2:	4770      	bx	lr
 80147a4:	4770      	bx	lr
 80147a6:	bf00      	nop

080147a8 <rclc_action_find_first_handle_with_goal_response>:
 80147a8:	b140      	cbz	r0, 80147bc <rclc_action_find_first_handle_with_goal_response+0x14>
 80147aa:	68c0      	ldr	r0, [r0, #12]
 80147ac:	b910      	cbnz	r0, 80147b4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80147ae:	e005      	b.n	80147bc <rclc_action_find_first_handle_with_goal_response+0x14>
 80147b0:	6800      	ldr	r0, [r0, #0]
 80147b2:	b118      	cbz	r0, 80147bc <rclc_action_find_first_handle_with_goal_response+0x14>
 80147b4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d0f9      	beq.n	80147b0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80147bc:	4770      	bx	lr
 80147be:	bf00      	nop

080147c0 <rclc_action_find_first_handle_with_result_response>:
 80147c0:	b140      	cbz	r0, 80147d4 <rclc_action_find_first_handle_with_result_response+0x14>
 80147c2:	68c0      	ldr	r0, [r0, #12]
 80147c4:	b910      	cbnz	r0, 80147cc <rclc_action_find_first_handle_with_result_response+0xc>
 80147c6:	e005      	b.n	80147d4 <rclc_action_find_first_handle_with_result_response+0x14>
 80147c8:	6800      	ldr	r0, [r0, #0]
 80147ca:	b118      	cbz	r0, 80147d4 <rclc_action_find_first_handle_with_result_response+0x14>
 80147cc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d0f9      	beq.n	80147c8 <rclc_action_find_first_handle_with_result_response+0x8>
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop

080147d8 <rclc_action_server_response_goal_request>:
 80147d8:	b198      	cbz	r0, 8014802 <rclc_action_server_response_goal_request+0x2a>
 80147da:	b510      	push	{r4, lr}
 80147dc:	6844      	ldr	r4, [r0, #4]
 80147de:	b086      	sub	sp, #24
 80147e0:	2200      	movs	r2, #0
 80147e2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80147e6:	460b      	mov	r3, r1
 80147e8:	9205      	str	r2, [sp, #20]
 80147ea:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80147ee:	aa03      	add	r2, sp, #12
 80147f0:	f104 0010 	add.w	r0, r4, #16
 80147f4:	f88d 300c 	strb.w	r3, [sp, #12]
 80147f8:	f7ff fd4a 	bl	8014290 <rcl_action_send_goal_response>
 80147fc:	b918      	cbnz	r0, 8014806 <rclc_action_server_response_goal_request+0x2e>
 80147fe:	b006      	add	sp, #24
 8014800:	bd10      	pop	{r4, pc}
 8014802:	200b      	movs	r0, #11
 8014804:	4770      	bx	lr
 8014806:	9001      	str	r0, [sp, #4]
 8014808:	f7f9 fe1a 	bl	800e440 <rcutils_reset_error>
 801480c:	9801      	ldr	r0, [sp, #4]
 801480e:	b006      	add	sp, #24
 8014810:	bd10      	pop	{r4, pc}
 8014812:	bf00      	nop
 8014814:	0000      	movs	r0, r0
	...

08014818 <rclc_action_server_goal_cancel_accept>:
 8014818:	b310      	cbz	r0, 8014860 <rclc_action_server_goal_cancel_accept+0x48>
 801481a:	b510      	push	{r4, lr}
 801481c:	b090      	sub	sp, #64	; 0x40
 801481e:	4604      	mov	r4, r0
 8014820:	a806      	add	r0, sp, #24
 8014822:	f7ff fefd 	bl	8014620 <rcl_action_get_zero_initialized_cancel_response>
 8014826:	2300      	movs	r3, #0
 8014828:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801482c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014830:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014834:	f88d 3018 	strb.w	r3, [sp, #24]
 8014838:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801483c:	f8cd d01c 	str.w	sp, [sp, #28]
 8014840:	46ec      	mov	ip, sp
 8014842:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014846:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8014868 <rclc_action_server_goal_cancel_accept+0x50>
 801484a:	6860      	ldr	r0, [r4, #4]
 801484c:	aa06      	add	r2, sp, #24
 801484e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8014852:	3010      	adds	r0, #16
 8014854:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014858:	f7ff fdd2 	bl	8014400 <rcl_action_send_cancel_response>
 801485c:	b010      	add	sp, #64	; 0x40
 801485e:	bd10      	pop	{r4, pc}
 8014860:	200b      	movs	r0, #11
 8014862:	4770      	bx	lr
 8014864:	f3af 8000 	nop.w
 8014868:	00000001 	.word	0x00000001
 801486c:	00000001 	.word	0x00000001

08014870 <rclc_action_server_goal_cancel_reject>:
 8014870:	b082      	sub	sp, #8
 8014872:	b530      	push	{r4, r5, lr}
 8014874:	b08b      	sub	sp, #44	; 0x2c
 8014876:	ac0e      	add	r4, sp, #56	; 0x38
 8014878:	e884 000c 	stmia.w	r4, {r2, r3}
 801487c:	b188      	cbz	r0, 80148a2 <rclc_action_server_goal_cancel_reject+0x32>
 801487e:	4604      	mov	r4, r0
 8014880:	a801      	add	r0, sp, #4
 8014882:	460d      	mov	r5, r1
 8014884:	f7ff fecc 	bl	8014620 <rcl_action_get_zero_initialized_cancel_response>
 8014888:	aa01      	add	r2, sp, #4
 801488a:	a90e      	add	r1, sp, #56	; 0x38
 801488c:	f104 0010 	add.w	r0, r4, #16
 8014890:	f88d 5004 	strb.w	r5, [sp, #4]
 8014894:	f7ff fdb4 	bl	8014400 <rcl_action_send_cancel_response>
 8014898:	b00b      	add	sp, #44	; 0x2c
 801489a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801489e:	b002      	add	sp, #8
 80148a0:	4770      	bx	lr
 80148a2:	200b      	movs	r0, #11
 80148a4:	b00b      	add	sp, #44	; 0x2c
 80148a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80148aa:	b002      	add	sp, #8
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop

080148b0 <__atomic_load_8>:
 80148b0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80148b4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80148b8:	4a15      	ldr	r2, [pc, #84]	; (8014910 <__atomic_load_8+0x60>)
 80148ba:	4b16      	ldr	r3, [pc, #88]	; (8014914 <__atomic_load_8+0x64>)
 80148bc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80148c0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80148c4:	fb02 f101 	mul.w	r1, r2, r1
 80148c8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80148cc:	fba3 2301 	umull	r2, r3, r3, r1
 80148d0:	091b      	lsrs	r3, r3, #4
 80148d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80148d6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80148da:	b4d0      	push	{r4, r6, r7}
 80148dc:	4c0e      	ldr	r4, [pc, #56]	; (8014918 <__atomic_load_8+0x68>)
 80148de:	1ac9      	subs	r1, r1, r3
 80148e0:	1862      	adds	r2, r4, r1
 80148e2:	f04f 0c01 	mov.w	ip, #1
 80148e6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80148ea:	e8c2 cf46 	strexb	r6, ip, [r2]
 80148ee:	2e00      	cmp	r6, #0
 80148f0:	d1f9      	bne.n	80148e6 <__atomic_load_8+0x36>
 80148f2:	f3bf 8f5b 	dmb	ish
 80148f6:	b2db      	uxtb	r3, r3
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d1f4      	bne.n	80148e6 <__atomic_load_8+0x36>
 80148fc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014900:	f3bf 8f5b 	dmb	ish
 8014904:	5463      	strb	r3, [r4, r1]
 8014906:	4630      	mov	r0, r6
 8014908:	4639      	mov	r1, r7
 801490a:	bcd0      	pop	{r4, r6, r7}
 801490c:	4770      	bx	lr
 801490e:	bf00      	nop
 8014910:	27d4eb2d 	.word	0x27d4eb2d
 8014914:	b21642c9 	.word	0xb21642c9
 8014918:	2000de28 	.word	0x2000de28

0801491c <__atomic_store_8>:
 801491c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014920:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8014924:	b570      	push	{r4, r5, r6, lr}
 8014926:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801492a:	4c14      	ldr	r4, [pc, #80]	; (801497c <__atomic_store_8+0x60>)
 801492c:	4d14      	ldr	r5, [pc, #80]	; (8014980 <__atomic_store_8+0x64>)
 801492e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014932:	fb04 f101 	mul.w	r1, r4, r1
 8014936:	4c13      	ldr	r4, [pc, #76]	; (8014984 <__atomic_store_8+0x68>)
 8014938:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801493c:	fba4 4e01 	umull	r4, lr, r4, r1
 8014940:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014944:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014948:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801494c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014950:	eb05 0c0e 	add.w	ip, r5, lr
 8014954:	f04f 0401 	mov.w	r4, #1
 8014958:	e8dc 1f4f 	ldrexb	r1, [ip]
 801495c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014960:	2e00      	cmp	r6, #0
 8014962:	d1f9      	bne.n	8014958 <__atomic_store_8+0x3c>
 8014964:	f3bf 8f5b 	dmb	ish
 8014968:	b2c9      	uxtb	r1, r1
 801496a:	2900      	cmp	r1, #0
 801496c:	d1f4      	bne.n	8014958 <__atomic_store_8+0x3c>
 801496e:	e9c0 2300 	strd	r2, r3, [r0]
 8014972:	f3bf 8f5b 	dmb	ish
 8014976:	f805 100e 	strb.w	r1, [r5, lr]
 801497a:	bd70      	pop	{r4, r5, r6, pc}
 801497c:	27d4eb2d 	.word	0x27d4eb2d
 8014980:	2000de28 	.word	0x2000de28
 8014984:	b21642c9 	.word	0xb21642c9

08014988 <__atomic_exchange_8>:
 8014988:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801498c:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8014990:	4916      	ldr	r1, [pc, #88]	; (80149ec <__atomic_exchange_8+0x64>)
 8014992:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014996:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801499a:	fb01 fc0c 	mul.w	ip, r1, ip
 801499e:	4914      	ldr	r1, [pc, #80]	; (80149f0 <__atomic_exchange_8+0x68>)
 80149a0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80149a4:	b570      	push	{r4, r5, r6, lr}
 80149a6:	4605      	mov	r5, r0
 80149a8:	fba1 010c 	umull	r0, r1, r1, ip
 80149ac:	0909      	lsrs	r1, r1, #4
 80149ae:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80149b2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80149b6:	4e0f      	ldr	r6, [pc, #60]	; (80149f4 <__atomic_exchange_8+0x6c>)
 80149b8:	ebac 0c01 	sub.w	ip, ip, r1
 80149bc:	eb06 010c 	add.w	r1, r6, ip
 80149c0:	f04f 0e01 	mov.w	lr, #1
 80149c4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80149c8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d1f9      	bne.n	80149c4 <__atomic_exchange_8+0x3c>
 80149d0:	f3bf 8f5b 	dmb	ish
 80149d4:	b2e4      	uxtb	r4, r4
 80149d6:	2c00      	cmp	r4, #0
 80149d8:	d1f4      	bne.n	80149c4 <__atomic_exchange_8+0x3c>
 80149da:	e9d5 0100 	ldrd	r0, r1, [r5]
 80149de:	e9c5 2300 	strd	r2, r3, [r5]
 80149e2:	f3bf 8f5b 	dmb	ish
 80149e6:	f806 400c 	strb.w	r4, [r6, ip]
 80149ea:	bd70      	pop	{r4, r5, r6, pc}
 80149ec:	27d4eb2d 	.word	0x27d4eb2d
 80149f0:	b21642c9 	.word	0xb21642c9
 80149f4:	2000de28 	.word	0x2000de28

080149f8 <rcutils_get_env>:
 80149f8:	b168      	cbz	r0, 8014a16 <rcutils_get_env+0x1e>
 80149fa:	b510      	push	{r4, lr}
 80149fc:	460c      	mov	r4, r1
 80149fe:	b129      	cbz	r1, 8014a0c <rcutils_get_env+0x14>
 8014a00:	f003 fff2 	bl	80189e8 <getenv>
 8014a04:	b120      	cbz	r0, 8014a10 <rcutils_get_env+0x18>
 8014a06:	6020      	str	r0, [r4, #0]
 8014a08:	2000      	movs	r0, #0
 8014a0a:	bd10      	pop	{r4, pc}
 8014a0c:	4803      	ldr	r0, [pc, #12]	; (8014a1c <rcutils_get_env+0x24>)
 8014a0e:	bd10      	pop	{r4, pc}
 8014a10:	4b03      	ldr	r3, [pc, #12]	; (8014a20 <rcutils_get_env+0x28>)
 8014a12:	6023      	str	r3, [r4, #0]
 8014a14:	bd10      	pop	{r4, pc}
 8014a16:	4803      	ldr	r0, [pc, #12]	; (8014a24 <rcutils_get_env+0x2c>)
 8014a18:	4770      	bx	lr
 8014a1a:	bf00      	nop
 8014a1c:	0801aa18 	.word	0x0801aa18
 8014a20:	0801ab3c 	.word	0x0801ab3c
 8014a24:	0801a9fc 	.word	0x0801a9fc

08014a28 <rcutils_is_directory>:
 8014a28:	2000      	movs	r0, #0
 8014a2a:	4770      	bx	lr

08014a2c <rcutils_join_path>:
 8014a2c:	b082      	sub	sp, #8
 8014a2e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014a32:	2000      	movs	r0, #0
 8014a34:	b002      	add	sp, #8
 8014a36:	4770      	bx	lr

08014a38 <rcutils_to_native_path>:
 8014a38:	b084      	sub	sp, #16
 8014a3a:	a801      	add	r0, sp, #4
 8014a3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014a40:	b004      	add	sp, #16
 8014a42:	2000      	movs	r0, #0
 8014a44:	4770      	bx	lr
 8014a46:	bf00      	nop

08014a48 <rcutils_format_string_limit>:
 8014a48:	b40f      	push	{r0, r1, r2, r3}
 8014a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a4c:	b083      	sub	sp, #12
 8014a4e:	ac08      	add	r4, sp, #32
 8014a50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014a52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014a56:	b34e      	cbz	r6, 8014aac <rcutils_format_string_limit+0x64>
 8014a58:	a808      	add	r0, sp, #32
 8014a5a:	f7f9 fccd 	bl	800e3f8 <rcutils_allocator_is_valid>
 8014a5e:	b328      	cbz	r0, 8014aac <rcutils_format_string_limit+0x64>
 8014a60:	2100      	movs	r1, #0
 8014a62:	ab0f      	add	r3, sp, #60	; 0x3c
 8014a64:	4632      	mov	r2, r6
 8014a66:	4608      	mov	r0, r1
 8014a68:	e9cd 3300 	strd	r3, r3, [sp]
 8014a6c:	f000 f8f4 	bl	8014c58 <rcutils_vsnprintf>
 8014a70:	1c43      	adds	r3, r0, #1
 8014a72:	4605      	mov	r5, r0
 8014a74:	d01a      	beq.n	8014aac <rcutils_format_string_limit+0x64>
 8014a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014a7a:	1c47      	adds	r7, r0, #1
 8014a7c:	429f      	cmp	r7, r3
 8014a7e:	bf84      	itt	hi
 8014a80:	461f      	movhi	r7, r3
 8014a82:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8014a86:	4638      	mov	r0, r7
 8014a88:	9b08      	ldr	r3, [sp, #32]
 8014a8a:	4798      	blx	r3
 8014a8c:	4604      	mov	r4, r0
 8014a8e:	b168      	cbz	r0, 8014aac <rcutils_format_string_limit+0x64>
 8014a90:	9b01      	ldr	r3, [sp, #4]
 8014a92:	4632      	mov	r2, r6
 8014a94:	4639      	mov	r1, r7
 8014a96:	f000 f8df 	bl	8014c58 <rcutils_vsnprintf>
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	db02      	blt.n	8014aa4 <rcutils_format_string_limit+0x5c>
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	5563      	strb	r3, [r4, r5]
 8014aa2:	e004      	b.n	8014aae <rcutils_format_string_limit+0x66>
 8014aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aa6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014aa8:	4620      	mov	r0, r4
 8014aaa:	4798      	blx	r3
 8014aac:	2400      	movs	r4, #0
 8014aae:	4620      	mov	r0, r4
 8014ab0:	b003      	add	sp, #12
 8014ab2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ab6:	b004      	add	sp, #16
 8014ab8:	4770      	bx	lr
 8014aba:	bf00      	nop

08014abc <rcutils_repl_str>:
 8014abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac0:	ed2d 8b02 	vpush	{d8}
 8014ac4:	b087      	sub	sp, #28
 8014ac6:	4680      	mov	r8, r0
 8014ac8:	4608      	mov	r0, r1
 8014aca:	f8cd 8004 	str.w	r8, [sp, #4]
 8014ace:	ee08 2a10 	vmov	s16, r2
 8014ad2:	468a      	mov	sl, r1
 8014ad4:	4699      	mov	r9, r3
 8014ad6:	f7eb fb85 	bl	80001e4 <strlen>
 8014ada:	2600      	movs	r6, #0
 8014adc:	4647      	mov	r7, r8
 8014ade:	9002      	str	r0, [sp, #8]
 8014ae0:	46b3      	mov	fp, r6
 8014ae2:	2510      	movs	r5, #16
 8014ae4:	46b0      	mov	r8, r6
 8014ae6:	e01d      	b.n	8014b24 <rcutils_repl_str+0x68>
 8014ae8:	f10b 0b01 	add.w	fp, fp, #1
 8014aec:	455e      	cmp	r6, fp
 8014aee:	d211      	bcs.n	8014b14 <rcutils_repl_str+0x58>
 8014af0:	442e      	add	r6, r5
 8014af2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014af6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014afa:	00b1      	lsls	r1, r6, #2
 8014afc:	4798      	blx	r3
 8014afe:	2800      	cmp	r0, #0
 8014b00:	f000 8088 	beq.w	8014c14 <rcutils_repl_str+0x158>
 8014b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b08:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014b0c:	4680      	mov	r8, r0
 8014b0e:	bf28      	it	cs
 8014b10:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8014b14:	9a01      	ldr	r2, [sp, #4]
 8014b16:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014b1a:	1aa2      	subs	r2, r4, r2
 8014b1c:	f843 2c04 	str.w	r2, [r3, #-4]
 8014b20:	9b02      	ldr	r3, [sp, #8]
 8014b22:	18e7      	adds	r7, r4, r3
 8014b24:	4651      	mov	r1, sl
 8014b26:	4638      	mov	r0, r7
 8014b28:	f004 f9c9 	bl	8018ebe <strstr>
 8014b2c:	4604      	mov	r4, r0
 8014b2e:	4640      	mov	r0, r8
 8014b30:	2c00      	cmp	r4, #0
 8014b32:	d1d9      	bne.n	8014ae8 <rcutils_repl_str+0x2c>
 8014b34:	46b8      	mov	r8, r7
 8014b36:	4607      	mov	r7, r0
 8014b38:	4640      	mov	r0, r8
 8014b3a:	f7eb fb53 	bl	80001e4 <strlen>
 8014b3e:	9b01      	ldr	r3, [sp, #4]
 8014b40:	eba8 0303 	sub.w	r3, r8, r3
 8014b44:	181c      	adds	r4, r3, r0
 8014b46:	9404      	str	r4, [sp, #16]
 8014b48:	f1bb 0f00 	cmp.w	fp, #0
 8014b4c:	d04a      	beq.n	8014be4 <rcutils_repl_str+0x128>
 8014b4e:	ee18 0a10 	vmov	r0, s16
 8014b52:	f7eb fb47 	bl	80001e4 <strlen>
 8014b56:	9b02      	ldr	r3, [sp, #8]
 8014b58:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014b5c:	1ac3      	subs	r3, r0, r3
 8014b5e:	fb0b 4303 	mla	r3, fp, r3, r4
 8014b62:	461a      	mov	r2, r3
 8014b64:	9305      	str	r3, [sp, #20]
 8014b66:	4606      	mov	r6, r0
 8014b68:	f8d9 3000 	ldr.w	r3, [r9]
 8014b6c:	1c50      	adds	r0, r2, #1
 8014b6e:	4798      	blx	r3
 8014b70:	9003      	str	r0, [sp, #12]
 8014b72:	2800      	cmp	r0, #0
 8014b74:	d04f      	beq.n	8014c16 <rcutils_repl_str+0x15a>
 8014b76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014b7a:	683a      	ldr	r2, [r7, #0]
 8014b7c:	4641      	mov	r1, r8
 8014b7e:	f003 ffbb 	bl	8018af8 <memcpy>
 8014b82:	683d      	ldr	r5, [r7, #0]
 8014b84:	9b03      	ldr	r3, [sp, #12]
 8014b86:	9701      	str	r7, [sp, #4]
 8014b88:	46ba      	mov	sl, r7
 8014b8a:	441d      	add	r5, r3
 8014b8c:	9f02      	ldr	r7, [sp, #8]
 8014b8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b92:	2401      	movs	r4, #1
 8014b94:	46d1      	mov	r9, sl
 8014b96:	ee18 aa10 	vmov	sl, s16
 8014b9a:	e00a      	b.n	8014bb2 <rcutils_repl_str+0xf6>
 8014b9c:	f8d9 5000 	ldr.w	r5, [r9]
 8014ba0:	1aaa      	subs	r2, r5, r2
 8014ba2:	1885      	adds	r5, r0, r2
 8014ba4:	f003 ffa8 	bl	8018af8 <memcpy>
 8014ba8:	45a3      	cmp	fp, r4
 8014baa:	f104 0201 	add.w	r2, r4, #1
 8014bae:	d935      	bls.n	8014c1c <rcutils_repl_str+0x160>
 8014bb0:	4614      	mov	r4, r2
 8014bb2:	4632      	mov	r2, r6
 8014bb4:	4651      	mov	r1, sl
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	f003 ff9e 	bl	8018af8 <memcpy>
 8014bbc:	f859 2b04 	ldr.w	r2, [r9], #4
 8014bc0:	45a3      	cmp	fp, r4
 8014bc2:	443a      	add	r2, r7
 8014bc4:	eb05 0006 	add.w	r0, r5, r6
 8014bc8:	eb08 0102 	add.w	r1, r8, r2
 8014bcc:	d1e6      	bne.n	8014b9c <rcutils_repl_str+0xe0>
 8014bce:	9b04      	ldr	r3, [sp, #16]
 8014bd0:	1a9a      	subs	r2, r3, r2
 8014bd2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014bd6:	f003 ff8f 	bl	8018af8 <memcpy>
 8014bda:	9a03      	ldr	r2, [sp, #12]
 8014bdc:	9905      	ldr	r1, [sp, #20]
 8014bde:	2300      	movs	r3, #0
 8014be0:	5453      	strb	r3, [r2, r1]
 8014be2:	e00b      	b.n	8014bfc <rcutils_repl_str+0x140>
 8014be4:	4620      	mov	r0, r4
 8014be6:	f8d9 3000 	ldr.w	r3, [r9]
 8014bea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014bee:	3001      	adds	r0, #1
 8014bf0:	4798      	blx	r3
 8014bf2:	9003      	str	r0, [sp, #12]
 8014bf4:	b110      	cbz	r0, 8014bfc <rcutils_repl_str+0x140>
 8014bf6:	9901      	ldr	r1, [sp, #4]
 8014bf8:	f004 f947 	bl	8018e8a <strcpy>
 8014bfc:	4638      	mov	r0, r7
 8014bfe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014c02:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c06:	4798      	blx	r3
 8014c08:	9803      	ldr	r0, [sp, #12]
 8014c0a:	b007      	add	sp, #28
 8014c0c:	ecbd 8b02 	vpop	{d8}
 8014c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c14:	4647      	mov	r7, r8
 8014c16:	2300      	movs	r3, #0
 8014c18:	9303      	str	r3, [sp, #12]
 8014c1a:	e7ef      	b.n	8014bfc <rcutils_repl_str+0x140>
 8014c1c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014c20:	e7db      	b.n	8014bda <rcutils_repl_str+0x11e>
 8014c22:	bf00      	nop

08014c24 <rcutils_snprintf>:
 8014c24:	b40c      	push	{r2, r3}
 8014c26:	b530      	push	{r4, r5, lr}
 8014c28:	b083      	sub	sp, #12
 8014c2a:	ab06      	add	r3, sp, #24
 8014c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c30:	9301      	str	r3, [sp, #4]
 8014c32:	b152      	cbz	r2, 8014c4a <rcutils_snprintf+0x26>
 8014c34:	b138      	cbz	r0, 8014c46 <rcutils_snprintf+0x22>
 8014c36:	b141      	cbz	r1, 8014c4a <rcutils_snprintf+0x26>
 8014c38:	f004 fa0a 	bl	8019050 <vsniprintf>
 8014c3c:	b003      	add	sp, #12
 8014c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c42:	b002      	add	sp, #8
 8014c44:	4770      	bx	lr
 8014c46:	2900      	cmp	r1, #0
 8014c48:	d0f6      	beq.n	8014c38 <rcutils_snprintf+0x14>
 8014c4a:	f003 fec7 	bl	80189dc <__errno>
 8014c4e:	2316      	movs	r3, #22
 8014c50:	6003      	str	r3, [r0, #0]
 8014c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c56:	e7f1      	b.n	8014c3c <rcutils_snprintf+0x18>

08014c58 <rcutils_vsnprintf>:
 8014c58:	b570      	push	{r4, r5, r6, lr}
 8014c5a:	b13a      	cbz	r2, 8014c6c <rcutils_vsnprintf+0x14>
 8014c5c:	b120      	cbz	r0, 8014c68 <rcutils_vsnprintf+0x10>
 8014c5e:	b129      	cbz	r1, 8014c6c <rcutils_vsnprintf+0x14>
 8014c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c64:	f004 b9f4 	b.w	8019050 <vsniprintf>
 8014c68:	2900      	cmp	r1, #0
 8014c6a:	d0f9      	beq.n	8014c60 <rcutils_vsnprintf+0x8>
 8014c6c:	f003 feb6 	bl	80189dc <__errno>
 8014c70:	2316      	movs	r3, #22
 8014c72:	6003      	str	r3, [r0, #0]
 8014c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c78:	bd70      	pop	{r4, r5, r6, pc}
 8014c7a:	bf00      	nop

08014c7c <rcutils_strdup>:
 8014c7c:	b084      	sub	sp, #16
 8014c7e:	b570      	push	{r4, r5, r6, lr}
 8014c80:	b082      	sub	sp, #8
 8014c82:	ac07      	add	r4, sp, #28
 8014c84:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014c88:	4605      	mov	r5, r0
 8014c8a:	b1b0      	cbz	r0, 8014cba <rcutils_strdup+0x3e>
 8014c8c:	f7eb faaa 	bl	80001e4 <strlen>
 8014c90:	1c42      	adds	r2, r0, #1
 8014c92:	9b07      	ldr	r3, [sp, #28]
 8014c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c96:	9201      	str	r2, [sp, #4]
 8014c98:	4606      	mov	r6, r0
 8014c9a:	4610      	mov	r0, r2
 8014c9c:	4798      	blx	r3
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	b128      	cbz	r0, 8014cae <rcutils_strdup+0x32>
 8014ca2:	9a01      	ldr	r2, [sp, #4]
 8014ca4:	4629      	mov	r1, r5
 8014ca6:	f003 ff27 	bl	8018af8 <memcpy>
 8014caa:	2300      	movs	r3, #0
 8014cac:	55a3      	strb	r3, [r4, r6]
 8014cae:	4620      	mov	r0, r4
 8014cb0:	b002      	add	sp, #8
 8014cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cb6:	b004      	add	sp, #16
 8014cb8:	4770      	bx	lr
 8014cba:	4604      	mov	r4, r0
 8014cbc:	e7f7      	b.n	8014cae <rcutils_strdup+0x32>
 8014cbe:	bf00      	nop

08014cc0 <rcutils_strndup>:
 8014cc0:	b082      	sub	sp, #8
 8014cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cc4:	ac06      	add	r4, sp, #24
 8014cc6:	e884 000c 	stmia.w	r4, {r2, r3}
 8014cca:	4605      	mov	r5, r0
 8014ccc:	b188      	cbz	r0, 8014cf2 <rcutils_strndup+0x32>
 8014cce:	1c4f      	adds	r7, r1, #1
 8014cd0:	460e      	mov	r6, r1
 8014cd2:	4638      	mov	r0, r7
 8014cd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014cd6:	4790      	blx	r2
 8014cd8:	4604      	mov	r4, r0
 8014cda:	b128      	cbz	r0, 8014ce8 <rcutils_strndup+0x28>
 8014cdc:	463a      	mov	r2, r7
 8014cde:	4629      	mov	r1, r5
 8014ce0:	f003 ff0a 	bl	8018af8 <memcpy>
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	55a3      	strb	r3, [r4, r6]
 8014ce8:	4620      	mov	r0, r4
 8014cea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014cee:	b002      	add	sp, #8
 8014cf0:	4770      	bx	lr
 8014cf2:	4604      	mov	r4, r0
 8014cf4:	e7f8      	b.n	8014ce8 <rcutils_strndup+0x28>
 8014cf6:	bf00      	nop

08014cf8 <rcutils_get_zero_initialized_string_map>:
 8014cf8:	4b01      	ldr	r3, [pc, #4]	; (8014d00 <rcutils_get_zero_initialized_string_map+0x8>)
 8014cfa:	2000      	movs	r0, #0
 8014cfc:	6018      	str	r0, [r3, #0]
 8014cfe:	4770      	bx	lr
 8014d00:	2000de40 	.word	0x2000de40

08014d04 <rcutils_string_map_reserve>:
 8014d04:	2800      	cmp	r0, #0
 8014d06:	d05f      	beq.n	8014dc8 <rcutils_string_map_reserve+0xc4>
 8014d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d0c:	460c      	mov	r4, r1
 8014d0e:	6801      	ldr	r1, [r0, #0]
 8014d10:	b082      	sub	sp, #8
 8014d12:	4605      	mov	r5, r0
 8014d14:	b129      	cbz	r1, 8014d22 <rcutils_string_map_reserve+0x1e>
 8014d16:	68cb      	ldr	r3, [r1, #12]
 8014d18:	42a3      	cmp	r3, r4
 8014d1a:	d906      	bls.n	8014d2a <rcutils_string_map_reserve+0x26>
 8014d1c:	461c      	mov	r4, r3
 8014d1e:	2900      	cmp	r1, #0
 8014d20:	d1f9      	bne.n	8014d16 <rcutils_string_map_reserve+0x12>
 8014d22:	201f      	movs	r0, #31
 8014d24:	b002      	add	sp, #8
 8014d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d2a:	688b      	ldr	r3, [r1, #8]
 8014d2c:	42a3      	cmp	r3, r4
 8014d2e:	d047      	beq.n	8014dc0 <rcutils_string_map_reserve+0xbc>
 8014d30:	6a0e      	ldr	r6, [r1, #32]
 8014d32:	2c00      	cmp	r4, #0
 8014d34:	d034      	beq.n	8014da0 <rcutils_string_map_reserve+0x9c>
 8014d36:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8014d3a:	d243      	bcs.n	8014dc4 <rcutils_string_map_reserve+0xc0>
 8014d3c:	00a7      	lsls	r7, r4, #2
 8014d3e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014d42:	6808      	ldr	r0, [r1, #0]
 8014d44:	4632      	mov	r2, r6
 8014d46:	4639      	mov	r1, r7
 8014d48:	47c0      	blx	r8
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	d03a      	beq.n	8014dc4 <rcutils_string_map_reserve+0xc0>
 8014d4e:	682b      	ldr	r3, [r5, #0]
 8014d50:	4632      	mov	r2, r6
 8014d52:	6018      	str	r0, [r3, #0]
 8014d54:	4639      	mov	r1, r7
 8014d56:	6858      	ldr	r0, [r3, #4]
 8014d58:	47c0      	blx	r8
 8014d5a:	2800      	cmp	r0, #0
 8014d5c:	d032      	beq.n	8014dc4 <rcutils_string_map_reserve+0xc0>
 8014d5e:	682d      	ldr	r5, [r5, #0]
 8014d60:	68ab      	ldr	r3, [r5, #8]
 8014d62:	6068      	str	r0, [r5, #4]
 8014d64:	42a3      	cmp	r3, r4
 8014d66:	d226      	bcs.n	8014db6 <rcutils_string_map_reserve+0xb2>
 8014d68:	682a      	ldr	r2, [r5, #0]
 8014d6a:	eb00 0c07 	add.w	ip, r0, r7
 8014d6e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014d72:	45e6      	cmp	lr, ip
 8014d74:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014d78:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014d7c:	d203      	bcs.n	8014d86 <rcutils_string_map_reserve+0x82>
 8014d7e:	eb02 0c07 	add.w	ip, r2, r7
 8014d82:	4566      	cmp	r6, ip
 8014d84:	d322      	bcc.n	8014dcc <rcutils_string_map_reserve+0xc8>
 8014d86:	1ae3      	subs	r3, r4, r3
 8014d88:	009a      	lsls	r2, r3, #2
 8014d8a:	4670      	mov	r0, lr
 8014d8c:	2100      	movs	r1, #0
 8014d8e:	9201      	str	r2, [sp, #4]
 8014d90:	f003 feda 	bl	8018b48 <memset>
 8014d94:	9a01      	ldr	r2, [sp, #4]
 8014d96:	2100      	movs	r1, #0
 8014d98:	4630      	mov	r0, r6
 8014d9a:	f003 fed5 	bl	8018b48 <memset>
 8014d9e:	e00a      	b.n	8014db6 <rcutils_string_map_reserve+0xb2>
 8014da0:	694f      	ldr	r7, [r1, #20]
 8014da2:	6808      	ldr	r0, [r1, #0]
 8014da4:	4631      	mov	r1, r6
 8014da6:	47b8      	blx	r7
 8014da8:	682b      	ldr	r3, [r5, #0]
 8014daa:	4631      	mov	r1, r6
 8014dac:	6858      	ldr	r0, [r3, #4]
 8014dae:	601c      	str	r4, [r3, #0]
 8014db0:	47b8      	blx	r7
 8014db2:	682d      	ldr	r5, [r5, #0]
 8014db4:	606c      	str	r4, [r5, #4]
 8014db6:	2000      	movs	r0, #0
 8014db8:	60ac      	str	r4, [r5, #8]
 8014dba:	b002      	add	sp, #8
 8014dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dc0:	2000      	movs	r0, #0
 8014dc2:	e7af      	b.n	8014d24 <rcutils_string_map_reserve+0x20>
 8014dc4:	200a      	movs	r0, #10
 8014dc6:	e7ad      	b.n	8014d24 <rcutils_string_map_reserve+0x20>
 8014dc8:	200b      	movs	r0, #11
 8014dca:	4770      	bx	lr
 8014dcc:	1f0b      	subs	r3, r1, #4
 8014dce:	4418      	add	r0, r3
 8014dd0:	4413      	add	r3, r2
 8014dd2:	3a04      	subs	r2, #4
 8014dd4:	4417      	add	r7, r2
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	f843 2f04 	str.w	r2, [r3, #4]!
 8014ddc:	42bb      	cmp	r3, r7
 8014dde:	f840 2f04 	str.w	r2, [r0, #4]!
 8014de2:	d1f9      	bne.n	8014dd8 <rcutils_string_map_reserve+0xd4>
 8014de4:	e7e7      	b.n	8014db6 <rcutils_string_map_reserve+0xb2>
 8014de6:	bf00      	nop

08014de8 <rcutils_string_map_init>:
 8014de8:	b082      	sub	sp, #8
 8014dea:	b570      	push	{r4, r5, r6, lr}
 8014dec:	ac04      	add	r4, sp, #16
 8014dee:	e884 000c 	stmia.w	r4, {r2, r3}
 8014df2:	b380      	cbz	r0, 8014e56 <rcutils_string_map_init+0x6e>
 8014df4:	6806      	ldr	r6, [r0, #0]
 8014df6:	4604      	mov	r4, r0
 8014df8:	b12e      	cbz	r6, 8014e06 <rcutils_string_map_init+0x1e>
 8014dfa:	251e      	movs	r5, #30
 8014dfc:	4628      	mov	r0, r5
 8014dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e02:	b002      	add	sp, #8
 8014e04:	4770      	bx	lr
 8014e06:	a804      	add	r0, sp, #16
 8014e08:	460d      	mov	r5, r1
 8014e0a:	f7f9 faf5 	bl	800e3f8 <rcutils_allocator_is_valid>
 8014e0e:	b310      	cbz	r0, 8014e56 <rcutils_string_map_init+0x6e>
 8014e10:	9b04      	ldr	r3, [sp, #16]
 8014e12:	9908      	ldr	r1, [sp, #32]
 8014e14:	2024      	movs	r0, #36	; 0x24
 8014e16:	4798      	blx	r3
 8014e18:	6020      	str	r0, [r4, #0]
 8014e1a:	b310      	cbz	r0, 8014e62 <rcutils_string_map_init+0x7a>
 8014e1c:	f10d 0e10 	add.w	lr, sp, #16
 8014e20:	e9c0 6600 	strd	r6, r6, [r0]
 8014e24:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014e28:	f100 0c10 	add.w	ip, r0, #16
 8014e2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014e30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e34:	f8de 3000 	ldr.w	r3, [lr]
 8014e38:	f8cc 3000 	str.w	r3, [ip]
 8014e3c:	4629      	mov	r1, r5
 8014e3e:	4620      	mov	r0, r4
 8014e40:	f7ff ff60 	bl	8014d04 <rcutils_string_map_reserve>
 8014e44:	4605      	mov	r5, r0
 8014e46:	2800      	cmp	r0, #0
 8014e48:	d0d8      	beq.n	8014dfc <rcutils_string_map_init+0x14>
 8014e4a:	9b05      	ldr	r3, [sp, #20]
 8014e4c:	9908      	ldr	r1, [sp, #32]
 8014e4e:	6820      	ldr	r0, [r4, #0]
 8014e50:	4798      	blx	r3
 8014e52:	6026      	str	r6, [r4, #0]
 8014e54:	e7d2      	b.n	8014dfc <rcutils_string_map_init+0x14>
 8014e56:	250b      	movs	r5, #11
 8014e58:	4628      	mov	r0, r5
 8014e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e5e:	b002      	add	sp, #8
 8014e60:	4770      	bx	lr
 8014e62:	250a      	movs	r5, #10
 8014e64:	e7ca      	b.n	8014dfc <rcutils_string_map_init+0x14>
 8014e66:	bf00      	nop

08014e68 <rcutils_string_map_fini>:
 8014e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e6c:	b082      	sub	sp, #8
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	d03a      	beq.n	8014ee8 <rcutils_string_map_fini+0x80>
 8014e72:	6804      	ldr	r4, [r0, #0]
 8014e74:	4606      	mov	r6, r0
 8014e76:	2c00      	cmp	r4, #0
 8014e78:	d032      	beq.n	8014ee0 <rcutils_string_map_fini+0x78>
 8014e7a:	68a3      	ldr	r3, [r4, #8]
 8014e7c:	b32b      	cbz	r3, 8014eca <rcutils_string_map_fini+0x62>
 8014e7e:	2500      	movs	r5, #0
 8014e80:	6822      	ldr	r2, [r4, #0]
 8014e82:	462f      	mov	r7, r5
 8014e84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014e88:	b1e0      	cbz	r0, 8014ec4 <rcutils_string_map_fini+0x5c>
 8014e8a:	6a21      	ldr	r1, [r4, #32]
 8014e8c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014e90:	9101      	str	r1, [sp, #4]
 8014e92:	47c0      	blx	r8
 8014e94:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014e98:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014e9c:	9901      	ldr	r1, [sp, #4]
 8014e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014ea2:	47c0      	blx	r8
 8014ea4:	68e3      	ldr	r3, [r4, #12]
 8014ea6:	6862      	ldr	r2, [r4, #4]
 8014ea8:	3b01      	subs	r3, #1
 8014eaa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014eae:	60e3      	str	r3, [r4, #12]
 8014eb0:	6834      	ldr	r4, [r6, #0]
 8014eb2:	68a3      	ldr	r3, [r4, #8]
 8014eb4:	3501      	adds	r5, #1
 8014eb6:	429d      	cmp	r5, r3
 8014eb8:	d207      	bcs.n	8014eca <rcutils_string_map_fini+0x62>
 8014eba:	6822      	ldr	r2, [r4, #0]
 8014ebc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014ec0:	2800      	cmp	r0, #0
 8014ec2:	d1e2      	bne.n	8014e8a <rcutils_string_map_fini+0x22>
 8014ec4:	3501      	adds	r5, #1
 8014ec6:	429d      	cmp	r5, r3
 8014ec8:	d3dc      	bcc.n	8014e84 <rcutils_string_map_fini+0x1c>
 8014eca:	2100      	movs	r1, #0
 8014ecc:	4630      	mov	r0, r6
 8014ece:	f7ff ff19 	bl	8014d04 <rcutils_string_map_reserve>
 8014ed2:	4604      	mov	r4, r0
 8014ed4:	b920      	cbnz	r0, 8014ee0 <rcutils_string_map_fini+0x78>
 8014ed6:	6830      	ldr	r0, [r6, #0]
 8014ed8:	6943      	ldr	r3, [r0, #20]
 8014eda:	6a01      	ldr	r1, [r0, #32]
 8014edc:	4798      	blx	r3
 8014ede:	6034      	str	r4, [r6, #0]
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	b002      	add	sp, #8
 8014ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ee8:	240b      	movs	r4, #11
 8014eea:	4620      	mov	r0, r4
 8014eec:	b002      	add	sp, #8
 8014eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef2:	bf00      	nop

08014ef4 <rcutils_string_map_getn>:
 8014ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef8:	b300      	cbz	r0, 8014f3c <rcutils_string_map_getn+0x48>
 8014efa:	6807      	ldr	r7, [r0, #0]
 8014efc:	b1ff      	cbz	r7, 8014f3e <rcutils_string_map_getn+0x4a>
 8014efe:	4688      	mov	r8, r1
 8014f00:	b1e1      	cbz	r1, 8014f3c <rcutils_string_map_getn+0x48>
 8014f02:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014f06:	683e      	ldr	r6, [r7, #0]
 8014f08:	f1ba 0f00 	cmp.w	sl, #0
 8014f0c:	d016      	beq.n	8014f3c <rcutils_string_map_getn+0x48>
 8014f0e:	4691      	mov	r9, r2
 8014f10:	3e04      	subs	r6, #4
 8014f12:	2400      	movs	r4, #0
 8014f14:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014f18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014f1c:	4628      	mov	r0, r5
 8014f1e:	3401      	adds	r4, #1
 8014f20:	b155      	cbz	r5, 8014f38 <rcutils_string_map_getn+0x44>
 8014f22:	f7eb f95f 	bl	80001e4 <strlen>
 8014f26:	4548      	cmp	r0, r9
 8014f28:	4602      	mov	r2, r0
 8014f2a:	4629      	mov	r1, r5
 8014f2c:	bf38      	it	cc
 8014f2e:	464a      	movcc	r2, r9
 8014f30:	4640      	mov	r0, r8
 8014f32:	f003 ffb2 	bl	8018e9a <strncmp>
 8014f36:	b128      	cbz	r0, 8014f44 <rcutils_string_map_getn+0x50>
 8014f38:	45a2      	cmp	sl, r4
 8014f3a:	d1eb      	bne.n	8014f14 <rcutils_string_map_getn+0x20>
 8014f3c:	2700      	movs	r7, #0
 8014f3e:	4638      	mov	r0, r7
 8014f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f853 700b 	ldr.w	r7, [r3, fp]
 8014f4a:	4638      	mov	r0, r7
 8014f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f50 <rmw_get_zero_initialized_context>:
 8014f50:	b510      	push	{r4, lr}
 8014f52:	4604      	mov	r4, r0
 8014f54:	3010      	adds	r0, #16
 8014f56:	f000 f80b 	bl	8014f70 <rmw_get_zero_initialized_init_options>
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	2000      	movs	r0, #0
 8014f5e:	2100      	movs	r1, #0
 8014f60:	e9c4 0100 	strd	r0, r1, [r4]
 8014f64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014f68:	60a3      	str	r3, [r4, #8]
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	bd10      	pop	{r4, pc}
 8014f6e:	bf00      	nop

08014f70 <rmw_get_zero_initialized_init_options>:
 8014f70:	b510      	push	{r4, lr}
 8014f72:	2238      	movs	r2, #56	; 0x38
 8014f74:	4604      	mov	r4, r0
 8014f76:	2100      	movs	r1, #0
 8014f78:	f003 fde6 	bl	8018b48 <memset>
 8014f7c:	f104 0010 	add.w	r0, r4, #16
 8014f80:	f000 f806 	bl	8014f90 <rmw_get_default_security_options>
 8014f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f88:	60e3      	str	r3, [r4, #12]
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	bd10      	pop	{r4, pc}
 8014f8e:	bf00      	nop

08014f90 <rmw_get_default_security_options>:
 8014f90:	2200      	movs	r2, #0
 8014f92:	7002      	strb	r2, [r0, #0]
 8014f94:	6042      	str	r2, [r0, #4]
 8014f96:	4770      	bx	lr

08014f98 <rmw_subscription_content_filter_options_fini>:
 8014f98:	b1b0      	cbz	r0, 8014fc8 <rmw_subscription_content_filter_options_fini+0x30>
 8014f9a:	b538      	push	{r3, r4, r5, lr}
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	4608      	mov	r0, r1
 8014fa0:	460d      	mov	r5, r1
 8014fa2:	f7f9 fa29 	bl	800e3f8 <rcutils_allocator_is_valid>
 8014fa6:	b168      	cbz	r0, 8014fc4 <rmw_subscription_content_filter_options_fini+0x2c>
 8014fa8:	6820      	ldr	r0, [r4, #0]
 8014faa:	b120      	cbz	r0, 8014fb6 <rmw_subscription_content_filter_options_fini+0x1e>
 8014fac:	686b      	ldr	r3, [r5, #4]
 8014fae:	6929      	ldr	r1, [r5, #16]
 8014fb0:	4798      	blx	r3
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	6023      	str	r3, [r4, #0]
 8014fb6:	1d20      	adds	r0, r4, #4
 8014fb8:	f003 fbd0 	bl	801875c <rcutils_string_array_fini>
 8014fbc:	3800      	subs	r0, #0
 8014fbe:	bf18      	it	ne
 8014fc0:	2001      	movne	r0, #1
 8014fc2:	bd38      	pop	{r3, r4, r5, pc}
 8014fc4:	200b      	movs	r0, #11
 8014fc6:	bd38      	pop	{r3, r4, r5, pc}
 8014fc8:	200b      	movs	r0, #11
 8014fca:	4770      	bx	lr

08014fcc <rmw_get_default_subscription_options>:
 8014fcc:	2200      	movs	r2, #0
 8014fce:	e9c0 2200 	strd	r2, r2, [r0]
 8014fd2:	6082      	str	r2, [r0, #8]
 8014fd4:	4770      	bx	lr
 8014fd6:	bf00      	nop

08014fd8 <rmw_time_equal>:
 8014fd8:	b4f0      	push	{r4, r5, r6, r7}
 8014fda:	b084      	sub	sp, #16
 8014fdc:	ac04      	add	r4, sp, #16
 8014fde:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	4924      	ldr	r1, [pc, #144]	; (8015078 <rmw_time_equal+0xa0>)
 8014fe6:	9e03      	ldr	r6, [sp, #12]
 8014fe8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014fec:	2202      	movs	r2, #2
 8014fee:	4299      	cmp	r1, r3
 8014ff0:	41aa      	sbcs	r2, r5
 8014ff2:	d330      	bcc.n	8015056 <rmw_time_equal+0x7e>
 8014ff4:	4c21      	ldr	r4, [pc, #132]	; (801507c <rmw_time_equal+0xa4>)
 8014ff6:	fba3 3204 	umull	r3, r2, r3, r4
 8014ffa:	fb04 2205 	mla	r2, r4, r5, r2
 8014ffe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015002:	43dd      	mvns	r5, r3
 8015004:	1a8c      	subs	r4, r1, r2
 8015006:	4285      	cmp	r5, r0
 8015008:	41b4      	sbcs	r4, r6
 801500a:	d332      	bcc.n	8015072 <rmw_time_equal+0x9a>
 801500c:	eb10 0c03 	adds.w	ip, r0, r3
 8015010:	eb42 0106 	adc.w	r1, r2, r6
 8015014:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015018:	4817      	ldr	r0, [pc, #92]	; (8015078 <rmw_time_equal+0xa0>)
 801501a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801501c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801501e:	2202      	movs	r2, #2
 8015020:	4298      	cmp	r0, r3
 8015022:	41b2      	sbcs	r2, r6
 8015024:	d31c      	bcc.n	8015060 <rmw_time_equal+0x88>
 8015026:	4c15      	ldr	r4, [pc, #84]	; (801507c <rmw_time_equal+0xa4>)
 8015028:	fba3 3204 	umull	r3, r2, r3, r4
 801502c:	fb04 2206 	mla	r2, r4, r6, r2
 8015030:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015034:	43de      	mvns	r6, r3
 8015036:	1a84      	subs	r4, r0, r2
 8015038:	42ae      	cmp	r6, r5
 801503a:	41bc      	sbcs	r4, r7
 801503c:	d315      	bcc.n	801506a <rmw_time_equal+0x92>
 801503e:	195b      	adds	r3, r3, r5
 8015040:	eb42 0207 	adc.w	r2, r2, r7
 8015044:	428a      	cmp	r2, r1
 8015046:	bf08      	it	eq
 8015048:	4563      	cmpeq	r3, ip
 801504a:	bf0c      	ite	eq
 801504c:	2001      	moveq	r0, #1
 801504e:	2000      	movne	r0, #0
 8015050:	b004      	add	sp, #16
 8015052:	bcf0      	pop	{r4, r5, r6, r7}
 8015054:	4770      	bx	lr
 8015056:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801505a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801505e:	e7d9      	b.n	8015014 <rmw_time_equal+0x3c>
 8015060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015064:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015068:	e7ec      	b.n	8015044 <rmw_time_equal+0x6c>
 801506a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801506e:	4602      	mov	r2, r0
 8015070:	e7e8      	b.n	8015044 <rmw_time_equal+0x6c>
 8015072:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8015076:	e7cd      	b.n	8015014 <rmw_time_equal+0x3c>
 8015078:	25c17d04 	.word	0x25c17d04
 801507c:	3b9aca00 	.word	0x3b9aca00

08015080 <rmw_time_total_nsec>:
 8015080:	b470      	push	{r4, r5, r6}
 8015082:	b085      	sub	sp, #20
 8015084:	ac04      	add	r4, sp, #16
 8015086:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801508a:	4603      	mov	r3, r0
 801508c:	4912      	ldr	r1, [pc, #72]	; (80150d8 <rmw_time_total_nsec+0x58>)
 801508e:	9e03      	ldr	r6, [sp, #12]
 8015090:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015094:	2202      	movs	r2, #2
 8015096:	4299      	cmp	r1, r3
 8015098:	41aa      	sbcs	r2, r5
 801509a:	d311      	bcc.n	80150c0 <rmw_time_total_nsec+0x40>
 801509c:	4c0f      	ldr	r4, [pc, #60]	; (80150dc <rmw_time_total_nsec+0x5c>)
 801509e:	fba3 3204 	umull	r3, r2, r3, r4
 80150a2:	fb04 2205 	mla	r2, r4, r5, r2
 80150a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150aa:	43dd      	mvns	r5, r3
 80150ac:	1a8c      	subs	r4, r1, r2
 80150ae:	4285      	cmp	r5, r0
 80150b0:	41b4      	sbcs	r4, r6
 80150b2:	d30c      	bcc.n	80150ce <rmw_time_total_nsec+0x4e>
 80150b4:	1818      	adds	r0, r3, r0
 80150b6:	eb42 0106 	adc.w	r1, r2, r6
 80150ba:	b005      	add	sp, #20
 80150bc:	bc70      	pop	{r4, r5, r6}
 80150be:	4770      	bx	lr
 80150c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150c8:	b005      	add	sp, #20
 80150ca:	bc70      	pop	{r4, r5, r6}
 80150cc:	4770      	bx	lr
 80150ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150d2:	b005      	add	sp, #20
 80150d4:	bc70      	pop	{r4, r5, r6}
 80150d6:	4770      	bx	lr
 80150d8:	25c17d04 	.word	0x25c17d04
 80150dc:	3b9aca00 	.word	0x3b9aca00

080150e0 <rmw_get_zero_initialized_message_info>:
 80150e0:	b510      	push	{r4, lr}
 80150e2:	2240      	movs	r2, #64	; 0x40
 80150e4:	4604      	mov	r4, r0
 80150e6:	2100      	movs	r1, #0
 80150e8:	f003 fd2e 	bl	8018b48 <memset>
 80150ec:	4620      	mov	r0, r4
 80150ee:	bd10      	pop	{r4, pc}

080150f0 <rmw_validate_full_topic_name>:
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d057      	beq.n	80151a4 <rmw_validate_full_topic_name+0xb4>
 80150f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150f8:	460d      	mov	r5, r1
 80150fa:	2900      	cmp	r1, #0
 80150fc:	d054      	beq.n	80151a8 <rmw_validate_full_topic_name+0xb8>
 80150fe:	4616      	mov	r6, r2
 8015100:	4604      	mov	r4, r0
 8015102:	f7eb f86f 	bl	80001e4 <strlen>
 8015106:	b148      	cbz	r0, 801511c <rmw_validate_full_topic_name+0x2c>
 8015108:	7823      	ldrb	r3, [r4, #0]
 801510a:	2b2f      	cmp	r3, #47	; 0x2f
 801510c:	d00d      	beq.n	801512a <rmw_validate_full_topic_name+0x3a>
 801510e:	2302      	movs	r3, #2
 8015110:	602b      	str	r3, [r5, #0]
 8015112:	b13e      	cbz	r6, 8015124 <rmw_validate_full_topic_name+0x34>
 8015114:	2000      	movs	r0, #0
 8015116:	6030      	str	r0, [r6, #0]
 8015118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801511c:	2301      	movs	r3, #1
 801511e:	602b      	str	r3, [r5, #0]
 8015120:	2e00      	cmp	r6, #0
 8015122:	d1f7      	bne.n	8015114 <rmw_validate_full_topic_name+0x24>
 8015124:	2000      	movs	r0, #0
 8015126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801512a:	1e43      	subs	r3, r0, #1
 801512c:	5ce2      	ldrb	r2, [r4, r3]
 801512e:	2a2f      	cmp	r2, #47	; 0x2f
 8015130:	d03c      	beq.n	80151ac <rmw_validate_full_topic_name+0xbc>
 8015132:	1e63      	subs	r3, r4, #1
 8015134:	eb03 0800 	add.w	r8, r3, r0
 8015138:	f1c4 0e01 	rsb	lr, r4, #1
 801513c:	eb0e 0703 	add.w	r7, lr, r3
 8015140:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015144:	f021 0220 	bic.w	r2, r1, #32
 8015148:	3a41      	subs	r2, #65	; 0x41
 801514a:	2a19      	cmp	r2, #25
 801514c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8015150:	d90b      	bls.n	801516a <rmw_validate_full_topic_name+0x7a>
 8015152:	295f      	cmp	r1, #95	; 0x5f
 8015154:	d009      	beq.n	801516a <rmw_validate_full_topic_name+0x7a>
 8015156:	f1bc 0f0a 	cmp.w	ip, #10
 801515a:	d906      	bls.n	801516a <rmw_validate_full_topic_name+0x7a>
 801515c:	2304      	movs	r3, #4
 801515e:	602b      	str	r3, [r5, #0]
 8015160:	2e00      	cmp	r6, #0
 8015162:	d0df      	beq.n	8015124 <rmw_validate_full_topic_name+0x34>
 8015164:	6037      	str	r7, [r6, #0]
 8015166:	2000      	movs	r0, #0
 8015168:	e7d6      	b.n	8015118 <rmw_validate_full_topic_name+0x28>
 801516a:	4543      	cmp	r3, r8
 801516c:	d1e6      	bne.n	801513c <rmw_validate_full_topic_name+0x4c>
 801516e:	4f1a      	ldr	r7, [pc, #104]	; (80151d8 <rmw_validate_full_topic_name+0xe8>)
 8015170:	2301      	movs	r3, #1
 8015172:	e004      	b.n	801517e <rmw_validate_full_topic_name+0x8e>
 8015174:	4298      	cmp	r0, r3
 8015176:	f104 0401 	add.w	r4, r4, #1
 801517a:	d91c      	bls.n	80151b6 <rmw_validate_full_topic_name+0xc6>
 801517c:	4613      	mov	r3, r2
 801517e:	4298      	cmp	r0, r3
 8015180:	f103 0201 	add.w	r2, r3, #1
 8015184:	d0f6      	beq.n	8015174 <rmw_validate_full_topic_name+0x84>
 8015186:	7821      	ldrb	r1, [r4, #0]
 8015188:	292f      	cmp	r1, #47	; 0x2f
 801518a:	d1f3      	bne.n	8015174 <rmw_validate_full_topic_name+0x84>
 801518c:	7861      	ldrb	r1, [r4, #1]
 801518e:	292f      	cmp	r1, #47	; 0x2f
 8015190:	d01c      	beq.n	80151cc <rmw_validate_full_topic_name+0xdc>
 8015192:	5dc9      	ldrb	r1, [r1, r7]
 8015194:	0749      	lsls	r1, r1, #29
 8015196:	d5ed      	bpl.n	8015174 <rmw_validate_full_topic_name+0x84>
 8015198:	2206      	movs	r2, #6
 801519a:	602a      	str	r2, [r5, #0]
 801519c:	2e00      	cmp	r6, #0
 801519e:	d0c1      	beq.n	8015124 <rmw_validate_full_topic_name+0x34>
 80151a0:	6033      	str	r3, [r6, #0]
 80151a2:	e7bf      	b.n	8015124 <rmw_validate_full_topic_name+0x34>
 80151a4:	200b      	movs	r0, #11
 80151a6:	4770      	bx	lr
 80151a8:	200b      	movs	r0, #11
 80151aa:	e7b5      	b.n	8015118 <rmw_validate_full_topic_name+0x28>
 80151ac:	2203      	movs	r2, #3
 80151ae:	602a      	str	r2, [r5, #0]
 80151b0:	2e00      	cmp	r6, #0
 80151b2:	d1f5      	bne.n	80151a0 <rmw_validate_full_topic_name+0xb0>
 80151b4:	e7b6      	b.n	8015124 <rmw_validate_full_topic_name+0x34>
 80151b6:	28f7      	cmp	r0, #247	; 0xf7
 80151b8:	d802      	bhi.n	80151c0 <rmw_validate_full_topic_name+0xd0>
 80151ba:	2000      	movs	r0, #0
 80151bc:	6028      	str	r0, [r5, #0]
 80151be:	e7ab      	b.n	8015118 <rmw_validate_full_topic_name+0x28>
 80151c0:	2307      	movs	r3, #7
 80151c2:	602b      	str	r3, [r5, #0]
 80151c4:	2e00      	cmp	r6, #0
 80151c6:	d0ad      	beq.n	8015124 <rmw_validate_full_topic_name+0x34>
 80151c8:	23f6      	movs	r3, #246	; 0xf6
 80151ca:	e7e9      	b.n	80151a0 <rmw_validate_full_topic_name+0xb0>
 80151cc:	2205      	movs	r2, #5
 80151ce:	602a      	str	r2, [r5, #0]
 80151d0:	2e00      	cmp	r6, #0
 80151d2:	d1e5      	bne.n	80151a0 <rmw_validate_full_topic_name+0xb0>
 80151d4:	e7a6      	b.n	8015124 <rmw_validate_full_topic_name+0x34>
 80151d6:	bf00      	nop
 80151d8:	0801afa5 	.word	0x0801afa5

080151dc <rmw_validate_namespace_with_size>:
 80151dc:	b340      	cbz	r0, 8015230 <rmw_validate_namespace_with_size+0x54>
 80151de:	b570      	push	{r4, r5, r6, lr}
 80151e0:	4614      	mov	r4, r2
 80151e2:	b0c2      	sub	sp, #264	; 0x108
 80151e4:	b332      	cbz	r2, 8015234 <rmw_validate_namespace_with_size+0x58>
 80151e6:	2901      	cmp	r1, #1
 80151e8:	460d      	mov	r5, r1
 80151ea:	461e      	mov	r6, r3
 80151ec:	d102      	bne.n	80151f4 <rmw_validate_namespace_with_size+0x18>
 80151ee:	7803      	ldrb	r3, [r0, #0]
 80151f0:	2b2f      	cmp	r3, #47	; 0x2f
 80151f2:	d012      	beq.n	801521a <rmw_validate_namespace_with_size+0x3e>
 80151f4:	aa01      	add	r2, sp, #4
 80151f6:	4669      	mov	r1, sp
 80151f8:	f7ff ff7a 	bl	80150f0 <rmw_validate_full_topic_name>
 80151fc:	b978      	cbnz	r0, 801521e <rmw_validate_namespace_with_size+0x42>
 80151fe:	9b00      	ldr	r3, [sp, #0]
 8015200:	b14b      	cbz	r3, 8015216 <rmw_validate_namespace_with_size+0x3a>
 8015202:	2b07      	cmp	r3, #7
 8015204:	d007      	beq.n	8015216 <rmw_validate_namespace_with_size+0x3a>
 8015206:	1e5a      	subs	r2, r3, #1
 8015208:	2a05      	cmp	r2, #5
 801520a:	d82b      	bhi.n	8015264 <rmw_validate_namespace_with_size+0x88>
 801520c:	e8df f002 	tbb	[pc, r2]
 8015210:	1e212427 	.word	0x1e212427
 8015214:	141b      	.short	0x141b
 8015216:	2df5      	cmp	r5, #245	; 0xf5
 8015218:	d803      	bhi.n	8015222 <rmw_validate_namespace_with_size+0x46>
 801521a:	2000      	movs	r0, #0
 801521c:	6020      	str	r0, [r4, #0]
 801521e:	b042      	add	sp, #264	; 0x108
 8015220:	bd70      	pop	{r4, r5, r6, pc}
 8015222:	2307      	movs	r3, #7
 8015224:	6023      	str	r3, [r4, #0]
 8015226:	2e00      	cmp	r6, #0
 8015228:	d0f9      	beq.n	801521e <rmw_validate_namespace_with_size+0x42>
 801522a:	23f4      	movs	r3, #244	; 0xf4
 801522c:	6033      	str	r3, [r6, #0]
 801522e:	e7f6      	b.n	801521e <rmw_validate_namespace_with_size+0x42>
 8015230:	200b      	movs	r0, #11
 8015232:	4770      	bx	lr
 8015234:	200b      	movs	r0, #11
 8015236:	e7f2      	b.n	801521e <rmw_validate_namespace_with_size+0x42>
 8015238:	2306      	movs	r3, #6
 801523a:	6023      	str	r3, [r4, #0]
 801523c:	2e00      	cmp	r6, #0
 801523e:	d0ee      	beq.n	801521e <rmw_validate_namespace_with_size+0x42>
 8015240:	9b01      	ldr	r3, [sp, #4]
 8015242:	6033      	str	r3, [r6, #0]
 8015244:	e7eb      	b.n	801521e <rmw_validate_namespace_with_size+0x42>
 8015246:	2305      	movs	r3, #5
 8015248:	6023      	str	r3, [r4, #0]
 801524a:	e7f7      	b.n	801523c <rmw_validate_namespace_with_size+0x60>
 801524c:	2304      	movs	r3, #4
 801524e:	6023      	str	r3, [r4, #0]
 8015250:	e7f4      	b.n	801523c <rmw_validate_namespace_with_size+0x60>
 8015252:	2303      	movs	r3, #3
 8015254:	6023      	str	r3, [r4, #0]
 8015256:	e7f1      	b.n	801523c <rmw_validate_namespace_with_size+0x60>
 8015258:	2302      	movs	r3, #2
 801525a:	6023      	str	r3, [r4, #0]
 801525c:	e7ee      	b.n	801523c <rmw_validate_namespace_with_size+0x60>
 801525e:	2301      	movs	r3, #1
 8015260:	6023      	str	r3, [r4, #0]
 8015262:	e7eb      	b.n	801523c <rmw_validate_namespace_with_size+0x60>
 8015264:	4a03      	ldr	r2, [pc, #12]	; (8015274 <rmw_validate_namespace_with_size+0x98>)
 8015266:	f44f 7180 	mov.w	r1, #256	; 0x100
 801526a:	a802      	add	r0, sp, #8
 801526c:	f7ff fcda 	bl	8014c24 <rcutils_snprintf>
 8015270:	2001      	movs	r0, #1
 8015272:	e7d4      	b.n	801521e <rmw_validate_namespace_with_size+0x42>
 8015274:	0801aa34 	.word	0x0801aa34

08015278 <rmw_validate_namespace>:
 8015278:	b168      	cbz	r0, 8015296 <rmw_validate_namespace+0x1e>
 801527a:	b570      	push	{r4, r5, r6, lr}
 801527c:	460d      	mov	r5, r1
 801527e:	4616      	mov	r6, r2
 8015280:	4604      	mov	r4, r0
 8015282:	f7ea ffaf 	bl	80001e4 <strlen>
 8015286:	4633      	mov	r3, r6
 8015288:	4601      	mov	r1, r0
 801528a:	462a      	mov	r2, r5
 801528c:	4620      	mov	r0, r4
 801528e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015292:	f7ff bfa3 	b.w	80151dc <rmw_validate_namespace_with_size>
 8015296:	200b      	movs	r0, #11
 8015298:	4770      	bx	lr
 801529a:	bf00      	nop

0801529c <rmw_namespace_validation_result_string>:
 801529c:	2807      	cmp	r0, #7
 801529e:	bf9a      	itte	ls
 80152a0:	4b02      	ldrls	r3, [pc, #8]	; (80152ac <rmw_namespace_validation_result_string+0x10>)
 80152a2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80152a6:	4802      	ldrhi	r0, [pc, #8]	; (80152b0 <rmw_namespace_validation_result_string+0x14>)
 80152a8:	4770      	bx	lr
 80152aa:	bf00      	nop
 80152ac:	0801ac2c 	.word	0x0801ac2c
 80152b0:	0801aa84 	.word	0x0801aa84

080152b4 <rmw_validate_node_name>:
 80152b4:	2800      	cmp	r0, #0
 80152b6:	d03b      	beq.n	8015330 <rmw_validate_node_name+0x7c>
 80152b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152bc:	460d      	mov	r5, r1
 80152be:	2900      	cmp	r1, #0
 80152c0:	d038      	beq.n	8015334 <rmw_validate_node_name+0x80>
 80152c2:	4616      	mov	r6, r2
 80152c4:	4604      	mov	r4, r0
 80152c6:	f7ea ff8d 	bl	80001e4 <strlen>
 80152ca:	b1e0      	cbz	r0, 8015306 <rmw_validate_node_name+0x52>
 80152cc:	1e63      	subs	r3, r4, #1
 80152ce:	eb03 0800 	add.w	r8, r3, r0
 80152d2:	f1c4 0101 	rsb	r1, r4, #1
 80152d6:	18cf      	adds	r7, r1, r3
 80152d8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80152dc:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80152e0:	f02e 0c20 	bic.w	ip, lr, #32
 80152e4:	2a09      	cmp	r2, #9
 80152e6:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80152ea:	d914      	bls.n	8015316 <rmw_validate_node_name+0x62>
 80152ec:	f1bc 0f19 	cmp.w	ip, #25
 80152f0:	d911      	bls.n	8015316 <rmw_validate_node_name+0x62>
 80152f2:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80152f6:	d00e      	beq.n	8015316 <rmw_validate_node_name+0x62>
 80152f8:	2302      	movs	r3, #2
 80152fa:	602b      	str	r3, [r5, #0]
 80152fc:	b106      	cbz	r6, 8015300 <rmw_validate_node_name+0x4c>
 80152fe:	6037      	str	r7, [r6, #0]
 8015300:	2000      	movs	r0, #0
 8015302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015306:	2301      	movs	r3, #1
 8015308:	602b      	str	r3, [r5, #0]
 801530a:	2e00      	cmp	r6, #0
 801530c:	d0f8      	beq.n	8015300 <rmw_validate_node_name+0x4c>
 801530e:	2000      	movs	r0, #0
 8015310:	6030      	str	r0, [r6, #0]
 8015312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015316:	4543      	cmp	r3, r8
 8015318:	d1dd      	bne.n	80152d6 <rmw_validate_node_name+0x22>
 801531a:	7822      	ldrb	r2, [r4, #0]
 801531c:	4b0d      	ldr	r3, [pc, #52]	; (8015354 <rmw_validate_node_name+0xa0>)
 801531e:	5cd3      	ldrb	r3, [r2, r3]
 8015320:	f013 0304 	ands.w	r3, r3, #4
 8015324:	d110      	bne.n	8015348 <rmw_validate_node_name+0x94>
 8015326:	28ff      	cmp	r0, #255	; 0xff
 8015328:	d806      	bhi.n	8015338 <rmw_validate_node_name+0x84>
 801532a:	602b      	str	r3, [r5, #0]
 801532c:	4618      	mov	r0, r3
 801532e:	e7e8      	b.n	8015302 <rmw_validate_node_name+0x4e>
 8015330:	200b      	movs	r0, #11
 8015332:	4770      	bx	lr
 8015334:	200b      	movs	r0, #11
 8015336:	e7e4      	b.n	8015302 <rmw_validate_node_name+0x4e>
 8015338:	2204      	movs	r2, #4
 801533a:	602a      	str	r2, [r5, #0]
 801533c:	2e00      	cmp	r6, #0
 801533e:	d0df      	beq.n	8015300 <rmw_validate_node_name+0x4c>
 8015340:	22fe      	movs	r2, #254	; 0xfe
 8015342:	6032      	str	r2, [r6, #0]
 8015344:	4618      	mov	r0, r3
 8015346:	e7dc      	b.n	8015302 <rmw_validate_node_name+0x4e>
 8015348:	2303      	movs	r3, #3
 801534a:	602b      	str	r3, [r5, #0]
 801534c:	2e00      	cmp	r6, #0
 801534e:	d1de      	bne.n	801530e <rmw_validate_node_name+0x5a>
 8015350:	e7d6      	b.n	8015300 <rmw_validate_node_name+0x4c>
 8015352:	bf00      	nop
 8015354:	0801afa5 	.word	0x0801afa5

08015358 <rmw_node_name_validation_result_string>:
 8015358:	2804      	cmp	r0, #4
 801535a:	bf9a      	itte	ls
 801535c:	4b02      	ldrls	r3, [pc, #8]	; (8015368 <rmw_node_name_validation_result_string+0x10>)
 801535e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015362:	4802      	ldrhi	r0, [pc, #8]	; (801536c <rmw_node_name_validation_result_string+0x14>)
 8015364:	4770      	bx	lr
 8015366:	bf00      	nop
 8015368:	0801ad38 	.word	0x0801ad38
 801536c:	0801ac4c 	.word	0x0801ac4c

08015370 <get_memory>:
 8015370:	4603      	mov	r3, r0
 8015372:	6840      	ldr	r0, [r0, #4]
 8015374:	b158      	cbz	r0, 801538e <get_memory+0x1e>
 8015376:	6842      	ldr	r2, [r0, #4]
 8015378:	605a      	str	r2, [r3, #4]
 801537a:	b10a      	cbz	r2, 8015380 <get_memory+0x10>
 801537c:	2100      	movs	r1, #0
 801537e:	6011      	str	r1, [r2, #0]
 8015380:	681a      	ldr	r2, [r3, #0]
 8015382:	6042      	str	r2, [r0, #4]
 8015384:	b102      	cbz	r2, 8015388 <get_memory+0x18>
 8015386:	6010      	str	r0, [r2, #0]
 8015388:	2200      	movs	r2, #0
 801538a:	6002      	str	r2, [r0, #0]
 801538c:	6018      	str	r0, [r3, #0]
 801538e:	4770      	bx	lr

08015390 <put_memory>:
 8015390:	680b      	ldr	r3, [r1, #0]
 8015392:	b10b      	cbz	r3, 8015398 <put_memory+0x8>
 8015394:	684a      	ldr	r2, [r1, #4]
 8015396:	605a      	str	r2, [r3, #4]
 8015398:	684a      	ldr	r2, [r1, #4]
 801539a:	b102      	cbz	r2, 801539e <put_memory+0xe>
 801539c:	6013      	str	r3, [r2, #0]
 801539e:	6803      	ldr	r3, [r0, #0]
 80153a0:	428b      	cmp	r3, r1
 80153a2:	6843      	ldr	r3, [r0, #4]
 80153a4:	bf08      	it	eq
 80153a6:	6002      	streq	r2, [r0, #0]
 80153a8:	604b      	str	r3, [r1, #4]
 80153aa:	b103      	cbz	r3, 80153ae <put_memory+0x1e>
 80153ac:	6019      	str	r1, [r3, #0]
 80153ae:	2300      	movs	r3, #0
 80153b0:	600b      	str	r3, [r1, #0]
 80153b2:	6041      	str	r1, [r0, #4]
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop

080153b8 <rmw_destroy_client>:
 80153b8:	b570      	push	{r4, r5, r6, lr}
 80153ba:	b128      	cbz	r0, 80153c8 <rmw_destroy_client+0x10>
 80153bc:	4604      	mov	r4, r0
 80153be:	6800      	ldr	r0, [r0, #0]
 80153c0:	460d      	mov	r5, r1
 80153c2:	f7f9 fdbf 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 80153c6:	b910      	cbnz	r0, 80153ce <rmw_destroy_client+0x16>
 80153c8:	2401      	movs	r4, #1
 80153ca:	4620      	mov	r0, r4
 80153cc:	bd70      	pop	{r4, r5, r6, pc}
 80153ce:	6863      	ldr	r3, [r4, #4]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d0f9      	beq.n	80153c8 <rmw_destroy_client+0x10>
 80153d4:	2d00      	cmp	r5, #0
 80153d6:	d0f7      	beq.n	80153c8 <rmw_destroy_client+0x10>
 80153d8:	6828      	ldr	r0, [r5, #0]
 80153da:	f7f9 fdb3 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 80153de:	2800      	cmp	r0, #0
 80153e0:	d0f2      	beq.n	80153c8 <rmw_destroy_client+0x10>
 80153e2:	686e      	ldr	r6, [r5, #4]
 80153e4:	2e00      	cmp	r6, #0
 80153e6:	d0ef      	beq.n	80153c8 <rmw_destroy_client+0x10>
 80153e8:	6864      	ldr	r4, [r4, #4]
 80153ea:	6932      	ldr	r2, [r6, #16]
 80153ec:	6920      	ldr	r0, [r4, #16]
 80153ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80153f2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80153f6:	6819      	ldr	r1, [r3, #0]
 80153f8:	f002 f8ec 	bl	80175d4 <uxr_buffer_cancel_data>
 80153fc:	4602      	mov	r2, r0
 80153fe:	6920      	ldr	r0, [r4, #16]
 8015400:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015404:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015408:	f7f9 fd1c 	bl	800ee44 <run_xrce_session>
 801540c:	6920      	ldr	r0, [r4, #16]
 801540e:	6932      	ldr	r2, [r6, #16]
 8015410:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015414:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015418:	6819      	ldr	r1, [r3, #0]
 801541a:	f7f9 fe69 	bl	800f0f0 <uxr_buffer_delete_entity>
 801541e:	4602      	mov	r2, r0
 8015420:	6920      	ldr	r0, [r4, #16]
 8015422:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015426:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801542a:	f7f9 fd0b 	bl	800ee44 <run_xrce_session>
 801542e:	2800      	cmp	r0, #0
 8015430:	4628      	mov	r0, r5
 8015432:	bf14      	ite	ne
 8015434:	2400      	movne	r4, #0
 8015436:	2402      	moveq	r4, #2
 8015438:	f7f9 fbec 	bl	800ec14 <rmw_uxrce_fini_client_memory>
 801543c:	e7c5      	b.n	80153ca <rmw_destroy_client+0x12>
 801543e:	bf00      	nop

08015440 <rmw_get_implementation_identifier>:
 8015440:	4b01      	ldr	r3, [pc, #4]	; (8015448 <rmw_get_implementation_identifier+0x8>)
 8015442:	6818      	ldr	r0, [r3, #0]
 8015444:	4770      	bx	lr
 8015446:	bf00      	nop
 8015448:	0801ad64 	.word	0x0801ad64

0801544c <rmw_init_options_init>:
 801544c:	b084      	sub	sp, #16
 801544e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015450:	b083      	sub	sp, #12
 8015452:	ad09      	add	r5, sp, #36	; 0x24
 8015454:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015458:	b130      	cbz	r0, 8015468 <rmw_init_options_init+0x1c>
 801545a:	4604      	mov	r4, r0
 801545c:	4628      	mov	r0, r5
 801545e:	f7f8 ffcb 	bl	800e3f8 <rcutils_allocator_is_valid>
 8015462:	b108      	cbz	r0, 8015468 <rmw_init_options_init+0x1c>
 8015464:	68a6      	ldr	r6, [r4, #8]
 8015466:	b12e      	cbz	r6, 8015474 <rmw_init_options_init+0x28>
 8015468:	200b      	movs	r0, #11
 801546a:	b003      	add	sp, #12
 801546c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015470:	b004      	add	sp, #16
 8015472:	4770      	bx	lr
 8015474:	2200      	movs	r2, #0
 8015476:	2300      	movs	r3, #0
 8015478:	e9c4 2300 	strd	r2, r3, [r4]
 801547c:	4b22      	ldr	r3, [pc, #136]	; (8015508 <rmw_init_options_init+0xbc>)
 801547e:	f8df e098 	ldr.w	lr, [pc, #152]	; 8015518 <rmw_init_options_init+0xcc>
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	60a3      	str	r3, [r4, #8]
 8015486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015488:	f104 0c20 	add.w	ip, r4, #32
 801548c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015490:	466f      	mov	r7, sp
 8015492:	682b      	ldr	r3, [r5, #0]
 8015494:	f8cc 3000 	str.w	r3, [ip]
 8015498:	4638      	mov	r0, r7
 801549a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801549e:	60e6      	str	r6, [r4, #12]
 80154a0:	f7ff fd76 	bl	8014f90 <rmw_get_default_security_options>
 80154a4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80154a8:	f104 0310 	add.w	r3, r4, #16
 80154ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80154b0:	2203      	movs	r2, #3
 80154b2:	4816      	ldr	r0, [pc, #88]	; (801550c <rmw_init_options_init+0xc0>)
 80154b4:	4916      	ldr	r1, [pc, #88]	; (8015510 <rmw_init_options_init+0xc4>)
 80154b6:	7626      	strb	r6, [r4, #24]
 80154b8:	f7f9 faec 	bl	800ea94 <rmw_uxrce_init_init_options_impl_memory>
 80154bc:	4813      	ldr	r0, [pc, #76]	; (801550c <rmw_init_options_init+0xc0>)
 80154be:	f7ff ff57 	bl	8015370 <get_memory>
 80154c2:	b1f0      	cbz	r0, 8015502 <rmw_init_options_init+0xb6>
 80154c4:	4a13      	ldr	r2, [pc, #76]	; (8015514 <rmw_init_options_init+0xc8>)
 80154c6:	6883      	ldr	r3, [r0, #8]
 80154c8:	6851      	ldr	r1, [r2, #4]
 80154ca:	7810      	ldrb	r0, [r2, #0]
 80154cc:	6363      	str	r3, [r4, #52]	; 0x34
 80154ce:	7418      	strb	r0, [r3, #16]
 80154d0:	6159      	str	r1, [r3, #20]
 80154d2:	68d1      	ldr	r1, [r2, #12]
 80154d4:	61d9      	str	r1, [r3, #28]
 80154d6:	6911      	ldr	r1, [r2, #16]
 80154d8:	6219      	str	r1, [r3, #32]
 80154da:	6951      	ldr	r1, [r2, #20]
 80154dc:	6892      	ldr	r2, [r2, #8]
 80154de:	619a      	str	r2, [r3, #24]
 80154e0:	6259      	str	r1, [r3, #36]	; 0x24
 80154e2:	f7f7 ff23 	bl	800d32c <uxr_nanos>
 80154e6:	f003 fc09 	bl	8018cfc <srand>
 80154ea:	f003 fc35 	bl	8018d58 <rand>
 80154ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80154f0:	6298      	str	r0, [r3, #40]	; 0x28
 80154f2:	2800      	cmp	r0, #0
 80154f4:	d0f9      	beq.n	80154ea <rmw_init_options_init+0x9e>
 80154f6:	2000      	movs	r0, #0
 80154f8:	b003      	add	sp, #12
 80154fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80154fe:	b004      	add	sp, #16
 8015500:	4770      	bx	lr
 8015502:	2001      	movs	r0, #1
 8015504:	e7b1      	b.n	801546a <rmw_init_options_init+0x1e>
 8015506:	bf00      	nop
 8015508:	0801ad64 	.word	0x0801ad64
 801550c:	2000dd24 	.word	0x2000dd24
 8015510:	200095c0 	.word	0x200095c0
 8015514:	2000944c 	.word	0x2000944c
 8015518:	0801a7cc 	.word	0x0801a7cc

0801551c <rmw_init_options_copy>:
 801551c:	b570      	push	{r4, r5, r6, lr}
 801551e:	b158      	cbz	r0, 8015538 <rmw_init_options_copy+0x1c>
 8015520:	460d      	mov	r5, r1
 8015522:	b149      	cbz	r1, 8015538 <rmw_init_options_copy+0x1c>
 8015524:	4604      	mov	r4, r0
 8015526:	6880      	ldr	r0, [r0, #8]
 8015528:	b120      	cbz	r0, 8015534 <rmw_init_options_copy+0x18>
 801552a:	4b1e      	ldr	r3, [pc, #120]	; (80155a4 <rmw_init_options_copy+0x88>)
 801552c:	6819      	ldr	r1, [r3, #0]
 801552e:	f7ea fe4f 	bl	80001d0 <strcmp>
 8015532:	bb90      	cbnz	r0, 801559a <rmw_init_options_copy+0x7e>
 8015534:	68ab      	ldr	r3, [r5, #8]
 8015536:	b113      	cbz	r3, 801553e <rmw_init_options_copy+0x22>
 8015538:	250b      	movs	r5, #11
 801553a:	4628      	mov	r0, r5
 801553c:	bd70      	pop	{r4, r5, r6, pc}
 801553e:	4623      	mov	r3, r4
 8015540:	462a      	mov	r2, r5
 8015542:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8015546:	f8d3 c000 	ldr.w	ip, [r3]
 801554a:	6858      	ldr	r0, [r3, #4]
 801554c:	6899      	ldr	r1, [r3, #8]
 801554e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8015552:	f8c2 e00c 	str.w	lr, [r2, #12]
 8015556:	3310      	adds	r3, #16
 8015558:	42b3      	cmp	r3, r6
 801555a:	f8c2 c000 	str.w	ip, [r2]
 801555e:	6050      	str	r0, [r2, #4]
 8015560:	6091      	str	r1, [r2, #8]
 8015562:	f102 0210 	add.w	r2, r2, #16
 8015566:	d1ee      	bne.n	8015546 <rmw_init_options_copy+0x2a>
 8015568:	6819      	ldr	r1, [r3, #0]
 801556a:	685b      	ldr	r3, [r3, #4]
 801556c:	480e      	ldr	r0, [pc, #56]	; (80155a8 <rmw_init_options_copy+0x8c>)
 801556e:	6053      	str	r3, [r2, #4]
 8015570:	6011      	str	r1, [r2, #0]
 8015572:	f7ff fefd 	bl	8015370 <get_memory>
 8015576:	b198      	cbz	r0, 80155a0 <rmw_init_options_copy+0x84>
 8015578:	6883      	ldr	r3, [r0, #8]
 801557a:	636b      	str	r3, [r5, #52]	; 0x34
 801557c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801557e:	f102 0c10 	add.w	ip, r2, #16
 8015582:	f103 0410 	add.w	r4, r3, #16
 8015586:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801558a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801558c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8015590:	2500      	movs	r5, #0
 8015592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015596:	4628      	mov	r0, r5
 8015598:	bd70      	pop	{r4, r5, r6, pc}
 801559a:	250c      	movs	r5, #12
 801559c:	4628      	mov	r0, r5
 801559e:	bd70      	pop	{r4, r5, r6, pc}
 80155a0:	2501      	movs	r5, #1
 80155a2:	e7ca      	b.n	801553a <rmw_init_options_copy+0x1e>
 80155a4:	0801ad64 	.word	0x0801ad64
 80155a8:	2000dd24 	.word	0x2000dd24

080155ac <rmw_init_options_fini>:
 80155ac:	2800      	cmp	r0, #0
 80155ae:	d03d      	beq.n	801562c <rmw_init_options_fini+0x80>
 80155b0:	b510      	push	{r4, lr}
 80155b2:	4604      	mov	r4, r0
 80155b4:	b08e      	sub	sp, #56	; 0x38
 80155b6:	3020      	adds	r0, #32
 80155b8:	f7f8 ff1e 	bl	800e3f8 <rcutils_allocator_is_valid>
 80155bc:	b360      	cbz	r0, 8015618 <rmw_init_options_fini+0x6c>
 80155be:	68a0      	ldr	r0, [r4, #8]
 80155c0:	b120      	cbz	r0, 80155cc <rmw_init_options_fini+0x20>
 80155c2:	4b1c      	ldr	r3, [pc, #112]	; (8015634 <rmw_init_options_fini+0x88>)
 80155c4:	6819      	ldr	r1, [r3, #0]
 80155c6:	f7ea fe03 	bl	80001d0 <strcmp>
 80155ca:	bb68      	cbnz	r0, 8015628 <rmw_init_options_fini+0x7c>
 80155cc:	4b1a      	ldr	r3, [pc, #104]	; (8015638 <rmw_init_options_fini+0x8c>)
 80155ce:	6819      	ldr	r1, [r3, #0]
 80155d0:	b331      	cbz	r1, 8015620 <rmw_init_options_fini+0x74>
 80155d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80155d4:	e001      	b.n	80155da <rmw_init_options_fini+0x2e>
 80155d6:	6849      	ldr	r1, [r1, #4]
 80155d8:	b311      	cbz	r1, 8015620 <rmw_init_options_fini+0x74>
 80155da:	688b      	ldr	r3, [r1, #8]
 80155dc:	429a      	cmp	r2, r3
 80155de:	d1fa      	bne.n	80155d6 <rmw_init_options_fini+0x2a>
 80155e0:	4815      	ldr	r0, [pc, #84]	; (8015638 <rmw_init_options_fini+0x8c>)
 80155e2:	f7ff fed5 	bl	8015390 <put_memory>
 80155e6:	4668      	mov	r0, sp
 80155e8:	f7ff fcc2 	bl	8014f70 <rmw_get_zero_initialized_init_options>
 80155ec:	46ee      	mov	lr, sp
 80155ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155f2:	46a4      	mov	ip, r4
 80155f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015600:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015604:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015608:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801560c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015610:	2300      	movs	r3, #0
 8015612:	4618      	mov	r0, r3
 8015614:	b00e      	add	sp, #56	; 0x38
 8015616:	bd10      	pop	{r4, pc}
 8015618:	230b      	movs	r3, #11
 801561a:	4618      	mov	r0, r3
 801561c:	b00e      	add	sp, #56	; 0x38
 801561e:	bd10      	pop	{r4, pc}
 8015620:	2301      	movs	r3, #1
 8015622:	4618      	mov	r0, r3
 8015624:	b00e      	add	sp, #56	; 0x38
 8015626:	bd10      	pop	{r4, pc}
 8015628:	230c      	movs	r3, #12
 801562a:	e7f2      	b.n	8015612 <rmw_init_options_fini+0x66>
 801562c:	230b      	movs	r3, #11
 801562e:	4618      	mov	r0, r3
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop
 8015634:	0801ad64 	.word	0x0801ad64
 8015638:	2000dd24 	.word	0x2000dd24

0801563c <rmw_init>:
 801563c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015640:	b083      	sub	sp, #12
 8015642:	2800      	cmp	r0, #0
 8015644:	f000 80d3 	beq.w	80157ee <rmw_init+0x1b2>
 8015648:	460e      	mov	r6, r1
 801564a:	2900      	cmp	r1, #0
 801564c:	f000 80cf 	beq.w	80157ee <rmw_init+0x1b2>
 8015650:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015652:	4605      	mov	r5, r0
 8015654:	2b00      	cmp	r3, #0
 8015656:	f000 80ca 	beq.w	80157ee <rmw_init+0x1b2>
 801565a:	4b78      	ldr	r3, [pc, #480]	; (801583c <rmw_init+0x200>)
 801565c:	6880      	ldr	r0, [r0, #8]
 801565e:	681f      	ldr	r7, [r3, #0]
 8015660:	b128      	cbz	r0, 801566e <rmw_init+0x32>
 8015662:	4639      	mov	r1, r7
 8015664:	f7ea fdb4 	bl	80001d0 <strcmp>
 8015668:	2800      	cmp	r0, #0
 801566a:	f040 80ca 	bne.w	8015802 <rmw_init+0x1c6>
 801566e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015672:	4c73      	ldr	r4, [pc, #460]	; (8015840 <rmw_init+0x204>)
 8015674:	4973      	ldr	r1, [pc, #460]	; (8015844 <rmw_init+0x208>)
 8015676:	4874      	ldr	r0, [pc, #464]	; (8015848 <rmw_init+0x20c>)
 8015678:	60b7      	str	r7, [r6, #8]
 801567a:	e9c6 2300 	strd	r2, r3, [r6]
 801567e:	68eb      	ldr	r3, [r5, #12]
 8015680:	64b3      	str	r3, [r6, #72]	; 0x48
 8015682:	2201      	movs	r2, #1
 8015684:	f7f9 f9a6 	bl	800e9d4 <rmw_uxrce_init_session_memory>
 8015688:	4620      	mov	r0, r4
 801568a:	4970      	ldr	r1, [pc, #448]	; (801584c <rmw_init+0x210>)
 801568c:	2204      	movs	r2, #4
 801568e:	f7f9 f9e1 	bl	800ea54 <rmw_uxrce_init_static_input_buffer_memory>
 8015692:	f04f 0800 	mov.w	r8, #0
 8015696:	486c      	ldr	r0, [pc, #432]	; (8015848 <rmw_init+0x20c>)
 8015698:	f884 800d 	strb.w	r8, [r4, #13]
 801569c:	f7ff fe68 	bl	8015370 <get_memory>
 80156a0:	2800      	cmp	r0, #0
 80156a2:	f000 80a9 	beq.w	80157f8 <rmw_init+0x1bc>
 80156a6:	6884      	ldr	r4, [r0, #8]
 80156a8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80156aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80156ac:	f890 c010 	ldrb.w	ip, [r0, #16]
 80156b0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80156b4:	9101      	str	r1, [sp, #4]
 80156b6:	6a00      	ldr	r0, [r0, #32]
 80156b8:	9000      	str	r0, [sp, #0]
 80156ba:	f104 0910 	add.w	r9, r4, #16
 80156be:	4661      	mov	r1, ip
 80156c0:	4648      	mov	r0, r9
 80156c2:	f001 f9bf 	bl	8016a44 <uxr_set_custom_transport_callbacks>
 80156c6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80156ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80156ce:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80156d2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80156d6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80156da:	495d      	ldr	r1, [pc, #372]	; (8015850 <rmw_init+0x214>)
 80156dc:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80156e0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80156e4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80156e8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80156ec:	4859      	ldr	r0, [pc, #356]	; (8015854 <rmw_init+0x218>)
 80156ee:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80156f2:	2201      	movs	r2, #1
 80156f4:	64f4      	str	r4, [r6, #76]	; 0x4c
 80156f6:	f7f9 f94d 	bl	800e994 <rmw_uxrce_init_node_memory>
 80156fa:	4957      	ldr	r1, [pc, #348]	; (8015858 <rmw_init+0x21c>)
 80156fc:	4857      	ldr	r0, [pc, #348]	; (801585c <rmw_init+0x220>)
 80156fe:	2205      	movs	r2, #5
 8015700:	f7f9 f928 	bl	800e954 <rmw_uxrce_init_subscription_memory>
 8015704:	4956      	ldr	r1, [pc, #344]	; (8015860 <rmw_init+0x224>)
 8015706:	4857      	ldr	r0, [pc, #348]	; (8015864 <rmw_init+0x228>)
 8015708:	220a      	movs	r2, #10
 801570a:	f7f9 f903 	bl	800e914 <rmw_uxrce_init_publisher_memory>
 801570e:	4956      	ldr	r1, [pc, #344]	; (8015868 <rmw_init+0x22c>)
 8015710:	4856      	ldr	r0, [pc, #344]	; (801586c <rmw_init+0x230>)
 8015712:	2201      	movs	r2, #1
 8015714:	f7f9 f8be 	bl	800e894 <rmw_uxrce_init_service_memory>
 8015718:	4955      	ldr	r1, [pc, #340]	; (8015870 <rmw_init+0x234>)
 801571a:	4856      	ldr	r0, [pc, #344]	; (8015874 <rmw_init+0x238>)
 801571c:	2201      	movs	r2, #1
 801571e:	f7f9 f8d9 	bl	800e8d4 <rmw_uxrce_init_client_memory>
 8015722:	4955      	ldr	r1, [pc, #340]	; (8015878 <rmw_init+0x23c>)
 8015724:	4855      	ldr	r0, [pc, #340]	; (801587c <rmw_init+0x240>)
 8015726:	220f      	movs	r2, #15
 8015728:	f7f9 f974 	bl	800ea14 <rmw_uxrce_init_topic_memory>
 801572c:	4954      	ldr	r1, [pc, #336]	; (8015880 <rmw_init+0x244>)
 801572e:	4855      	ldr	r0, [pc, #340]	; (8015884 <rmw_init+0x248>)
 8015730:	2203      	movs	r2, #3
 8015732:	f7f9 f9af 	bl	800ea94 <rmw_uxrce_init_init_options_impl_memory>
 8015736:	4954      	ldr	r1, [pc, #336]	; (8015888 <rmw_init+0x24c>)
 8015738:	4854      	ldr	r0, [pc, #336]	; (801588c <rmw_init+0x250>)
 801573a:	2204      	movs	r2, #4
 801573c:	f7f9 f9ca 	bl	800ead4 <rmw_uxrce_init_wait_set_memory>
 8015740:	4953      	ldr	r1, [pc, #332]	; (8015890 <rmw_init+0x254>)
 8015742:	4854      	ldr	r0, [pc, #336]	; (8015894 <rmw_init+0x258>)
 8015744:	2204      	movs	r2, #4
 8015746:	f7f9 f9e5 	bl	800eb14 <rmw_uxrce_init_guard_condition_memory>
 801574a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801574c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801574e:	4642      	mov	r2, r8
 8015750:	f000 fd9e 	bl	8016290 <rmw_uxrce_transport_init>
 8015754:	4607      	mov	r7, r0
 8015756:	2800      	cmp	r0, #0
 8015758:	d158      	bne.n	801580c <rmw_init+0x1d0>
 801575a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801575c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8015760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015762:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8015766:	4628      	mov	r0, r5
 8015768:	f7f9 ff82 	bl	800f670 <uxr_init_session>
 801576c:	494a      	ldr	r1, [pc, #296]	; (8015898 <rmw_init+0x25c>)
 801576e:	4622      	mov	r2, r4
 8015770:	4628      	mov	r0, r5
 8015772:	f7f9 ffa1 	bl	800f6b8 <uxr_set_topic_callback>
 8015776:	4949      	ldr	r1, [pc, #292]	; (801589c <rmw_init+0x260>)
 8015778:	463a      	mov	r2, r7
 801577a:	4628      	mov	r0, r5
 801577c:	f7f9 ff98 	bl	800f6b0 <uxr_set_status_callback>
 8015780:	4947      	ldr	r1, [pc, #284]	; (80158a0 <rmw_init+0x264>)
 8015782:	463a      	mov	r2, r7
 8015784:	4628      	mov	r0, r5
 8015786:	f7f9 ff9b 	bl	800f6c0 <uxr_set_request_callback>
 801578a:	4946      	ldr	r1, [pc, #280]	; (80158a4 <rmw_init+0x268>)
 801578c:	463a      	mov	r2, r7
 801578e:	4628      	mov	r0, r5
 8015790:	f7f9 ff9a 	bl	800f6c8 <uxr_set_reply_callback>
 8015794:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015798:	2304      	movs	r3, #4
 801579a:	0092      	lsls	r2, r2, #2
 801579c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80157a0:	4628      	mov	r0, r5
 80157a2:	f7f9 ffcf 	bl	800f744 <uxr_create_input_reliable_stream>
 80157a6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80157aa:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80157ae:	0092      	lsls	r2, r2, #2
 80157b0:	2304      	movs	r3, #4
 80157b2:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80157b6:	4628      	mov	r0, r5
 80157b8:	f7f9 ff9c 	bl	800f6f4 <uxr_create_output_reliable_stream>
 80157bc:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 80157c0:	4628      	mov	r0, r5
 80157c2:	f7f9 ffb9 	bl	800f738 <uxr_create_input_best_effort_stream>
 80157c6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 80157ca:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80157ce:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80157d2:	3114      	adds	r1, #20
 80157d4:	4628      	mov	r0, r5
 80157d6:	f7f9 ff7b 	bl	800f6d0 <uxr_create_output_best_effort_stream>
 80157da:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 80157de:	4628      	mov	r0, r5
 80157e0:	f7fa fd06 	bl	80101f0 <uxr_create_session>
 80157e4:	b1f8      	cbz	r0, 8015826 <rmw_init+0x1ea>
 80157e6:	4638      	mov	r0, r7
 80157e8:	b003      	add	sp, #12
 80157ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157ee:	270b      	movs	r7, #11
 80157f0:	4638      	mov	r0, r7
 80157f2:	b003      	add	sp, #12
 80157f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157f8:	2701      	movs	r7, #1
 80157fa:	4638      	mov	r0, r7
 80157fc:	b003      	add	sp, #12
 80157fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015802:	270c      	movs	r7, #12
 8015804:	4638      	mov	r0, r7
 8015806:	b003      	add	sp, #12
 8015808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801580c:	4648      	mov	r0, r9
 801580e:	f001 f95b 	bl	8016ac8 <uxr_close_custom_transport>
 8015812:	480d      	ldr	r0, [pc, #52]	; (8015848 <rmw_init+0x20c>)
 8015814:	4621      	mov	r1, r4
 8015816:	f7ff fdbb 	bl	8015390 <put_memory>
 801581a:	4638      	mov	r0, r7
 801581c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015820:	b003      	add	sp, #12
 8015822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015826:	4648      	mov	r0, r9
 8015828:	f001 f94e 	bl	8016ac8 <uxr_close_custom_transport>
 801582c:	4806      	ldr	r0, [pc, #24]	; (8015848 <rmw_init+0x20c>)
 801582e:	4621      	mov	r1, r4
 8015830:	f7ff fdae 	bl	8015390 <put_memory>
 8015834:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015836:	2701      	movs	r7, #1
 8015838:	e7d5      	b.n	80157e6 <rmw_init+0x1aa>
 801583a:	bf00      	nop
 801583c:	0801ad64 	.word	0x0801ad64
 8015840:	2000dd74 	.word	0x2000dd74
 8015844:	2000a020 	.word	0x2000a020
 8015848:	2000dd64 	.word	0x2000dd64
 801584c:	2000b5c8 	.word	0x2000b5c8
 8015850:	20009644 	.word	0x20009644
 8015854:	2000dd34 	.word	0x2000dd34
 8015858:	2000d6c8 	.word	0x2000d6c8
 801585c:	2000dd84 	.word	0x2000dd84
 8015860:	200096e8 	.word	0x200096e8
 8015864:	2000dd44 	.word	0x2000dd44
 8015868:	20009f58 	.word	0x20009f58
 801586c:	2000dd54 	.word	0x2000dd54
 8015870:	20009478 	.word	0x20009478
 8015874:	20009468 	.word	0x20009468
 8015878:	2000db00 	.word	0x2000db00
 801587c:	2000dd94 	.word	0x2000dd94
 8015880:	200095c0 	.word	0x200095c0
 8015884:	2000dd24 	.word	0x2000dd24
 8015888:	2000dca4 	.word	0x2000dca4
 801588c:	2000dda4 	.word	0x2000dda4
 8015890:	20009540 	.word	0x20009540
 8015894:	2000dd14 	.word	0x2000dd14
 8015898:	080187b5 	.word	0x080187b5
 801589c:	080187ad 	.word	0x080187ad
 80158a0:	0801884d 	.word	0x0801884d
 80158a4:	080188e9 	.word	0x080188e9

080158a8 <rmw_context_fini>:
 80158a8:	4b17      	ldr	r3, [pc, #92]	; (8015908 <rmw_context_fini+0x60>)
 80158aa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80158ac:	b570      	push	{r4, r5, r6, lr}
 80158ae:	681c      	ldr	r4, [r3, #0]
 80158b0:	4605      	mov	r5, r0
 80158b2:	b334      	cbz	r4, 8015902 <rmw_context_fini+0x5a>
 80158b4:	2600      	movs	r6, #0
 80158b6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80158ba:	6902      	ldr	r2, [r0, #16]
 80158bc:	428a      	cmp	r2, r1
 80158be:	d018      	beq.n	80158f2 <rmw_context_fini+0x4a>
 80158c0:	2c00      	cmp	r4, #0
 80158c2:	d1f8      	bne.n	80158b6 <rmw_context_fini+0xe>
 80158c4:	b189      	cbz	r1, 80158ea <rmw_context_fini+0x42>
 80158c6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 80158ca:	789b      	ldrb	r3, [r3, #2]
 80158cc:	2b01      	cmp	r3, #1
 80158ce:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 80158d2:	bf14      	ite	ne
 80158d4:	210a      	movne	r1, #10
 80158d6:	2100      	moveq	r1, #0
 80158d8:	f7fa fc62 	bl	80101a0 <uxr_delete_session_retries>
 80158dc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80158de:	f7f9 f939 	bl	800eb54 <rmw_uxrce_fini_session_memory>
 80158e2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80158e4:	3010      	adds	r0, #16
 80158e6:	f001 f8ef 	bl	8016ac8 <uxr_close_custom_transport>
 80158ea:	2300      	movs	r3, #0
 80158ec:	64eb      	str	r3, [r5, #76]	; 0x4c
 80158ee:	4630      	mov	r0, r6
 80158f0:	bd70      	pop	{r4, r5, r6, pc}
 80158f2:	3018      	adds	r0, #24
 80158f4:	f000 f90e 	bl	8015b14 <rmw_destroy_node>
 80158f8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80158fa:	4606      	mov	r6, r0
 80158fc:	2c00      	cmp	r4, #0
 80158fe:	d1da      	bne.n	80158b6 <rmw_context_fini+0xe>
 8015900:	e7e0      	b.n	80158c4 <rmw_context_fini+0x1c>
 8015902:	4626      	mov	r6, r4
 8015904:	e7de      	b.n	80158c4 <rmw_context_fini+0x1c>
 8015906:	bf00      	nop
 8015908:	2000dd34 	.word	0x2000dd34

0801590c <create_topic>:
 801590c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015910:	4605      	mov	r5, r0
 8015912:	b084      	sub	sp, #16
 8015914:	4822      	ldr	r0, [pc, #136]	; (80159a0 <create_topic+0x94>)
 8015916:	460f      	mov	r7, r1
 8015918:	4616      	mov	r6, r2
 801591a:	f7ff fd29 	bl	8015370 <get_memory>
 801591e:	4604      	mov	r4, r0
 8015920:	2800      	cmp	r0, #0
 8015922:	d039      	beq.n	8015998 <create_topic+0x8c>
 8015924:	692b      	ldr	r3, [r5, #16]
 8015926:	6884      	ldr	r4, [r0, #8]
 8015928:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80159a8 <create_topic+0x9c>
 801592c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015930:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015934:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8015938:	1c42      	adds	r2, r0, #1
 801593a:	2102      	movs	r1, #2
 801593c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8015940:	f7f9 fdd8 	bl	800f4f4 <uxr_object_id>
 8015944:	223c      	movs	r2, #60	; 0x3c
 8015946:	6120      	str	r0, [r4, #16]
 8015948:	4641      	mov	r1, r8
 801594a:	4638      	mov	r0, r7
 801594c:	f7f9 fae0 	bl	800ef10 <generate_topic_name>
 8015950:	b1f0      	cbz	r0, 8015990 <create_topic+0x84>
 8015952:	4f14      	ldr	r7, [pc, #80]	; (80159a4 <create_topic+0x98>)
 8015954:	4630      	mov	r0, r6
 8015956:	2264      	movs	r2, #100	; 0x64
 8015958:	4639      	mov	r1, r7
 801595a:	f7f9 faa9 	bl	800eeb0 <generate_type_name>
 801595e:	b1b8      	cbz	r0, 8015990 <create_topic+0x84>
 8015960:	6928      	ldr	r0, [r5, #16]
 8015962:	2306      	movs	r3, #6
 8015964:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015968:	f8cd 8000 	str.w	r8, [sp]
 801596c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015970:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015974:	6811      	ldr	r1, [r2, #0]
 8015976:	696b      	ldr	r3, [r5, #20]
 8015978:	6922      	ldr	r2, [r4, #16]
 801597a:	f7f9 fc37 	bl	800f1ec <uxr_buffer_create_topic_bin>
 801597e:	4602      	mov	r2, r0
 8015980:	6928      	ldr	r0, [r5, #16]
 8015982:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015986:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801598a:	f7f9 fa5b 	bl	800ee44 <run_xrce_session>
 801598e:	b918      	cbnz	r0, 8015998 <create_topic+0x8c>
 8015990:	4620      	mov	r0, r4
 8015992:	f7f9 f955 	bl	800ec40 <rmw_uxrce_fini_topic_memory>
 8015996:	2400      	movs	r4, #0
 8015998:	4620      	mov	r0, r4
 801599a:	b004      	add	sp, #16
 801599c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159a0:	2000dd94 	.word	0x2000dd94
 80159a4:	2000de80 	.word	0x2000de80
 80159a8:	2000de44 	.word	0x2000de44

080159ac <destroy_topic>:
 80159ac:	b538      	push	{r3, r4, r5, lr}
 80159ae:	6985      	ldr	r5, [r0, #24]
 80159b0:	b1d5      	cbz	r5, 80159e8 <destroy_topic+0x3c>
 80159b2:	4604      	mov	r4, r0
 80159b4:	6928      	ldr	r0, [r5, #16]
 80159b6:	6922      	ldr	r2, [r4, #16]
 80159b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80159bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80159c0:	6819      	ldr	r1, [r3, #0]
 80159c2:	f7f9 fb95 	bl	800f0f0 <uxr_buffer_delete_entity>
 80159c6:	4602      	mov	r2, r0
 80159c8:	6928      	ldr	r0, [r5, #16]
 80159ca:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80159ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80159d2:	f7f9 fa37 	bl	800ee44 <run_xrce_session>
 80159d6:	2800      	cmp	r0, #0
 80159d8:	4620      	mov	r0, r4
 80159da:	bf14      	ite	ne
 80159dc:	2400      	movne	r4, #0
 80159de:	2402      	moveq	r4, #2
 80159e0:	f7f9 f92e 	bl	800ec40 <rmw_uxrce_fini_topic_memory>
 80159e4:	4620      	mov	r0, r4
 80159e6:	bd38      	pop	{r3, r4, r5, pc}
 80159e8:	2401      	movs	r4, #1
 80159ea:	4620      	mov	r0, r4
 80159ec:	bd38      	pop	{r3, r4, r5, pc}
 80159ee:	bf00      	nop

080159f0 <create_node>:
 80159f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159f4:	b083      	sub	sp, #12
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d05f      	beq.n	8015aba <create_node+0xca>
 80159fa:	4606      	mov	r6, r0
 80159fc:	4835      	ldr	r0, [pc, #212]	; (8015ad4 <create_node+0xe4>)
 80159fe:	460f      	mov	r7, r1
 8015a00:	4690      	mov	r8, r2
 8015a02:	461d      	mov	r5, r3
 8015a04:	f7ff fcb4 	bl	8015370 <get_memory>
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	d056      	beq.n	8015aba <create_node+0xca>
 8015a0c:	6884      	ldr	r4, [r0, #8]
 8015a0e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015a10:	6123      	str	r3, [r4, #16]
 8015a12:	f7ff fd15 	bl	8015440 <rmw_get_implementation_identifier>
 8015a16:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015a1a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015a1e:	f8c4 9020 	str.w	r9, [r4, #32]
 8015a22:	4630      	mov	r0, r6
 8015a24:	f7ea fbde 	bl	80001e4 <strlen>
 8015a28:	1c42      	adds	r2, r0, #1
 8015a2a:	2a3c      	cmp	r2, #60	; 0x3c
 8015a2c:	f104 0518 	add.w	r5, r4, #24
 8015a30:	d840      	bhi.n	8015ab4 <create_node+0xc4>
 8015a32:	4648      	mov	r0, r9
 8015a34:	4631      	mov	r1, r6
 8015a36:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015a3a:	f003 f85d 	bl	8018af8 <memcpy>
 8015a3e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015a42:	4638      	mov	r0, r7
 8015a44:	f7ea fbce 	bl	80001e4 <strlen>
 8015a48:	1c42      	adds	r2, r0, #1
 8015a4a:	2a3c      	cmp	r2, #60	; 0x3c
 8015a4c:	d832      	bhi.n	8015ab4 <create_node+0xc4>
 8015a4e:	4639      	mov	r1, r7
 8015a50:	4648      	mov	r0, r9
 8015a52:	f003 f851 	bl	8018af8 <memcpy>
 8015a56:	6923      	ldr	r3, [r4, #16]
 8015a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015a5c:	2101      	movs	r1, #1
 8015a5e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015a62:	1842      	adds	r2, r0, r1
 8015a64:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015a68:	f7f9 fd44 	bl	800f4f4 <uxr_object_id>
 8015a6c:	6160      	str	r0, [r4, #20]
 8015a6e:	783b      	ldrb	r3, [r7, #0]
 8015a70:	2b2f      	cmp	r3, #47	; 0x2f
 8015a72:	d127      	bne.n	8015ac4 <create_node+0xd4>
 8015a74:	787b      	ldrb	r3, [r7, #1]
 8015a76:	bb2b      	cbnz	r3, 8015ac4 <create_node+0xd4>
 8015a78:	4a17      	ldr	r2, [pc, #92]	; (8015ad8 <create_node+0xe8>)
 8015a7a:	4818      	ldr	r0, [pc, #96]	; (8015adc <create_node+0xec>)
 8015a7c:	4633      	mov	r3, r6
 8015a7e:	213c      	movs	r1, #60	; 0x3c
 8015a80:	f003 f9c2 	bl	8018e08 <sniprintf>
 8015a84:	6920      	ldr	r0, [r4, #16]
 8015a86:	4915      	ldr	r1, [pc, #84]	; (8015adc <create_node+0xec>)
 8015a88:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015a8c:	9100      	str	r1, [sp, #0]
 8015a8e:	2106      	movs	r1, #6
 8015a90:	9101      	str	r1, [sp, #4]
 8015a92:	6811      	ldr	r1, [r2, #0]
 8015a94:	6962      	ldr	r2, [r4, #20]
 8015a96:	fa1f f388 	uxth.w	r3, r8
 8015a9a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015a9e:	f7f9 fb73 	bl	800f188 <uxr_buffer_create_participant_bin>
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	6920      	ldr	r0, [r4, #16]
 8015aa6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015aaa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015aae:	f7f9 f9c9 	bl	800ee44 <run_xrce_session>
 8015ab2:	b918      	cbnz	r0, 8015abc <create_node+0xcc>
 8015ab4:	4628      	mov	r0, r5
 8015ab6:	f7f9 f853 	bl	800eb60 <rmw_uxrce_fini_node_memory>
 8015aba:	2500      	movs	r5, #0
 8015abc:	4628      	mov	r0, r5
 8015abe:	b003      	add	sp, #12
 8015ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ac4:	4a06      	ldr	r2, [pc, #24]	; (8015ae0 <create_node+0xf0>)
 8015ac6:	9600      	str	r6, [sp, #0]
 8015ac8:	463b      	mov	r3, r7
 8015aca:	213c      	movs	r1, #60	; 0x3c
 8015acc:	4803      	ldr	r0, [pc, #12]	; (8015adc <create_node+0xec>)
 8015ace:	f003 f99b 	bl	8018e08 <sniprintf>
 8015ad2:	e7d7      	b.n	8015a84 <create_node+0x94>
 8015ad4:	2000dd34 	.word	0x2000dd34
 8015ad8:	0801a650 	.word	0x0801a650
 8015adc:	2000dee4 	.word	0x2000dee4
 8015ae0:	0801a7d4 	.word	0x0801a7d4

08015ae4 <rmw_create_node>:
 8015ae4:	b199      	cbz	r1, 8015b0e <rmw_create_node+0x2a>
 8015ae6:	780b      	ldrb	r3, [r1, #0]
 8015ae8:	468c      	mov	ip, r1
 8015aea:	b183      	cbz	r3, 8015b0e <rmw_create_node+0x2a>
 8015aec:	b410      	push	{r4}
 8015aee:	4614      	mov	r4, r2
 8015af0:	b14a      	cbz	r2, 8015b06 <rmw_create_node+0x22>
 8015af2:	7813      	ldrb	r3, [r2, #0]
 8015af4:	b13b      	cbz	r3, 8015b06 <rmw_create_node+0x22>
 8015af6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015af8:	4603      	mov	r3, r0
 8015afa:	4621      	mov	r1, r4
 8015afc:	4660      	mov	r0, ip
 8015afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b02:	f7ff bf75 	b.w	80159f0 <create_node>
 8015b06:	2000      	movs	r0, #0
 8015b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b0c:	4770      	bx	lr
 8015b0e:	2000      	movs	r0, #0
 8015b10:	4770      	bx	lr
 8015b12:	bf00      	nop

08015b14 <rmw_destroy_node>:
 8015b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b16:	b328      	cbz	r0, 8015b64 <rmw_destroy_node+0x50>
 8015b18:	4607      	mov	r7, r0
 8015b1a:	6800      	ldr	r0, [r0, #0]
 8015b1c:	b120      	cbz	r0, 8015b28 <rmw_destroy_node+0x14>
 8015b1e:	4b36      	ldr	r3, [pc, #216]	; (8015bf8 <rmw_destroy_node+0xe4>)
 8015b20:	6819      	ldr	r1, [r3, #0]
 8015b22:	f7ea fb55 	bl	80001d0 <strcmp>
 8015b26:	b9e8      	cbnz	r0, 8015b64 <rmw_destroy_node+0x50>
 8015b28:	687d      	ldr	r5, [r7, #4]
 8015b2a:	b1dd      	cbz	r5, 8015b64 <rmw_destroy_node+0x50>
 8015b2c:	4b33      	ldr	r3, [pc, #204]	; (8015bfc <rmw_destroy_node+0xe8>)
 8015b2e:	681c      	ldr	r4, [r3, #0]
 8015b30:	2c00      	cmp	r4, #0
 8015b32:	d05f      	beq.n	8015bf4 <rmw_destroy_node+0xe0>
 8015b34:	2600      	movs	r6, #0
 8015b36:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015b3a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015b3e:	429d      	cmp	r5, r3
 8015b40:	d013      	beq.n	8015b6a <rmw_destroy_node+0x56>
 8015b42:	2c00      	cmp	r4, #0
 8015b44:	d1f7      	bne.n	8015b36 <rmw_destroy_node+0x22>
 8015b46:	4b2e      	ldr	r3, [pc, #184]	; (8015c00 <rmw_destroy_node+0xec>)
 8015b48:	681c      	ldr	r4, [r3, #0]
 8015b4a:	b1c4      	cbz	r4, 8015b7e <rmw_destroy_node+0x6a>
 8015b4c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015b50:	6a0b      	ldr	r3, [r1, #32]
 8015b52:	429d      	cmp	r5, r3
 8015b54:	d1f9      	bne.n	8015b4a <rmw_destroy_node+0x36>
 8015b56:	317c      	adds	r1, #124	; 0x7c
 8015b58:	4638      	mov	r0, r7
 8015b5a:	f000 fae5 	bl	8016128 <rmw_destroy_subscription>
 8015b5e:	2801      	cmp	r0, #1
 8015b60:	4606      	mov	r6, r0
 8015b62:	d1f2      	bne.n	8015b4a <rmw_destroy_node+0x36>
 8015b64:	2601      	movs	r6, #1
 8015b66:	4630      	mov	r0, r6
 8015b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b6a:	3184      	adds	r1, #132	; 0x84
 8015b6c:	4638      	mov	r0, r7
 8015b6e:	f7f8 fe3f 	bl	800e7f0 <rmw_destroy_publisher>
 8015b72:	2801      	cmp	r0, #1
 8015b74:	4606      	mov	r6, r0
 8015b76:	d0f5      	beq.n	8015b64 <rmw_destroy_node+0x50>
 8015b78:	2c00      	cmp	r4, #0
 8015b7a:	d1dc      	bne.n	8015b36 <rmw_destroy_node+0x22>
 8015b7c:	e7e3      	b.n	8015b46 <rmw_destroy_node+0x32>
 8015b7e:	4b21      	ldr	r3, [pc, #132]	; (8015c04 <rmw_destroy_node+0xf0>)
 8015b80:	681c      	ldr	r4, [r3, #0]
 8015b82:	b16c      	cbz	r4, 8015ba0 <rmw_destroy_node+0x8c>
 8015b84:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015b88:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015b8a:	429d      	cmp	r5, r3
 8015b8c:	d1f9      	bne.n	8015b82 <rmw_destroy_node+0x6e>
 8015b8e:	317c      	adds	r1, #124	; 0x7c
 8015b90:	4638      	mov	r0, r7
 8015b92:	f000 f993 	bl	8015ebc <rmw_destroy_service>
 8015b96:	2801      	cmp	r0, #1
 8015b98:	4606      	mov	r6, r0
 8015b9a:	d0e3      	beq.n	8015b64 <rmw_destroy_node+0x50>
 8015b9c:	2c00      	cmp	r4, #0
 8015b9e:	d1f1      	bne.n	8015b84 <rmw_destroy_node+0x70>
 8015ba0:	4b19      	ldr	r3, [pc, #100]	; (8015c08 <rmw_destroy_node+0xf4>)
 8015ba2:	681c      	ldr	r4, [r3, #0]
 8015ba4:	b16c      	cbz	r4, 8015bc2 <rmw_destroy_node+0xae>
 8015ba6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015baa:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015bac:	429d      	cmp	r5, r3
 8015bae:	d1f9      	bne.n	8015ba4 <rmw_destroy_node+0x90>
 8015bb0:	317c      	adds	r1, #124	; 0x7c
 8015bb2:	4638      	mov	r0, r7
 8015bb4:	f7ff fc00 	bl	80153b8 <rmw_destroy_client>
 8015bb8:	2801      	cmp	r0, #1
 8015bba:	4606      	mov	r6, r0
 8015bbc:	d0d2      	beq.n	8015b64 <rmw_destroy_node+0x50>
 8015bbe:	2c00      	cmp	r4, #0
 8015bc0:	d1f1      	bne.n	8015ba6 <rmw_destroy_node+0x92>
 8015bc2:	6928      	ldr	r0, [r5, #16]
 8015bc4:	696a      	ldr	r2, [r5, #20]
 8015bc6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015bca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015bce:	6819      	ldr	r1, [r3, #0]
 8015bd0:	f7f9 fa8e 	bl	800f0f0 <uxr_buffer_delete_entity>
 8015bd4:	4602      	mov	r2, r0
 8015bd6:	6928      	ldr	r0, [r5, #16]
 8015bd8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015bdc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015be0:	f7f9 f930 	bl	800ee44 <run_xrce_session>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	bf08      	it	eq
 8015be8:	2602      	moveq	r6, #2
 8015bea:	4638      	mov	r0, r7
 8015bec:	f7f8 ffb8 	bl	800eb60 <rmw_uxrce_fini_node_memory>
 8015bf0:	4630      	mov	r0, r6
 8015bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bf4:	4626      	mov	r6, r4
 8015bf6:	e7a6      	b.n	8015b46 <rmw_destroy_node+0x32>
 8015bf8:	0801ad64 	.word	0x0801ad64
 8015bfc:	2000dd44 	.word	0x2000dd44
 8015c00:	2000dd84 	.word	0x2000dd84
 8015c04:	2000dd54 	.word	0x2000dd54
 8015c08:	20009468 	.word	0x20009468

08015c0c <rmw_node_get_graph_guard_condition>:
 8015c0c:	6843      	ldr	r3, [r0, #4]
 8015c0e:	6918      	ldr	r0, [r3, #16]
 8015c10:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8015c14:	4770      	bx	lr
 8015c16:	bf00      	nop

08015c18 <rmw_send_request>:
 8015c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c1c:	4604      	mov	r4, r0
 8015c1e:	6800      	ldr	r0, [r0, #0]
 8015c20:	b08b      	sub	sp, #44	; 0x2c
 8015c22:	460e      	mov	r6, r1
 8015c24:	4615      	mov	r5, r2
 8015c26:	b128      	cbz	r0, 8015c34 <rmw_send_request+0x1c>
 8015c28:	4b21      	ldr	r3, [pc, #132]	; (8015cb0 <rmw_send_request+0x98>)
 8015c2a:	6819      	ldr	r1, [r3, #0]
 8015c2c:	f7ea fad0 	bl	80001d0 <strcmp>
 8015c30:	2800      	cmp	r0, #0
 8015c32:	d139      	bne.n	8015ca8 <rmw_send_request+0x90>
 8015c34:	6864      	ldr	r4, [r4, #4]
 8015c36:	6963      	ldr	r3, [r4, #20]
 8015c38:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8015c3c:	689b      	ldr	r3, [r3, #8]
 8015c3e:	4798      	blx	r3
 8015c40:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015c44:	4630      	mov	r0, r6
 8015c46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c4a:	4798      	blx	r3
 8015c4c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015c50:	9000      	str	r0, [sp, #0]
 8015c52:	6922      	ldr	r2, [r4, #16]
 8015c54:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8015c56:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015c5a:	ab02      	add	r3, sp, #8
 8015c5c:	f7fa ff14 	bl	8010a88 <uxr_prepare_output_stream>
 8015c60:	2700      	movs	r7, #0
 8015c62:	6028      	str	r0, [r5, #0]
 8015c64:	606f      	str	r7, [r5, #4]
 8015c66:	b198      	cbz	r0, 8015c90 <rmw_send_request+0x78>
 8015c68:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015c6c:	a902      	add	r1, sp, #8
 8015c6e:	4630      	mov	r0, r6
 8015c70:	4798      	blx	r3
 8015c72:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8015c76:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015c7a:	2b01      	cmp	r3, #1
 8015c7c:	d00c      	beq.n	8015c98 <rmw_send_request+0x80>
 8015c7e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8015c80:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c84:	f7fa f944 	bl	800ff10 <uxr_run_session_until_confirm_delivery>
 8015c88:	4638      	mov	r0, r7
 8015c8a:	b00b      	add	sp, #44	; 0x2c
 8015c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c90:	2001      	movs	r0, #1
 8015c92:	b00b      	add	sp, #44	; 0x2c
 8015c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c9c:	f7f9 fd78 	bl	800f790 <uxr_flash_output_streams>
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	b00b      	add	sp, #44	; 0x2c
 8015ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ca8:	200c      	movs	r0, #12
 8015caa:	b00b      	add	sp, #44	; 0x2c
 8015cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cb0:	0801ad64 	.word	0x0801ad64

08015cb4 <rmw_take_request>:
 8015cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cb8:	4605      	mov	r5, r0
 8015cba:	6800      	ldr	r0, [r0, #0]
 8015cbc:	b089      	sub	sp, #36	; 0x24
 8015cbe:	460c      	mov	r4, r1
 8015cc0:	4690      	mov	r8, r2
 8015cc2:	461e      	mov	r6, r3
 8015cc4:	b128      	cbz	r0, 8015cd2 <rmw_take_request+0x1e>
 8015cc6:	4b28      	ldr	r3, [pc, #160]	; (8015d68 <rmw_take_request+0xb4>)
 8015cc8:	6819      	ldr	r1, [r3, #0]
 8015cca:	f7ea fa81 	bl	80001d0 <strcmp>
 8015cce:	2800      	cmp	r0, #0
 8015cd0:	d146      	bne.n	8015d60 <rmw_take_request+0xac>
 8015cd2:	b10e      	cbz	r6, 8015cd8 <rmw_take_request+0x24>
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	7033      	strb	r3, [r6, #0]
 8015cd8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015cdc:	f7f9 f834 	bl	800ed48 <rmw_uxrce_clean_expired_static_input_buffer>
 8015ce0:	4648      	mov	r0, r9
 8015ce2:	f7f9 f809 	bl	800ecf8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ce6:	4607      	mov	r7, r0
 8015ce8:	b3b0      	cbz	r0, 8015d58 <rmw_take_request+0xa4>
 8015cea:	6885      	ldr	r5, [r0, #8]
 8015cec:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 8015cf0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 8015cf4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015cf8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8015cfc:	7423      	strb	r3, [r4, #16]
 8015cfe:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 8015d02:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8015d06:	74e2      	strb	r2, [r4, #19]
 8015d08:	f8a4 3011 	strh.w	r3, [r4, #17]
 8015d0c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8015d10:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8015d14:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8015d18:	61e1      	str	r1, [r4, #28]
 8015d1a:	6162      	str	r2, [r4, #20]
 8015d1c:	61a3      	str	r3, [r4, #24]
 8015d1e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015d22:	689b      	ldr	r3, [r3, #8]
 8015d24:	4798      	blx	r3
 8015d26:	6844      	ldr	r4, [r0, #4]
 8015d28:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015d2c:	f105 0110 	add.w	r1, r5, #16
 8015d30:	4668      	mov	r0, sp
 8015d32:	f7f7 fa71 	bl	800d218 <ucdr_init_buffer>
 8015d36:	68e3      	ldr	r3, [r4, #12]
 8015d38:	4641      	mov	r1, r8
 8015d3a:	4668      	mov	r0, sp
 8015d3c:	4798      	blx	r3
 8015d3e:	4639      	mov	r1, r7
 8015d40:	4604      	mov	r4, r0
 8015d42:	480a      	ldr	r0, [pc, #40]	; (8015d6c <rmw_take_request+0xb8>)
 8015d44:	f7ff fb24 	bl	8015390 <put_memory>
 8015d48:	b106      	cbz	r6, 8015d4c <rmw_take_request+0x98>
 8015d4a:	7034      	strb	r4, [r6, #0]
 8015d4c:	f084 0001 	eor.w	r0, r4, #1
 8015d50:	b2c0      	uxtb	r0, r0
 8015d52:	b009      	add	sp, #36	; 0x24
 8015d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d58:	2001      	movs	r0, #1
 8015d5a:	b009      	add	sp, #36	; 0x24
 8015d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d60:	200c      	movs	r0, #12
 8015d62:	b009      	add	sp, #36	; 0x24
 8015d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d68:	0801ad64 	.word	0x0801ad64
 8015d6c:	2000dd74 	.word	0x2000dd74

08015d70 <rmw_send_response>:
 8015d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d72:	4605      	mov	r5, r0
 8015d74:	6800      	ldr	r0, [r0, #0]
 8015d76:	b091      	sub	sp, #68	; 0x44
 8015d78:	460c      	mov	r4, r1
 8015d7a:	4616      	mov	r6, r2
 8015d7c:	b128      	cbz	r0, 8015d8a <rmw_send_response+0x1a>
 8015d7e:	4b29      	ldr	r3, [pc, #164]	; (8015e24 <rmw_send_response+0xb4>)
 8015d80:	6819      	ldr	r1, [r3, #0]
 8015d82:	f7ea fa25 	bl	80001d0 <strcmp>
 8015d86:	2800      	cmp	r0, #0
 8015d88:	d141      	bne.n	8015e0e <rmw_send_response+0x9e>
 8015d8a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8015d8e:	9306      	str	r3, [sp, #24]
 8015d90:	4623      	mov	r3, r4
 8015d92:	9207      	str	r2, [sp, #28]
 8015d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d98:	686d      	ldr	r5, [r5, #4]
 8015d9a:	789b      	ldrb	r3, [r3, #2]
 8015d9c:	68a1      	ldr	r1, [r4, #8]
 8015d9e:	f88d 2017 	strb.w	r2, [sp, #23]
 8015da2:	f88d 3016 	strb.w	r3, [sp, #22]
 8015da6:	68e2      	ldr	r2, [r4, #12]
 8015da8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8015dac:	6860      	ldr	r0, [r4, #4]
 8015dae:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015db2:	ab02      	add	r3, sp, #8
 8015db4:	c307      	stmia	r3!, {r0, r1, r2}
 8015db6:	696b      	ldr	r3, [r5, #20]
 8015db8:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	4798      	blx	r3
 8015dbe:	6844      	ldr	r4, [r0, #4]
 8015dc0:	4630      	mov	r0, r6
 8015dc2:	6923      	ldr	r3, [r4, #16]
 8015dc4:	4798      	blx	r3
 8015dc6:	f100 0318 	add.w	r3, r0, #24
 8015dca:	6938      	ldr	r0, [r7, #16]
 8015dcc:	9300      	str	r3, [sp, #0]
 8015dce:	692a      	ldr	r2, [r5, #16]
 8015dd0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8015dd2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015dd6:	ab08      	add	r3, sp, #32
 8015dd8:	f7fa fe56 	bl	8010a88 <uxr_prepare_output_stream>
 8015ddc:	b910      	cbnz	r0, 8015de4 <rmw_send_response+0x74>
 8015dde:	2001      	movs	r0, #1
 8015de0:	b011      	add	sp, #68	; 0x44
 8015de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015de4:	a902      	add	r1, sp, #8
 8015de6:	a808      	add	r0, sp, #32
 8015de8:	f7fb ff86 	bl	8011cf8 <uxr_serialize_SampleIdentity>
 8015dec:	68a3      	ldr	r3, [r4, #8]
 8015dee:	a908      	add	r1, sp, #32
 8015df0:	4630      	mov	r0, r6
 8015df2:	4798      	blx	r3
 8015df4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8015df8:	6938      	ldr	r0, [r7, #16]
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	d00a      	beq.n	8015e14 <rmw_send_response+0xa4>
 8015dfe:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8015e00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e04:	f7fa f884 	bl	800ff10 <uxr_run_session_until_confirm_delivery>
 8015e08:	2000      	movs	r0, #0
 8015e0a:	b011      	add	sp, #68	; 0x44
 8015e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e0e:	200c      	movs	r0, #12
 8015e10:	b011      	add	sp, #68	; 0x44
 8015e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e14:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e18:	f7f9 fcba 	bl	800f790 <uxr_flash_output_streams>
 8015e1c:	2000      	movs	r0, #0
 8015e1e:	b011      	add	sp, #68	; 0x44
 8015e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e22:	bf00      	nop
 8015e24:	0801ad64 	.word	0x0801ad64

08015e28 <rmw_take_response>:
 8015e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e2c:	4604      	mov	r4, r0
 8015e2e:	6800      	ldr	r0, [r0, #0]
 8015e30:	b088      	sub	sp, #32
 8015e32:	4688      	mov	r8, r1
 8015e34:	4617      	mov	r7, r2
 8015e36:	461d      	mov	r5, r3
 8015e38:	b120      	cbz	r0, 8015e44 <rmw_take_response+0x1c>
 8015e3a:	4b1e      	ldr	r3, [pc, #120]	; (8015eb4 <rmw_take_response+0x8c>)
 8015e3c:	6819      	ldr	r1, [r3, #0]
 8015e3e:	f7ea f9c7 	bl	80001d0 <strcmp>
 8015e42:	bb78      	cbnz	r0, 8015ea4 <rmw_take_response+0x7c>
 8015e44:	b10d      	cbz	r5, 8015e4a <rmw_take_response+0x22>
 8015e46:	2300      	movs	r3, #0
 8015e48:	702b      	strb	r3, [r5, #0]
 8015e4a:	6864      	ldr	r4, [r4, #4]
 8015e4c:	f7f8 ff7c 	bl	800ed48 <rmw_uxrce_clean_expired_static_input_buffer>
 8015e50:	4620      	mov	r0, r4
 8015e52:	f7f8 ff51 	bl	800ecf8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e56:	4606      	mov	r6, r0
 8015e58:	b340      	cbz	r0, 8015eac <rmw_take_response+0x84>
 8015e5a:	6963      	ldr	r3, [r4, #20]
 8015e5c:	6884      	ldr	r4, [r0, #8]
 8015e5e:	68db      	ldr	r3, [r3, #12]
 8015e60:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8015e64:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015e68:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8015e6c:	4798      	blx	r3
 8015e6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015e72:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8015e76:	f104 0110 	add.w	r1, r4, #16
 8015e7a:	4668      	mov	r0, sp
 8015e7c:	f7f7 f9cc 	bl	800d218 <ucdr_init_buffer>
 8015e80:	4639      	mov	r1, r7
 8015e82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e86:	4668      	mov	r0, sp
 8015e88:	4798      	blx	r3
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	4604      	mov	r4, r0
 8015e8e:	480a      	ldr	r0, [pc, #40]	; (8015eb8 <rmw_take_response+0x90>)
 8015e90:	f7ff fa7e 	bl	8015390 <put_memory>
 8015e94:	b105      	cbz	r5, 8015e98 <rmw_take_response+0x70>
 8015e96:	702c      	strb	r4, [r5, #0]
 8015e98:	f084 0001 	eor.w	r0, r4, #1
 8015e9c:	b2c0      	uxtb	r0, r0
 8015e9e:	b008      	add	sp, #32
 8015ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ea4:	200c      	movs	r0, #12
 8015ea6:	b008      	add	sp, #32
 8015ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eac:	2001      	movs	r0, #1
 8015eae:	b008      	add	sp, #32
 8015eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eb4:	0801ad64 	.word	0x0801ad64
 8015eb8:	2000dd74 	.word	0x2000dd74

08015ebc <rmw_destroy_service>:
 8015ebc:	b570      	push	{r4, r5, r6, lr}
 8015ebe:	b128      	cbz	r0, 8015ecc <rmw_destroy_service+0x10>
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	6800      	ldr	r0, [r0, #0]
 8015ec4:	460d      	mov	r5, r1
 8015ec6:	f7f9 f83d 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 8015eca:	b910      	cbnz	r0, 8015ed2 <rmw_destroy_service+0x16>
 8015ecc:	2401      	movs	r4, #1
 8015ece:	4620      	mov	r0, r4
 8015ed0:	bd70      	pop	{r4, r5, r6, pc}
 8015ed2:	6863      	ldr	r3, [r4, #4]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d0f9      	beq.n	8015ecc <rmw_destroy_service+0x10>
 8015ed8:	2d00      	cmp	r5, #0
 8015eda:	d0f7      	beq.n	8015ecc <rmw_destroy_service+0x10>
 8015edc:	6828      	ldr	r0, [r5, #0]
 8015ede:	f7f9 f831 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 8015ee2:	2800      	cmp	r0, #0
 8015ee4:	d0f2      	beq.n	8015ecc <rmw_destroy_service+0x10>
 8015ee6:	686e      	ldr	r6, [r5, #4]
 8015ee8:	2e00      	cmp	r6, #0
 8015eea:	d0ef      	beq.n	8015ecc <rmw_destroy_service+0x10>
 8015eec:	6864      	ldr	r4, [r4, #4]
 8015eee:	6932      	ldr	r2, [r6, #16]
 8015ef0:	6920      	ldr	r0, [r4, #16]
 8015ef2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015ef6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015efa:	6819      	ldr	r1, [r3, #0]
 8015efc:	f001 fb6a 	bl	80175d4 <uxr_buffer_cancel_data>
 8015f00:	4602      	mov	r2, r0
 8015f02:	6920      	ldr	r0, [r4, #16]
 8015f04:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015f08:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015f0c:	f7f8 ff9a 	bl	800ee44 <run_xrce_session>
 8015f10:	6920      	ldr	r0, [r4, #16]
 8015f12:	6932      	ldr	r2, [r6, #16]
 8015f14:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015f18:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015f1c:	6819      	ldr	r1, [r3, #0]
 8015f1e:	f7f9 f8e7 	bl	800f0f0 <uxr_buffer_delete_entity>
 8015f22:	4602      	mov	r2, r0
 8015f24:	6920      	ldr	r0, [r4, #16]
 8015f26:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015f2a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015f2e:	f7f8 ff89 	bl	800ee44 <run_xrce_session>
 8015f32:	2800      	cmp	r0, #0
 8015f34:	4628      	mov	r0, r5
 8015f36:	bf14      	ite	ne
 8015f38:	2400      	movne	r4, #0
 8015f3a:	2402      	moveq	r4, #2
 8015f3c:	f7f8 fe54 	bl	800ebe8 <rmw_uxrce_fini_service_memory>
 8015f40:	e7c5      	b.n	8015ece <rmw_destroy_service+0x12>
 8015f42:	bf00      	nop

08015f44 <rmw_create_subscription>:
 8015f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f48:	b08d      	sub	sp, #52	; 0x34
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	f000 80d1 	beq.w	80160f2 <rmw_create_subscription+0x1ae>
 8015f50:	460e      	mov	r6, r1
 8015f52:	2900      	cmp	r1, #0
 8015f54:	f000 80cd 	beq.w	80160f2 <rmw_create_subscription+0x1ae>
 8015f58:	4604      	mov	r4, r0
 8015f5a:	6800      	ldr	r0, [r0, #0]
 8015f5c:	4615      	mov	r5, r2
 8015f5e:	4698      	mov	r8, r3
 8015f60:	f7f8 fff0 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 8015f64:	2800      	cmp	r0, #0
 8015f66:	f000 80c4 	beq.w	80160f2 <rmw_create_subscription+0x1ae>
 8015f6a:	2d00      	cmp	r5, #0
 8015f6c:	f000 80c1 	beq.w	80160f2 <rmw_create_subscription+0x1ae>
 8015f70:	782b      	ldrb	r3, [r5, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	f000 80bd 	beq.w	80160f2 <rmw_create_subscription+0x1ae>
 8015f78:	f1b8 0f00 	cmp.w	r8, #0
 8015f7c:	f000 80b9 	beq.w	80160f2 <rmw_create_subscription+0x1ae>
 8015f80:	485e      	ldr	r0, [pc, #376]	; (80160fc <rmw_create_subscription+0x1b8>)
 8015f82:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015f86:	f7ff f9f3 	bl	8015370 <get_memory>
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	f000 80b1 	beq.w	80160f4 <rmw_create_subscription+0x1b0>
 8015f92:	6887      	ldr	r7, [r0, #8]
 8015f94:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8015f98:	f7ff fa52 	bl	8015440 <rmw_get_implementation_identifier>
 8015f9c:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 8015fa0:	67f8      	str	r0, [r7, #124]	; 0x7c
 8015fa2:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	f7ea f91c 	bl	80001e4 <strlen>
 8015fac:	3001      	adds	r0, #1
 8015fae:	283c      	cmp	r0, #60	; 0x3c
 8015fb0:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8015fb4:	f200 8096 	bhi.w	80160e4 <rmw_create_subscription+0x1a0>
 8015fb8:	4a51      	ldr	r2, [pc, #324]	; (8016100 <rmw_create_subscription+0x1bc>)
 8015fba:	462b      	mov	r3, r5
 8015fbc:	213c      	movs	r1, #60	; 0x3c
 8015fbe:	4650      	mov	r0, sl
 8015fc0:	f002 ff22 	bl	8018e08 <sniprintf>
 8015fc4:	4641      	mov	r1, r8
 8015fc6:	f8c7 9020 	str.w	r9, [r7, #32]
 8015fca:	2250      	movs	r2, #80	; 0x50
 8015fcc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8015fd0:	f002 fd92 	bl	8018af8 <memcpy>
 8015fd4:	494b      	ldr	r1, [pc, #300]	; (8016104 <rmw_create_subscription+0x1c0>)
 8015fd6:	4630      	mov	r0, r6
 8015fd8:	f7f8 ffc2 	bl	800ef60 <get_message_typesupport_handle>
 8015fdc:	2800      	cmp	r0, #0
 8015fde:	f000 8081 	beq.w	80160e4 <rmw_create_subscription+0x1a0>
 8015fe2:	6842      	ldr	r2, [r0, #4]
 8015fe4:	61ba      	str	r2, [r7, #24]
 8015fe6:	2a00      	cmp	r2, #0
 8015fe8:	d07c      	beq.n	80160e4 <rmw_create_subscription+0x1a0>
 8015fea:	4629      	mov	r1, r5
 8015fec:	4643      	mov	r3, r8
 8015fee:	4648      	mov	r0, r9
 8015ff0:	f7ff fc8c 	bl	801590c <create_topic>
 8015ff4:	61f8      	str	r0, [r7, #28]
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	d078      	beq.n	80160ec <rmw_create_subscription+0x1a8>
 8015ffa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016002:	2104      	movs	r1, #4
 8016004:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8016008:	1c42      	adds	r2, r0, #1
 801600a:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 801600e:	f7f9 fa71 	bl	800f4f4 <uxr_object_id>
 8016012:	6138      	str	r0, [r7, #16]
 8016014:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016018:	2506      	movs	r5, #6
 801601a:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801601e:	9500      	str	r5, [sp, #0]
 8016020:	6819      	ldr	r1, [r3, #0]
 8016022:	693a      	ldr	r2, [r7, #16]
 8016024:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016028:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801602c:	f7f9 f944 	bl	800f2b8 <uxr_buffer_create_subscriber_bin>
 8016030:	4602      	mov	r2, r0
 8016032:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016036:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801603a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801603e:	f7f8 ff01 	bl	800ee44 <run_xrce_session>
 8016042:	2800      	cmp	r0, #0
 8016044:	d04e      	beq.n	80160e4 <rmw_create_subscription+0x1a0>
 8016046:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801604a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801604e:	4629      	mov	r1, r5
 8016050:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8016054:	1c42      	adds	r2, r0, #1
 8016056:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801605a:	f7f9 fa4b 	bl	800f4f4 <uxr_object_id>
 801605e:	ae08      	add	r6, sp, #32
 8016060:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016064:	69fb      	ldr	r3, [r7, #28]
 8016066:	6178      	str	r0, [r7, #20]
 8016068:	4641      	mov	r1, r8
 801606a:	4630      	mov	r0, r6
 801606c:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8016070:	9305      	str	r3, [sp, #20]
 8016072:	f7f8 ff03 	bl	800ee7c <convert_qos_profile>
 8016076:	9503      	str	r5, [sp, #12]
 8016078:	e896 0003 	ldmia.w	r6, {r0, r1}
 801607c:	9b05      	ldr	r3, [sp, #20]
 801607e:	9001      	str	r0, [sp, #4]
 8016080:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016084:	691b      	ldr	r3, [r3, #16]
 8016086:	9300      	str	r3, [sp, #0]
 8016088:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801608c:	f8db 1000 	ldr.w	r1, [fp]
 8016090:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8016094:	f7f9 f9b6 	bl	800f404 <uxr_buffer_create_datareader_bin>
 8016098:	4602      	mov	r2, r0
 801609a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801609e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80160a2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80160a6:	f7f8 fecd 	bl	800ee44 <run_xrce_session>
 80160aa:	b1d8      	cbz	r0, 80160e4 <rmw_create_subscription+0x1a0>
 80160ac:	f898 3008 	ldrb.w	r3, [r8, #8]
 80160b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80160b4:	2b02      	cmp	r3, #2
 80160b6:	bf0c      	ite	eq
 80160b8:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80160bc:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 80160c0:	9307      	str	r3, [sp, #28]
 80160c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80160c6:	2200      	movs	r2, #0
 80160c8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80160cc:	ab0a      	add	r3, sp, #40	; 0x28
 80160ce:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80160d2:	9300      	str	r3, [sp, #0]
 80160d4:	697a      	ldr	r2, [r7, #20]
 80160d6:	9b07      	ldr	r3, [sp, #28]
 80160d8:	6809      	ldr	r1, [r1, #0]
 80160da:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80160de:	f001 fa3f 	bl	8017560 <uxr_buffer_request_data>
 80160e2:	e007      	b.n	80160f4 <rmw_create_subscription+0x1b0>
 80160e4:	69f8      	ldr	r0, [r7, #28]
 80160e6:	b108      	cbz	r0, 80160ec <rmw_create_subscription+0x1a8>
 80160e8:	f7f8 fdaa 	bl	800ec40 <rmw_uxrce_fini_topic_memory>
 80160ec:	4620      	mov	r0, r4
 80160ee:	f7f8 fd65 	bl	800ebbc <rmw_uxrce_fini_subscription_memory>
 80160f2:	2400      	movs	r4, #0
 80160f4:	4620      	mov	r0, r4
 80160f6:	b00d      	add	sp, #52	; 0x34
 80160f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160fc:	2000dd84 	.word	0x2000dd84
 8016100:	0801a650 	.word	0x0801a650
 8016104:	0801a3e0 	.word	0x0801a3e0

08016108 <rmw_subscription_get_actual_qos>:
 8016108:	b150      	cbz	r0, 8016120 <rmw_subscription_get_actual_qos+0x18>
 801610a:	b508      	push	{r3, lr}
 801610c:	460b      	mov	r3, r1
 801610e:	b149      	cbz	r1, 8016124 <rmw_subscription_get_actual_qos+0x1c>
 8016110:	6841      	ldr	r1, [r0, #4]
 8016112:	2250      	movs	r2, #80	; 0x50
 8016114:	3128      	adds	r1, #40	; 0x28
 8016116:	4618      	mov	r0, r3
 8016118:	f002 fcee 	bl	8018af8 <memcpy>
 801611c:	2000      	movs	r0, #0
 801611e:	bd08      	pop	{r3, pc}
 8016120:	200b      	movs	r0, #11
 8016122:	4770      	bx	lr
 8016124:	200b      	movs	r0, #11
 8016126:	bd08      	pop	{r3, pc}

08016128 <rmw_destroy_subscription>:
 8016128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801612a:	b128      	cbz	r0, 8016138 <rmw_destroy_subscription+0x10>
 801612c:	4604      	mov	r4, r0
 801612e:	6800      	ldr	r0, [r0, #0]
 8016130:	460d      	mov	r5, r1
 8016132:	f7f8 ff07 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 8016136:	b910      	cbnz	r0, 801613e <rmw_destroy_subscription+0x16>
 8016138:	2401      	movs	r4, #1
 801613a:	4620      	mov	r0, r4
 801613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801613e:	6863      	ldr	r3, [r4, #4]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d0f9      	beq.n	8016138 <rmw_destroy_subscription+0x10>
 8016144:	2d00      	cmp	r5, #0
 8016146:	d0f7      	beq.n	8016138 <rmw_destroy_subscription+0x10>
 8016148:	6828      	ldr	r0, [r5, #0]
 801614a:	f7f8 fefb 	bl	800ef44 <is_uxrce_rmw_identifier_valid>
 801614e:	2800      	cmp	r0, #0
 8016150:	d0f2      	beq.n	8016138 <rmw_destroy_subscription+0x10>
 8016152:	686c      	ldr	r4, [r5, #4]
 8016154:	2c00      	cmp	r4, #0
 8016156:	d0ef      	beq.n	8016138 <rmw_destroy_subscription+0x10>
 8016158:	6a26      	ldr	r6, [r4, #32]
 801615a:	6962      	ldr	r2, [r4, #20]
 801615c:	6930      	ldr	r0, [r6, #16]
 801615e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016162:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016166:	6819      	ldr	r1, [r3, #0]
 8016168:	f001 fa34 	bl	80175d4 <uxr_buffer_cancel_data>
 801616c:	4602      	mov	r2, r0
 801616e:	6930      	ldr	r0, [r6, #16]
 8016170:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016174:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016178:	f7f8 fe64 	bl	800ee44 <run_xrce_session>
 801617c:	69e0      	ldr	r0, [r4, #28]
 801617e:	f7ff fc15 	bl	80159ac <destroy_topic>
 8016182:	6a23      	ldr	r3, [r4, #32]
 8016184:	6962      	ldr	r2, [r4, #20]
 8016186:	6918      	ldr	r0, [r3, #16]
 8016188:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801618c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016190:	6819      	ldr	r1, [r3, #0]
 8016192:	f7f8 ffad 	bl	800f0f0 <uxr_buffer_delete_entity>
 8016196:	6a23      	ldr	r3, [r4, #32]
 8016198:	6922      	ldr	r2, [r4, #16]
 801619a:	691b      	ldr	r3, [r3, #16]
 801619c:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 80161a0:	4604      	mov	r4, r0
 80161a2:	6809      	ldr	r1, [r1, #0]
 80161a4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80161a8:	f7f8 ffa2 	bl	800f0f0 <uxr_buffer_delete_entity>
 80161ac:	6937      	ldr	r7, [r6, #16]
 80161ae:	4622      	mov	r2, r4
 80161b0:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80161b4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80161b8:	4604      	mov	r4, r0
 80161ba:	4638      	mov	r0, r7
 80161bc:	f7f8 fe42 	bl	800ee44 <run_xrce_session>
 80161c0:	6936      	ldr	r6, [r6, #16]
 80161c2:	4622      	mov	r2, r4
 80161c4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80161c8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80161cc:	4604      	mov	r4, r0
 80161ce:	4630      	mov	r0, r6
 80161d0:	f7f8 fe38 	bl	800ee44 <run_xrce_session>
 80161d4:	b12c      	cbz	r4, 80161e2 <rmw_destroy_subscription+0xba>
 80161d6:	b120      	cbz	r0, 80161e2 <rmw_destroy_subscription+0xba>
 80161d8:	2400      	movs	r4, #0
 80161da:	4628      	mov	r0, r5
 80161dc:	f7f8 fcee 	bl	800ebbc <rmw_uxrce_fini_subscription_memory>
 80161e0:	e7ab      	b.n	801613a <rmw_destroy_subscription+0x12>
 80161e2:	2402      	movs	r4, #2
 80161e4:	e7f9      	b.n	80161da <rmw_destroy_subscription+0xb2>
 80161e6:	bf00      	nop

080161e8 <rmw_take_with_info>:
 80161e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161ea:	4604      	mov	r4, r0
 80161ec:	6800      	ldr	r0, [r0, #0]
 80161ee:	b089      	sub	sp, #36	; 0x24
 80161f0:	460f      	mov	r7, r1
 80161f2:	4615      	mov	r5, r2
 80161f4:	b128      	cbz	r0, 8016202 <rmw_take_with_info+0x1a>
 80161f6:	4b24      	ldr	r3, [pc, #144]	; (8016288 <rmw_take_with_info+0xa0>)
 80161f8:	6819      	ldr	r1, [r3, #0]
 80161fa:	f7e9 ffe9 	bl	80001d0 <strcmp>
 80161fe:	2800      	cmp	r0, #0
 8016200:	d13e      	bne.n	8016280 <rmw_take_with_info+0x98>
 8016202:	b305      	cbz	r5, 8016246 <rmw_take_with_info+0x5e>
 8016204:	6864      	ldr	r4, [r4, #4]
 8016206:	2300      	movs	r3, #0
 8016208:	702b      	strb	r3, [r5, #0]
 801620a:	f7f8 fd9d 	bl	800ed48 <rmw_uxrce_clean_expired_static_input_buffer>
 801620e:	4620      	mov	r0, r4
 8016210:	f7f8 fd72 	bl	800ecf8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016214:	4606      	mov	r6, r0
 8016216:	b1f0      	cbz	r0, 8016256 <rmw_take_with_info+0x6e>
 8016218:	6881      	ldr	r1, [r0, #8]
 801621a:	4668      	mov	r0, sp
 801621c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016220:	3110      	adds	r1, #16
 8016222:	f7f6 fff9 	bl	800d218 <ucdr_init_buffer>
 8016226:	69a3      	ldr	r3, [r4, #24]
 8016228:	4639      	mov	r1, r7
 801622a:	68db      	ldr	r3, [r3, #12]
 801622c:	4668      	mov	r0, sp
 801622e:	4798      	blx	r3
 8016230:	4631      	mov	r1, r6
 8016232:	4604      	mov	r4, r0
 8016234:	4815      	ldr	r0, [pc, #84]	; (801628c <rmw_take_with_info+0xa4>)
 8016236:	f7ff f8ab 	bl	8015390 <put_memory>
 801623a:	702c      	strb	r4, [r5, #0]
 801623c:	f084 0001 	eor.w	r0, r4, #1
 8016240:	b2c0      	uxtb	r0, r0
 8016242:	b009      	add	sp, #36	; 0x24
 8016244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016246:	6864      	ldr	r4, [r4, #4]
 8016248:	f7f8 fd7e 	bl	800ed48 <rmw_uxrce_clean_expired_static_input_buffer>
 801624c:	4620      	mov	r0, r4
 801624e:	f7f8 fd53 	bl	800ecf8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016252:	4605      	mov	r5, r0
 8016254:	b910      	cbnz	r0, 801625c <rmw_take_with_info+0x74>
 8016256:	2001      	movs	r0, #1
 8016258:	b009      	add	sp, #36	; 0x24
 801625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801625c:	68a9      	ldr	r1, [r5, #8]
 801625e:	4668      	mov	r0, sp
 8016260:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016264:	3110      	adds	r1, #16
 8016266:	f7f6 ffd7 	bl	800d218 <ucdr_init_buffer>
 801626a:	69a3      	ldr	r3, [r4, #24]
 801626c:	4639      	mov	r1, r7
 801626e:	68db      	ldr	r3, [r3, #12]
 8016270:	4668      	mov	r0, sp
 8016272:	4798      	blx	r3
 8016274:	4629      	mov	r1, r5
 8016276:	4604      	mov	r4, r0
 8016278:	4804      	ldr	r0, [pc, #16]	; (801628c <rmw_take_with_info+0xa4>)
 801627a:	f7ff f889 	bl	8015390 <put_memory>
 801627e:	e7dd      	b.n	801623c <rmw_take_with_info+0x54>
 8016280:	200c      	movs	r0, #12
 8016282:	b009      	add	sp, #36	; 0x24
 8016284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016286:	bf00      	nop
 8016288:	0801ad64 	.word	0x0801ad64
 801628c:	2000dd74 	.word	0x2000dd74

08016290 <rmw_uxrce_transport_init>:
 8016290:	b508      	push	{r3, lr}
 8016292:	b108      	cbz	r0, 8016298 <rmw_uxrce_transport_init+0x8>
 8016294:	f100 0210 	add.w	r2, r0, #16
 8016298:	b139      	cbz	r1, 80162aa <rmw_uxrce_transport_init+0x1a>
 801629a:	6949      	ldr	r1, [r1, #20]
 801629c:	4610      	mov	r0, r2
 801629e:	f000 fbdf 	bl	8016a60 <uxr_init_custom_transport>
 80162a2:	f080 0001 	eor.w	r0, r0, #1
 80162a6:	b2c0      	uxtb	r0, r0
 80162a8:	bd08      	pop	{r3, pc}
 80162aa:	4b04      	ldr	r3, [pc, #16]	; (80162bc <rmw_uxrce_transport_init+0x2c>)
 80162ac:	4610      	mov	r0, r2
 80162ae:	6859      	ldr	r1, [r3, #4]
 80162b0:	f000 fbd6 	bl	8016a60 <uxr_init_custom_transport>
 80162b4:	f080 0001 	eor.w	r0, r0, #1
 80162b8:	b2c0      	uxtb	r0, r0
 80162ba:	bd08      	pop	{r3, pc}
 80162bc:	2000944c 	.word	0x2000944c

080162c0 <rmw_wait>:
 80162c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162c4:	b089      	sub	sp, #36	; 0x24
 80162c6:	4605      	mov	r5, r0
 80162c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80162ca:	460e      	mov	r6, r1
 80162cc:	4698      	mov	r8, r3
 80162ce:	4691      	mov	r9, r2
 80162d0:	2a00      	cmp	r2, #0
 80162d2:	f000 810a 	beq.w	80164ea <rmw_wait+0x22a>
 80162d6:	b16c      	cbz	r4, 80162f4 <rmw_wait+0x34>
 80162d8:	4bae      	ldr	r3, [pc, #696]	; (8016594 <rmw_wait+0x2d4>)
 80162da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80162dc:	af04      	add	r7, sp, #16
 80162de:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80162e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80162e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80162ea:	f7fe fe75 	bl	8014fd8 <rmw_time_equal>
 80162ee:	2800      	cmp	r0, #0
 80162f0:	f000 8127 	beq.w	8016542 <rmw_wait+0x282>
 80162f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80162f8:	f7f8 fd26 	bl	800ed48 <rmw_uxrce_clean_expired_static_input_buffer>
 80162fc:	4ba6      	ldr	r3, [pc, #664]	; (8016598 <rmw_wait+0x2d8>)
 80162fe:	681c      	ldr	r4, [r3, #0]
 8016300:	b14c      	cbz	r4, 8016316 <rmw_wait+0x56>
 8016302:	4623      	mov	r3, r4
 8016304:	2100      	movs	r1, #0
 8016306:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801630a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801630e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8016312:	2b00      	cmp	r3, #0
 8016314:	d1f7      	bne.n	8016306 <rmw_wait+0x46>
 8016316:	f1b9 0f00 	cmp.w	r9, #0
 801631a:	d011      	beq.n	8016340 <rmw_wait+0x80>
 801631c:	f8d9 1000 	ldr.w	r1, [r9]
 8016320:	b171      	cbz	r1, 8016340 <rmw_wait+0x80>
 8016322:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016326:	2300      	movs	r3, #0
 8016328:	2001      	movs	r0, #1
 801632a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801632e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8016330:	6912      	ldr	r2, [r2, #16]
 8016332:	3301      	adds	r3, #1
 8016334:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016338:	4299      	cmp	r1, r3
 801633a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801633e:	d1f4      	bne.n	801632a <rmw_wait+0x6a>
 8016340:	f1b8 0f00 	cmp.w	r8, #0
 8016344:	d011      	beq.n	801636a <rmw_wait+0xaa>
 8016346:	f8d8 1000 	ldr.w	r1, [r8]
 801634a:	b171      	cbz	r1, 801636a <rmw_wait+0xaa>
 801634c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016350:	2300      	movs	r3, #0
 8016352:	2001      	movs	r0, #1
 8016354:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016358:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801635a:	6912      	ldr	r2, [r2, #16]
 801635c:	3301      	adds	r3, #1
 801635e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016362:	4299      	cmp	r1, r3
 8016364:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8016368:	d1f4      	bne.n	8016354 <rmw_wait+0x94>
 801636a:	b185      	cbz	r5, 801638e <rmw_wait+0xce>
 801636c:	6829      	ldr	r1, [r5, #0]
 801636e:	b171      	cbz	r1, 801638e <rmw_wait+0xce>
 8016370:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016374:	2300      	movs	r3, #0
 8016376:	2001      	movs	r0, #1
 8016378:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801637c:	6a12      	ldr	r2, [r2, #32]
 801637e:	6912      	ldr	r2, [r2, #16]
 8016380:	3301      	adds	r3, #1
 8016382:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016386:	4299      	cmp	r1, r3
 8016388:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801638c:	d1f4      	bne.n	8016378 <rmw_wait+0xb8>
 801638e:	b34c      	cbz	r4, 80163e4 <rmw_wait+0x124>
 8016390:	4622      	mov	r2, r4
 8016392:	2300      	movs	r3, #0
 8016394:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016398:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801639c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 80163a0:	440b      	add	r3, r1
 80163a2:	b2db      	uxtb	r3, r3
 80163a4:	2a00      	cmp	r2, #0
 80163a6:	d1f5      	bne.n	8016394 <rmw_wait+0xd4>
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	f000 8084 	beq.w	80164b6 <rmw_wait+0x1f6>
 80163ae:	1c7a      	adds	r2, r7, #1
 80163b0:	d00d      	beq.n	80163ce <rmw_wait+0x10e>
 80163b2:	ee07 7a90 	vmov	s15, r7
 80163b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80163ba:	ee07 3a90 	vmov	s15, r3
 80163be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80163c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80163c6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80163ca:	ee17 7a90 	vmov	r7, s15
 80163ce:	68a0      	ldr	r0, [r4, #8]
 80163d0:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80163d4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 80163d8:	2b00      	cmp	r3, #0
 80163da:	f040 8090 	bne.w	80164fe <rmw_wait+0x23e>
 80163de:	6864      	ldr	r4, [r4, #4]
 80163e0:	2c00      	cmp	r4, #0
 80163e2:	d1f4      	bne.n	80163ce <rmw_wait+0x10e>
 80163e4:	f1b9 0f00 	cmp.w	r9, #0
 80163e8:	f000 80bc 	beq.w	8016564 <rmw_wait+0x2a4>
 80163ec:	f8d9 7000 	ldr.w	r7, [r9]
 80163f0:	2f00      	cmp	r7, #0
 80163f2:	f000 808e 	beq.w	8016512 <rmw_wait+0x252>
 80163f6:	2400      	movs	r4, #0
 80163f8:	4627      	mov	r7, r4
 80163fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80163fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016402:	f7f8 fc79 	bl	800ecf8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016406:	2800      	cmp	r0, #0
 8016408:	d05f      	beq.n	80164ca <rmw_wait+0x20a>
 801640a:	f8d9 3000 	ldr.w	r3, [r9]
 801640e:	3401      	adds	r4, #1
 8016410:	42a3      	cmp	r3, r4
 8016412:	f04f 0701 	mov.w	r7, #1
 8016416:	d8f0      	bhi.n	80163fa <rmw_wait+0x13a>
 8016418:	f1b8 0f00 	cmp.w	r8, #0
 801641c:	d012      	beq.n	8016444 <rmw_wait+0x184>
 801641e:	f8d8 3000 	ldr.w	r3, [r8]
 8016422:	b17b      	cbz	r3, 8016444 <rmw_wait+0x184>
 8016424:	2400      	movs	r4, #0
 8016426:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801642a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801642e:	f7f8 fc63 	bl	800ecf8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016432:	2800      	cmp	r0, #0
 8016434:	d051      	beq.n	80164da <rmw_wait+0x21a>
 8016436:	f8d8 3000 	ldr.w	r3, [r8]
 801643a:	3401      	adds	r4, #1
 801643c:	42a3      	cmp	r3, r4
 801643e:	f04f 0701 	mov.w	r7, #1
 8016442:	d8f0      	bhi.n	8016426 <rmw_wait+0x166>
 8016444:	b1dd      	cbz	r5, 801647e <rmw_wait+0x1be>
 8016446:	682b      	ldr	r3, [r5, #0]
 8016448:	b1cb      	cbz	r3, 801647e <rmw_wait+0x1be>
 801644a:	2400      	movs	r4, #0
 801644c:	686b      	ldr	r3, [r5, #4]
 801644e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016452:	f7f8 fc51 	bl	800ecf8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016456:	b158      	cbz	r0, 8016470 <rmw_wait+0x1b0>
 8016458:	682b      	ldr	r3, [r5, #0]
 801645a:	3401      	adds	r4, #1
 801645c:	42a3      	cmp	r3, r4
 801645e:	d969      	bls.n	8016534 <rmw_wait+0x274>
 8016460:	686b      	ldr	r3, [r5, #4]
 8016462:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016466:	2701      	movs	r7, #1
 8016468:	f7f8 fc46 	bl	800ecf8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801646c:	2800      	cmp	r0, #0
 801646e:	d1f3      	bne.n	8016458 <rmw_wait+0x198>
 8016470:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016474:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016478:	3401      	adds	r4, #1
 801647a:	42a3      	cmp	r3, r4
 801647c:	d8e6      	bhi.n	801644c <rmw_wait+0x18c>
 801647e:	b1a6      	cbz	r6, 80164aa <rmw_wait+0x1ea>
 8016480:	6834      	ldr	r4, [r6, #0]
 8016482:	b194      	cbz	r4, 80164aa <rmw_wait+0x1ea>
 8016484:	2300      	movs	r3, #0
 8016486:	461d      	mov	r5, r3
 8016488:	e004      	b.n	8016494 <rmw_wait+0x1d4>
 801648a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801648e:	3301      	adds	r3, #1
 8016490:	42a3      	cmp	r3, r4
 8016492:	d00a      	beq.n	80164aa <rmw_wait+0x1ea>
 8016494:	6870      	ldr	r0, [r6, #4]
 8016496:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801649a:	7c0a      	ldrb	r2, [r1, #16]
 801649c:	2a00      	cmp	r2, #0
 801649e:	d0f4      	beq.n	801648a <rmw_wait+0x1ca>
 80164a0:	3301      	adds	r3, #1
 80164a2:	42a3      	cmp	r3, r4
 80164a4:	740d      	strb	r5, [r1, #16]
 80164a6:	4617      	mov	r7, r2
 80164a8:	d1f4      	bne.n	8016494 <rmw_wait+0x1d4>
 80164aa:	2f00      	cmp	r7, #0
 80164ac:	d03e      	beq.n	801652c <rmw_wait+0x26c>
 80164ae:	2000      	movs	r0, #0
 80164b0:	b009      	add	sp, #36	; 0x24
 80164b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164b6:	68a0      	ldr	r0, [r4, #8]
 80164b8:	2100      	movs	r1, #0
 80164ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80164be:	f7f9 fced 	bl	800fe9c <uxr_run_session_timeout>
 80164c2:	6864      	ldr	r4, [r4, #4]
 80164c4:	2c00      	cmp	r4, #0
 80164c6:	d1f6      	bne.n	80164b6 <rmw_wait+0x1f6>
 80164c8:	e78c      	b.n	80163e4 <rmw_wait+0x124>
 80164ca:	e9d9 3200 	ldrd	r3, r2, [r9]
 80164ce:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80164d2:	3401      	adds	r4, #1
 80164d4:	42a3      	cmp	r3, r4
 80164d6:	d890      	bhi.n	80163fa <rmw_wait+0x13a>
 80164d8:	e79e      	b.n	8016418 <rmw_wait+0x158>
 80164da:	e9d8 3200 	ldrd	r3, r2, [r8]
 80164de:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80164e2:	3401      	adds	r4, #1
 80164e4:	429c      	cmp	r4, r3
 80164e6:	d39e      	bcc.n	8016426 <rmw_wait+0x166>
 80164e8:	e7ac      	b.n	8016444 <rmw_wait+0x184>
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	f47f aef3 	bne.w	80162d6 <rmw_wait+0x16>
 80164f0:	2800      	cmp	r0, #0
 80164f2:	f47f aef0 	bne.w	80162d6 <rmw_wait+0x16>
 80164f6:	2900      	cmp	r1, #0
 80164f8:	f47f aeed 	bne.w	80162d6 <rmw_wait+0x16>
 80164fc:	e7d7      	b.n	80164ae <rmw_wait+0x1ee>
 80164fe:	4639      	mov	r1, r7
 8016500:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016504:	f7f9 fce4 	bl	800fed0 <uxr_run_session_until_data>
 8016508:	6864      	ldr	r4, [r4, #4]
 801650a:	2c00      	cmp	r4, #0
 801650c:	f47f af5f 	bne.w	80163ce <rmw_wait+0x10e>
 8016510:	e768      	b.n	80163e4 <rmw_wait+0x124>
 8016512:	f1b8 0f00 	cmp.w	r8, #0
 8016516:	d032      	beq.n	801657e <rmw_wait+0x2be>
 8016518:	f8d8 3000 	ldr.w	r3, [r8]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d181      	bne.n	8016424 <rmw_wait+0x164>
 8016520:	461f      	mov	r7, r3
 8016522:	2d00      	cmp	r5, #0
 8016524:	d18f      	bne.n	8016446 <rmw_wait+0x186>
 8016526:	462f      	mov	r7, r5
 8016528:	2e00      	cmp	r6, #0
 801652a:	d1a9      	bne.n	8016480 <rmw_wait+0x1c0>
 801652c:	2002      	movs	r0, #2
 801652e:	b009      	add	sp, #36	; 0x24
 8016530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016534:	2e00      	cmp	r6, #0
 8016536:	d0ba      	beq.n	80164ae <rmw_wait+0x1ee>
 8016538:	6834      	ldr	r4, [r6, #0]
 801653a:	2701      	movs	r7, #1
 801653c:	2c00      	cmp	r4, #0
 801653e:	d1a1      	bne.n	8016484 <rmw_wait+0x1c4>
 8016540:	e7b5      	b.n	80164ae <rmw_wait+0x1ee>
 8016542:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016546:	f7fe fd9b 	bl	8015080 <rmw_time_total_nsec>
 801654a:	2300      	movs	r3, #0
 801654c:	4a13      	ldr	r2, [pc, #76]	; (801659c <rmw_wait+0x2dc>)
 801654e:	f7e9 ff7f 	bl	8000450 <__aeabi_uldivmod>
 8016552:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8016556:	f171 0300 	sbcs.w	r3, r1, #0
 801655a:	4607      	mov	r7, r0
 801655c:	bfa8      	it	ge
 801655e:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8016562:	e6c9      	b.n	80162f8 <rmw_wait+0x38>
 8016564:	f1b8 0f00 	cmp.w	r8, #0
 8016568:	d009      	beq.n	801657e <rmw_wait+0x2be>
 801656a:	f8d8 3000 	ldr.w	r3, [r8]
 801656e:	464f      	mov	r7, r9
 8016570:	2b00      	cmp	r3, #0
 8016572:	f47f af57 	bne.w	8016424 <rmw_wait+0x164>
 8016576:	2d00      	cmp	r5, #0
 8016578:	f47f af65 	bne.w	8016446 <rmw_wait+0x186>
 801657c:	e7d3      	b.n	8016526 <rmw_wait+0x266>
 801657e:	b17d      	cbz	r5, 80165a0 <rmw_wait+0x2e0>
 8016580:	682b      	ldr	r3, [r5, #0]
 8016582:	4647      	mov	r7, r8
 8016584:	2b00      	cmp	r3, #0
 8016586:	f47f af60 	bne.w	801644a <rmw_wait+0x18a>
 801658a:	2e00      	cmp	r6, #0
 801658c:	f47f af78 	bne.w	8016480 <rmw_wait+0x1c0>
 8016590:	e7cc      	b.n	801652c <rmw_wait+0x26c>
 8016592:	bf00      	nop
 8016594:	0801a298 	.word	0x0801a298
 8016598:	2000dd64 	.word	0x2000dd64
 801659c:	000f4240 	.word	0x000f4240
 80165a0:	2e00      	cmp	r6, #0
 80165a2:	d0c3      	beq.n	801652c <rmw_wait+0x26c>
 80165a4:	6834      	ldr	r4, [r6, #0]
 80165a6:	462f      	mov	r7, r5
 80165a8:	2c00      	cmp	r4, #0
 80165aa:	f47f af6b 	bne.w	8016484 <rmw_wait+0x1c4>
 80165ae:	e7bd      	b.n	801652c <rmw_wait+0x26c>

080165b0 <rmw_create_wait_set>:
 80165b0:	b508      	push	{r3, lr}
 80165b2:	4803      	ldr	r0, [pc, #12]	; (80165c0 <rmw_create_wait_set+0x10>)
 80165b4:	f7fe fedc 	bl	8015370 <get_memory>
 80165b8:	b108      	cbz	r0, 80165be <rmw_create_wait_set+0xe>
 80165ba:	6880      	ldr	r0, [r0, #8]
 80165bc:	3010      	adds	r0, #16
 80165be:	bd08      	pop	{r3, pc}
 80165c0:	2000dda4 	.word	0x2000dda4

080165c4 <rmw_destroy_wait_set>:
 80165c4:	b508      	push	{r3, lr}
 80165c6:	4b08      	ldr	r3, [pc, #32]	; (80165e8 <rmw_destroy_wait_set+0x24>)
 80165c8:	6819      	ldr	r1, [r3, #0]
 80165ca:	b911      	cbnz	r1, 80165d2 <rmw_destroy_wait_set+0xe>
 80165cc:	e00a      	b.n	80165e4 <rmw_destroy_wait_set+0x20>
 80165ce:	6849      	ldr	r1, [r1, #4]
 80165d0:	b141      	cbz	r1, 80165e4 <rmw_destroy_wait_set+0x20>
 80165d2:	688b      	ldr	r3, [r1, #8]
 80165d4:	3310      	adds	r3, #16
 80165d6:	4298      	cmp	r0, r3
 80165d8:	d1f9      	bne.n	80165ce <rmw_destroy_wait_set+0xa>
 80165da:	4803      	ldr	r0, [pc, #12]	; (80165e8 <rmw_destroy_wait_set+0x24>)
 80165dc:	f7fe fed8 	bl	8015390 <put_memory>
 80165e0:	2000      	movs	r0, #0
 80165e2:	bd08      	pop	{r3, pc}
 80165e4:	2001      	movs	r0, #1
 80165e6:	bd08      	pop	{r3, pc}
 80165e8:	2000dda4 	.word	0x2000dda4

080165ec <rmw_uros_epoch_nanos>:
 80165ec:	4b05      	ldr	r3, [pc, #20]	; (8016604 <rmw_uros_epoch_nanos+0x18>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	b123      	cbz	r3, 80165fc <rmw_uros_epoch_nanos+0x10>
 80165f2:	6898      	ldr	r0, [r3, #8]
 80165f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80165f8:	f7f9 b8c0 	b.w	800f77c <uxr_epoch_nanos>
 80165fc:	2000      	movs	r0, #0
 80165fe:	2100      	movs	r1, #0
 8016600:	4770      	bx	lr
 8016602:	bf00      	nop
 8016604:	2000dd64 	.word	0x2000dd64

08016608 <std_msgs__msg__Int32__init>:
 8016608:	3800      	subs	r0, #0
 801660a:	bf18      	it	ne
 801660c:	2001      	movne	r0, #1
 801660e:	4770      	bx	lr

08016610 <std_msgs__msg__Int32__fini>:
 8016610:	4770      	bx	lr
 8016612:	bf00      	nop

08016614 <ucdr_serialize_endian_array_char>:
 8016614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016618:	4619      	mov	r1, r3
 801661a:	461f      	mov	r7, r3
 801661c:	4605      	mov	r5, r0
 801661e:	4690      	mov	r8, r2
 8016620:	f7f6 fda6 	bl	800d170 <ucdr_check_buffer_available_for>
 8016624:	b9e0      	cbnz	r0, 8016660 <ucdr_serialize_endian_array_char+0x4c>
 8016626:	463e      	mov	r6, r7
 8016628:	e009      	b.n	801663e <ucdr_serialize_endian_array_char+0x2a>
 801662a:	68a8      	ldr	r0, [r5, #8]
 801662c:	f002 fa64 	bl	8018af8 <memcpy>
 8016630:	68ab      	ldr	r3, [r5, #8]
 8016632:	6928      	ldr	r0, [r5, #16]
 8016634:	4423      	add	r3, r4
 8016636:	4420      	add	r0, r4
 8016638:	1b36      	subs	r6, r6, r4
 801663a:	60ab      	str	r3, [r5, #8]
 801663c:	6128      	str	r0, [r5, #16]
 801663e:	4631      	mov	r1, r6
 8016640:	2201      	movs	r2, #1
 8016642:	4628      	mov	r0, r5
 8016644:	f7f6 fe1c 	bl	800d280 <ucdr_check_final_buffer_behavior_array>
 8016648:	1bb9      	subs	r1, r7, r6
 801664a:	4441      	add	r1, r8
 801664c:	4604      	mov	r4, r0
 801664e:	4602      	mov	r2, r0
 8016650:	2800      	cmp	r0, #0
 8016652:	d1ea      	bne.n	801662a <ucdr_serialize_endian_array_char+0x16>
 8016654:	2301      	movs	r3, #1
 8016656:	7da8      	ldrb	r0, [r5, #22]
 8016658:	756b      	strb	r3, [r5, #21]
 801665a:	4058      	eors	r0, r3
 801665c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016660:	463a      	mov	r2, r7
 8016662:	68a8      	ldr	r0, [r5, #8]
 8016664:	4641      	mov	r1, r8
 8016666:	f002 fa47 	bl	8018af8 <memcpy>
 801666a:	68aa      	ldr	r2, [r5, #8]
 801666c:	692b      	ldr	r3, [r5, #16]
 801666e:	443a      	add	r2, r7
 8016670:	443b      	add	r3, r7
 8016672:	60aa      	str	r2, [r5, #8]
 8016674:	612b      	str	r3, [r5, #16]
 8016676:	e7ed      	b.n	8016654 <ucdr_serialize_endian_array_char+0x40>

08016678 <ucdr_deserialize_endian_array_char>:
 8016678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801667c:	4619      	mov	r1, r3
 801667e:	461f      	mov	r7, r3
 8016680:	4605      	mov	r5, r0
 8016682:	4690      	mov	r8, r2
 8016684:	f7f6 fd74 	bl	800d170 <ucdr_check_buffer_available_for>
 8016688:	b9e0      	cbnz	r0, 80166c4 <ucdr_deserialize_endian_array_char+0x4c>
 801668a:	463e      	mov	r6, r7
 801668c:	e009      	b.n	80166a2 <ucdr_deserialize_endian_array_char+0x2a>
 801668e:	68a9      	ldr	r1, [r5, #8]
 8016690:	f002 fa32 	bl	8018af8 <memcpy>
 8016694:	68ab      	ldr	r3, [r5, #8]
 8016696:	6928      	ldr	r0, [r5, #16]
 8016698:	4423      	add	r3, r4
 801669a:	4420      	add	r0, r4
 801669c:	1b36      	subs	r6, r6, r4
 801669e:	60ab      	str	r3, [r5, #8]
 80166a0:	6128      	str	r0, [r5, #16]
 80166a2:	2201      	movs	r2, #1
 80166a4:	4631      	mov	r1, r6
 80166a6:	4628      	mov	r0, r5
 80166a8:	f7f6 fdea 	bl	800d280 <ucdr_check_final_buffer_behavior_array>
 80166ac:	4604      	mov	r4, r0
 80166ae:	1bb8      	subs	r0, r7, r6
 80166b0:	4440      	add	r0, r8
 80166b2:	4622      	mov	r2, r4
 80166b4:	2c00      	cmp	r4, #0
 80166b6:	d1ea      	bne.n	801668e <ucdr_deserialize_endian_array_char+0x16>
 80166b8:	2301      	movs	r3, #1
 80166ba:	7da8      	ldrb	r0, [r5, #22]
 80166bc:	756b      	strb	r3, [r5, #21]
 80166be:	4058      	eors	r0, r3
 80166c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166c4:	463a      	mov	r2, r7
 80166c6:	68a9      	ldr	r1, [r5, #8]
 80166c8:	4640      	mov	r0, r8
 80166ca:	f002 fa15 	bl	8018af8 <memcpy>
 80166ce:	68aa      	ldr	r2, [r5, #8]
 80166d0:	692b      	ldr	r3, [r5, #16]
 80166d2:	443a      	add	r2, r7
 80166d4:	443b      	add	r3, r7
 80166d6:	60aa      	str	r2, [r5, #8]
 80166d8:	612b      	str	r3, [r5, #16]
 80166da:	e7ed      	b.n	80166b8 <ucdr_deserialize_endian_array_char+0x40>

080166dc <ucdr_serialize_array_uint8_t>:
 80166dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166e0:	4688      	mov	r8, r1
 80166e2:	4611      	mov	r1, r2
 80166e4:	4617      	mov	r7, r2
 80166e6:	4605      	mov	r5, r0
 80166e8:	f7f6 fd42 	bl	800d170 <ucdr_check_buffer_available_for>
 80166ec:	b9e0      	cbnz	r0, 8016728 <ucdr_serialize_array_uint8_t+0x4c>
 80166ee:	463e      	mov	r6, r7
 80166f0:	e009      	b.n	8016706 <ucdr_serialize_array_uint8_t+0x2a>
 80166f2:	68a8      	ldr	r0, [r5, #8]
 80166f4:	f002 fa00 	bl	8018af8 <memcpy>
 80166f8:	68aa      	ldr	r2, [r5, #8]
 80166fa:	692b      	ldr	r3, [r5, #16]
 80166fc:	4422      	add	r2, r4
 80166fe:	4423      	add	r3, r4
 8016700:	1b36      	subs	r6, r6, r4
 8016702:	60aa      	str	r2, [r5, #8]
 8016704:	612b      	str	r3, [r5, #16]
 8016706:	4631      	mov	r1, r6
 8016708:	2201      	movs	r2, #1
 801670a:	4628      	mov	r0, r5
 801670c:	f7f6 fdb8 	bl	800d280 <ucdr_check_final_buffer_behavior_array>
 8016710:	1bb9      	subs	r1, r7, r6
 8016712:	4441      	add	r1, r8
 8016714:	4604      	mov	r4, r0
 8016716:	4602      	mov	r2, r0
 8016718:	2800      	cmp	r0, #0
 801671a:	d1ea      	bne.n	80166f2 <ucdr_serialize_array_uint8_t+0x16>
 801671c:	2301      	movs	r3, #1
 801671e:	7da8      	ldrb	r0, [r5, #22]
 8016720:	756b      	strb	r3, [r5, #21]
 8016722:	4058      	eors	r0, r3
 8016724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016728:	463a      	mov	r2, r7
 801672a:	68a8      	ldr	r0, [r5, #8]
 801672c:	4641      	mov	r1, r8
 801672e:	f002 f9e3 	bl	8018af8 <memcpy>
 8016732:	68aa      	ldr	r2, [r5, #8]
 8016734:	692b      	ldr	r3, [r5, #16]
 8016736:	443a      	add	r2, r7
 8016738:	443b      	add	r3, r7
 801673a:	60aa      	str	r2, [r5, #8]
 801673c:	612b      	str	r3, [r5, #16]
 801673e:	e7ed      	b.n	801671c <ucdr_serialize_array_uint8_t+0x40>

08016740 <ucdr_serialize_endian_array_uint8_t>:
 8016740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016744:	4619      	mov	r1, r3
 8016746:	461f      	mov	r7, r3
 8016748:	4605      	mov	r5, r0
 801674a:	4690      	mov	r8, r2
 801674c:	f7f6 fd10 	bl	800d170 <ucdr_check_buffer_available_for>
 8016750:	b9e0      	cbnz	r0, 801678c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8016752:	463e      	mov	r6, r7
 8016754:	e009      	b.n	801676a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8016756:	68a8      	ldr	r0, [r5, #8]
 8016758:	f002 f9ce 	bl	8018af8 <memcpy>
 801675c:	68ab      	ldr	r3, [r5, #8]
 801675e:	6928      	ldr	r0, [r5, #16]
 8016760:	4423      	add	r3, r4
 8016762:	4420      	add	r0, r4
 8016764:	1b36      	subs	r6, r6, r4
 8016766:	60ab      	str	r3, [r5, #8]
 8016768:	6128      	str	r0, [r5, #16]
 801676a:	4631      	mov	r1, r6
 801676c:	2201      	movs	r2, #1
 801676e:	4628      	mov	r0, r5
 8016770:	f7f6 fd86 	bl	800d280 <ucdr_check_final_buffer_behavior_array>
 8016774:	1bb9      	subs	r1, r7, r6
 8016776:	4441      	add	r1, r8
 8016778:	4604      	mov	r4, r0
 801677a:	4602      	mov	r2, r0
 801677c:	2800      	cmp	r0, #0
 801677e:	d1ea      	bne.n	8016756 <ucdr_serialize_endian_array_uint8_t+0x16>
 8016780:	2301      	movs	r3, #1
 8016782:	7da8      	ldrb	r0, [r5, #22]
 8016784:	756b      	strb	r3, [r5, #21]
 8016786:	4058      	eors	r0, r3
 8016788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801678c:	463a      	mov	r2, r7
 801678e:	68a8      	ldr	r0, [r5, #8]
 8016790:	4641      	mov	r1, r8
 8016792:	f002 f9b1 	bl	8018af8 <memcpy>
 8016796:	68aa      	ldr	r2, [r5, #8]
 8016798:	692b      	ldr	r3, [r5, #16]
 801679a:	443a      	add	r2, r7
 801679c:	443b      	add	r3, r7
 801679e:	60aa      	str	r2, [r5, #8]
 80167a0:	612b      	str	r3, [r5, #16]
 80167a2:	e7ed      	b.n	8016780 <ucdr_serialize_endian_array_uint8_t+0x40>

080167a4 <ucdr_deserialize_array_uint8_t>:
 80167a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167a8:	4688      	mov	r8, r1
 80167aa:	4611      	mov	r1, r2
 80167ac:	4617      	mov	r7, r2
 80167ae:	4605      	mov	r5, r0
 80167b0:	f7f6 fcde 	bl	800d170 <ucdr_check_buffer_available_for>
 80167b4:	b9e0      	cbnz	r0, 80167f0 <ucdr_deserialize_array_uint8_t+0x4c>
 80167b6:	463e      	mov	r6, r7
 80167b8:	e009      	b.n	80167ce <ucdr_deserialize_array_uint8_t+0x2a>
 80167ba:	68a9      	ldr	r1, [r5, #8]
 80167bc:	f002 f99c 	bl	8018af8 <memcpy>
 80167c0:	68aa      	ldr	r2, [r5, #8]
 80167c2:	692b      	ldr	r3, [r5, #16]
 80167c4:	4422      	add	r2, r4
 80167c6:	4423      	add	r3, r4
 80167c8:	1b36      	subs	r6, r6, r4
 80167ca:	60aa      	str	r2, [r5, #8]
 80167cc:	612b      	str	r3, [r5, #16]
 80167ce:	2201      	movs	r2, #1
 80167d0:	4631      	mov	r1, r6
 80167d2:	4628      	mov	r0, r5
 80167d4:	f7f6 fd54 	bl	800d280 <ucdr_check_final_buffer_behavior_array>
 80167d8:	4604      	mov	r4, r0
 80167da:	1bb8      	subs	r0, r7, r6
 80167dc:	4440      	add	r0, r8
 80167de:	4622      	mov	r2, r4
 80167e0:	2c00      	cmp	r4, #0
 80167e2:	d1ea      	bne.n	80167ba <ucdr_deserialize_array_uint8_t+0x16>
 80167e4:	2301      	movs	r3, #1
 80167e6:	7da8      	ldrb	r0, [r5, #22]
 80167e8:	756b      	strb	r3, [r5, #21]
 80167ea:	4058      	eors	r0, r3
 80167ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167f0:	463a      	mov	r2, r7
 80167f2:	68a9      	ldr	r1, [r5, #8]
 80167f4:	4640      	mov	r0, r8
 80167f6:	f002 f97f 	bl	8018af8 <memcpy>
 80167fa:	68aa      	ldr	r2, [r5, #8]
 80167fc:	692b      	ldr	r3, [r5, #16]
 80167fe:	443a      	add	r2, r7
 8016800:	443b      	add	r3, r7
 8016802:	60aa      	str	r2, [r5, #8]
 8016804:	612b      	str	r3, [r5, #16]
 8016806:	e7ed      	b.n	80167e4 <ucdr_deserialize_array_uint8_t+0x40>

08016808 <ucdr_deserialize_endian_array_uint8_t>:
 8016808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801680c:	4619      	mov	r1, r3
 801680e:	461f      	mov	r7, r3
 8016810:	4605      	mov	r5, r0
 8016812:	4690      	mov	r8, r2
 8016814:	f7f6 fcac 	bl	800d170 <ucdr_check_buffer_available_for>
 8016818:	b9e0      	cbnz	r0, 8016854 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801681a:	463e      	mov	r6, r7
 801681c:	e009      	b.n	8016832 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801681e:	68a9      	ldr	r1, [r5, #8]
 8016820:	f002 f96a 	bl	8018af8 <memcpy>
 8016824:	68ab      	ldr	r3, [r5, #8]
 8016826:	6928      	ldr	r0, [r5, #16]
 8016828:	4423      	add	r3, r4
 801682a:	4420      	add	r0, r4
 801682c:	1b36      	subs	r6, r6, r4
 801682e:	60ab      	str	r3, [r5, #8]
 8016830:	6128      	str	r0, [r5, #16]
 8016832:	2201      	movs	r2, #1
 8016834:	4631      	mov	r1, r6
 8016836:	4628      	mov	r0, r5
 8016838:	f7f6 fd22 	bl	800d280 <ucdr_check_final_buffer_behavior_array>
 801683c:	4604      	mov	r4, r0
 801683e:	1bb8      	subs	r0, r7, r6
 8016840:	4440      	add	r0, r8
 8016842:	4622      	mov	r2, r4
 8016844:	2c00      	cmp	r4, #0
 8016846:	d1ea      	bne.n	801681e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8016848:	2301      	movs	r3, #1
 801684a:	7da8      	ldrb	r0, [r5, #22]
 801684c:	756b      	strb	r3, [r5, #21]
 801684e:	4058      	eors	r0, r3
 8016850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016854:	463a      	mov	r2, r7
 8016856:	68a9      	ldr	r1, [r5, #8]
 8016858:	4640      	mov	r0, r8
 801685a:	f002 f94d 	bl	8018af8 <memcpy>
 801685e:	68aa      	ldr	r2, [r5, #8]
 8016860:	692b      	ldr	r3, [r5, #16]
 8016862:	443a      	add	r2, r7
 8016864:	443b      	add	r3, r7
 8016866:	60aa      	str	r2, [r5, #8]
 8016868:	612b      	str	r3, [r5, #16]
 801686a:	e7ed      	b.n	8016848 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801686c <ucdr_serialize_sequence_char>:
 801686c:	b570      	push	{r4, r5, r6, lr}
 801686e:	4615      	mov	r5, r2
 8016870:	460e      	mov	r6, r1
 8016872:	7d01      	ldrb	r1, [r0, #20]
 8016874:	4604      	mov	r4, r0
 8016876:	f7f5 fe3b 	bl	800c4f0 <ucdr_serialize_endian_uint32_t>
 801687a:	b90d      	cbnz	r5, 8016880 <ucdr_serialize_sequence_char+0x14>
 801687c:	2001      	movs	r0, #1
 801687e:	bd70      	pop	{r4, r5, r6, pc}
 8016880:	7d21      	ldrb	r1, [r4, #20]
 8016882:	462b      	mov	r3, r5
 8016884:	4632      	mov	r2, r6
 8016886:	4620      	mov	r0, r4
 8016888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801688c:	f7ff bec2 	b.w	8016614 <ucdr_serialize_endian_array_char>

08016890 <ucdr_deserialize_sequence_char>:
 8016890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016894:	461d      	mov	r5, r3
 8016896:	4616      	mov	r6, r2
 8016898:	460f      	mov	r7, r1
 801689a:	461a      	mov	r2, r3
 801689c:	7d01      	ldrb	r1, [r0, #20]
 801689e:	4604      	mov	r4, r0
 80168a0:	f7f5 ff4e 	bl	800c740 <ucdr_deserialize_endian_uint32_t>
 80168a4:	682b      	ldr	r3, [r5, #0]
 80168a6:	429e      	cmp	r6, r3
 80168a8:	bf3c      	itt	cc
 80168aa:	2201      	movcc	r2, #1
 80168ac:	75a2      	strbcc	r2, [r4, #22]
 80168ae:	b913      	cbnz	r3, 80168b6 <ucdr_deserialize_sequence_char+0x26>
 80168b0:	2001      	movs	r0, #1
 80168b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168b6:	7d21      	ldrb	r1, [r4, #20]
 80168b8:	463a      	mov	r2, r7
 80168ba:	4620      	mov	r0, r4
 80168bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168c0:	f7ff beda 	b.w	8016678 <ucdr_deserialize_endian_array_char>

080168c4 <ucdr_serialize_sequence_uint8_t>:
 80168c4:	b570      	push	{r4, r5, r6, lr}
 80168c6:	4615      	mov	r5, r2
 80168c8:	460e      	mov	r6, r1
 80168ca:	7d01      	ldrb	r1, [r0, #20]
 80168cc:	4604      	mov	r4, r0
 80168ce:	f7f5 fe0f 	bl	800c4f0 <ucdr_serialize_endian_uint32_t>
 80168d2:	b90d      	cbnz	r5, 80168d8 <ucdr_serialize_sequence_uint8_t+0x14>
 80168d4:	2001      	movs	r0, #1
 80168d6:	bd70      	pop	{r4, r5, r6, pc}
 80168d8:	7d21      	ldrb	r1, [r4, #20]
 80168da:	462b      	mov	r3, r5
 80168dc:	4632      	mov	r2, r6
 80168de:	4620      	mov	r0, r4
 80168e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168e4:	f7ff bf2c 	b.w	8016740 <ucdr_serialize_endian_array_uint8_t>

080168e8 <ucdr_deserialize_sequence_uint8_t>:
 80168e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168ec:	461d      	mov	r5, r3
 80168ee:	4616      	mov	r6, r2
 80168f0:	460f      	mov	r7, r1
 80168f2:	461a      	mov	r2, r3
 80168f4:	7d01      	ldrb	r1, [r0, #20]
 80168f6:	4604      	mov	r4, r0
 80168f8:	f7f5 ff22 	bl	800c740 <ucdr_deserialize_endian_uint32_t>
 80168fc:	682b      	ldr	r3, [r5, #0]
 80168fe:	429e      	cmp	r6, r3
 8016900:	bf3c      	itt	cc
 8016902:	2201      	movcc	r2, #1
 8016904:	75a2      	strbcc	r2, [r4, #22]
 8016906:	b913      	cbnz	r3, 801690e <ucdr_deserialize_sequence_uint8_t+0x26>
 8016908:	2001      	movs	r0, #1
 801690a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801690e:	7d21      	ldrb	r1, [r4, #20]
 8016910:	463a      	mov	r2, r7
 8016912:	4620      	mov	r0, r4
 8016914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016918:	f7ff bf76 	b.w	8016808 <ucdr_deserialize_endian_array_uint8_t>

0801691c <ucdr_serialize_string>:
 801691c:	b510      	push	{r4, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	4604      	mov	r4, r0
 8016922:	4608      	mov	r0, r1
 8016924:	9101      	str	r1, [sp, #4]
 8016926:	f7e9 fc5d 	bl	80001e4 <strlen>
 801692a:	9901      	ldr	r1, [sp, #4]
 801692c:	1c42      	adds	r2, r0, #1
 801692e:	4620      	mov	r0, r4
 8016930:	b002      	add	sp, #8
 8016932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016936:	f7ff bf99 	b.w	801686c <ucdr_serialize_sequence_char>
 801693a:	bf00      	nop

0801693c <ucdr_deserialize_string>:
 801693c:	b500      	push	{lr}
 801693e:	b083      	sub	sp, #12
 8016940:	ab01      	add	r3, sp, #4
 8016942:	f7ff ffa5 	bl	8016890 <ucdr_deserialize_sequence_char>
 8016946:	b003      	add	sp, #12
 8016948:	f85d fb04 	ldr.w	pc, [sp], #4

0801694c <get_custom_error>:
 801694c:	4b01      	ldr	r3, [pc, #4]	; (8016954 <get_custom_error+0x8>)
 801694e:	7818      	ldrb	r0, [r3, #0]
 8016950:	4770      	bx	lr
 8016952:	bf00      	nop
 8016954:	2000df20 	.word	0x2000df20

08016958 <recv_custom_msg>:
 8016958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801695c:	4693      	mov	fp, r2
 801695e:	b089      	sub	sp, #36	; 0x24
 8016960:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8016964:	9305      	str	r3, [sp, #20]
 8016966:	468a      	mov	sl, r1
 8016968:	2100      	movs	r1, #0
 801696a:	4604      	mov	r4, r0
 801696c:	f88d 101e 	strb.w	r1, [sp, #30]
 8016970:	b322      	cbz	r2, 80169bc <recv_custom_msg+0x64>
 8016972:	f200 2902 	addw	r9, r0, #514	; 0x202
 8016976:	f10d 081f 	add.w	r8, sp, #31
 801697a:	af05      	add	r7, sp, #20
 801697c:	f10d 061e 	add.w	r6, sp, #30
 8016980:	f44f 7500 	mov.w	r5, #512	; 0x200
 8016984:	e002      	b.n	801698c <recv_custom_msg+0x34>
 8016986:	9b05      	ldr	r3, [sp, #20]
 8016988:	2b00      	cmp	r3, #0
 801698a:	dd0f      	ble.n	80169ac <recv_custom_msg+0x54>
 801698c:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8016990:	4623      	mov	r3, r4
 8016992:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8016996:	e9cd 5600 	strd	r5, r6, [sp]
 801699a:	4622      	mov	r2, r4
 801699c:	4648      	mov	r0, r9
 801699e:	f001 f92d 	bl	8017bfc <uxr_read_framed_msg>
 80169a2:	2800      	cmp	r0, #0
 80169a4:	d0ef      	beq.n	8016986 <recv_custom_msg+0x2e>
 80169a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80169aa:	b1b3      	cbz	r3, 80169da <recv_custom_msg+0x82>
 80169ac:	4b0f      	ldr	r3, [pc, #60]	; (80169ec <recv_custom_msg+0x94>)
 80169ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80169b2:	701a      	strb	r2, [r3, #0]
 80169b4:	2000      	movs	r0, #0
 80169b6:	b009      	add	sp, #36	; 0x24
 80169b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169bc:	f10d 021f 	add.w	r2, sp, #31
 80169c0:	9200      	str	r2, [sp, #0]
 80169c2:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80169c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80169ca:	4601      	mov	r1, r0
 80169cc:	47a8      	blx	r5
 80169ce:	2800      	cmp	r0, #0
 80169d0:	d0ec      	beq.n	80169ac <recv_custom_msg+0x54>
 80169d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d1e8      	bne.n	80169ac <recv_custom_msg+0x54>
 80169da:	f8cb 0000 	str.w	r0, [fp]
 80169de:	2001      	movs	r0, #1
 80169e0:	f8ca 4000 	str.w	r4, [sl]
 80169e4:	b009      	add	sp, #36	; 0x24
 80169e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ea:	bf00      	nop
 80169ec:	2000df20 	.word	0x2000df20

080169f0 <send_custom_msg>:
 80169f0:	b530      	push	{r4, r5, lr}
 80169f2:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 80169f6:	b087      	sub	sp, #28
 80169f8:	4615      	mov	r5, r2
 80169fa:	b974      	cbnz	r4, 8016a1a <send_custom_msg+0x2a>
 80169fc:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8016a00:	f10d 0317 	add.w	r3, sp, #23
 8016a04:	47a0      	blx	r4
 8016a06:	b108      	cbz	r0, 8016a0c <send_custom_msg+0x1c>
 8016a08:	42a8      	cmp	r0, r5
 8016a0a:	d015      	beq.n	8016a38 <send_custom_msg+0x48>
 8016a0c:	4b0c      	ldr	r3, [pc, #48]	; (8016a40 <send_custom_msg+0x50>)
 8016a0e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8016a12:	701a      	strb	r2, [r3, #0]
 8016a14:	2000      	movs	r0, #0
 8016a16:	b007      	add	sp, #28
 8016a18:	bd30      	pop	{r4, r5, pc}
 8016a1a:	460b      	mov	r3, r1
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	f10d 0117 	add.w	r1, sp, #23
 8016a22:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8016a26:	4602      	mov	r2, r0
 8016a28:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8016a2c:	9500      	str	r5, [sp, #0]
 8016a2e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8016a32:	f000 feeb 	bl	801780c <uxr_write_framed_msg>
 8016a36:	e7e6      	b.n	8016a06 <send_custom_msg+0x16>
 8016a38:	2001      	movs	r0, #1
 8016a3a:	b007      	add	sp, #28
 8016a3c:	bd30      	pop	{r4, r5, pc}
 8016a3e:	bf00      	nop
 8016a40:	2000df20 	.word	0x2000df20

08016a44 <uxr_set_custom_transport_callbacks>:
 8016a44:	b410      	push	{r4}
 8016a46:	9c01      	ldr	r4, [sp, #4]
 8016a48:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8016a4c:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8016a50:	9b02      	ldr	r3, [sp, #8]
 8016a52:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8016a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a5a:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8016a5e:	4770      	bx	lr

08016a60 <uxr_init_custom_transport>:
 8016a60:	b538      	push	{r3, r4, r5, lr}
 8016a62:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8016a66:	b303      	cbz	r3, 8016aaa <uxr_init_custom_transport+0x4a>
 8016a68:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	b1e2      	cbz	r2, 8016aaa <uxr_init_custom_transport+0x4a>
 8016a70:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8016a74:	b1ca      	cbz	r2, 8016aaa <uxr_init_custom_transport+0x4a>
 8016a76:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8016a7a:	b1b2      	cbz	r2, 8016aaa <uxr_init_custom_transport+0x4a>
 8016a7c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8016a80:	4798      	blx	r3
 8016a82:	4605      	mov	r5, r0
 8016a84:	b188      	cbz	r0, 8016aaa <uxr_init_custom_transport+0x4a>
 8016a86:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8016a8a:	b98b      	cbnz	r3, 8016ab0 <uxr_init_custom_transport+0x50>
 8016a8c:	490b      	ldr	r1, [pc, #44]	; (8016abc <uxr_init_custom_transport+0x5c>)
 8016a8e:	4b0c      	ldr	r3, [pc, #48]	; (8016ac0 <uxr_init_custom_transport+0x60>)
 8016a90:	4a0c      	ldr	r2, [pc, #48]	; (8016ac4 <uxr_init_custom_transport+0x64>)
 8016a92:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8016a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016a9a:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8016a9e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8016aa2:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	bd38      	pop	{r3, r4, r5, pc}
 8016aaa:	2500      	movs	r5, #0
 8016aac:	4628      	mov	r0, r5
 8016aae:	bd38      	pop	{r3, r4, r5, pc}
 8016ab0:	2100      	movs	r1, #0
 8016ab2:	f204 2002 	addw	r0, r4, #514	; 0x202
 8016ab6:	f000 fea3 	bl	8017800 <uxr_init_framing_io>
 8016aba:	e7e7      	b.n	8016a8c <uxr_init_custom_transport+0x2c>
 8016abc:	080169f1 	.word	0x080169f1
 8016ac0:	08016959 	.word	0x08016959
 8016ac4:	0801694d 	.word	0x0801694d

08016ac8 <uxr_close_custom_transport>:
 8016ac8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8016acc:	4718      	bx	r3
 8016ace:	bf00      	nop

08016ad0 <uxr_init_input_best_effort_stream>:
 8016ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ad4:	8003      	strh	r3, [r0, #0]
 8016ad6:	4770      	bx	lr

08016ad8 <uxr_reset_input_best_effort_stream>:
 8016ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016adc:	8003      	strh	r3, [r0, #0]
 8016ade:	4770      	bx	lr

08016ae0 <uxr_receive_best_effort_message>:
 8016ae0:	b538      	push	{r3, r4, r5, lr}
 8016ae2:	4604      	mov	r4, r0
 8016ae4:	8800      	ldrh	r0, [r0, #0]
 8016ae6:	460d      	mov	r5, r1
 8016ae8:	f000 fe72 	bl	80177d0 <uxr_seq_num_cmp>
 8016aec:	4603      	mov	r3, r0
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016af4:	bfb8      	it	lt
 8016af6:	8025      	strhlt	r5, [r4, #0]
 8016af8:	bd38      	pop	{r3, r4, r5, pc}
 8016afa:	bf00      	nop

08016afc <on_full_input_buffer>:
 8016afc:	b570      	push	{r4, r5, r6, lr}
 8016afe:	4605      	mov	r5, r0
 8016b00:	460c      	mov	r4, r1
 8016b02:	682b      	ldr	r3, [r5, #0]
 8016b04:	6809      	ldr	r1, [r1, #0]
 8016b06:	8920      	ldrh	r0, [r4, #8]
 8016b08:	6862      	ldr	r2, [r4, #4]
 8016b0a:	fbb2 f2f0 	udiv	r2, r2, r0
 8016b0e:	eba3 0c01 	sub.w	ip, r3, r1
 8016b12:	fbbc fcf2 	udiv	ip, ip, r2
 8016b16:	f10c 0c01 	add.w	ip, ip, #1
 8016b1a:	fa1f f38c 	uxth.w	r3, ip
 8016b1e:	fbb3 f6f0 	udiv	r6, r3, r0
 8016b22:	fb00 3316 	mls	r3, r0, r6, r3
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	fb02 f303 	mul.w	r3, r2, r3
 8016b2c:	1d18      	adds	r0, r3, #4
 8016b2e:	4408      	add	r0, r1
 8016b30:	7d26      	ldrb	r6, [r4, #20]
 8016b32:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016b36:	b116      	cbz	r6, 8016b3e <on_full_input_buffer+0x42>
 8016b38:	2600      	movs	r6, #0
 8016b3a:	f840 6c04 	str.w	r6, [r0, #-4]
 8016b3e:	2a03      	cmp	r2, #3
 8016b40:	d801      	bhi.n	8016b46 <on_full_input_buffer+0x4a>
 8016b42:	2001      	movs	r0, #1
 8016b44:	bd70      	pop	{r4, r5, r6, pc}
 8016b46:	3308      	adds	r3, #8
 8016b48:	4419      	add	r1, r3
 8016b4a:	4628      	mov	r0, r5
 8016b4c:	692b      	ldr	r3, [r5, #16]
 8016b4e:	3a04      	subs	r2, #4
 8016b50:	f7f6 fb5a 	bl	800d208 <ucdr_init_buffer_origin>
 8016b54:	4628      	mov	r0, r5
 8016b56:	4903      	ldr	r1, [pc, #12]	; (8016b64 <on_full_input_buffer+0x68>)
 8016b58:	4622      	mov	r2, r4
 8016b5a:	f7f6 fb31 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 8016b5e:	2000      	movs	r0, #0
 8016b60:	bd70      	pop	{r4, r5, r6, pc}
 8016b62:	bf00      	nop
 8016b64:	08016afd 	.word	0x08016afd

08016b68 <uxr_init_input_reliable_stream>:
 8016b68:	b500      	push	{lr}
 8016b6a:	e9c0 1200 	strd	r1, r2, [r0]
 8016b6e:	f04f 0e00 	mov.w	lr, #0
 8016b72:	9a01      	ldr	r2, [sp, #4]
 8016b74:	8103      	strh	r3, [r0, #8]
 8016b76:	6102      	str	r2, [r0, #16]
 8016b78:	f880 e014 	strb.w	lr, [r0, #20]
 8016b7c:	b1d3      	cbz	r3, 8016bb4 <uxr_init_input_reliable_stream+0x4c>
 8016b7e:	f8c1 e000 	str.w	lr, [r1]
 8016b82:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016b86:	f1bc 0f01 	cmp.w	ip, #1
 8016b8a:	d913      	bls.n	8016bb4 <uxr_init_input_reliable_stream+0x4c>
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	fbb3 f1fc 	udiv	r1, r3, ip
 8016b92:	fb0c 3111 	mls	r1, ip, r1, r3
 8016b96:	b289      	uxth	r1, r1
 8016b98:	6842      	ldr	r2, [r0, #4]
 8016b9a:	fbb2 f2fc 	udiv	r2, r2, ip
 8016b9e:	fb01 f202 	mul.w	r2, r1, r2
 8016ba2:	6801      	ldr	r1, [r0, #0]
 8016ba4:	f841 e002 	str.w	lr, [r1, r2]
 8016ba8:	3301      	adds	r3, #1
 8016baa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016bae:	b29b      	uxth	r3, r3
 8016bb0:	459c      	cmp	ip, r3
 8016bb2:	d8ec      	bhi.n	8016b8e <uxr_init_input_reliable_stream+0x26>
 8016bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bb8:	60c3      	str	r3, [r0, #12]
 8016bba:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bbe:	bf00      	nop

08016bc0 <uxr_reset_input_reliable_stream>:
 8016bc0:	8901      	ldrh	r1, [r0, #8]
 8016bc2:	b1e9      	cbz	r1, 8016c00 <uxr_reset_input_reliable_stream+0x40>
 8016bc4:	f04f 0c00 	mov.w	ip, #0
 8016bc8:	b500      	push	{lr}
 8016bca:	4663      	mov	r3, ip
 8016bcc:	46e6      	mov	lr, ip
 8016bce:	fbb3 f2f1 	udiv	r2, r3, r1
 8016bd2:	fb01 3312 	mls	r3, r1, r2, r3
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	6842      	ldr	r2, [r0, #4]
 8016bda:	fbb2 f2f1 	udiv	r2, r2, r1
 8016bde:	fb02 f303 	mul.w	r3, r2, r3
 8016be2:	6802      	ldr	r2, [r0, #0]
 8016be4:	f842 e003 	str.w	lr, [r2, r3]
 8016be8:	f10c 0c01 	add.w	ip, ip, #1
 8016bec:	8901      	ldrh	r1, [r0, #8]
 8016bee:	fa1f f38c 	uxth.w	r3, ip
 8016bf2:	4299      	cmp	r1, r3
 8016bf4:	d8eb      	bhi.n	8016bce <uxr_reset_input_reliable_stream+0xe>
 8016bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bfa:	60c3      	str	r3, [r0, #12]
 8016bfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c04:	60c3      	str	r3, [r0, #12]
 8016c06:	4770      	bx	lr

08016c08 <uxr_receive_reliable_message>:
 8016c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	460d      	mov	r5, r1
 8016c10:	8901      	ldrh	r1, [r0, #8]
 8016c12:	8980      	ldrh	r0, [r0, #12]
 8016c14:	4690      	mov	r8, r2
 8016c16:	461f      	mov	r7, r3
 8016c18:	f000 fdd2 	bl	80177c0 <uxr_seq_num_add>
 8016c1c:	4629      	mov	r1, r5
 8016c1e:	4606      	mov	r6, r0
 8016c20:	89a0      	ldrh	r0, [r4, #12]
 8016c22:	f000 fdd5 	bl	80177d0 <uxr_seq_num_cmp>
 8016c26:	2800      	cmp	r0, #0
 8016c28:	db0a      	blt.n	8016c40 <uxr_receive_reliable_message+0x38>
 8016c2a:	2600      	movs	r6, #0
 8016c2c:	89e0      	ldrh	r0, [r4, #14]
 8016c2e:	4629      	mov	r1, r5
 8016c30:	f000 fdce 	bl	80177d0 <uxr_seq_num_cmp>
 8016c34:	2800      	cmp	r0, #0
 8016c36:	da00      	bge.n	8016c3a <uxr_receive_reliable_message+0x32>
 8016c38:	81e5      	strh	r5, [r4, #14]
 8016c3a:	4630      	mov	r0, r6
 8016c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c40:	4630      	mov	r0, r6
 8016c42:	4629      	mov	r1, r5
 8016c44:	f000 fdc4 	bl	80177d0 <uxr_seq_num_cmp>
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	dbee      	blt.n	8016c2a <uxr_receive_reliable_message+0x22>
 8016c4c:	6923      	ldr	r3, [r4, #16]
 8016c4e:	4640      	mov	r0, r8
 8016c50:	4798      	blx	r3
 8016c52:	2101      	movs	r1, #1
 8016c54:	4681      	mov	r9, r0
 8016c56:	89a0      	ldrh	r0, [r4, #12]
 8016c58:	f000 fdb2 	bl	80177c0 <uxr_seq_num_add>
 8016c5c:	f1b9 0f00 	cmp.w	r9, #0
 8016c60:	d101      	bne.n	8016c66 <uxr_receive_reliable_message+0x5e>
 8016c62:	4285      	cmp	r5, r0
 8016c64:	d047      	beq.n	8016cf6 <uxr_receive_reliable_message+0xee>
 8016c66:	8922      	ldrh	r2, [r4, #8]
 8016c68:	fbb5 f0f2 	udiv	r0, r5, r2
 8016c6c:	fb02 5010 	mls	r0, r2, r0, r5
 8016c70:	b280      	uxth	r0, r0
 8016c72:	6863      	ldr	r3, [r4, #4]
 8016c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c78:	fb00 f303 	mul.w	r3, r0, r3
 8016c7c:	6820      	ldr	r0, [r4, #0]
 8016c7e:	3304      	adds	r3, #4
 8016c80:	4418      	add	r0, r3
 8016c82:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d1cf      	bne.n	8016c2a <uxr_receive_reliable_message+0x22>
 8016c8a:	4641      	mov	r1, r8
 8016c8c:	463a      	mov	r2, r7
 8016c8e:	f001 ff33 	bl	8018af8 <memcpy>
 8016c92:	8921      	ldrh	r1, [r4, #8]
 8016c94:	fbb5 f2f1 	udiv	r2, r5, r1
 8016c98:	fb01 5212 	mls	r2, r1, r2, r5
 8016c9c:	b292      	uxth	r2, r2
 8016c9e:	6863      	ldr	r3, [r4, #4]
 8016ca0:	fbb3 f3f1 	udiv	r3, r3, r1
 8016ca4:	fb02 f303 	mul.w	r3, r2, r3
 8016ca8:	6822      	ldr	r2, [r4, #0]
 8016caa:	50d7      	str	r7, [r2, r3]
 8016cac:	9a08      	ldr	r2, [sp, #32]
 8016cae:	2301      	movs	r3, #1
 8016cb0:	7013      	strb	r3, [r2, #0]
 8016cb2:	f1b9 0f00 	cmp.w	r9, #0
 8016cb6:	d0b8      	beq.n	8016c2a <uxr_receive_reliable_message+0x22>
 8016cb8:	89a6      	ldrh	r6, [r4, #12]
 8016cba:	4630      	mov	r0, r6
 8016cbc:	2101      	movs	r1, #1
 8016cbe:	f000 fd7f 	bl	80177c0 <uxr_seq_num_add>
 8016cc2:	8922      	ldrh	r2, [r4, #8]
 8016cc4:	6863      	ldr	r3, [r4, #4]
 8016cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8016cca:	4606      	mov	r6, r0
 8016ccc:	fbb0 f0f2 	udiv	r0, r0, r2
 8016cd0:	fb02 6010 	mls	r0, r2, r0, r6
 8016cd4:	b280      	uxth	r0, r0
 8016cd6:	fb00 f303 	mul.w	r3, r0, r3
 8016cda:	6820      	ldr	r0, [r4, #0]
 8016cdc:	3304      	adds	r3, #4
 8016cde:	4418      	add	r0, r3
 8016ce0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d0a0      	beq.n	8016c2a <uxr_receive_reliable_message+0x22>
 8016ce8:	6923      	ldr	r3, [r4, #16]
 8016cea:	4798      	blx	r3
 8016cec:	2802      	cmp	r0, #2
 8016cee:	d008      	beq.n	8016d02 <uxr_receive_reliable_message+0xfa>
 8016cf0:	2801      	cmp	r0, #1
 8016cf2:	d0e2      	beq.n	8016cba <uxr_receive_reliable_message+0xb2>
 8016cf4:	e799      	b.n	8016c2a <uxr_receive_reliable_message+0x22>
 8016cf6:	9b08      	ldr	r3, [sp, #32]
 8016cf8:	81a5      	strh	r5, [r4, #12]
 8016cfa:	2601      	movs	r6, #1
 8016cfc:	f883 9000 	strb.w	r9, [r3]
 8016d00:	e794      	b.n	8016c2c <uxr_receive_reliable_message+0x24>
 8016d02:	2601      	movs	r6, #1
 8016d04:	e792      	b.n	8016c2c <uxr_receive_reliable_message+0x24>
 8016d06:	bf00      	nop

08016d08 <uxr_next_input_reliable_buffer_available>:
 8016d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d0c:	4604      	mov	r4, r0
 8016d0e:	460f      	mov	r7, r1
 8016d10:	8980      	ldrh	r0, [r0, #12]
 8016d12:	2101      	movs	r1, #1
 8016d14:	4690      	mov	r8, r2
 8016d16:	f000 fd53 	bl	80177c0 <uxr_seq_num_add>
 8016d1a:	8922      	ldrh	r2, [r4, #8]
 8016d1c:	fbb0 f6f2 	udiv	r6, r0, r2
 8016d20:	fb02 0616 	mls	r6, r2, r6, r0
 8016d24:	b2b6      	uxth	r6, r6
 8016d26:	6863      	ldr	r3, [r4, #4]
 8016d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d2c:	fb06 f303 	mul.w	r3, r6, r3
 8016d30:	6826      	ldr	r6, [r4, #0]
 8016d32:	3304      	adds	r3, #4
 8016d34:	441e      	add	r6, r3
 8016d36:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016d3a:	f1b9 0f00 	cmp.w	r9, #0
 8016d3e:	d023      	beq.n	8016d88 <uxr_next_input_reliable_buffer_available+0x80>
 8016d40:	6923      	ldr	r3, [r4, #16]
 8016d42:	4605      	mov	r5, r0
 8016d44:	4630      	mov	r0, r6
 8016d46:	4798      	blx	r3
 8016d48:	4682      	mov	sl, r0
 8016d4a:	b300      	cbz	r0, 8016d8e <uxr_next_input_reliable_buffer_available+0x86>
 8016d4c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016d50:	2101      	movs	r1, #1
 8016d52:	4650      	mov	r0, sl
 8016d54:	f000 fd34 	bl	80177c0 <uxr_seq_num_add>
 8016d58:	8921      	ldrh	r1, [r4, #8]
 8016d5a:	fbb0 f2f1 	udiv	r2, r0, r1
 8016d5e:	4682      	mov	sl, r0
 8016d60:	fb01 0212 	mls	r2, r1, r2, r0
 8016d64:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016d68:	b292      	uxth	r2, r2
 8016d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8016d6e:	fb02 f303 	mul.w	r3, r2, r3
 8016d72:	3304      	adds	r3, #4
 8016d74:	4418      	add	r0, r3
 8016d76:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016d7a:	b12b      	cbz	r3, 8016d88 <uxr_next_input_reliable_buffer_available+0x80>
 8016d7c:	6923      	ldr	r3, [r4, #16]
 8016d7e:	4798      	blx	r3
 8016d80:	2802      	cmp	r0, #2
 8016d82:	d01b      	beq.n	8016dbc <uxr_next_input_reliable_buffer_available+0xb4>
 8016d84:	2801      	cmp	r0, #1
 8016d86:	d0e3      	beq.n	8016d50 <uxr_next_input_reliable_buffer_available+0x48>
 8016d88:	2000      	movs	r0, #0
 8016d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d8e:	464a      	mov	r2, r9
 8016d90:	4631      	mov	r1, r6
 8016d92:	4638      	mov	r0, r7
 8016d94:	f7f6 fa40 	bl	800d218 <ucdr_init_buffer>
 8016d98:	8921      	ldrh	r1, [r4, #8]
 8016d9a:	fbb5 f2f1 	udiv	r2, r5, r1
 8016d9e:	fb01 5212 	mls	r2, r1, r2, r5
 8016da2:	b292      	uxth	r2, r2
 8016da4:	6863      	ldr	r3, [r4, #4]
 8016da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8016daa:	fb02 f303 	mul.w	r3, r2, r3
 8016dae:	6822      	ldr	r2, [r4, #0]
 8016db0:	f842 a003 	str.w	sl, [r2, r3]
 8016db4:	2001      	movs	r0, #1
 8016db6:	81a5      	strh	r5, [r4, #12]
 8016db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dbc:	8920      	ldrh	r0, [r4, #8]
 8016dbe:	fbb5 f3f0 	udiv	r3, r5, r0
 8016dc2:	fb00 5513 	mls	r5, r0, r3, r5
 8016dc6:	b2ad      	uxth	r5, r5
 8016dc8:	6863      	ldr	r3, [r4, #4]
 8016dca:	fbb3 f3f0 	udiv	r3, r3, r0
 8016dce:	fb03 f505 	mul.w	r5, r3, r5
 8016dd2:	6823      	ldr	r3, [r4, #0]
 8016dd4:	2000      	movs	r0, #0
 8016dd6:	5158      	str	r0, [r3, r5]
 8016dd8:	eb06 0108 	add.w	r1, r6, r8
 8016ddc:	eba9 0208 	sub.w	r2, r9, r8
 8016de0:	4638      	mov	r0, r7
 8016de2:	f7f6 fa19 	bl	800d218 <ucdr_init_buffer>
 8016de6:	4638      	mov	r0, r7
 8016de8:	4903      	ldr	r1, [pc, #12]	; (8016df8 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016dea:	4622      	mov	r2, r4
 8016dec:	f7f6 f9e8 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 8016df0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016df4:	2001      	movs	r0, #1
 8016df6:	e7c8      	b.n	8016d8a <uxr_next_input_reliable_buffer_available+0x82>
 8016df8:	08016afd 	.word	0x08016afd

08016dfc <uxr_process_heartbeat>:
 8016dfc:	b538      	push	{r3, r4, r5, lr}
 8016dfe:	4611      	mov	r1, r2
 8016e00:	4604      	mov	r4, r0
 8016e02:	89c0      	ldrh	r0, [r0, #14]
 8016e04:	4615      	mov	r5, r2
 8016e06:	f000 fce3 	bl	80177d0 <uxr_seq_num_cmp>
 8016e0a:	2800      	cmp	r0, #0
 8016e0c:	bfb8      	it	lt
 8016e0e:	81e5      	strhlt	r5, [r4, #14]
 8016e10:	bd38      	pop	{r3, r4, r5, pc}
 8016e12:	bf00      	nop

08016e14 <uxr_compute_acknack>:
 8016e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e18:	8903      	ldrh	r3, [r0, #8]
 8016e1a:	8985      	ldrh	r5, [r0, #12]
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	460e      	mov	r6, r1
 8016e20:	b1d3      	cbz	r3, 8016e58 <uxr_compute_acknack+0x44>
 8016e22:	4628      	mov	r0, r5
 8016e24:	2701      	movs	r7, #1
 8016e26:	e003      	b.n	8016e30 <uxr_compute_acknack+0x1c>
 8016e28:	4567      	cmp	r7, ip
 8016e2a:	d215      	bcs.n	8016e58 <uxr_compute_acknack+0x44>
 8016e2c:	89a0      	ldrh	r0, [r4, #12]
 8016e2e:	3701      	adds	r7, #1
 8016e30:	b2b9      	uxth	r1, r7
 8016e32:	f000 fcc5 	bl	80177c0 <uxr_seq_num_add>
 8016e36:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e3a:	fbb0 f3fc 	udiv	r3, r0, ip
 8016e3e:	fb0c 0313 	mls	r3, ip, r3, r0
 8016e42:	b29a      	uxth	r2, r3
 8016e44:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016e48:	fbb3 f3fc 	udiv	r3, r3, ip
 8016e4c:	fb02 f303 	mul.w	r3, r2, r3
 8016e50:	58cb      	ldr	r3, [r1, r3]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d1e8      	bne.n	8016e28 <uxr_compute_acknack+0x14>
 8016e56:	4605      	mov	r5, r0
 8016e58:	8035      	strh	r5, [r6, #0]
 8016e5a:	2101      	movs	r1, #1
 8016e5c:	4628      	mov	r0, r5
 8016e5e:	89e7      	ldrh	r7, [r4, #14]
 8016e60:	f000 fcb2 	bl	80177c8 <uxr_seq_num_sub>
 8016e64:	4601      	mov	r1, r0
 8016e66:	4638      	mov	r0, r7
 8016e68:	f000 fcae 	bl	80177c8 <uxr_seq_num_sub>
 8016e6c:	4605      	mov	r5, r0
 8016e6e:	b318      	cbz	r0, 8016eb8 <uxr_compute_acknack+0xa4>
 8016e70:	f04f 0900 	mov.w	r9, #0
 8016e74:	464f      	mov	r7, r9
 8016e76:	f04f 0801 	mov.w	r8, #1
 8016e7a:	fa1f f189 	uxth.w	r1, r9
 8016e7e:	8830      	ldrh	r0, [r6, #0]
 8016e80:	f000 fc9e 	bl	80177c0 <uxr_seq_num_add>
 8016e84:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e88:	fbb0 f3fc 	udiv	r3, r0, ip
 8016e8c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016e90:	fb03 001c 	mls	r0, r3, ip, r0
 8016e94:	b283      	uxth	r3, r0
 8016e96:	fbb2 f2fc 	udiv	r2, r2, ip
 8016e9a:	fb02 f303 	mul.w	r3, r2, r3
 8016e9e:	fa08 f209 	lsl.w	r2, r8, r9
 8016ea2:	58cb      	ldr	r3, [r1, r3]
 8016ea4:	f109 0901 	add.w	r9, r9, #1
 8016ea8:	b90b      	cbnz	r3, 8016eae <uxr_compute_acknack+0x9a>
 8016eaa:	4317      	orrs	r7, r2
 8016eac:	b2bf      	uxth	r7, r7
 8016eae:	454d      	cmp	r5, r9
 8016eb0:	d1e3      	bne.n	8016e7a <uxr_compute_acknack+0x66>
 8016eb2:	4638      	mov	r0, r7
 8016eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016eb8:	4607      	mov	r7, r0
 8016eba:	4638      	mov	r0, r7
 8016ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016ec0 <uxr_init_output_best_effort_stream>:
 8016ec0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8016ec4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016ec8:	6001      	str	r1, [r0, #0]
 8016eca:	7303      	strb	r3, [r0, #12]
 8016ecc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016ed0:	4770      	bx	lr
 8016ed2:	bf00      	nop

08016ed4 <uxr_reset_output_best_effort_stream>:
 8016ed4:	7b02      	ldrb	r2, [r0, #12]
 8016ed6:	6042      	str	r2, [r0, #4]
 8016ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016edc:	81c3      	strh	r3, [r0, #14]
 8016ede:	4770      	bx	lr

08016ee0 <uxr_prepare_best_effort_buffer_to_write>:
 8016ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	b083      	sub	sp, #12
 8016ee6:	6840      	ldr	r0, [r0, #4]
 8016ee8:	460d      	mov	r5, r1
 8016eea:	4616      	mov	r6, r2
 8016eec:	f7f9 fd3c 	bl	8010968 <uxr_submessage_padding>
 8016ef0:	6863      	ldr	r3, [r4, #4]
 8016ef2:	4418      	add	r0, r3
 8016ef4:	68a3      	ldr	r3, [r4, #8]
 8016ef6:	1942      	adds	r2, r0, r5
 8016ef8:	4293      	cmp	r3, r2
 8016efa:	bf2c      	ite	cs
 8016efc:	2701      	movcs	r7, #1
 8016efe:	2700      	movcc	r7, #0
 8016f00:	d202      	bcs.n	8016f08 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016f02:	4638      	mov	r0, r7
 8016f04:	b003      	add	sp, #12
 8016f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f08:	9000      	str	r0, [sp, #0]
 8016f0a:	6821      	ldr	r1, [r4, #0]
 8016f0c:	4630      	mov	r0, r6
 8016f0e:	2300      	movs	r3, #0
 8016f10:	f7f6 f970 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 8016f14:	6861      	ldr	r1, [r4, #4]
 8016f16:	4638      	mov	r0, r7
 8016f18:	4429      	add	r1, r5
 8016f1a:	6061      	str	r1, [r4, #4]
 8016f1c:	b003      	add	sp, #12
 8016f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f20 <uxr_prepare_best_effort_buffer_to_send>:
 8016f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f24:	4604      	mov	r4, r0
 8016f26:	461d      	mov	r5, r3
 8016f28:	6840      	ldr	r0, [r0, #4]
 8016f2a:	7b23      	ldrb	r3, [r4, #12]
 8016f2c:	4298      	cmp	r0, r3
 8016f2e:	bf8c      	ite	hi
 8016f30:	2601      	movhi	r6, #1
 8016f32:	2600      	movls	r6, #0
 8016f34:	d802      	bhi.n	8016f3c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8016f36:	4630      	mov	r0, r6
 8016f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f3c:	4688      	mov	r8, r1
 8016f3e:	89e0      	ldrh	r0, [r4, #14]
 8016f40:	2101      	movs	r1, #1
 8016f42:	4617      	mov	r7, r2
 8016f44:	f000 fc3c 	bl	80177c0 <uxr_seq_num_add>
 8016f48:	6823      	ldr	r3, [r4, #0]
 8016f4a:	81e0      	strh	r0, [r4, #14]
 8016f4c:	8028      	strh	r0, [r5, #0]
 8016f4e:	f8c8 3000 	str.w	r3, [r8]
 8016f52:	6863      	ldr	r3, [r4, #4]
 8016f54:	603b      	str	r3, [r7, #0]
 8016f56:	7b23      	ldrb	r3, [r4, #12]
 8016f58:	6063      	str	r3, [r4, #4]
 8016f5a:	4630      	mov	r0, r6
 8016f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f60 <on_full_output_buffer>:
 8016f60:	b538      	push	{r3, r4, r5, lr}
 8016f62:	6802      	ldr	r2, [r0, #0]
 8016f64:	460c      	mov	r4, r1
 8016f66:	6809      	ldr	r1, [r1, #0]
 8016f68:	8923      	ldrh	r3, [r4, #8]
 8016f6a:	eba2 0c01 	sub.w	ip, r2, r1
 8016f6e:	6862      	ldr	r2, [r4, #4]
 8016f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8016f74:	fbbc fcf2 	udiv	ip, ip, r2
 8016f78:	f10c 0c01 	add.w	ip, ip, #1
 8016f7c:	fa1f fc8c 	uxth.w	ip, ip
 8016f80:	fbbc fef3 	udiv	lr, ip, r3
 8016f84:	fb03 c31e 	mls	r3, r3, lr, ip
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	fb02 f303 	mul.w	r3, r2, r3
 8016f8e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016f92:	58ca      	ldr	r2, [r1, r3]
 8016f94:	4463      	add	r3, ip
 8016f96:	eba2 020c 	sub.w	r2, r2, ip
 8016f9a:	3308      	adds	r3, #8
 8016f9c:	4605      	mov	r5, r0
 8016f9e:	4419      	add	r1, r3
 8016fa0:	3a04      	subs	r2, #4
 8016fa2:	6903      	ldr	r3, [r0, #16]
 8016fa4:	f7f6 f930 	bl	800d208 <ucdr_init_buffer_origin>
 8016fa8:	4628      	mov	r0, r5
 8016faa:	4903      	ldr	r1, [pc, #12]	; (8016fb8 <on_full_output_buffer+0x58>)
 8016fac:	4622      	mov	r2, r4
 8016fae:	f7f6 f907 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 8016fb2:	2000      	movs	r0, #0
 8016fb4:	bd38      	pop	{r3, r4, r5, pc}
 8016fb6:	bf00      	nop
 8016fb8:	08016f61 	.word	0x08016f61

08016fbc <uxr_init_output_reliable_stream>:
 8016fbc:	b410      	push	{r4}
 8016fbe:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016fc2:	8103      	strh	r3, [r0, #8]
 8016fc4:	e9c0 1200 	strd	r1, r2, [r0]
 8016fc8:	f880 c00c 	strb.w	ip, [r0, #12]
 8016fcc:	b1d3      	cbz	r3, 8017004 <uxr_init_output_reliable_stream+0x48>
 8016fce:	f8c1 c000 	str.w	ip, [r1]
 8016fd2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016fd6:	f1bc 0f01 	cmp.w	ip, #1
 8016fda:	d913      	bls.n	8017004 <uxr_init_output_reliable_stream+0x48>
 8016fdc:	2301      	movs	r3, #1
 8016fde:	fbb3 f1fc 	udiv	r1, r3, ip
 8016fe2:	fb0c 3111 	mls	r1, ip, r1, r3
 8016fe6:	b289      	uxth	r1, r1
 8016fe8:	6842      	ldr	r2, [r0, #4]
 8016fea:	6804      	ldr	r4, [r0, #0]
 8016fec:	fbb2 f2fc 	udiv	r2, r2, ip
 8016ff0:	fb01 f202 	mul.w	r2, r1, r2
 8016ff4:	7b01      	ldrb	r1, [r0, #12]
 8016ff6:	50a1      	str	r1, [r4, r2]
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	459c      	cmp	ip, r3
 8017002:	d8ec      	bhi.n	8016fde <uxr_init_output_reliable_stream+0x22>
 8017004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017008:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801700c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017010:	4905      	ldr	r1, [pc, #20]	; (8017028 <uxr_init_output_reliable_stream+0x6c>)
 8017012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017016:	f8c0 100e 	str.w	r1, [r0, #14]
 801701a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801701e:	2300      	movs	r3, #0
 8017020:	8242      	strh	r2, [r0, #18]
 8017022:	8403      	strh	r3, [r0, #32]
 8017024:	4770      	bx	lr
 8017026:	bf00      	nop
 8017028:	ffff0000 	.word	0xffff0000

0801702c <uxr_reset_output_reliable_stream>:
 801702c:	8901      	ldrh	r1, [r0, #8]
 801702e:	b1b1      	cbz	r1, 801705e <uxr_reset_output_reliable_stream+0x32>
 8017030:	f04f 0c00 	mov.w	ip, #0
 8017034:	4663      	mov	r3, ip
 8017036:	fbb3 f2f1 	udiv	r2, r3, r1
 801703a:	fb01 3312 	mls	r3, r1, r2, r3
 801703e:	b29b      	uxth	r3, r3
 8017040:	6842      	ldr	r2, [r0, #4]
 8017042:	fbb2 f2f1 	udiv	r2, r2, r1
 8017046:	6801      	ldr	r1, [r0, #0]
 8017048:	fb02 f303 	mul.w	r3, r2, r3
 801704c:	7b02      	ldrb	r2, [r0, #12]
 801704e:	50ca      	str	r2, [r1, r3]
 8017050:	f10c 0c01 	add.w	ip, ip, #1
 8017054:	8901      	ldrh	r1, [r0, #8]
 8017056:	fa1f f38c 	uxth.w	r3, ip
 801705a:	4299      	cmp	r1, r3
 801705c:	d8eb      	bhi.n	8017036 <uxr_reset_output_reliable_stream+0xa>
 801705e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017062:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017066:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801706a:	4904      	ldr	r1, [pc, #16]	; (801707c <uxr_reset_output_reliable_stream+0x50>)
 801706c:	f8c0 100e 	str.w	r1, [r0, #14]
 8017070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017074:	2300      	movs	r3, #0
 8017076:	8242      	strh	r2, [r0, #18]
 8017078:	8403      	strh	r3, [r0, #32]
 801707a:	4770      	bx	lr
 801707c:	ffff0000 	.word	0xffff0000

08017080 <uxr_prepare_reliable_buffer_to_write>:
 8017080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017084:	4604      	mov	r4, r0
 8017086:	b091      	sub	sp, #68	; 0x44
 8017088:	8900      	ldrh	r0, [r0, #8]
 801708a:	89e6      	ldrh	r6, [r4, #14]
 801708c:	6823      	ldr	r3, [r4, #0]
 801708e:	9204      	str	r2, [sp, #16]
 8017090:	fbb6 f2f0 	udiv	r2, r6, r0
 8017094:	fb00 6212 	mls	r2, r0, r2, r6
 8017098:	b292      	uxth	r2, r2
 801709a:	6865      	ldr	r5, [r4, #4]
 801709c:	fbb5 f5f0 	udiv	r5, r5, r0
 80170a0:	fb05 3202 	mla	r2, r5, r2, r3
 80170a4:	3204      	adds	r2, #4
 80170a6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80170aa:	f894 900c 	ldrb.w	r9, [r4, #12]
 80170ae:	9203      	str	r2, [sp, #12]
 80170b0:	468b      	mov	fp, r1
 80170b2:	1f2f      	subs	r7, r5, #4
 80170b4:	2800      	cmp	r0, #0
 80170b6:	f000 814c 	beq.w	8017352 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80170ba:	f04f 0c00 	mov.w	ip, #0
 80170be:	46e2      	mov	sl, ip
 80170c0:	4661      	mov	r1, ip
 80170c2:	fbb1 f2f0 	udiv	r2, r1, r0
 80170c6:	fb00 1212 	mls	r2, r0, r2, r1
 80170ca:	b292      	uxth	r2, r2
 80170cc:	fb05 f202 	mul.w	r2, r5, r2
 80170d0:	f10c 0c01 	add.w	ip, ip, #1
 80170d4:	589a      	ldr	r2, [r3, r2]
 80170d6:	454a      	cmp	r2, r9
 80170d8:	bf08      	it	eq
 80170da:	f10a 0a01 	addeq.w	sl, sl, #1
 80170de:	fa1f f18c 	uxth.w	r1, ip
 80170e2:	bf08      	it	eq
 80170e4:	fa1f fa8a 	uxtheq.w	sl, sl
 80170e8:	4281      	cmp	r1, r0
 80170ea:	d3ea      	bcc.n	80170c2 <uxr_prepare_reliable_buffer_to_write+0x42>
 80170ec:	4640      	mov	r0, r8
 80170ee:	2104      	movs	r1, #4
 80170f0:	f8cd a014 	str.w	sl, [sp, #20]
 80170f4:	f7f6 f894 	bl	800d220 <ucdr_alignment>
 80170f8:	4480      	add	r8, r0
 80170fa:	eb08 020b 	add.w	r2, r8, fp
 80170fe:	42ba      	cmp	r2, r7
 8017100:	f240 80cd 	bls.w	801729e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017104:	7b22      	ldrb	r2, [r4, #12]
 8017106:	445a      	add	r2, fp
 8017108:	42ba      	cmp	r2, r7
 801710a:	f240 80b5 	bls.w	8017278 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801710e:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8017112:	33fc      	adds	r3, #252	; 0xfc
 8017114:	b2ba      	uxth	r2, r7
 8017116:	4413      	add	r3, r2
 8017118:	b29b      	uxth	r3, r3
 801711a:	fb0a f903 	mul.w	r9, sl, r3
 801711e:	45d9      	cmp	r9, fp
 8017120:	9305      	str	r3, [sp, #20]
 8017122:	9306      	str	r3, [sp, #24]
 8017124:	f0c0 80b7 	bcc.w	8017296 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017128:	f108 0304 	add.w	r3, r8, #4
 801712c:	42bb      	cmp	r3, r7
 801712e:	f080 80db 	bcs.w	80172e8 <uxr_prepare_reliable_buffer_to_write+0x268>
 8017132:	f1a2 0904 	sub.w	r9, r2, #4
 8017136:	eba9 0908 	sub.w	r9, r9, r8
 801713a:	9b05      	ldr	r3, [sp, #20]
 801713c:	fa1f f989 	uxth.w	r9, r9
 8017140:	ebab 0b09 	sub.w	fp, fp, r9
 8017144:	fbbb f2f3 	udiv	r2, fp, r3
 8017148:	fb03 b312 	mls	r3, r3, r2, fp
 801714c:	2b00      	cmp	r3, #0
 801714e:	f000 80c8 	beq.w	80172e2 <uxr_prepare_reliable_buffer_to_write+0x262>
 8017152:	3201      	adds	r2, #1
 8017154:	b292      	uxth	r2, r2
 8017156:	9306      	str	r3, [sp, #24]
 8017158:	4552      	cmp	r2, sl
 801715a:	f200 809c 	bhi.w	8017296 <uxr_prepare_reliable_buffer_to_write+0x216>
 801715e:	f10d 0b20 	add.w	fp, sp, #32
 8017162:	2a00      	cmp	r2, #0
 8017164:	d042      	beq.n	80171ec <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017166:	f8cd 801c 	str.w	r8, [sp, #28]
 801716a:	f04f 0a00 	mov.w	sl, #0
 801716e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017172:	9505      	str	r5, [sp, #20]
 8017174:	f10d 0b20 	add.w	fp, sp, #32
 8017178:	4615      	mov	r5, r2
 801717a:	e000      	b.n	801717e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801717c:	46c1      	mov	r9, r8
 801717e:	8920      	ldrh	r0, [r4, #8]
 8017180:	fbb6 f2f0 	udiv	r2, r6, r0
 8017184:	fb00 6112 	mls	r1, r0, r2, r6
 8017188:	b28a      	uxth	r2, r1
 801718a:	6863      	ldr	r3, [r4, #4]
 801718c:	fbb3 f1f0 	udiv	r1, r3, r0
 8017190:	6823      	ldr	r3, [r4, #0]
 8017192:	fb02 f101 	mul.w	r1, r2, r1
 8017196:	3104      	adds	r1, #4
 8017198:	4419      	add	r1, r3
 801719a:	4658      	mov	r0, fp
 801719c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80171a0:	9200      	str	r2, [sp, #0]
 80171a2:	2300      	movs	r3, #0
 80171a4:	463a      	mov	r2, r7
 80171a6:	f7f6 f825 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 80171aa:	464a      	mov	r2, r9
 80171ac:	2300      	movs	r3, #0
 80171ae:	210d      	movs	r1, #13
 80171b0:	4658      	mov	r0, fp
 80171b2:	f7f9 fb99 	bl	80108e8 <uxr_buffer_submessage_header>
 80171b6:	8921      	ldrh	r1, [r4, #8]
 80171b8:	fbb6 f2f1 	udiv	r2, r6, r1
 80171bc:	fb01 6212 	mls	r2, r1, r2, r6
 80171c0:	b292      	uxth	r2, r2
 80171c2:	6863      	ldr	r3, [r4, #4]
 80171c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80171c8:	fb02 f303 	mul.w	r3, r2, r3
 80171cc:	6822      	ldr	r2, [r4, #0]
 80171ce:	4630      	mov	r0, r6
 80171d0:	50d7      	str	r7, [r2, r3]
 80171d2:	2101      	movs	r1, #1
 80171d4:	f000 faf4 	bl	80177c0 <uxr_seq_num_add>
 80171d8:	f10a 0a01 	add.w	sl, sl, #1
 80171dc:	fa1f f38a 	uxth.w	r3, sl
 80171e0:	429d      	cmp	r5, r3
 80171e2:	4606      	mov	r6, r0
 80171e4:	d8ca      	bhi.n	801717c <uxr_prepare_reliable_buffer_to_write+0xfc>
 80171e6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80171ea:	9d05      	ldr	r5, [sp, #20]
 80171ec:	8920      	ldrh	r0, [r4, #8]
 80171ee:	fbb6 f3f0 	udiv	r3, r6, r0
 80171f2:	fb00 6313 	mls	r3, r0, r3, r6
 80171f6:	b299      	uxth	r1, r3
 80171f8:	6863      	ldr	r3, [r4, #4]
 80171fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80171fe:	fb01 f303 	mul.w	r3, r1, r3
 8017202:	6821      	ldr	r1, [r4, #0]
 8017204:	3304      	adds	r3, #4
 8017206:	4419      	add	r1, r3
 8017208:	463a      	mov	r2, r7
 801720a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801720e:	9000      	str	r0, [sp, #0]
 8017210:	2300      	movs	r3, #0
 8017212:	4658      	mov	r0, fp
 8017214:	f7f5 ffee 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 8017218:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801721c:	4658      	mov	r0, fp
 801721e:	fa1f f289 	uxth.w	r2, r9
 8017222:	2302      	movs	r3, #2
 8017224:	210d      	movs	r1, #13
 8017226:	f7f9 fb5f 	bl	80108e8 <uxr_buffer_submessage_header>
 801722a:	9b03      	ldr	r3, [sp, #12]
 801722c:	8927      	ldrh	r7, [r4, #8]
 801722e:	7b20      	ldrb	r0, [r4, #12]
 8017230:	f108 0104 	add.w	r1, r8, #4
 8017234:	440b      	add	r3, r1
 8017236:	4619      	mov	r1, r3
 8017238:	fbb6 f3f7 	udiv	r3, r6, r7
 801723c:	fb07 6313 	mls	r3, r7, r3, r6
 8017240:	f1a5 0208 	sub.w	r2, r5, #8
 8017244:	b29d      	uxth	r5, r3
 8017246:	3004      	adds	r0, #4
 8017248:	6863      	ldr	r3, [r4, #4]
 801724a:	fbb3 f3f7 	udiv	r3, r3, r7
 801724e:	fb05 f303 	mul.w	r3, r5, r3
 8017252:	6825      	ldr	r5, [r4, #0]
 8017254:	4448      	add	r0, r9
 8017256:	50e8      	str	r0, [r5, r3]
 8017258:	9d04      	ldr	r5, [sp, #16]
 801725a:	eba2 0208 	sub.w	r2, r2, r8
 801725e:	4628      	mov	r0, r5
 8017260:	f7f5 ffda 	bl	800d218 <ucdr_init_buffer>
 8017264:	4628      	mov	r0, r5
 8017266:	493c      	ldr	r1, [pc, #240]	; (8017358 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017268:	4622      	mov	r2, r4
 801726a:	f7f5 ffa9 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 801726e:	2001      	movs	r0, #1
 8017270:	81e6      	strh	r6, [r4, #14]
 8017272:	b011      	add	sp, #68	; 0x44
 8017274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017278:	2101      	movs	r1, #1
 801727a:	89e0      	ldrh	r0, [r4, #14]
 801727c:	f000 faa0 	bl	80177c0 <uxr_seq_num_add>
 8017280:	8921      	ldrh	r1, [r4, #8]
 8017282:	4605      	mov	r5, r0
 8017284:	8a60      	ldrh	r0, [r4, #18]
 8017286:	f000 fa9b 	bl	80177c0 <uxr_seq_num_add>
 801728a:	4601      	mov	r1, r0
 801728c:	4628      	mov	r0, r5
 801728e:	f000 fa9f 	bl	80177d0 <uxr_seq_num_cmp>
 8017292:	2800      	cmp	r0, #0
 8017294:	dd42      	ble.n	801731c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8017296:	2000      	movs	r0, #0
 8017298:	b011      	add	sp, #68	; 0x44
 801729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801729e:	8921      	ldrh	r1, [r4, #8]
 80172a0:	8a60      	ldrh	r0, [r4, #18]
 80172a2:	9205      	str	r2, [sp, #20]
 80172a4:	f000 fa8c 	bl	80177c0 <uxr_seq_num_add>
 80172a8:	4601      	mov	r1, r0
 80172aa:	4630      	mov	r0, r6
 80172ac:	f000 fa90 	bl	80177d0 <uxr_seq_num_cmp>
 80172b0:	2800      	cmp	r0, #0
 80172b2:	9a05      	ldr	r2, [sp, #20]
 80172b4:	dcef      	bgt.n	8017296 <uxr_prepare_reliable_buffer_to_write+0x216>
 80172b6:	8927      	ldrh	r7, [r4, #8]
 80172b8:	fbb6 f3f7 	udiv	r3, r6, r7
 80172bc:	fb07 6313 	mls	r3, r7, r3, r6
 80172c0:	b29d      	uxth	r5, r3
 80172c2:	6863      	ldr	r3, [r4, #4]
 80172c4:	6824      	ldr	r4, [r4, #0]
 80172c6:	fbb3 f3f7 	udiv	r3, r3, r7
 80172ca:	fb05 f303 	mul.w	r3, r5, r3
 80172ce:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80172d2:	50e2      	str	r2, [r4, r3]
 80172d4:	2300      	movs	r3, #0
 80172d6:	f8cd 8000 	str.w	r8, [sp]
 80172da:	f7f5 ff8b 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 80172de:	2001      	movs	r0, #1
 80172e0:	e7da      	b.n	8017298 <uxr_prepare_reliable_buffer_to_write+0x218>
 80172e2:	b293      	uxth	r3, r2
 80172e4:	461a      	mov	r2, r3
 80172e6:	e737      	b.n	8017158 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80172e8:	4630      	mov	r0, r6
 80172ea:	2101      	movs	r1, #1
 80172ec:	9207      	str	r2, [sp, #28]
 80172ee:	f000 fa67 	bl	80177c0 <uxr_seq_num_add>
 80172f2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80172f6:	fbb0 f1fc 	udiv	r1, r0, ip
 80172fa:	fb0c 0111 	mls	r1, ip, r1, r0
 80172fe:	4606      	mov	r6, r0
 8017300:	b288      	uxth	r0, r1
 8017302:	6863      	ldr	r3, [r4, #4]
 8017304:	fbb3 f1fc 	udiv	r1, r3, ip
 8017308:	6823      	ldr	r3, [r4, #0]
 801730a:	9a07      	ldr	r2, [sp, #28]
 801730c:	fb00 f101 	mul.w	r1, r0, r1
 8017310:	3104      	adds	r1, #4
 8017312:	440b      	add	r3, r1
 8017314:	9303      	str	r3, [sp, #12]
 8017316:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801731a:	e70a      	b.n	8017132 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801731c:	8921      	ldrh	r1, [r4, #8]
 801731e:	fbb5 f3f1 	udiv	r3, r5, r1
 8017322:	fb01 5313 	mls	r3, r1, r3, r5
 8017326:	b29a      	uxth	r2, r3
 8017328:	6863      	ldr	r3, [r4, #4]
 801732a:	fbb3 f3f1 	udiv	r3, r3, r1
 801732e:	6821      	ldr	r1, [r4, #0]
 8017330:	9804      	ldr	r0, [sp, #16]
 8017332:	fb02 f303 	mul.w	r3, r2, r3
 8017336:	3304      	adds	r3, #4
 8017338:	7b22      	ldrb	r2, [r4, #12]
 801733a:	4419      	add	r1, r3
 801733c:	445a      	add	r2, fp
 801733e:	f841 2c04 	str.w	r2, [r1, #-4]
 8017342:	7b23      	ldrb	r3, [r4, #12]
 8017344:	9300      	str	r3, [sp, #0]
 8017346:	2300      	movs	r3, #0
 8017348:	f7f5 ff54 	bl	800d1f4 <ucdr_init_buffer_origin_offset>
 801734c:	81e5      	strh	r5, [r4, #14]
 801734e:	2001      	movs	r0, #1
 8017350:	e7a2      	b.n	8017298 <uxr_prepare_reliable_buffer_to_write+0x218>
 8017352:	4682      	mov	sl, r0
 8017354:	e6ca      	b.n	80170ec <uxr_prepare_reliable_buffer_to_write+0x6c>
 8017356:	bf00      	nop
 8017358:	08016f61 	.word	0x08016f61

0801735c <uxr_prepare_next_reliable_buffer_to_send>:
 801735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801735e:	4604      	mov	r4, r0
 8017360:	460f      	mov	r7, r1
 8017362:	8a00      	ldrh	r0, [r0, #16]
 8017364:	2101      	movs	r1, #1
 8017366:	4616      	mov	r6, r2
 8017368:	461d      	mov	r5, r3
 801736a:	f000 fa29 	bl	80177c0 <uxr_seq_num_add>
 801736e:	8028      	strh	r0, [r5, #0]
 8017370:	8922      	ldrh	r2, [r4, #8]
 8017372:	fbb0 f3f2 	udiv	r3, r0, r2
 8017376:	fb02 0c13 	mls	ip, r2, r3, r0
 801737a:	fa1f fc8c 	uxth.w	ip, ip
 801737e:	6863      	ldr	r3, [r4, #4]
 8017380:	fbb3 f3f2 	udiv	r3, r3, r2
 8017384:	fb0c fc03 	mul.w	ip, ip, r3
 8017388:	6823      	ldr	r3, [r4, #0]
 801738a:	89e1      	ldrh	r1, [r4, #14]
 801738c:	f10c 0c04 	add.w	ip, ip, #4
 8017390:	4463      	add	r3, ip
 8017392:	603b      	str	r3, [r7, #0]
 8017394:	6823      	ldr	r3, [r4, #0]
 8017396:	449c      	add	ip, r3
 8017398:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801739c:	6033      	str	r3, [r6, #0]
 801739e:	f000 fa17 	bl	80177d0 <uxr_seq_num_cmp>
 80173a2:	2800      	cmp	r0, #0
 80173a4:	dd01      	ble.n	80173aa <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80173a6:	2000      	movs	r0, #0
 80173a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173aa:	7b23      	ldrb	r3, [r4, #12]
 80173ac:	6832      	ldr	r2, [r6, #0]
 80173ae:	429a      	cmp	r2, r3
 80173b0:	d9f9      	bls.n	80173a6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80173b2:	8a61      	ldrh	r1, [r4, #18]
 80173b4:	8a20      	ldrh	r0, [r4, #16]
 80173b6:	f000 fa07 	bl	80177c8 <uxr_seq_num_sub>
 80173ba:	8923      	ldrh	r3, [r4, #8]
 80173bc:	4283      	cmp	r3, r0
 80173be:	d0f2      	beq.n	80173a6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80173c0:	8828      	ldrh	r0, [r5, #0]
 80173c2:	89e3      	ldrh	r3, [r4, #14]
 80173c4:	8220      	strh	r0, [r4, #16]
 80173c6:	4298      	cmp	r0, r3
 80173c8:	d001      	beq.n	80173ce <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80173ca:	2001      	movs	r0, #1
 80173cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173ce:	2101      	movs	r1, #1
 80173d0:	f000 f9f6 	bl	80177c0 <uxr_seq_num_add>
 80173d4:	81e0      	strh	r0, [r4, #14]
 80173d6:	2001      	movs	r0, #1
 80173d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173da:	bf00      	nop

080173dc <uxr_update_output_stream_heartbeat_timestamp>:
 80173dc:	b570      	push	{r4, r5, r6, lr}
 80173de:	8a01      	ldrh	r1, [r0, #16]
 80173e0:	4604      	mov	r4, r0
 80173e2:	8a40      	ldrh	r0, [r0, #18]
 80173e4:	4615      	mov	r5, r2
 80173e6:	461e      	mov	r6, r3
 80173e8:	f000 f9f2 	bl	80177d0 <uxr_seq_num_cmp>
 80173ec:	2800      	cmp	r0, #0
 80173ee:	db07      	blt.n	8017400 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80173f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80173f8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80173fc:	2000      	movs	r0, #0
 80173fe:	bd70      	pop	{r4, r5, r6, pc}
 8017400:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017404:	b940      	cbnz	r0, 8017418 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8017406:	2301      	movs	r3, #1
 8017408:	f884 3020 	strb.w	r3, [r4, #32]
 801740c:	3564      	adds	r5, #100	; 0x64
 801740e:	f146 0600 	adc.w	r6, r6, #0
 8017412:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017416:	bd70      	pop	{r4, r5, r6, pc}
 8017418:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801741c:	4295      	cmp	r5, r2
 801741e:	eb76 0303 	sbcs.w	r3, r6, r3
 8017422:	bfa5      	ittet	ge
 8017424:	3001      	addge	r0, #1
 8017426:	f884 0020 	strbge.w	r0, [r4, #32]
 801742a:	2000      	movlt	r0, #0
 801742c:	2001      	movge	r0, #1
 801742e:	e7ed      	b.n	801740c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017430 <uxr_begin_output_nack_buffer_it>:
 8017430:	8a40      	ldrh	r0, [r0, #18]
 8017432:	4770      	bx	lr

08017434 <uxr_next_reliable_nack_buffer_to_send>:
 8017434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017438:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 801743c:	b082      	sub	sp, #8
 801743e:	f1b8 0f00 	cmp.w	r8, #0
 8017442:	d011      	beq.n	8017468 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8017444:	4604      	mov	r4, r0
 8017446:	8818      	ldrh	r0, [r3, #0]
 8017448:	460e      	mov	r6, r1
 801744a:	4617      	mov	r7, r2
 801744c:	461d      	mov	r5, r3
 801744e:	2101      	movs	r1, #1
 8017450:	f000 f9b6 	bl	80177c0 <uxr_seq_num_add>
 8017454:	8028      	strh	r0, [r5, #0]
 8017456:	8a21      	ldrh	r1, [r4, #16]
 8017458:	f000 f9ba 	bl	80177d0 <uxr_seq_num_cmp>
 801745c:	2800      	cmp	r0, #0
 801745e:	dd07      	ble.n	8017470 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017460:	f04f 0800 	mov.w	r8, #0
 8017464:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8017468:	4640      	mov	r0, r8
 801746a:	b002      	add	sp, #8
 801746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017470:	8921      	ldrh	r1, [r4, #8]
 8017472:	8828      	ldrh	r0, [r5, #0]
 8017474:	6823      	ldr	r3, [r4, #0]
 8017476:	fbb0 f2f1 	udiv	r2, r0, r1
 801747a:	fb01 0c12 	mls	ip, r1, r2, r0
 801747e:	fa1f f28c 	uxth.w	r2, ip
 8017482:	9301      	str	r3, [sp, #4]
 8017484:	6863      	ldr	r3, [r4, #4]
 8017486:	fbb3 fcf1 	udiv	ip, r3, r1
 801748a:	9b01      	ldr	r3, [sp, #4]
 801748c:	fb02 fc0c 	mul.w	ip, r2, ip
 8017490:	f10c 0c04 	add.w	ip, ip, #4
 8017494:	4463      	add	r3, ip
 8017496:	6033      	str	r3, [r6, #0]
 8017498:	6823      	ldr	r3, [r4, #0]
 801749a:	4463      	add	r3, ip
 801749c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80174a0:	603b      	str	r3, [r7, #0]
 80174a2:	7b22      	ldrb	r2, [r4, #12]
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d0d2      	beq.n	801744e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80174a8:	4640      	mov	r0, r8
 80174aa:	b002      	add	sp, #8
 80174ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174b0 <uxr_process_acknack>:
 80174b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174b2:	4604      	mov	r4, r0
 80174b4:	460e      	mov	r6, r1
 80174b6:	4610      	mov	r0, r2
 80174b8:	2101      	movs	r1, #1
 80174ba:	f000 f985 	bl	80177c8 <uxr_seq_num_sub>
 80174be:	8a61      	ldrh	r1, [r4, #18]
 80174c0:	f000 f982 	bl	80177c8 <uxr_seq_num_sub>
 80174c4:	b1c0      	cbz	r0, 80174f8 <uxr_process_acknack+0x48>
 80174c6:	4605      	mov	r5, r0
 80174c8:	2700      	movs	r7, #0
 80174ca:	2101      	movs	r1, #1
 80174cc:	8a60      	ldrh	r0, [r4, #18]
 80174ce:	f000 f977 	bl	80177c0 <uxr_seq_num_add>
 80174d2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80174d6:	fbb0 f1fc 	udiv	r1, r0, ip
 80174da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80174de:	fb0c 0111 	mls	r1, ip, r1, r0
 80174e2:	b289      	uxth	r1, r1
 80174e4:	3701      	adds	r7, #1
 80174e6:	fbb3 f3fc 	udiv	r3, r3, ip
 80174ea:	fb01 f303 	mul.w	r3, r1, r3
 80174ee:	42bd      	cmp	r5, r7
 80174f0:	7b21      	ldrb	r1, [r4, #12]
 80174f2:	8260      	strh	r0, [r4, #18]
 80174f4:	50d1      	str	r1, [r2, r3]
 80174f6:	d1e8      	bne.n	80174ca <uxr_process_acknack+0x1a>
 80174f8:	3e00      	subs	r6, #0
 80174fa:	f04f 0300 	mov.w	r3, #0
 80174fe:	bf18      	it	ne
 8017500:	2601      	movne	r6, #1
 8017502:	f884 3020 	strb.w	r3, [r4, #32]
 8017506:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801750a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801750c <uxr_is_output_up_to_date>:
 801750c:	8a01      	ldrh	r1, [r0, #16]
 801750e:	8a40      	ldrh	r0, [r0, #18]
 8017510:	b508      	push	{r3, lr}
 8017512:	f000 f95d 	bl	80177d0 <uxr_seq_num_cmp>
 8017516:	fab0 f080 	clz	r0, r0
 801751a:	0940      	lsrs	r0, r0, #5
 801751c:	bd08      	pop	{r3, pc}
 801751e:	bf00      	nop

08017520 <get_available_free_slots>:
 8017520:	8902      	ldrh	r2, [r0, #8]
 8017522:	b1da      	cbz	r2, 801755c <get_available_free_slots+0x3c>
 8017524:	b530      	push	{r4, r5, lr}
 8017526:	2100      	movs	r1, #0
 8017528:	6843      	ldr	r3, [r0, #4]
 801752a:	6805      	ldr	r5, [r0, #0]
 801752c:	7b04      	ldrb	r4, [r0, #12]
 801752e:	fbb3 fef2 	udiv	lr, r3, r2
 8017532:	4608      	mov	r0, r1
 8017534:	460b      	mov	r3, r1
 8017536:	fbb3 fcf2 	udiv	ip, r3, r2
 801753a:	fb02 331c 	mls	r3, r2, ip, r3
 801753e:	b29b      	uxth	r3, r3
 8017540:	fb0e f303 	mul.w	r3, lr, r3
 8017544:	3101      	adds	r1, #1
 8017546:	f855 c003 	ldr.w	ip, [r5, r3]
 801754a:	4564      	cmp	r4, ip
 801754c:	bf08      	it	eq
 801754e:	3001      	addeq	r0, #1
 8017550:	b28b      	uxth	r3, r1
 8017552:	bf08      	it	eq
 8017554:	b280      	uxtheq	r0, r0
 8017556:	4293      	cmp	r3, r2
 8017558:	d3ed      	bcc.n	8017536 <get_available_free_slots+0x16>
 801755a:	bd30      	pop	{r4, r5, pc}
 801755c:	4610      	mov	r0, r2
 801755e:	4770      	bx	lr

08017560 <uxr_buffer_request_data>:
 8017560:	b530      	push	{r4, r5, lr}
 8017562:	b095      	sub	sp, #84	; 0x54
 8017564:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017568:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801756a:	9303      	str	r3, [sp, #12]
 801756c:	2200      	movs	r2, #0
 801756e:	2d00      	cmp	r5, #0
 8017570:	bf14      	ite	ne
 8017572:	2101      	movne	r1, #1
 8017574:	4611      	moveq	r1, r2
 8017576:	4604      	mov	r4, r0
 8017578:	f88d 301c 	strb.w	r3, [sp, #28]
 801757c:	f88d 201d 	strb.w	r2, [sp, #29]
 8017580:	f88d 201e 	strb.w	r2, [sp, #30]
 8017584:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017588:	d021      	beq.n	80175ce <uxr_buffer_request_data+0x6e>
 801758a:	682a      	ldr	r2, [r5, #0]
 801758c:	686b      	ldr	r3, [r5, #4]
 801758e:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 8017592:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017596:	2210      	movs	r2, #16
 8017598:	2308      	movs	r3, #8
 801759a:	2100      	movs	r1, #0
 801759c:	e9cd 3100 	strd	r3, r1, [sp]
 80175a0:	4620      	mov	r0, r4
 80175a2:	9905      	ldr	r1, [sp, #20]
 80175a4:	ab0c      	add	r3, sp, #48	; 0x30
 80175a6:	f7f8 ff01 	bl	80103ac <uxr_prepare_stream_to_write_submessage>
 80175aa:	b918      	cbnz	r0, 80175b4 <uxr_buffer_request_data+0x54>
 80175ac:	4604      	mov	r4, r0
 80175ae:	4620      	mov	r0, r4
 80175b0:	b015      	add	sp, #84	; 0x54
 80175b2:	bd30      	pop	{r4, r5, pc}
 80175b4:	9904      	ldr	r1, [sp, #16]
 80175b6:	aa06      	add	r2, sp, #24
 80175b8:	4620      	mov	r0, r4
 80175ba:	f7f9 f82d 	bl	8010618 <uxr_init_base_object_request>
 80175be:	a906      	add	r1, sp, #24
 80175c0:	4604      	mov	r4, r0
 80175c2:	a80c      	add	r0, sp, #48	; 0x30
 80175c4:	f7fa faf8 	bl	8011bb8 <uxr_serialize_READ_DATA_Payload>
 80175c8:	4620      	mov	r0, r4
 80175ca:	b015      	add	sp, #84	; 0x54
 80175cc:	bd30      	pop	{r4, r5, pc}
 80175ce:	2208      	movs	r2, #8
 80175d0:	e7e2      	b.n	8017598 <uxr_buffer_request_data+0x38>
 80175d2:	bf00      	nop

080175d4 <uxr_buffer_cancel_data>:
 80175d4:	b510      	push	{r4, lr}
 80175d6:	b094      	sub	sp, #80	; 0x50
 80175d8:	2300      	movs	r3, #0
 80175da:	9202      	str	r2, [sp, #8]
 80175dc:	9205      	str	r2, [sp, #20]
 80175de:	9301      	str	r3, [sp, #4]
 80175e0:	2201      	movs	r2, #1
 80175e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80175e6:	f88d 301e 	strb.w	r3, [sp, #30]
 80175ea:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80175ee:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80175f2:	2308      	movs	r3, #8
 80175f4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80175f8:	9300      	str	r3, [sp, #0]
 80175fa:	2210      	movs	r2, #16
 80175fc:	ab0c      	add	r3, sp, #48	; 0x30
 80175fe:	4604      	mov	r4, r0
 8017600:	9103      	str	r1, [sp, #12]
 8017602:	f7f8 fed3 	bl	80103ac <uxr_prepare_stream_to_write_submessage>
 8017606:	b918      	cbnz	r0, 8017610 <uxr_buffer_cancel_data+0x3c>
 8017608:	4604      	mov	r4, r0
 801760a:	4620      	mov	r0, r4
 801760c:	b014      	add	sp, #80	; 0x50
 801760e:	bd10      	pop	{r4, pc}
 8017610:	9905      	ldr	r1, [sp, #20]
 8017612:	aa06      	add	r2, sp, #24
 8017614:	4620      	mov	r0, r4
 8017616:	f7f8 ffff 	bl	8010618 <uxr_init_base_object_request>
 801761a:	a906      	add	r1, sp, #24
 801761c:	4604      	mov	r4, r0
 801761e:	a80c      	add	r0, sp, #48	; 0x30
 8017620:	f7fa faca 	bl	8011bb8 <uxr_serialize_READ_DATA_Payload>
 8017624:	4620      	mov	r0, r4
 8017626:	b014      	add	sp, #80	; 0x50
 8017628:	bd10      	pop	{r4, pc}
 801762a:	bf00      	nop

0801762c <read_submessage_format>:
 801762c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017630:	b095      	sub	sp, #84	; 0x54
 8017632:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8017636:	b113      	cbz	r3, 801763e <read_submessage_format+0x12>
 8017638:	b015      	add	sp, #84	; 0x54
 801763a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801763e:	460c      	mov	r4, r1
 8017640:	4615      	mov	r5, r2
 8017642:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017646:	4607      	mov	r7, r0
 8017648:	981c      	ldr	r0, [sp, #112]	; 0x70
 801764a:	9004      	str	r0, [sp, #16]
 801764c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801764e:	9005      	str	r0, [sp, #20]
 8017650:	1a52      	subs	r2, r2, r1
 8017652:	a80c      	add	r0, sp, #48	; 0x30
 8017654:	4699      	mov	r9, r3
 8017656:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801765a:	f7f5 fddd 	bl	800d218 <ucdr_init_buffer>
 801765e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017662:	a80c      	add	r0, sp, #48	; 0x30
 8017664:	f7f5 fdac 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 8017668:	69e2      	ldr	r2, [r4, #28]
 801766a:	b19a      	cbz	r2, 8017694 <read_submessage_format+0x68>
 801766c:	f1b8 0f07 	cmp.w	r8, #7
 8017670:	f882 9014 	strb.w	r9, [r2, #20]
 8017674:	d040      	beq.n	80176f8 <read_submessage_format+0xcc>
 8017676:	f1b8 0f08 	cmp.w	r8, #8
 801767a:	d02e      	beq.n	80176da <read_submessage_format+0xae>
 801767c:	f1b8 0f06 	cmp.w	r8, #6
 8017680:	d011      	beq.n	80176a6 <read_submessage_format+0x7a>
 8017682:	2301      	movs	r3, #1
 8017684:	7513      	strb	r3, [r2, #20]
 8017686:	4629      	mov	r1, r5
 8017688:	4620      	mov	r0, r4
 801768a:	f7f5 fe15 	bl	800d2b8 <ucdr_advance_buffer>
 801768e:	b015      	add	sp, #84	; 0x54
 8017690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017694:	f1b8 0f07 	cmp.w	r8, #7
 8017698:	d02e      	beq.n	80176f8 <read_submessage_format+0xcc>
 801769a:	f1b8 0f08 	cmp.w	r8, #8
 801769e:	d01c      	beq.n	80176da <read_submessage_format+0xae>
 80176a0:	f1b8 0f06 	cmp.w	r8, #6
 80176a4:	d1ef      	bne.n	8017686 <read_submessage_format+0x5a>
 80176a6:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 80176aa:	f1b8 0f00 	cmp.w	r8, #0
 80176ae:	d011      	beq.n	80176d4 <read_submessage_format+0xa8>
 80176b0:	ab0c      	add	r3, sp, #48	; 0x30
 80176b2:	e9cd 3500 	strd	r3, r5, [sp]
 80176b6:	2306      	movs	r3, #6
 80176b8:	f88d 3016 	strb.w	r3, [sp, #22]
 80176bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80176c0:	9302      	str	r3, [sp, #8]
 80176c2:	4632      	mov	r2, r6
 80176c4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80176c8:	4638      	mov	r0, r7
 80176ca:	47c0      	blx	r8
 80176cc:	2301      	movs	r3, #1
 80176ce:	69e2      	ldr	r2, [r4, #28]
 80176d0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80176d4:	2a00      	cmp	r2, #0
 80176d6:	d1d4      	bne.n	8017682 <read_submessage_format+0x56>
 80176d8:	e7d5      	b.n	8017686 <read_submessage_format+0x5a>
 80176da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d0f8      	beq.n	80176d4 <read_submessage_format+0xa8>
 80176e2:	a906      	add	r1, sp, #24
 80176e4:	a80c      	add	r0, sp, #48	; 0x30
 80176e6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80176ea:	f7fa fb2b 	bl	8011d44 <uxr_deserialize_SampleIdentity>
 80176ee:	b9a0      	cbnz	r0, 801771a <read_submessage_format+0xee>
 80176f0:	69e2      	ldr	r2, [r4, #28]
 80176f2:	2a00      	cmp	r2, #0
 80176f4:	d1c5      	bne.n	8017682 <read_submessage_format+0x56>
 80176f6:	e7c6      	b.n	8017686 <read_submessage_format+0x5a>
 80176f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80176fc:	b13b      	cbz	r3, 801770e <read_submessage_format+0xe2>
 80176fe:	a906      	add	r1, sp, #24
 8017700:	a80c      	add	r0, sp, #48	; 0x30
 8017702:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017706:	f7f9 fff1 	bl	80116ec <uxr_deserialize_BaseObjectRequest>
 801770a:	bb60      	cbnz	r0, 8017766 <read_submessage_format+0x13a>
 801770c:	69e2      	ldr	r2, [r4, #28]
 801770e:	68a3      	ldr	r3, [r4, #8]
 8017710:	442b      	add	r3, r5
 8017712:	60a3      	str	r3, [r4, #8]
 8017714:	2a00      	cmp	r2, #0
 8017716:	d1b4      	bne.n	8017682 <read_submessage_format+0x56>
 8017718:	e7b5      	b.n	8017686 <read_submessage_format+0x5a>
 801771a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801771e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017720:	1a52      	subs	r2, r2, r1
 8017722:	eba8 0803 	sub.w	r8, r8, r3
 8017726:	a80c      	add	r0, sp, #48	; 0x30
 8017728:	f7f5 fd76 	bl	800d218 <ucdr_init_buffer>
 801772c:	44a8      	add	r8, r5
 801772e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017732:	a80c      	add	r0, sp, #48	; 0x30
 8017734:	f7f5 fd44 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 8017738:	fa1f f888 	uxth.w	r8, r8
 801773c:	ab0c      	add	r3, sp, #48	; 0x30
 801773e:	9300      	str	r3, [sp, #0]
 8017740:	f8cd 8004 	str.w	r8, [sp, #4]
 8017744:	2108      	movs	r1, #8
 8017746:	f88d 1016 	strb.w	r1, [sp, #22]
 801774a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801774e:	9102      	str	r1, [sp, #8]
 8017750:	ab06      	add	r3, sp, #24
 8017752:	4632      	mov	r2, r6
 8017754:	9905      	ldr	r1, [sp, #20]
 8017756:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 801775a:	4638      	mov	r0, r7
 801775c:	47b0      	blx	r6
 801775e:	2301      	movs	r3, #1
 8017760:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8017764:	e7c4      	b.n	80176f0 <read_submessage_format+0xc4>
 8017766:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801776a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801776c:	1a52      	subs	r2, r2, r1
 801776e:	a80c      	add	r0, sp, #48	; 0x30
 8017770:	eba8 0803 	sub.w	r8, r8, r3
 8017774:	f7f5 fd50 	bl	800d218 <ucdr_init_buffer>
 8017778:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801777c:	a80c      	add	r0, sp, #48	; 0x30
 801777e:	f7f5 fd1f 	bl	800d1c0 <ucdr_set_on_full_buffer_callback>
 8017782:	ab0c      	add	r3, sp, #48	; 0x30
 8017784:	9300      	str	r3, [sp, #0]
 8017786:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801778a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801778e:	44a8      	add	r8, r5
 8017790:	fa1f f888 	uxth.w	r8, r8
 8017794:	f8cd 8004 	str.w	r8, [sp, #4]
 8017798:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801779c:	2107      	movs	r1, #7
 801779e:	f88d 1016 	strb.w	r1, [sp, #22]
 80177a2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80177a6:	9102      	str	r1, [sp, #8]
 80177a8:	4632      	mov	r2, r6
 80177aa:	b29b      	uxth	r3, r3
 80177ac:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80177b0:	9905      	ldr	r1, [sp, #20]
 80177b2:	4638      	mov	r0, r7
 80177b4:	47b0      	blx	r6
 80177b6:	2301      	movs	r3, #1
 80177b8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80177bc:	e7a6      	b.n	801770c <read_submessage_format+0xe0>
 80177be:	bf00      	nop

080177c0 <uxr_seq_num_add>:
 80177c0:	4408      	add	r0, r1
 80177c2:	b280      	uxth	r0, r0
 80177c4:	4770      	bx	lr
 80177c6:	bf00      	nop

080177c8 <uxr_seq_num_sub>:
 80177c8:	1a40      	subs	r0, r0, r1
 80177ca:	b280      	uxth	r0, r0
 80177cc:	4770      	bx	lr
 80177ce:	bf00      	nop

080177d0 <uxr_seq_num_cmp>:
 80177d0:	4288      	cmp	r0, r1
 80177d2:	d011      	beq.n	80177f8 <uxr_seq_num_cmp+0x28>
 80177d4:	d309      	bcc.n	80177ea <uxr_seq_num_cmp+0x1a>
 80177d6:	4288      	cmp	r0, r1
 80177d8:	d910      	bls.n	80177fc <uxr_seq_num_cmp+0x2c>
 80177da:	1a40      	subs	r0, r0, r1
 80177dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80177e0:	bfd4      	ite	le
 80177e2:	2001      	movle	r0, #1
 80177e4:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80177e8:	4770      	bx	lr
 80177ea:	1a0b      	subs	r3, r1, r0
 80177ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80177f0:	daf1      	bge.n	80177d6 <uxr_seq_num_cmp+0x6>
 80177f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177f6:	4770      	bx	lr
 80177f8:	2000      	movs	r0, #0
 80177fa:	4770      	bx	lr
 80177fc:	2001      	movs	r0, #1
 80177fe:	4770      	bx	lr

08017800 <uxr_init_framing_io>:
 8017800:	2300      	movs	r3, #0
 8017802:	7041      	strb	r1, [r0, #1]
 8017804:	7003      	strb	r3, [r0, #0]
 8017806:	8583      	strh	r3, [r0, #44]	; 0x2c
 8017808:	4770      	bx	lr
 801780a:	bf00      	nop

0801780c <uxr_write_framed_msg>:
 801780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017810:	4617      	mov	r7, r2
 8017812:	7842      	ldrb	r2, [r0, #1]
 8017814:	b083      	sub	sp, #12
 8017816:	460e      	mov	r6, r1
 8017818:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801781c:	469a      	mov	sl, r3
 801781e:	2901      	cmp	r1, #1
 8017820:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8017824:	4604      	mov	r4, r0
 8017826:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801782a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801782e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8017832:	f240 8137 	bls.w	8017aa4 <uxr_write_framed_msg+0x298>
 8017836:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801783a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801783e:	2901      	cmp	r1, #1
 8017840:	f04f 0202 	mov.w	r2, #2
 8017844:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017848:	f240 808f 	bls.w	801796a <uxr_write_framed_msg+0x15e>
 801784c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801784e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8017852:	b2dd      	uxtb	r5, r3
 8017854:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8017858:	2203      	movs	r2, #3
 801785a:	2901      	cmp	r1, #1
 801785c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017860:	f240 809a 	bls.w	8017998 <uxr_write_framed_msg+0x18c>
 8017864:	18a1      	adds	r1, r4, r2
 8017866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017868:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 801786c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017870:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8017874:	3201      	adds	r2, #1
 8017876:	2801      	cmp	r0, #1
 8017878:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801787c:	f240 80a0 	bls.w	80179c0 <uxr_write_framed_msg+0x1b4>
 8017880:	18a0      	adds	r0, r4, r2
 8017882:	3201      	adds	r2, #1
 8017884:	b2d2      	uxtb	r2, r2
 8017886:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801788a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801788e:	2b00      	cmp	r3, #0
 8017890:	f000 80a9 	beq.w	80179e6 <uxr_write_framed_msg+0x1da>
 8017894:	f04f 0900 	mov.w	r9, #0
 8017898:	46c8      	mov	r8, r9
 801789a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801789e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80178a2:	2901      	cmp	r1, #1
 80178a4:	f240 80c3 	bls.w	8017a2e <uxr_write_framed_msg+0x222>
 80178a8:	2a29      	cmp	r2, #41	; 0x29
 80178aa:	f200 809f 	bhi.w	80179ec <uxr_write_framed_msg+0x1e0>
 80178ae:	18a1      	adds	r1, r4, r2
 80178b0:	3201      	adds	r2, #1
 80178b2:	b2d2      	uxtb	r2, r2
 80178b4:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80178b8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80178bc:	ea89 0303 	eor.w	r3, r9, r3
 80178c0:	498c      	ldr	r1, [pc, #560]	; (8017af4 <uxr_write_framed_msg+0x2e8>)
 80178c2:	b2db      	uxtb	r3, r3
 80178c4:	f108 0801 	add.w	r8, r8, #1
 80178c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80178cc:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80178d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178d2:	4543      	cmp	r3, r8
 80178d4:	d8e1      	bhi.n	801789a <uxr_write_framed_msg+0x8e>
 80178d6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80178da:	fa5f f889 	uxtb.w	r8, r9
 80178de:	9301      	str	r3, [sp, #4]
 80178e0:	f04f 0900 	mov.w	r9, #0
 80178e4:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 80178e8:	fa5f f18a 	uxtb.w	r1, sl
 80178ec:	2901      	cmp	r1, #1
 80178ee:	d921      	bls.n	8017934 <uxr_write_framed_msg+0x128>
 80178f0:	2a29      	cmp	r2, #41	; 0x29
 80178f2:	f240 80af 	bls.w	8017a54 <uxr_write_framed_msg+0x248>
 80178f6:	2500      	movs	r5, #0
 80178f8:	e000      	b.n	80178fc <uxr_write_framed_msg+0xf0>
 80178fa:	b160      	cbz	r0, 8017916 <uxr_write_framed_msg+0x10a>
 80178fc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8017900:	1b52      	subs	r2, r2, r5
 8017902:	465b      	mov	r3, fp
 8017904:	4421      	add	r1, r4
 8017906:	4638      	mov	r0, r7
 8017908:	47b0      	blx	r6
 801790a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801790e:	4405      	add	r5, r0
 8017910:	4295      	cmp	r5, r2
 8017912:	d3f2      	bcc.n	80178fa <uxr_write_framed_msg+0xee>
 8017914:	d003      	beq.n	801791e <uxr_write_framed_msg+0x112>
 8017916:	2000      	movs	r0, #0
 8017918:	b003      	add	sp, #12
 801791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801791e:	fa5f f18a 	uxtb.w	r1, sl
 8017922:	f04f 0300 	mov.w	r3, #0
 8017926:	2901      	cmp	r1, #1
 8017928:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801792c:	f04f 0200 	mov.w	r2, #0
 8017930:	f200 8090 	bhi.w	8017a54 <uxr_write_framed_msg+0x248>
 8017934:	1c51      	adds	r1, r2, #1
 8017936:	b2c9      	uxtb	r1, r1
 8017938:	2929      	cmp	r1, #41	; 0x29
 801793a:	d8dc      	bhi.n	80178f6 <uxr_write_framed_msg+0xea>
 801793c:	18a5      	adds	r5, r4, r2
 801793e:	4421      	add	r1, r4
 8017940:	3202      	adds	r2, #2
 8017942:	f088 0820 	eor.w	r8, r8, #32
 8017946:	4648      	mov	r0, r9
 8017948:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801794c:	b2d2      	uxtb	r2, r2
 801794e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8017952:	f04f 0901 	mov.w	r9, #1
 8017956:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 801795a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801795e:	2800      	cmp	r0, #0
 8017960:	f040 8085 	bne.w	8017a6e <uxr_write_framed_msg+0x262>
 8017964:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017968:	e7bc      	b.n	80178e4 <uxr_write_framed_msg+0xd8>
 801796a:	4611      	mov	r1, r2
 801796c:	f04f 0c03 	mov.w	ip, #3
 8017970:	2204      	movs	r2, #4
 8017972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017974:	4421      	add	r1, r4
 8017976:	b2dd      	uxtb	r5, r3
 8017978:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801797c:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8017980:	44a4      	add	ip, r4
 8017982:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8017986:	f080 0020 	eor.w	r0, r0, #32
 801798a:	2901      	cmp	r1, #1
 801798c:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8017990:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017994:	f63f af66 	bhi.w	8017864 <uxr_write_framed_msg+0x58>
 8017998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801799a:	18a0      	adds	r0, r4, r2
 801799c:	f085 0520 	eor.w	r5, r5, #32
 80179a0:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80179a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80179a8:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 80179ac:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80179b0:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80179b4:	3202      	adds	r2, #2
 80179b6:	2801      	cmp	r0, #1
 80179b8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80179bc:	f63f af60 	bhi.w	8017880 <uxr_write_framed_msg+0x74>
 80179c0:	1c50      	adds	r0, r2, #1
 80179c2:	18a5      	adds	r5, r4, r2
 80179c4:	fa54 f080 	uxtab	r0, r4, r0
 80179c8:	3202      	adds	r2, #2
 80179ca:	f081 0120 	eor.w	r1, r1, #32
 80179ce:	b2d2      	uxtb	r2, r2
 80179d0:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80179d4:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 80179d8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80179dc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	f47f af57 	bne.w	8017894 <uxr_write_framed_msg+0x88>
 80179e6:	9301      	str	r3, [sp, #4]
 80179e8:	4698      	mov	r8, r3
 80179ea:	e779      	b.n	80178e0 <uxr_write_framed_msg+0xd4>
 80179ec:	2500      	movs	r5, #0
 80179ee:	e001      	b.n	80179f4 <uxr_write_framed_msg+0x1e8>
 80179f0:	2800      	cmp	r0, #0
 80179f2:	d090      	beq.n	8017916 <uxr_write_framed_msg+0x10a>
 80179f4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80179f8:	1b52      	subs	r2, r2, r5
 80179fa:	465b      	mov	r3, fp
 80179fc:	4421      	add	r1, r4
 80179fe:	4638      	mov	r0, r7
 8017a00:	47b0      	blx	r6
 8017a02:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8017a06:	4405      	add	r5, r0
 8017a08:	4295      	cmp	r5, r2
 8017a0a:	d3f1      	bcc.n	80179f0 <uxr_write_framed_msg+0x1e4>
 8017a0c:	d183      	bne.n	8017916 <uxr_write_framed_msg+0x10a>
 8017a0e:	f04f 0300 	mov.w	r3, #0
 8017a12:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a18:	4543      	cmp	r3, r8
 8017a1a:	d964      	bls.n	8017ae6 <uxr_write_framed_msg+0x2da>
 8017a1c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8017a20:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8017a24:	2901      	cmp	r1, #1
 8017a26:	f04f 0200 	mov.w	r2, #0
 8017a2a:	f63f af3d 	bhi.w	80178a8 <uxr_write_framed_msg+0x9c>
 8017a2e:	1c51      	adds	r1, r2, #1
 8017a30:	b2c9      	uxtb	r1, r1
 8017a32:	2929      	cmp	r1, #41	; 0x29
 8017a34:	d8da      	bhi.n	80179ec <uxr_write_framed_msg+0x1e0>
 8017a36:	18a0      	adds	r0, r4, r2
 8017a38:	4421      	add	r1, r4
 8017a3a:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8017a3e:	3202      	adds	r2, #2
 8017a40:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8017a44:	b2d2      	uxtb	r2, r2
 8017a46:	f083 0020 	eor.w	r0, r3, #32
 8017a4a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8017a4e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017a52:	e733      	b.n	80178bc <uxr_write_framed_msg+0xb0>
 8017a54:	18a1      	adds	r1, r4, r2
 8017a56:	3201      	adds	r2, #1
 8017a58:	4648      	mov	r0, r9
 8017a5a:	b2d2      	uxtb	r2, r2
 8017a5c:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8017a60:	f04f 0901 	mov.w	r9, #1
 8017a64:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017a68:	2800      	cmp	r0, #0
 8017a6a:	f43f af7b 	beq.w	8017964 <uxr_write_framed_msg+0x158>
 8017a6e:	2500      	movs	r5, #0
 8017a70:	e002      	b.n	8017a78 <uxr_write_framed_msg+0x26c>
 8017a72:	2800      	cmp	r0, #0
 8017a74:	f43f af4f 	beq.w	8017916 <uxr_write_framed_msg+0x10a>
 8017a78:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8017a7c:	1b52      	subs	r2, r2, r5
 8017a7e:	465b      	mov	r3, fp
 8017a80:	4421      	add	r1, r4
 8017a82:	4638      	mov	r0, r7
 8017a84:	47b0      	blx	r6
 8017a86:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8017a8a:	4405      	add	r5, r0
 8017a8c:	4295      	cmp	r5, r2
 8017a8e:	d3f0      	bcc.n	8017a72 <uxr_write_framed_msg+0x266>
 8017a90:	f47f af41 	bne.w	8017916 <uxr_write_framed_msg+0x10a>
 8017a94:	2300      	movs	r3, #0
 8017a96:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a9c:	b298      	uxth	r0, r3
 8017a9e:	b003      	add	sp, #12
 8017aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aa4:	217d      	movs	r1, #125	; 0x7d
 8017aa6:	f082 0220 	eor.w	r2, r2, #32
 8017aaa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8017aae:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8017ab2:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8017ab6:	2901      	cmp	r1, #1
 8017ab8:	f04f 0203 	mov.w	r2, #3
 8017abc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017ac0:	d804      	bhi.n	8017acc <uxr_write_framed_msg+0x2c0>
 8017ac2:	4611      	mov	r1, r2
 8017ac4:	f04f 0c04 	mov.w	ip, #4
 8017ac8:	2205      	movs	r2, #5
 8017aca:	e752      	b.n	8017972 <uxr_write_framed_msg+0x166>
 8017acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ace:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8017ad2:	b2dd      	uxtb	r5, r3
 8017ad4:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8017ad8:	2204      	movs	r2, #4
 8017ada:	2901      	cmp	r1, #1
 8017adc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017ae0:	f63f aec0 	bhi.w	8017864 <uxr_write_framed_msg+0x58>
 8017ae4:	e758      	b.n	8017998 <uxr_write_framed_msg+0x18c>
 8017ae6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017aea:	fa5f f889 	uxtb.w	r8, r9
 8017aee:	9301      	str	r3, [sp, #4]
 8017af0:	2200      	movs	r2, #0
 8017af2:	e6f5      	b.n	80178e0 <uxr_write_framed_msg+0xd4>
 8017af4:	0801ad68 	.word	0x0801ad68

08017af8 <uxr_framing_read_transport>:
 8017af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017afc:	4604      	mov	r4, r0
 8017afe:	b083      	sub	sp, #12
 8017b00:	461f      	mov	r7, r3
 8017b02:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8017b06:	4689      	mov	r9, r1
 8017b08:	4692      	mov	sl, r2
 8017b0a:	f7f5 fbf5 	bl	800d2f8 <uxr_millis>
 8017b0e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017b12:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8017b16:	42b3      	cmp	r3, r6
 8017b18:	4680      	mov	r8, r0
 8017b1a:	d061      	beq.n	8017be0 <uxr_framing_read_transport+0xe8>
 8017b1c:	d81c      	bhi.n	8017b58 <uxr_framing_read_transport+0x60>
 8017b1e:	1e75      	subs	r5, r6, #1
 8017b20:	1aed      	subs	r5, r5, r3
 8017b22:	b2ed      	uxtb	r5, r5
 8017b24:	2600      	movs	r6, #0
 8017b26:	455d      	cmp	r5, fp
 8017b28:	d81f      	bhi.n	8017b6a <uxr_framing_read_transport+0x72>
 8017b2a:	19ab      	adds	r3, r5, r6
 8017b2c:	455b      	cmp	r3, fp
 8017b2e:	bf84      	itt	hi
 8017b30:	ebab 0605 	subhi.w	r6, fp, r5
 8017b34:	b2f6      	uxtbhi	r6, r6
 8017b36:	b9ed      	cbnz	r5, 8017b74 <uxr_framing_read_transport+0x7c>
 8017b38:	f04f 0b00 	mov.w	fp, #0
 8017b3c:	f7f5 fbdc 	bl	800d2f8 <uxr_millis>
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	eba0 0808 	sub.w	r8, r0, r8
 8017b46:	eba3 0308 	sub.w	r3, r3, r8
 8017b4a:	4658      	mov	r0, fp
 8017b4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b50:	603b      	str	r3, [r7, #0]
 8017b52:	b003      	add	sp, #12
 8017b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b58:	2e00      	cmp	r6, #0
 8017b5a:	d049      	beq.n	8017bf0 <uxr_framing_read_transport+0xf8>
 8017b5c:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8017b60:	b2ed      	uxtb	r5, r5
 8017b62:	3e01      	subs	r6, #1
 8017b64:	455d      	cmp	r5, fp
 8017b66:	b2f6      	uxtb	r6, r6
 8017b68:	d9df      	bls.n	8017b2a <uxr_framing_read_transport+0x32>
 8017b6a:	fa5f f58b 	uxtb.w	r5, fp
 8017b6e:	2600      	movs	r6, #0
 8017b70:	2d00      	cmp	r5, #0
 8017b72:	d0e1      	beq.n	8017b38 <uxr_framing_read_transport+0x40>
 8017b74:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017b78:	3102      	adds	r1, #2
 8017b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b7c:	9300      	str	r3, [sp, #0]
 8017b7e:	683b      	ldr	r3, [r7, #0]
 8017b80:	4421      	add	r1, r4
 8017b82:	462a      	mov	r2, r5
 8017b84:	4650      	mov	r0, sl
 8017b86:	47c8      	blx	r9
 8017b88:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017b8c:	4a1a      	ldr	r2, [pc, #104]	; (8017bf8 <uxr_framing_read_transport+0x100>)
 8017b8e:	4403      	add	r3, r0
 8017b90:	0859      	lsrs	r1, r3, #1
 8017b92:	fba2 2101 	umull	r2, r1, r2, r1
 8017b96:	0889      	lsrs	r1, r1, #2
 8017b98:	222a      	movs	r2, #42	; 0x2a
 8017b9a:	fb02 3111 	mls	r1, r2, r1, r3
 8017b9e:	4683      	mov	fp, r0
 8017ba0:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8017ba4:	2800      	cmp	r0, #0
 8017ba6:	d0c7      	beq.n	8017b38 <uxr_framing_read_transport+0x40>
 8017ba8:	42a8      	cmp	r0, r5
 8017baa:	d1c7      	bne.n	8017b3c <uxr_framing_read_transport+0x44>
 8017bac:	2e00      	cmp	r6, #0
 8017bae:	d0c5      	beq.n	8017b3c <uxr_framing_read_transport+0x44>
 8017bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017bb2:	9300      	str	r3, [sp, #0]
 8017bb4:	3102      	adds	r1, #2
 8017bb6:	4632      	mov	r2, r6
 8017bb8:	4421      	add	r1, r4
 8017bba:	2300      	movs	r3, #0
 8017bbc:	4650      	mov	r0, sl
 8017bbe:	47c8      	blx	r9
 8017bc0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017bc4:	4a0c      	ldr	r2, [pc, #48]	; (8017bf8 <uxr_framing_read_transport+0x100>)
 8017bc6:	180b      	adds	r3, r1, r0
 8017bc8:	0859      	lsrs	r1, r3, #1
 8017bca:	fba2 1201 	umull	r1, r2, r2, r1
 8017bce:	0892      	lsrs	r2, r2, #2
 8017bd0:	212a      	movs	r1, #42	; 0x2a
 8017bd2:	fb01 3312 	mls	r3, r1, r2, r3
 8017bd6:	eb00 0b05 	add.w	fp, r0, r5
 8017bda:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8017bde:	e7ad      	b.n	8017b3c <uxr_framing_read_transport+0x44>
 8017be0:	2600      	movs	r6, #0
 8017be2:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8017be6:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8017be8:	d9bf      	bls.n	8017b6a <uxr_framing_read_transport+0x72>
 8017bea:	2102      	movs	r1, #2
 8017bec:	2529      	movs	r5, #41	; 0x29
 8017bee:	e7c4      	b.n	8017b7a <uxr_framing_read_transport+0x82>
 8017bf0:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8017bf4:	b2ed      	uxtb	r5, r5
 8017bf6:	e796      	b.n	8017b26 <uxr_framing_read_transport+0x2e>
 8017bf8:	30c30c31 	.word	0x30c30c31

08017bfc <uxr_read_framed_msg>:
 8017bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c00:	461e      	mov	r6, r3
 8017c02:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8017c06:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8017c0a:	429d      	cmp	r5, r3
 8017c0c:	b083      	sub	sp, #12
 8017c0e:	4604      	mov	r4, r0
 8017c10:	4688      	mov	r8, r1
 8017c12:	4691      	mov	r9, r2
 8017c14:	f000 8188 	beq.w	8017f28 <uxr_read_framed_msg+0x32c>
 8017c18:	7823      	ldrb	r3, [r4, #0]
 8017c1a:	4dc1      	ldr	r5, [pc, #772]	; (8017f20 <uxr_read_framed_msg+0x324>)
 8017c1c:	4fc1      	ldr	r7, [pc, #772]	; (8017f24 <uxr_read_framed_msg+0x328>)
 8017c1e:	2b07      	cmp	r3, #7
 8017c20:	d8fd      	bhi.n	8017c1e <uxr_read_framed_msg+0x22>
 8017c22:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017c26:	0115      	.short	0x0115
 8017c28:	00d600f6 	.word	0x00d600f6
 8017c2c:	009000b9 	.word	0x009000b9
 8017c30:	0030004d 	.word	0x0030004d
 8017c34:	0008      	.short	0x0008
 8017c36:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017c3a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017c3e:	4299      	cmp	r1, r3
 8017c40:	f000 814a 	beq.w	8017ed8 <uxr_read_framed_msg+0x2dc>
 8017c44:	18e2      	adds	r2, r4, r3
 8017c46:	7892      	ldrb	r2, [r2, #2]
 8017c48:	2a7d      	cmp	r2, #125	; 0x7d
 8017c4a:	f000 8199 	beq.w	8017f80 <uxr_read_framed_msg+0x384>
 8017c4e:	3301      	adds	r3, #1
 8017c50:	0858      	lsrs	r0, r3, #1
 8017c52:	fba5 1000 	umull	r1, r0, r5, r0
 8017c56:	0880      	lsrs	r0, r0, #2
 8017c58:	212a      	movs	r1, #42	; 0x2a
 8017c5a:	fb01 3310 	mls	r3, r1, r0, r3
 8017c5e:	2a7e      	cmp	r2, #126	; 0x7e
 8017c60:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017c64:	f000 8252 	beq.w	801810c <uxr_read_framed_msg+0x510>
 8017c68:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017c6a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8017c6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017c70:	b29b      	uxth	r3, r3
 8017c72:	2200      	movs	r2, #0
 8017c74:	4299      	cmp	r1, r3
 8017c76:	86a3      	strh	r3, [r4, #52]	; 0x34
 8017c78:	7022      	strb	r2, [r4, #0]
 8017c7a:	f000 8179 	beq.w	8017f70 <uxr_read_framed_msg+0x374>
 8017c7e:	2000      	movs	r0, #0
 8017c80:	b003      	add	sp, #12
 8017c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c86:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017c8a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017c8e:	4299      	cmp	r1, r3
 8017c90:	f000 8131 	beq.w	8017ef6 <uxr_read_framed_msg+0x2fa>
 8017c94:	18e2      	adds	r2, r4, r3
 8017c96:	7890      	ldrb	r0, [r2, #2]
 8017c98:	287d      	cmp	r0, #125	; 0x7d
 8017c9a:	f000 8190 	beq.w	8017fbe <uxr_read_framed_msg+0x3c2>
 8017c9e:	3301      	adds	r3, #1
 8017ca0:	085a      	lsrs	r2, r3, #1
 8017ca2:	fba5 1202 	umull	r1, r2, r5, r2
 8017ca6:	0892      	lsrs	r2, r2, #2
 8017ca8:	212a      	movs	r1, #42	; 0x2a
 8017caa:	fb01 3312 	mls	r3, r1, r2, r3
 8017cae:	287e      	cmp	r0, #126	; 0x7e
 8017cb0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017cb4:	f000 821a 	beq.w	80180ec <uxr_read_framed_msg+0x4f0>
 8017cb8:	2307      	movs	r3, #7
 8017cba:	86a0      	strh	r0, [r4, #52]	; 0x34
 8017cbc:	7023      	strb	r3, [r4, #0]
 8017cbe:	e7ae      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 8017cc0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8017cc2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8017cc6:	459e      	cmp	lr, r3
 8017cc8:	d938      	bls.n	8017d3c <uxr_read_framed_msg+0x140>
 8017cca:	ee07 8a90 	vmov	s15, r8
 8017cce:	212a      	movs	r1, #42	; 0x2a
 8017cd0:	e020      	b.n	8017d14 <uxr_read_framed_msg+0x118>
 8017cd2:	f89b c002 	ldrb.w	ip, [fp, #2]
 8017cd6:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8017cda:	f000 80d4 	beq.w	8017e86 <uxr_read_framed_msg+0x28a>
 8017cde:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8017ce2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017ce6:	f000 8219 	beq.w	801811c <uxr_read_framed_msg+0x520>
 8017cea:	f806 c003 	strb.w	ip, [r6, r3]
 8017cee:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8017cf2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8017cf4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8017cf8:	ea8a 000c 	eor.w	r0, sl, ip
 8017cfc:	b2c0      	uxtb	r0, r0
 8017cfe:	3301      	adds	r3, #1
 8017d00:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8017d04:	b29b      	uxth	r3, r3
 8017d06:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8017d0a:	4573      	cmp	r3, lr
 8017d0c:	8663      	strh	r3, [r4, #50]	; 0x32
 8017d0e:	86e2      	strh	r2, [r4, #54]	; 0x36
 8017d10:	f080 8120 	bcs.w	8017f54 <uxr_read_framed_msg+0x358>
 8017d14:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8017d18:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8017d1c:	f100 0c01 	add.w	ip, r0, #1
 8017d20:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017d24:	fba5 8202 	umull	r8, r2, r5, r2
 8017d28:	0892      	lsrs	r2, r2, #2
 8017d2a:	4582      	cmp	sl, r0
 8017d2c:	eb04 0b00 	add.w	fp, r4, r0
 8017d30:	fb01 c212 	mls	r2, r1, r2, ip
 8017d34:	d1cd      	bne.n	8017cd2 <uxr_read_framed_msg+0xd6>
 8017d36:	ee17 8a90 	vmov	r8, s15
 8017d3a:	459e      	cmp	lr, r3
 8017d3c:	f040 8111 	bne.w	8017f62 <uxr_read_framed_msg+0x366>
 8017d40:	2306      	movs	r3, #6
 8017d42:	7023      	strb	r3, [r4, #0]
 8017d44:	e76b      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 8017d46:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017d4a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017d4e:	4298      	cmp	r0, r3
 8017d50:	f000 80c2 	beq.w	8017ed8 <uxr_read_framed_msg+0x2dc>
 8017d54:	18e2      	adds	r2, r4, r3
 8017d56:	7891      	ldrb	r1, [r2, #2]
 8017d58:	297d      	cmp	r1, #125	; 0x7d
 8017d5a:	f000 814c 	beq.w	8017ff6 <uxr_read_framed_msg+0x3fa>
 8017d5e:	3301      	adds	r3, #1
 8017d60:	085a      	lsrs	r2, r3, #1
 8017d62:	fba5 0202 	umull	r0, r2, r5, r2
 8017d66:	0892      	lsrs	r2, r2, #2
 8017d68:	202a      	movs	r0, #42	; 0x2a
 8017d6a:	fb00 3312 	mls	r3, r0, r2, r3
 8017d6e:	297e      	cmp	r1, #126	; 0x7e
 8017d70:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017d74:	f000 81ca 	beq.w	801810c <uxr_read_framed_msg+0x510>
 8017d78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017d7a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017d7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017d80:	b29b      	uxth	r3, r3
 8017d82:	2000      	movs	r0, #0
 8017d84:	428b      	cmp	r3, r1
 8017d86:	8623      	strh	r3, [r4, #48]	; 0x30
 8017d88:	8660      	strh	r0, [r4, #50]	; 0x32
 8017d8a:	86e0      	strh	r0, [r4, #54]	; 0x36
 8017d8c:	f240 80df 	bls.w	8017f4e <uxr_read_framed_msg+0x352>
 8017d90:	7020      	strb	r0, [r4, #0]
 8017d92:	b003      	add	sp, #12
 8017d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d98:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017d9c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017da0:	4299      	cmp	r1, r3
 8017da2:	f000 80a8 	beq.w	8017ef6 <uxr_read_framed_msg+0x2fa>
 8017da6:	18e2      	adds	r2, r4, r3
 8017da8:	7890      	ldrb	r0, [r2, #2]
 8017daa:	287d      	cmp	r0, #125	; 0x7d
 8017dac:	f000 8164 	beq.w	8018078 <uxr_read_framed_msg+0x47c>
 8017db0:	3301      	adds	r3, #1
 8017db2:	085a      	lsrs	r2, r3, #1
 8017db4:	fba5 1202 	umull	r1, r2, r5, r2
 8017db8:	0892      	lsrs	r2, r2, #2
 8017dba:	212a      	movs	r1, #42	; 0x2a
 8017dbc:	fb01 3312 	mls	r3, r1, r2, r3
 8017dc0:	287e      	cmp	r0, #126	; 0x7e
 8017dc2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017dc6:	f000 8191 	beq.w	80180ec <uxr_read_framed_msg+0x4f0>
 8017dca:	2304      	movs	r3, #4
 8017dcc:	8620      	strh	r0, [r4, #48]	; 0x30
 8017dce:	7023      	strb	r3, [r4, #0]
 8017dd0:	e725      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 8017dd2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017dd6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017dda:	4290      	cmp	r0, r2
 8017ddc:	f000 80b3 	beq.w	8017f46 <uxr_read_framed_msg+0x34a>
 8017de0:	18a3      	adds	r3, r4, r2
 8017de2:	7899      	ldrb	r1, [r3, #2]
 8017de4:	297d      	cmp	r1, #125	; 0x7d
 8017de6:	f000 8164 	beq.w	80180b2 <uxr_read_framed_msg+0x4b6>
 8017dea:	3201      	adds	r2, #1
 8017dec:	0850      	lsrs	r0, r2, #1
 8017dee:	fba5 3000 	umull	r3, r0, r5, r0
 8017df2:	0880      	lsrs	r0, r0, #2
 8017df4:	232a      	movs	r3, #42	; 0x2a
 8017df6:	fb03 2210 	mls	r2, r3, r0, r2
 8017dfa:	297e      	cmp	r1, #126	; 0x7e
 8017dfc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017e00:	f000 8188 	beq.w	8018114 <uxr_read_framed_msg+0x518>
 8017e04:	7863      	ldrb	r3, [r4, #1]
 8017e06:	428b      	cmp	r3, r1
 8017e08:	bf0c      	ite	eq
 8017e0a:	2303      	moveq	r3, #3
 8017e0c:	2300      	movne	r3, #0
 8017e0e:	7023      	strb	r3, [r4, #0]
 8017e10:	e705      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 8017e12:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017e16:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	4299      	cmp	r1, r3
 8017e1e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8017e22:	d06c      	beq.n	8017efe <uxr_read_framed_msg+0x302>
 8017e24:	18e2      	adds	r2, r4, r3
 8017e26:	7890      	ldrb	r0, [r2, #2]
 8017e28:	287d      	cmp	r0, #125	; 0x7d
 8017e2a:	f000 8101 	beq.w	8018030 <uxr_read_framed_msg+0x434>
 8017e2e:	3301      	adds	r3, #1
 8017e30:	085a      	lsrs	r2, r3, #1
 8017e32:	fba5 1202 	umull	r1, r2, r5, r2
 8017e36:	0892      	lsrs	r2, r2, #2
 8017e38:	212a      	movs	r1, #42	; 0x2a
 8017e3a:	fb01 3312 	mls	r3, r1, r2, r3
 8017e3e:	287e      	cmp	r0, #126	; 0x7e
 8017e40:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8017e44:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017e48:	d059      	beq.n	8017efe <uxr_read_framed_msg+0x302>
 8017e4a:	2302      	movs	r3, #2
 8017e4c:	7023      	strb	r3, [r4, #0]
 8017e4e:	e6e6      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 8017e50:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8017e54:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017e58:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8017e5c:	1c51      	adds	r1, r2, #1
 8017e5e:	084b      	lsrs	r3, r1, #1
 8017e60:	fba5 c303 	umull	ip, r3, r5, r3
 8017e64:	089b      	lsrs	r3, r3, #2
 8017e66:	fb0e 1313 	mls	r3, lr, r3, r1
 8017e6a:	4592      	cmp	sl, r2
 8017e6c:	eb04 0002 	add.w	r0, r4, r2
 8017e70:	b2da      	uxtb	r2, r3
 8017e72:	f43f af04 	beq.w	8017c7e <uxr_read_framed_msg+0x82>
 8017e76:	7883      	ldrb	r3, [r0, #2]
 8017e78:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017e7c:	2b7e      	cmp	r3, #126	; 0x7e
 8017e7e:	d1ed      	bne.n	8017e5c <uxr_read_framed_msg+0x260>
 8017e80:	2301      	movs	r3, #1
 8017e82:	7023      	strb	r3, [r4, #0]
 8017e84:	e6cb      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 8017e86:	f100 0c01 	add.w	ip, r0, #1
 8017e8a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017e8e:	fba5 8202 	umull	r8, r2, r5, r2
 8017e92:	0892      	lsrs	r2, r2, #2
 8017e94:	fb01 c212 	mls	r2, r1, r2, ip
 8017e98:	eb04 0c02 	add.w	ip, r4, r2
 8017e9c:	b2d2      	uxtb	r2, r2
 8017e9e:	4592      	cmp	sl, r2
 8017ea0:	f100 0002 	add.w	r0, r0, #2
 8017ea4:	f43f af47 	beq.w	8017d36 <uxr_read_framed_msg+0x13a>
 8017ea8:	0842      	lsrs	r2, r0, #1
 8017eaa:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017eae:	fba5 8202 	umull	r8, r2, r5, r2
 8017eb2:	0892      	lsrs	r2, r2, #2
 8017eb4:	fb01 0012 	mls	r0, r1, r2, r0
 8017eb8:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8017ebc:	f08a 0c20 	eor.w	ip, sl, #32
 8017ec0:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8017ec4:	f47f af11 	bne.w	8017cea <uxr_read_framed_msg+0xee>
 8017ec8:	459e      	cmp	lr, r3
 8017eca:	ee17 8a90 	vmov	r8, s15
 8017ece:	f43f af37 	beq.w	8017d40 <uxr_read_framed_msg+0x144>
 8017ed2:	2301      	movs	r3, #1
 8017ed4:	7023      	strb	r3, [r4, #0]
 8017ed6:	e6a2      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 8017ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017eda:	9300      	str	r3, [sp, #0]
 8017edc:	2301      	movs	r3, #1
 8017ede:	9301      	str	r3, [sp, #4]
 8017ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ee2:	464a      	mov	r2, r9
 8017ee4:	4641      	mov	r1, r8
 8017ee6:	4620      	mov	r0, r4
 8017ee8:	f7ff fe06 	bl	8017af8 <uxr_framing_read_transport>
 8017eec:	2800      	cmp	r0, #0
 8017eee:	f43f aec6 	beq.w	8017c7e <uxr_read_framed_msg+0x82>
 8017ef2:	7823      	ldrb	r3, [r4, #0]
 8017ef4:	e693      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 8017ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ef8:	9300      	str	r3, [sp, #0]
 8017efa:	2302      	movs	r3, #2
 8017efc:	e7ef      	b.n	8017ede <uxr_read_framed_msg+0x2e2>
 8017efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f00:	9300      	str	r3, [sp, #0]
 8017f02:	2304      	movs	r3, #4
 8017f04:	9301      	str	r3, [sp, #4]
 8017f06:	464a      	mov	r2, r9
 8017f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f0a:	4641      	mov	r1, r8
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	f7ff fdf3 	bl	8017af8 <uxr_framing_read_transport>
 8017f12:	2800      	cmp	r0, #0
 8017f14:	d1ed      	bne.n	8017ef2 <uxr_read_framed_msg+0x2f6>
 8017f16:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8017f1a:	2b7e      	cmp	r3, #126	; 0x7e
 8017f1c:	d0e9      	beq.n	8017ef2 <uxr_read_framed_msg+0x2f6>
 8017f1e:	e6ae      	b.n	8017c7e <uxr_read_framed_msg+0x82>
 8017f20:	30c30c31 	.word	0x30c30c31
 8017f24:	0801ad68 	.word	0x0801ad68
 8017f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f2a:	9300      	str	r3, [sp, #0]
 8017f2c:	2305      	movs	r3, #5
 8017f2e:	9301      	str	r3, [sp, #4]
 8017f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f32:	f7ff fde1 	bl	8017af8 <uxr_framing_read_transport>
 8017f36:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017f3a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017f3e:	429a      	cmp	r2, r3
 8017f40:	f43f ae9d 	beq.w	8017c7e <uxr_read_framed_msg+0x82>
 8017f44:	e668      	b.n	8017c18 <uxr_read_framed_msg+0x1c>
 8017f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f48:	9300      	str	r3, [sp, #0]
 8017f4a:	2303      	movs	r3, #3
 8017f4c:	e7c7      	b.n	8017ede <uxr_read_framed_msg+0x2e2>
 8017f4e:	2305      	movs	r3, #5
 8017f50:	7023      	strb	r3, [r4, #0]
 8017f52:	e664      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 8017f54:	ee17 8a90 	vmov	r8, s15
 8017f58:	f43f aef2 	beq.w	8017d40 <uxr_read_framed_msg+0x144>
 8017f5c:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8017f60:	d08e      	beq.n	8017e80 <uxr_read_framed_msg+0x284>
 8017f62:	ebae 0303 	sub.w	r3, lr, r3
 8017f66:	3302      	adds	r3, #2
 8017f68:	9301      	str	r3, [sp, #4]
 8017f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f6c:	9300      	str	r3, [sp, #0]
 8017f6e:	e7b7      	b.n	8017ee0 <uxr_read_framed_msg+0x2e4>
 8017f70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017f72:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8017f76:	7013      	strb	r3, [r2, #0]
 8017f78:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8017f7a:	b003      	add	sp, #12
 8017f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f80:	f103 0c01 	add.w	ip, r3, #1
 8017f84:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017f88:	fba5 0202 	umull	r0, r2, r5, r2
 8017f8c:	0892      	lsrs	r2, r2, #2
 8017f8e:	202a      	movs	r0, #42	; 0x2a
 8017f90:	fb00 c212 	mls	r2, r0, r2, ip
 8017f94:	fa5f fc82 	uxtb.w	ip, r2
 8017f98:	4561      	cmp	r1, ip
 8017f9a:	d09d      	beq.n	8017ed8 <uxr_read_framed_msg+0x2dc>
 8017f9c:	3302      	adds	r3, #2
 8017f9e:	4422      	add	r2, r4
 8017fa0:	0859      	lsrs	r1, r3, #1
 8017fa2:	7892      	ldrb	r2, [r2, #2]
 8017fa4:	fba5 c101 	umull	ip, r1, r5, r1
 8017fa8:	0889      	lsrs	r1, r1, #2
 8017faa:	fb00 3311 	mls	r3, r0, r1, r3
 8017fae:	2a7e      	cmp	r2, #126	; 0x7e
 8017fb0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017fb4:	f000 80aa 	beq.w	801810c <uxr_read_framed_msg+0x510>
 8017fb8:	f082 0220 	eor.w	r2, r2, #32
 8017fbc:	e654      	b.n	8017c68 <uxr_read_framed_msg+0x6c>
 8017fbe:	1c58      	adds	r0, r3, #1
 8017fc0:	0842      	lsrs	r2, r0, #1
 8017fc2:	fba5 c202 	umull	ip, r2, r5, r2
 8017fc6:	0892      	lsrs	r2, r2, #2
 8017fc8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017fcc:	fb0c 0212 	mls	r2, ip, r2, r0
 8017fd0:	b2d0      	uxtb	r0, r2
 8017fd2:	4281      	cmp	r1, r0
 8017fd4:	d08f      	beq.n	8017ef6 <uxr_read_framed_msg+0x2fa>
 8017fd6:	4422      	add	r2, r4
 8017fd8:	3302      	adds	r3, #2
 8017fda:	7890      	ldrb	r0, [r2, #2]
 8017fdc:	085a      	lsrs	r2, r3, #1
 8017fde:	fba5 1202 	umull	r1, r2, r5, r2
 8017fe2:	0892      	lsrs	r2, r2, #2
 8017fe4:	fb0c 3312 	mls	r3, ip, r2, r3
 8017fe8:	287e      	cmp	r0, #126	; 0x7e
 8017fea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017fee:	d07d      	beq.n	80180ec <uxr_read_framed_msg+0x4f0>
 8017ff0:	f080 0020 	eor.w	r0, r0, #32
 8017ff4:	e660      	b.n	8017cb8 <uxr_read_framed_msg+0xbc>
 8017ff6:	1c59      	adds	r1, r3, #1
 8017ff8:	084a      	lsrs	r2, r1, #1
 8017ffa:	fba5 c202 	umull	ip, r2, r5, r2
 8017ffe:	0892      	lsrs	r2, r2, #2
 8018000:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018004:	fb0c 1212 	mls	r2, ip, r2, r1
 8018008:	b2d1      	uxtb	r1, r2
 801800a:	4288      	cmp	r0, r1
 801800c:	f43f af64 	beq.w	8017ed8 <uxr_read_framed_msg+0x2dc>
 8018010:	4422      	add	r2, r4
 8018012:	3302      	adds	r3, #2
 8018014:	7891      	ldrb	r1, [r2, #2]
 8018016:	085a      	lsrs	r2, r3, #1
 8018018:	fba5 0202 	umull	r0, r2, r5, r2
 801801c:	0892      	lsrs	r2, r2, #2
 801801e:	fb0c 3312 	mls	r3, ip, r2, r3
 8018022:	297e      	cmp	r1, #126	; 0x7e
 8018024:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018028:	d070      	beq.n	801810c <uxr_read_framed_msg+0x510>
 801802a:	f081 0120 	eor.w	r1, r1, #32
 801802e:	e6a3      	b.n	8017d78 <uxr_read_framed_msg+0x17c>
 8018030:	f103 0c01 	add.w	ip, r3, #1
 8018034:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018038:	fba5 0202 	umull	r0, r2, r5, r2
 801803c:	0892      	lsrs	r2, r2, #2
 801803e:	202a      	movs	r0, #42	; 0x2a
 8018040:	fb00 c212 	mls	r2, r0, r2, ip
 8018044:	fa5f fc82 	uxtb.w	ip, r2
 8018048:	4561      	cmp	r1, ip
 801804a:	f43f af58 	beq.w	8017efe <uxr_read_framed_msg+0x302>
 801804e:	4422      	add	r2, r4
 8018050:	3302      	adds	r3, #2
 8018052:	7891      	ldrb	r1, [r2, #2]
 8018054:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8018058:	085a      	lsrs	r2, r3, #1
 801805a:	fba5 c202 	umull	ip, r2, r5, r2
 801805e:	0892      	lsrs	r2, r2, #2
 8018060:	fb00 3312 	mls	r3, r0, r2, r3
 8018064:	297e      	cmp	r1, #126	; 0x7e
 8018066:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801806a:	f43f af48 	beq.w	8017efe <uxr_read_framed_msg+0x302>
 801806e:	f081 0120 	eor.w	r1, r1, #32
 8018072:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8018076:	e6e8      	b.n	8017e4a <uxr_read_framed_msg+0x24e>
 8018078:	1c58      	adds	r0, r3, #1
 801807a:	0842      	lsrs	r2, r0, #1
 801807c:	fba5 c202 	umull	ip, r2, r5, r2
 8018080:	0892      	lsrs	r2, r2, #2
 8018082:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018086:	fb0c 0212 	mls	r2, ip, r2, r0
 801808a:	b2d0      	uxtb	r0, r2
 801808c:	4281      	cmp	r1, r0
 801808e:	f43f af32 	beq.w	8017ef6 <uxr_read_framed_msg+0x2fa>
 8018092:	4422      	add	r2, r4
 8018094:	3302      	adds	r3, #2
 8018096:	7890      	ldrb	r0, [r2, #2]
 8018098:	085a      	lsrs	r2, r3, #1
 801809a:	fba5 1202 	umull	r1, r2, r5, r2
 801809e:	0892      	lsrs	r2, r2, #2
 80180a0:	fb0c 3312 	mls	r3, ip, r2, r3
 80180a4:	287e      	cmp	r0, #126	; 0x7e
 80180a6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80180aa:	d01f      	beq.n	80180ec <uxr_read_framed_msg+0x4f0>
 80180ac:	f080 0020 	eor.w	r0, r0, #32
 80180b0:	e68b      	b.n	8017dca <uxr_read_framed_msg+0x1ce>
 80180b2:	1c51      	adds	r1, r2, #1
 80180b4:	084b      	lsrs	r3, r1, #1
 80180b6:	fba5 c303 	umull	ip, r3, r5, r3
 80180ba:	089b      	lsrs	r3, r3, #2
 80180bc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80180c0:	fb0c 1313 	mls	r3, ip, r3, r1
 80180c4:	b2d9      	uxtb	r1, r3
 80180c6:	4288      	cmp	r0, r1
 80180c8:	f43f af3d 	beq.w	8017f46 <uxr_read_framed_msg+0x34a>
 80180cc:	3202      	adds	r2, #2
 80180ce:	4423      	add	r3, r4
 80180d0:	0850      	lsrs	r0, r2, #1
 80180d2:	789b      	ldrb	r3, [r3, #2]
 80180d4:	fba5 1000 	umull	r1, r0, r5, r0
 80180d8:	0880      	lsrs	r0, r0, #2
 80180da:	fb0c 2210 	mls	r2, ip, r0, r2
 80180de:	2b7e      	cmp	r3, #126	; 0x7e
 80180e0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80180e4:	d016      	beq.n	8018114 <uxr_read_framed_msg+0x518>
 80180e6:	f083 0120 	eor.w	r1, r3, #32
 80180ea:	e68b      	b.n	8017e04 <uxr_read_framed_msg+0x208>
 80180ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180ee:	9300      	str	r3, [sp, #0]
 80180f0:	2302      	movs	r3, #2
 80180f2:	9301      	str	r3, [sp, #4]
 80180f4:	464a      	mov	r2, r9
 80180f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180f8:	4641      	mov	r1, r8
 80180fa:	4620      	mov	r0, r4
 80180fc:	f7ff fcfc 	bl	8017af8 <uxr_framing_read_transport>
 8018100:	2800      	cmp	r0, #0
 8018102:	f47f aef6 	bne.w	8017ef2 <uxr_read_framed_msg+0x2f6>
 8018106:	2301      	movs	r3, #1
 8018108:	7023      	strb	r3, [r4, #0]
 801810a:	e588      	b.n	8017c1e <uxr_read_framed_msg+0x22>
 801810c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801810e:	9300      	str	r3, [sp, #0]
 8018110:	2301      	movs	r3, #1
 8018112:	e7ee      	b.n	80180f2 <uxr_read_framed_msg+0x4f6>
 8018114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018116:	9300      	str	r3, [sp, #0]
 8018118:	2303      	movs	r3, #3
 801811a:	e7ea      	b.n	80180f2 <uxr_read_framed_msg+0x4f6>
 801811c:	ee17 8a90 	vmov	r8, s15
 8018120:	e6ae      	b.n	8017e80 <uxr_read_framed_msg+0x284>
 8018122:	bf00      	nop

08018124 <rcl_get_default_domain_id>:
 8018124:	b530      	push	{r4, r5, lr}
 8018126:	b083      	sub	sp, #12
 8018128:	2300      	movs	r3, #0
 801812a:	9300      	str	r3, [sp, #0]
 801812c:	b1d0      	cbz	r0, 8018164 <rcl_get_default_domain_id+0x40>
 801812e:	4604      	mov	r4, r0
 8018130:	4669      	mov	r1, sp
 8018132:	4815      	ldr	r0, [pc, #84]	; (8018188 <rcl_get_default_domain_id+0x64>)
 8018134:	f7fc fc60 	bl	80149f8 <rcutils_get_env>
 8018138:	4602      	mov	r2, r0
 801813a:	b110      	cbz	r0, 8018142 <rcl_get_default_domain_id+0x1e>
 801813c:	2001      	movs	r0, #1
 801813e:	b003      	add	sp, #12
 8018140:	bd30      	pop	{r4, r5, pc}
 8018142:	9b00      	ldr	r3, [sp, #0]
 8018144:	b18b      	cbz	r3, 801816a <rcl_get_default_domain_id+0x46>
 8018146:	7818      	ldrb	r0, [r3, #0]
 8018148:	2800      	cmp	r0, #0
 801814a:	d0f8      	beq.n	801813e <rcl_get_default_domain_id+0x1a>
 801814c:	a901      	add	r1, sp, #4
 801814e:	4618      	mov	r0, r3
 8018150:	9201      	str	r2, [sp, #4]
 8018152:	f000 ff47 	bl	8018fe4 <strtoul>
 8018156:	4605      	mov	r5, r0
 8018158:	b150      	cbz	r0, 8018170 <rcl_get_default_domain_id+0x4c>
 801815a:	1c43      	adds	r3, r0, #1
 801815c:	d00d      	beq.n	801817a <rcl_get_default_domain_id+0x56>
 801815e:	6025      	str	r5, [r4, #0]
 8018160:	2000      	movs	r0, #0
 8018162:	e7ec      	b.n	801813e <rcl_get_default_domain_id+0x1a>
 8018164:	200b      	movs	r0, #11
 8018166:	b003      	add	sp, #12
 8018168:	bd30      	pop	{r4, r5, pc}
 801816a:	4618      	mov	r0, r3
 801816c:	b003      	add	sp, #12
 801816e:	bd30      	pop	{r4, r5, pc}
 8018170:	9b01      	ldr	r3, [sp, #4]
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d0f2      	beq.n	801815e <rcl_get_default_domain_id+0x3a>
 8018178:	e7e0      	b.n	801813c <rcl_get_default_domain_id+0x18>
 801817a:	f000 fc2f 	bl	80189dc <__errno>
 801817e:	6803      	ldr	r3, [r0, #0]
 8018180:	2b22      	cmp	r3, #34	; 0x22
 8018182:	d1ec      	bne.n	801815e <rcl_get_default_domain_id+0x3a>
 8018184:	e7da      	b.n	801813c <rcl_get_default_domain_id+0x18>
 8018186:	bf00      	nop
 8018188:	0801af68 	.word	0x0801af68

0801818c <rcl_expand_topic_name>:
 801818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018190:	b08b      	sub	sp, #44	; 0x2c
 8018192:	9306      	str	r3, [sp, #24]
 8018194:	2800      	cmp	r0, #0
 8018196:	f000 80ad 	beq.w	80182f4 <rcl_expand_topic_name+0x168>
 801819a:	460e      	mov	r6, r1
 801819c:	2900      	cmp	r1, #0
 801819e:	f000 80a9 	beq.w	80182f4 <rcl_expand_topic_name+0x168>
 80181a2:	4617      	mov	r7, r2
 80181a4:	2a00      	cmp	r2, #0
 80181a6:	f000 80a5 	beq.w	80182f4 <rcl_expand_topic_name+0x168>
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	f000 80a2 	beq.w	80182f4 <rcl_expand_topic_name+0x168>
 80181b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	f000 809e 	beq.w	80182f4 <rcl_expand_topic_name+0x168>
 80181b8:	2200      	movs	r2, #0
 80181ba:	a909      	add	r1, sp, #36	; 0x24
 80181bc:	4680      	mov	r8, r0
 80181be:	f000 f9fb 	bl	80185b8 <rcl_validate_topic_name>
 80181c2:	4604      	mov	r4, r0
 80181c4:	2800      	cmp	r0, #0
 80181c6:	f040 8096 	bne.w	80182f6 <rcl_expand_topic_name+0x16a>
 80181ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	f040 809a 	bne.w	8018306 <rcl_expand_topic_name+0x17a>
 80181d2:	4602      	mov	r2, r0
 80181d4:	a909      	add	r1, sp, #36	; 0x24
 80181d6:	4630      	mov	r0, r6
 80181d8:	f7fd f86c 	bl	80152b4 <rmw_validate_node_name>
 80181dc:	2800      	cmp	r0, #0
 80181de:	f040 808e 	bne.w	80182fe <rcl_expand_topic_name+0x172>
 80181e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181e4:	2a00      	cmp	r2, #0
 80181e6:	f040 8093 	bne.w	8018310 <rcl_expand_topic_name+0x184>
 80181ea:	a909      	add	r1, sp, #36	; 0x24
 80181ec:	4638      	mov	r0, r7
 80181ee:	f7fd f843 	bl	8015278 <rmw_validate_namespace>
 80181f2:	2800      	cmp	r0, #0
 80181f4:	f040 8083 	bne.w	80182fe <rcl_expand_topic_name+0x172>
 80181f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80181fa:	2c00      	cmp	r4, #0
 80181fc:	f040 80ed 	bne.w	80183da <rcl_expand_topic_name+0x24e>
 8018200:	217b      	movs	r1, #123	; 0x7b
 8018202:	4640      	mov	r0, r8
 8018204:	f000 fe34 	bl	8018e70 <strchr>
 8018208:	f898 3000 	ldrb.w	r3, [r8]
 801820c:	2b2f      	cmp	r3, #47	; 0x2f
 801820e:	4605      	mov	r5, r0
 8018210:	f000 809e 	beq.w	8018350 <rcl_expand_topic_name+0x1c4>
 8018214:	2b7e      	cmp	r3, #126	; 0x7e
 8018216:	f040 80a2 	bne.w	801835e <rcl_expand_topic_name+0x1d2>
 801821a:	4638      	mov	r0, r7
 801821c:	f7e7 ffe2 	bl	80001e4 <strlen>
 8018220:	4a82      	ldr	r2, [pc, #520]	; (801842c <rcl_expand_topic_name+0x2a0>)
 8018222:	4b83      	ldr	r3, [pc, #524]	; (8018430 <rcl_expand_topic_name+0x2a4>)
 8018224:	2801      	cmp	r0, #1
 8018226:	bf18      	it	ne
 8018228:	4613      	movne	r3, r2
 801822a:	9302      	str	r3, [sp, #8]
 801822c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801822e:	9300      	str	r3, [sp, #0]
 8018230:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018234:	f108 0301 	add.w	r3, r8, #1
 8018238:	9305      	str	r3, [sp, #20]
 801823a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801823e:	9301      	str	r3, [sp, #4]
 8018240:	ab14      	add	r3, sp, #80	; 0x50
 8018242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018244:	f7fc fc00 	bl	8014a48 <rcutils_format_string_limit>
 8018248:	4682      	mov	sl, r0
 801824a:	2800      	cmp	r0, #0
 801824c:	f000 80c7 	beq.w	80183de <rcl_expand_topic_name+0x252>
 8018250:	2d00      	cmp	r5, #0
 8018252:	f000 80a2 	beq.w	801839a <rcl_expand_topic_name+0x20e>
 8018256:	217b      	movs	r1, #123	; 0x7b
 8018258:	f000 fe0a 	bl	8018e70 <strchr>
 801825c:	46d1      	mov	r9, sl
 801825e:	4605      	mov	r5, r0
 8018260:	9407      	str	r4, [sp, #28]
 8018262:	46d3      	mov	fp, sl
 8018264:	464c      	mov	r4, r9
 8018266:	2d00      	cmp	r5, #0
 8018268:	f000 80be 	beq.w	80183e8 <rcl_expand_topic_name+0x25c>
 801826c:	217d      	movs	r1, #125	; 0x7d
 801826e:	4620      	mov	r0, r4
 8018270:	f000 fdfe 	bl	8018e70 <strchr>
 8018274:	eba0 0905 	sub.w	r9, r0, r5
 8018278:	f109 0a01 	add.w	sl, r9, #1
 801827c:	486d      	ldr	r0, [pc, #436]	; (8018434 <rcl_expand_topic_name+0x2a8>)
 801827e:	4652      	mov	r2, sl
 8018280:	4629      	mov	r1, r5
 8018282:	f000 fe0a 	bl	8018e9a <strncmp>
 8018286:	2800      	cmp	r0, #0
 8018288:	d067      	beq.n	801835a <rcl_expand_topic_name+0x1ce>
 801828a:	486b      	ldr	r0, [pc, #428]	; (8018438 <rcl_expand_topic_name+0x2ac>)
 801828c:	4652      	mov	r2, sl
 801828e:	4629      	mov	r1, r5
 8018290:	f000 fe03 	bl	8018e9a <strncmp>
 8018294:	b130      	cbz	r0, 80182a4 <rcl_expand_topic_name+0x118>
 8018296:	4869      	ldr	r0, [pc, #420]	; (801843c <rcl_expand_topic_name+0x2b0>)
 8018298:	4652      	mov	r2, sl
 801829a:	4629      	mov	r1, r5
 801829c:	f000 fdfd 	bl	8018e9a <strncmp>
 80182a0:	2800      	cmp	r0, #0
 80182a2:	d137      	bne.n	8018314 <rcl_expand_topic_name+0x188>
 80182a4:	46b9      	mov	r9, r7
 80182a6:	ab16      	add	r3, sp, #88	; 0x58
 80182a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80182ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80182b0:	ab14      	add	r3, sp, #80	; 0x50
 80182b2:	4628      	mov	r0, r5
 80182b4:	cb0c      	ldmia	r3, {r2, r3}
 80182b6:	4651      	mov	r1, sl
 80182b8:	f7fc fd02 	bl	8014cc0 <rcutils_strndup>
 80182bc:	4605      	mov	r5, r0
 80182be:	2800      	cmp	r0, #0
 80182c0:	f000 809c 	beq.w	80183fc <rcl_expand_topic_name+0x270>
 80182c4:	464a      	mov	r2, r9
 80182c6:	4620      	mov	r0, r4
 80182c8:	ab14      	add	r3, sp, #80	; 0x50
 80182ca:	4629      	mov	r1, r5
 80182cc:	f7fc fbf6 	bl	8014abc <rcutils_repl_str>
 80182d0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80182d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80182d4:	4604      	mov	r4, r0
 80182d6:	4628      	mov	r0, r5
 80182d8:	4798      	blx	r3
 80182da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80182dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80182de:	4658      	mov	r0, fp
 80182e0:	4798      	blx	r3
 80182e2:	2c00      	cmp	r4, #0
 80182e4:	d07b      	beq.n	80183de <rcl_expand_topic_name+0x252>
 80182e6:	217b      	movs	r1, #123	; 0x7b
 80182e8:	4620      	mov	r0, r4
 80182ea:	f000 fdc1 	bl	8018e70 <strchr>
 80182ee:	46a3      	mov	fp, r4
 80182f0:	4605      	mov	r5, r0
 80182f2:	e7b8      	b.n	8018266 <rcl_expand_topic_name+0xda>
 80182f4:	240b      	movs	r4, #11
 80182f6:	4620      	mov	r0, r4
 80182f8:	b00b      	add	sp, #44	; 0x2c
 80182fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182fe:	f7f9 fdd9 	bl	8011eb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018302:	4604      	mov	r4, r0
 8018304:	e7f7      	b.n	80182f6 <rcl_expand_topic_name+0x16a>
 8018306:	2467      	movs	r4, #103	; 0x67
 8018308:	4620      	mov	r0, r4
 801830a:	b00b      	add	sp, #44	; 0x2c
 801830c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018310:	24c9      	movs	r4, #201	; 0xc9
 8018312:	e7f0      	b.n	80182f6 <rcl_expand_topic_name+0x16a>
 8018314:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8018318:	9806      	ldr	r0, [sp, #24]
 801831a:	1c69      	adds	r1, r5, #1
 801831c:	f7fc fdea 	bl	8014ef4 <rcutils_string_map_getn>
 8018320:	4681      	mov	r9, r0
 8018322:	2800      	cmp	r0, #0
 8018324:	d1bf      	bne.n	80182a6 <rcl_expand_topic_name+0x11a>
 8018326:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018328:	aa16      	add	r2, sp, #88	; 0x58
 801832a:	6018      	str	r0, [r3, #0]
 801832c:	ca07      	ldmia	r2, {r0, r1, r2}
 801832e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018332:	ab14      	add	r3, sp, #80	; 0x50
 8018334:	cb0c      	ldmia	r3, {r2, r3}
 8018336:	4651      	mov	r1, sl
 8018338:	4628      	mov	r0, r5
 801833a:	f7fc fcc1 	bl	8014cc0 <rcutils_strndup>
 801833e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018342:	4798      	blx	r3
 8018344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018346:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018348:	4658      	mov	r0, fp
 801834a:	2469      	movs	r4, #105	; 0x69
 801834c:	4798      	blx	r3
 801834e:	e7d2      	b.n	80182f6 <rcl_expand_topic_name+0x16a>
 8018350:	2800      	cmp	r0, #0
 8018352:	d05b      	beq.n	801840c <rcl_expand_topic_name+0x280>
 8018354:	46c1      	mov	r9, r8
 8018356:	46a2      	mov	sl, r4
 8018358:	e782      	b.n	8018260 <rcl_expand_topic_name+0xd4>
 801835a:	46b1      	mov	r9, r6
 801835c:	e7a3      	b.n	80182a6 <rcl_expand_topic_name+0x11a>
 801835e:	2800      	cmp	r0, #0
 8018360:	d1f8      	bne.n	8018354 <rcl_expand_topic_name+0x1c8>
 8018362:	4638      	mov	r0, r7
 8018364:	f7e7 ff3e 	bl	80001e4 <strlen>
 8018368:	4a35      	ldr	r2, [pc, #212]	; (8018440 <rcl_expand_topic_name+0x2b4>)
 801836a:	4b36      	ldr	r3, [pc, #216]	; (8018444 <rcl_expand_topic_name+0x2b8>)
 801836c:	f8cd 8010 	str.w	r8, [sp, #16]
 8018370:	2801      	cmp	r0, #1
 8018372:	bf18      	it	ne
 8018374:	4613      	movne	r3, r2
 8018376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801837a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801837e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018380:	9703      	str	r7, [sp, #12]
 8018382:	9200      	str	r2, [sp, #0]
 8018384:	ab14      	add	r3, sp, #80	; 0x50
 8018386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018388:	f7fc fb5e 	bl	8014a48 <rcutils_format_string_limit>
 801838c:	4682      	mov	sl, r0
 801838e:	4653      	mov	r3, sl
 8018390:	b32b      	cbz	r3, 80183de <rcl_expand_topic_name+0x252>
 8018392:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018394:	f8c3 a000 	str.w	sl, [r3]
 8018398:	e7ad      	b.n	80182f6 <rcl_expand_topic_name+0x16a>
 801839a:	f89a 3000 	ldrb.w	r3, [sl]
 801839e:	2b2f      	cmp	r3, #47	; 0x2f
 80183a0:	d0f7      	beq.n	8018392 <rcl_expand_topic_name+0x206>
 80183a2:	4638      	mov	r0, r7
 80183a4:	f7e7 ff1e 	bl	80001e4 <strlen>
 80183a8:	4a25      	ldr	r2, [pc, #148]	; (8018440 <rcl_expand_topic_name+0x2b4>)
 80183aa:	4b26      	ldr	r3, [pc, #152]	; (8018444 <rcl_expand_topic_name+0x2b8>)
 80183ac:	f8cd a010 	str.w	sl, [sp, #16]
 80183b0:	2801      	cmp	r0, #1
 80183b2:	bf18      	it	ne
 80183b4:	4613      	movne	r3, r2
 80183b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80183ba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80183be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80183c0:	9703      	str	r7, [sp, #12]
 80183c2:	9200      	str	r2, [sp, #0]
 80183c4:	ab14      	add	r3, sp, #80	; 0x50
 80183c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80183c8:	f7fc fb3e 	bl	8014a48 <rcutils_format_string_limit>
 80183cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80183d0:	4605      	mov	r5, r0
 80183d2:	4650      	mov	r0, sl
 80183d4:	4798      	blx	r3
 80183d6:	46aa      	mov	sl, r5
 80183d8:	e7d9      	b.n	801838e <rcl_expand_topic_name+0x202>
 80183da:	24ca      	movs	r4, #202	; 0xca
 80183dc:	e78b      	b.n	80182f6 <rcl_expand_topic_name+0x16a>
 80183de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80183e0:	2300      	movs	r3, #0
 80183e2:	6013      	str	r3, [r2, #0]
 80183e4:	240a      	movs	r4, #10
 80183e6:	e786      	b.n	80182f6 <rcl_expand_topic_name+0x16a>
 80183e8:	465b      	mov	r3, fp
 80183ea:	9c07      	ldr	r4, [sp, #28]
 80183ec:	46da      	mov	sl, fp
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d1d3      	bne.n	801839a <rcl_expand_topic_name+0x20e>
 80183f2:	f898 3000 	ldrb.w	r3, [r8]
 80183f6:	2b2f      	cmp	r3, #47	; 0x2f
 80183f8:	d0cb      	beq.n	8018392 <rcl_expand_topic_name+0x206>
 80183fa:	e7b2      	b.n	8018362 <rcl_expand_topic_name+0x1d6>
 80183fc:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8018400:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018402:	6015      	str	r5, [r2, #0]
 8018404:	4658      	mov	r0, fp
 8018406:	4798      	blx	r3
 8018408:	240a      	movs	r4, #10
 801840a:	e774      	b.n	80182f6 <rcl_expand_topic_name+0x16a>
 801840c:	ab17      	add	r3, sp, #92	; 0x5c
 801840e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018412:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018416:	ab14      	add	r3, sp, #80	; 0x50
 8018418:	cb0e      	ldmia	r3, {r1, r2, r3}
 801841a:	4640      	mov	r0, r8
 801841c:	f7fc fc2e 	bl	8014c7c <rcutils_strdup>
 8018420:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018422:	2800      	cmp	r0, #0
 8018424:	6018      	str	r0, [r3, #0]
 8018426:	bf08      	it	eq
 8018428:	240a      	moveq	r4, #10
 801842a:	e764      	b.n	80182f6 <rcl_expand_topic_name+0x16a>
 801842c:	0801af78 	.word	0x0801af78
 8018430:	0801a64c 	.word	0x0801a64c
 8018434:	0801af80 	.word	0x0801af80
 8018438:	0801af88 	.word	0x0801af88
 801843c:	0801af90 	.word	0x0801af90
 8018440:	0801a7d4 	.word	0x0801a7d4
 8018444:	0801a65c 	.word	0x0801a65c

08018448 <rcl_get_default_topic_name_substitutions>:
 8018448:	2800      	cmp	r0, #0
 801844a:	bf0c      	ite	eq
 801844c:	200b      	moveq	r0, #11
 801844e:	2000      	movne	r0, #0
 8018450:	4770      	bx	lr
 8018452:	bf00      	nop

08018454 <rcl_get_zero_initialized_guard_condition>:
 8018454:	4a03      	ldr	r2, [pc, #12]	; (8018464 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018456:	4603      	mov	r3, r0
 8018458:	e892 0003 	ldmia.w	r2, {r0, r1}
 801845c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018460:	4618      	mov	r0, r3
 8018462:	4770      	bx	lr
 8018464:	0801af9c 	.word	0x0801af9c

08018468 <rcl_guard_condition_init_from_rmw>:
 8018468:	b082      	sub	sp, #8
 801846a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801846e:	b086      	sub	sp, #24
 8018470:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018474:	4604      	mov	r4, r0
 8018476:	f84c 3f04 	str.w	r3, [ip, #4]!
 801847a:	460e      	mov	r6, r1
 801847c:	4617      	mov	r7, r2
 801847e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018482:	f10d 0e04 	add.w	lr, sp, #4
 8018486:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801848a:	f8dc 3000 	ldr.w	r3, [ip]
 801848e:	f8ce 3000 	str.w	r3, [lr]
 8018492:	a801      	add	r0, sp, #4
 8018494:	f7f5 ffb0 	bl	800e3f8 <rcutils_allocator_is_valid>
 8018498:	b350      	cbz	r0, 80184f0 <rcl_guard_condition_init_from_rmw+0x88>
 801849a:	b34c      	cbz	r4, 80184f0 <rcl_guard_condition_init_from_rmw+0x88>
 801849c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80184a0:	f1b8 0f00 	cmp.w	r8, #0
 80184a4:	d11e      	bne.n	80184e4 <rcl_guard_condition_init_from_rmw+0x7c>
 80184a6:	b31f      	cbz	r7, 80184f0 <rcl_guard_condition_init_from_rmw+0x88>
 80184a8:	4638      	mov	r0, r7
 80184aa:	f7f9 fd21 	bl	8011ef0 <rcl_context_is_valid>
 80184ae:	b328      	cbz	r0, 80184fc <rcl_guard_condition_init_from_rmw+0x94>
 80184b0:	9b01      	ldr	r3, [sp, #4]
 80184b2:	9905      	ldr	r1, [sp, #20]
 80184b4:	201c      	movs	r0, #28
 80184b6:	4798      	blx	r3
 80184b8:	4605      	mov	r5, r0
 80184ba:	6060      	str	r0, [r4, #4]
 80184bc:	b358      	cbz	r0, 8018516 <rcl_guard_condition_init_from_rmw+0xae>
 80184be:	b1fe      	cbz	r6, 8018500 <rcl_guard_condition_init_from_rmw+0x98>
 80184c0:	6006      	str	r6, [r0, #0]
 80184c2:	f880 8004 	strb.w	r8, [r0, #4]
 80184c6:	ac01      	add	r4, sp, #4
 80184c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184ca:	f105 0c08 	add.w	ip, r5, #8
 80184ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80184d2:	6823      	ldr	r3, [r4, #0]
 80184d4:	f8cc 3000 	str.w	r3, [ip]
 80184d8:	2000      	movs	r0, #0
 80184da:	b006      	add	sp, #24
 80184dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184e0:	b002      	add	sp, #8
 80184e2:	4770      	bx	lr
 80184e4:	2064      	movs	r0, #100	; 0x64
 80184e6:	b006      	add	sp, #24
 80184e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184ec:	b002      	add	sp, #8
 80184ee:	4770      	bx	lr
 80184f0:	200b      	movs	r0, #11
 80184f2:	b006      	add	sp, #24
 80184f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184f8:	b002      	add	sp, #8
 80184fa:	4770      	bx	lr
 80184fc:	2065      	movs	r0, #101	; 0x65
 80184fe:	e7f2      	b.n	80184e6 <rcl_guard_condition_init_from_rmw+0x7e>
 8018500:	6838      	ldr	r0, [r7, #0]
 8018502:	3028      	adds	r0, #40	; 0x28
 8018504:	f000 fa3a 	bl	801897c <rmw_create_guard_condition>
 8018508:	6028      	str	r0, [r5, #0]
 801850a:	6865      	ldr	r5, [r4, #4]
 801850c:	682e      	ldr	r6, [r5, #0]
 801850e:	b126      	cbz	r6, 801851a <rcl_guard_condition_init_from_rmw+0xb2>
 8018510:	2301      	movs	r3, #1
 8018512:	712b      	strb	r3, [r5, #4]
 8018514:	e7d7      	b.n	80184c6 <rcl_guard_condition_init_from_rmw+0x5e>
 8018516:	200a      	movs	r0, #10
 8018518:	e7e5      	b.n	80184e6 <rcl_guard_condition_init_from_rmw+0x7e>
 801851a:	4628      	mov	r0, r5
 801851c:	9b02      	ldr	r3, [sp, #8]
 801851e:	9905      	ldr	r1, [sp, #20]
 8018520:	4798      	blx	r3
 8018522:	6066      	str	r6, [r4, #4]
 8018524:	2001      	movs	r0, #1
 8018526:	e7de      	b.n	80184e6 <rcl_guard_condition_init_from_rmw+0x7e>

08018528 <rcl_guard_condition_fini>:
 8018528:	b570      	push	{r4, r5, r6, lr}
 801852a:	b082      	sub	sp, #8
 801852c:	b1f0      	cbz	r0, 801856c <rcl_guard_condition_fini+0x44>
 801852e:	6843      	ldr	r3, [r0, #4]
 8018530:	4604      	mov	r4, r0
 8018532:	b163      	cbz	r3, 801854e <rcl_guard_condition_fini+0x26>
 8018534:	6818      	ldr	r0, [r3, #0]
 8018536:	68de      	ldr	r6, [r3, #12]
 8018538:	6999      	ldr	r1, [r3, #24]
 801853a:	b160      	cbz	r0, 8018556 <rcl_guard_condition_fini+0x2e>
 801853c:	791d      	ldrb	r5, [r3, #4]
 801853e:	b965      	cbnz	r5, 801855a <rcl_guard_condition_fini+0x32>
 8018540:	4618      	mov	r0, r3
 8018542:	47b0      	blx	r6
 8018544:	2300      	movs	r3, #0
 8018546:	4628      	mov	r0, r5
 8018548:	6063      	str	r3, [r4, #4]
 801854a:	b002      	add	sp, #8
 801854c:	bd70      	pop	{r4, r5, r6, pc}
 801854e:	461d      	mov	r5, r3
 8018550:	4628      	mov	r0, r5
 8018552:	b002      	add	sp, #8
 8018554:	bd70      	pop	{r4, r5, r6, pc}
 8018556:	4605      	mov	r5, r0
 8018558:	e7f2      	b.n	8018540 <rcl_guard_condition_fini+0x18>
 801855a:	9101      	str	r1, [sp, #4]
 801855c:	f000 fa22 	bl	80189a4 <rmw_destroy_guard_condition>
 8018560:	1e05      	subs	r5, r0, #0
 8018562:	6863      	ldr	r3, [r4, #4]
 8018564:	9901      	ldr	r1, [sp, #4]
 8018566:	bf18      	it	ne
 8018568:	2501      	movne	r5, #1
 801856a:	e7e9      	b.n	8018540 <rcl_guard_condition_fini+0x18>
 801856c:	250b      	movs	r5, #11
 801856e:	4628      	mov	r0, r5
 8018570:	b002      	add	sp, #8
 8018572:	bd70      	pop	{r4, r5, r6, pc}

08018574 <rcl_guard_condition_get_default_options>:
 8018574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018576:	b087      	sub	sp, #28
 8018578:	4606      	mov	r6, r0
 801857a:	4668      	mov	r0, sp
 801857c:	f7f5 ff2e 	bl	800e3dc <rcutils_get_default_allocator>
 8018580:	4b09      	ldr	r3, [pc, #36]	; (80185a8 <rcl_guard_condition_get_default_options+0x34>)
 8018582:	46ee      	mov	lr, sp
 8018584:	469c      	mov	ip, r3
 8018586:	461d      	mov	r5, r3
 8018588:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801858c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018592:	4634      	mov	r4, r6
 8018594:	f8de 7000 	ldr.w	r7, [lr]
 8018598:	f8cc 7000 	str.w	r7, [ip]
 801859c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801859e:	4630      	mov	r0, r6
 80185a0:	6027      	str	r7, [r4, #0]
 80185a2:	b007      	add	sp, #28
 80185a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185a6:	bf00      	nop
 80185a8:	2000df24 	.word	0x2000df24

080185ac <rcl_guard_condition_get_rmw_handle>:
 80185ac:	b110      	cbz	r0, 80185b4 <rcl_guard_condition_get_rmw_handle+0x8>
 80185ae:	6840      	ldr	r0, [r0, #4]
 80185b0:	b100      	cbz	r0, 80185b4 <rcl_guard_condition_get_rmw_handle+0x8>
 80185b2:	6800      	ldr	r0, [r0, #0]
 80185b4:	4770      	bx	lr
 80185b6:	bf00      	nop

080185b8 <rcl_validate_topic_name>:
 80185b8:	2800      	cmp	r0, #0
 80185ba:	d07a      	beq.n	80186b2 <rcl_validate_topic_name+0xfa>
 80185bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185c0:	460e      	mov	r6, r1
 80185c2:	2900      	cmp	r1, #0
 80185c4:	d07c      	beq.n	80186c0 <rcl_validate_topic_name+0x108>
 80185c6:	4617      	mov	r7, r2
 80185c8:	4605      	mov	r5, r0
 80185ca:	f7e7 fe0b 	bl	80001e4 <strlen>
 80185ce:	b1b0      	cbz	r0, 80185fe <rcl_validate_topic_name+0x46>
 80185d0:	f895 9000 	ldrb.w	r9, [r5]
 80185d4:	f8df c180 	ldr.w	ip, [pc, #384]	; 8018758 <rcl_validate_topic_name+0x1a0>
 80185d8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80185dc:	f013 0304 	ands.w	r3, r3, #4
 80185e0:	d169      	bne.n	80186b6 <rcl_validate_topic_name+0xfe>
 80185e2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80185e6:	f815 2008 	ldrb.w	r2, [r5, r8]
 80185ea:	2a2f      	cmp	r2, #47	; 0x2f
 80185ec:	d10e      	bne.n	801860c <rcl_validate_topic_name+0x54>
 80185ee:	2202      	movs	r2, #2
 80185f0:	6032      	str	r2, [r6, #0]
 80185f2:	b36f      	cbz	r7, 8018650 <rcl_validate_topic_name+0x98>
 80185f4:	f8c7 8000 	str.w	r8, [r7]
 80185f8:	4618      	mov	r0, r3
 80185fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185fe:	2301      	movs	r3, #1
 8018600:	6033      	str	r3, [r6, #0]
 8018602:	b32f      	cbz	r7, 8018650 <rcl_validate_topic_name+0x98>
 8018604:	2000      	movs	r0, #0
 8018606:	6038      	str	r0, [r7, #0]
 8018608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801860c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8018610:	461c      	mov	r4, r3
 8018612:	4619      	mov	r1, r3
 8018614:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018618:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801861c:	f1be 0f09 	cmp.w	lr, #9
 8018620:	d919      	bls.n	8018656 <rcl_validate_topic_name+0x9e>
 8018622:	f022 0e20 	bic.w	lr, r2, #32
 8018626:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 801862a:	f1be 0f19 	cmp.w	lr, #25
 801862e:	d912      	bls.n	8018656 <rcl_validate_topic_name+0x9e>
 8018630:	2a5f      	cmp	r2, #95	; 0x5f
 8018632:	d019      	beq.n	8018668 <rcl_validate_topic_name+0xb0>
 8018634:	2a2f      	cmp	r2, #47	; 0x2f
 8018636:	d051      	beq.n	80186dc <rcl_validate_topic_name+0x124>
 8018638:	2a7e      	cmp	r2, #126	; 0x7e
 801863a:	d048      	beq.n	80186ce <rcl_validate_topic_name+0x116>
 801863c:	2a7b      	cmp	r2, #123	; 0x7b
 801863e:	d054      	beq.n	80186ea <rcl_validate_topic_name+0x132>
 8018640:	2a7d      	cmp	r2, #125	; 0x7d
 8018642:	d161      	bne.n	8018708 <rcl_validate_topic_name+0x150>
 8018644:	2c00      	cmp	r4, #0
 8018646:	d155      	bne.n	80186f4 <rcl_validate_topic_name+0x13c>
 8018648:	2305      	movs	r3, #5
 801864a:	6033      	str	r3, [r6, #0]
 801864c:	b107      	cbz	r7, 8018650 <rcl_validate_topic_name+0x98>
 801864e:	6039      	str	r1, [r7, #0]
 8018650:	2000      	movs	r0, #0
 8018652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018656:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801865a:	0752      	lsls	r2, r2, #29
 801865c:	d504      	bpl.n	8018668 <rcl_validate_topic_name+0xb0>
 801865e:	b11c      	cbz	r4, 8018668 <rcl_validate_topic_name+0xb0>
 8018660:	b111      	cbz	r1, 8018668 <rcl_validate_topic_name+0xb0>
 8018662:	1e4a      	subs	r2, r1, #1
 8018664:	429a      	cmp	r2, r3
 8018666:	d02d      	beq.n	80186c4 <rcl_validate_topic_name+0x10c>
 8018668:	3101      	adds	r1, #1
 801866a:	4288      	cmp	r0, r1
 801866c:	d1d2      	bne.n	8018614 <rcl_validate_topic_name+0x5c>
 801866e:	2c00      	cmp	r4, #0
 8018670:	d145      	bne.n	80186fe <rcl_validate_topic_name+0x146>
 8018672:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8018676:	d04f      	beq.n	8018718 <rcl_validate_topic_name+0x160>
 8018678:	4620      	mov	r0, r4
 801867a:	2301      	movs	r3, #1
 801867c:	e006      	b.n	801868c <rcl_validate_topic_name+0xd4>
 801867e:	428b      	cmp	r3, r1
 8018680:	f105 0501 	add.w	r5, r5, #1
 8018684:	f103 0201 	add.w	r2, r3, #1
 8018688:	d236      	bcs.n	80186f8 <rcl_validate_topic_name+0x140>
 801868a:	4613      	mov	r3, r2
 801868c:	4580      	cmp	r8, r0
 801868e:	f100 0001 	add.w	r0, r0, #1
 8018692:	d0f4      	beq.n	801867e <rcl_validate_topic_name+0xc6>
 8018694:	782a      	ldrb	r2, [r5, #0]
 8018696:	2a2f      	cmp	r2, #47	; 0x2f
 8018698:	d1f1      	bne.n	801867e <rcl_validate_topic_name+0xc6>
 801869a:	786a      	ldrb	r2, [r5, #1]
 801869c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80186a0:	0754      	lsls	r4, r2, #29
 80186a2:	d5ec      	bpl.n	801867e <rcl_validate_topic_name+0xc6>
 80186a4:	2204      	movs	r2, #4
 80186a6:	6032      	str	r2, [r6, #0]
 80186a8:	2f00      	cmp	r7, #0
 80186aa:	d0d1      	beq.n	8018650 <rcl_validate_topic_name+0x98>
 80186ac:	603b      	str	r3, [r7, #0]
 80186ae:	2000      	movs	r0, #0
 80186b0:	e7aa      	b.n	8018608 <rcl_validate_topic_name+0x50>
 80186b2:	200b      	movs	r0, #11
 80186b4:	4770      	bx	lr
 80186b6:	2304      	movs	r3, #4
 80186b8:	6033      	str	r3, [r6, #0]
 80186ba:	2f00      	cmp	r7, #0
 80186bc:	d1a2      	bne.n	8018604 <rcl_validate_topic_name+0x4c>
 80186be:	e7c7      	b.n	8018650 <rcl_validate_topic_name+0x98>
 80186c0:	200b      	movs	r0, #11
 80186c2:	e7a1      	b.n	8018608 <rcl_validate_topic_name+0x50>
 80186c4:	2309      	movs	r3, #9
 80186c6:	6033      	str	r3, [r6, #0]
 80186c8:	2f00      	cmp	r7, #0
 80186ca:	d1c0      	bne.n	801864e <rcl_validate_topic_name+0x96>
 80186cc:	e7c0      	b.n	8018650 <rcl_validate_topic_name+0x98>
 80186ce:	2900      	cmp	r1, #0
 80186d0:	d0ca      	beq.n	8018668 <rcl_validate_topic_name+0xb0>
 80186d2:	2306      	movs	r3, #6
 80186d4:	6033      	str	r3, [r6, #0]
 80186d6:	2f00      	cmp	r7, #0
 80186d8:	d1b9      	bne.n	801864e <rcl_validate_topic_name+0x96>
 80186da:	e7b9      	b.n	8018650 <rcl_validate_topic_name+0x98>
 80186dc:	2c00      	cmp	r4, #0
 80186de:	d0c3      	beq.n	8018668 <rcl_validate_topic_name+0xb0>
 80186e0:	2308      	movs	r3, #8
 80186e2:	6033      	str	r3, [r6, #0]
 80186e4:	2f00      	cmp	r7, #0
 80186e6:	d1b2      	bne.n	801864e <rcl_validate_topic_name+0x96>
 80186e8:	e7b2      	b.n	8018650 <rcl_validate_topic_name+0x98>
 80186ea:	2c00      	cmp	r4, #0
 80186ec:	d1f8      	bne.n	80186e0 <rcl_validate_topic_name+0x128>
 80186ee:	460b      	mov	r3, r1
 80186f0:	2401      	movs	r4, #1
 80186f2:	e7b9      	b.n	8018668 <rcl_validate_topic_name+0xb0>
 80186f4:	2400      	movs	r4, #0
 80186f6:	e7b7      	b.n	8018668 <rcl_validate_topic_name+0xb0>
 80186f8:	2000      	movs	r0, #0
 80186fa:	6030      	str	r0, [r6, #0]
 80186fc:	e784      	b.n	8018608 <rcl_validate_topic_name+0x50>
 80186fe:	2205      	movs	r2, #5
 8018700:	6032      	str	r2, [r6, #0]
 8018702:	2f00      	cmp	r7, #0
 8018704:	d1d2      	bne.n	80186ac <rcl_validate_topic_name+0xf4>
 8018706:	e7a3      	b.n	8018650 <rcl_validate_topic_name+0x98>
 8018708:	2c00      	cmp	r4, #0
 801870a:	bf14      	ite	ne
 801870c:	2308      	movne	r3, #8
 801870e:	2303      	moveq	r3, #3
 8018710:	6033      	str	r3, [r6, #0]
 8018712:	2f00      	cmp	r7, #0
 8018714:	d19b      	bne.n	801864e <rcl_validate_topic_name+0x96>
 8018716:	e79b      	b.n	8018650 <rcl_validate_topic_name+0x98>
 8018718:	2301      	movs	r3, #1
 801871a:	e00a      	b.n	8018732 <rcl_validate_topic_name+0x17a>
 801871c:	2c01      	cmp	r4, #1
 801871e:	d013      	beq.n	8018748 <rcl_validate_topic_name+0x190>
 8018720:	4299      	cmp	r1, r3
 8018722:	f104 0401 	add.w	r4, r4, #1
 8018726:	f105 0501 	add.w	r5, r5, #1
 801872a:	f103 0201 	add.w	r2, r3, #1
 801872e:	d9e3      	bls.n	80186f8 <rcl_validate_topic_name+0x140>
 8018730:	4613      	mov	r3, r2
 8018732:	45a0      	cmp	r8, r4
 8018734:	d0f4      	beq.n	8018720 <rcl_validate_topic_name+0x168>
 8018736:	782a      	ldrb	r2, [r5, #0]
 8018738:	2a2f      	cmp	r2, #47	; 0x2f
 801873a:	d1ef      	bne.n	801871c <rcl_validate_topic_name+0x164>
 801873c:	786a      	ldrb	r2, [r5, #1]
 801873e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018742:	0752      	lsls	r2, r2, #29
 8018744:	d5ec      	bpl.n	8018720 <rcl_validate_topic_name+0x168>
 8018746:	e7ad      	b.n	80186a4 <rcl_validate_topic_name+0xec>
 8018748:	2307      	movs	r3, #7
 801874a:	6033      	str	r3, [r6, #0]
 801874c:	2f00      	cmp	r7, #0
 801874e:	f43f af7f 	beq.w	8018650 <rcl_validate_topic_name+0x98>
 8018752:	603c      	str	r4, [r7, #0]
 8018754:	2000      	movs	r0, #0
 8018756:	e757      	b.n	8018608 <rcl_validate_topic_name+0x50>
 8018758:	0801afa5 	.word	0x0801afa5

0801875c <rcutils_string_array_fini>:
 801875c:	b320      	cbz	r0, 80187a8 <rcutils_string_array_fini+0x4c>
 801875e:	b570      	push	{r4, r5, r6, lr}
 8018760:	4604      	mov	r4, r0
 8018762:	6840      	ldr	r0, [r0, #4]
 8018764:	b1d8      	cbz	r0, 801879e <rcutils_string_array_fini+0x42>
 8018766:	f104 0008 	add.w	r0, r4, #8
 801876a:	f7f5 fe45 	bl	800e3f8 <rcutils_allocator_is_valid>
 801876e:	b1b8      	cbz	r0, 80187a0 <rcutils_string_array_fini+0x44>
 8018770:	6823      	ldr	r3, [r4, #0]
 8018772:	b1bb      	cbz	r3, 80187a4 <rcutils_string_array_fini+0x48>
 8018774:	2500      	movs	r5, #0
 8018776:	6860      	ldr	r0, [r4, #4]
 8018778:	462e      	mov	r6, r5
 801877a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801877e:	68e3      	ldr	r3, [r4, #12]
 8018780:	69a1      	ldr	r1, [r4, #24]
 8018782:	4798      	blx	r3
 8018784:	e9d4 3000 	ldrd	r3, r0, [r4]
 8018788:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801878c:	3501      	adds	r5, #1
 801878e:	429d      	cmp	r5, r3
 8018790:	d3f3      	bcc.n	801877a <rcutils_string_array_fini+0x1e>
 8018792:	68e3      	ldr	r3, [r4, #12]
 8018794:	69a1      	ldr	r1, [r4, #24]
 8018796:	4798      	blx	r3
 8018798:	2000      	movs	r0, #0
 801879a:	e9c4 0000 	strd	r0, r0, [r4]
 801879e:	bd70      	pop	{r4, r5, r6, pc}
 80187a0:	200b      	movs	r0, #11
 80187a2:	bd70      	pop	{r4, r5, r6, pc}
 80187a4:	6860      	ldr	r0, [r4, #4]
 80187a6:	e7f4      	b.n	8018792 <rcutils_string_array_fini+0x36>
 80187a8:	200b      	movs	r0, #11
 80187aa:	4770      	bx	lr

080187ac <on_status>:
 80187ac:	b082      	sub	sp, #8
 80187ae:	b002      	add	sp, #8
 80187b0:	4770      	bx	lr
 80187b2:	bf00      	nop

080187b4 <on_topic>:
 80187b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187b8:	4a22      	ldr	r2, [pc, #136]	; (8018844 <on_topic+0x90>)
 80187ba:	b094      	sub	sp, #80	; 0x50
 80187bc:	6812      	ldr	r2, [r2, #0]
 80187be:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80187c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80187c4:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 80187c8:	b3c2      	cbz	r2, 801883c <on_topic+0x88>
 80187ca:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80187ce:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80187d2:	e001      	b.n	80187d8 <on_topic+0x24>
 80187d4:	6852      	ldr	r2, [r2, #4]
 80187d6:	b38a      	cbz	r2, 801883c <on_topic+0x88>
 80187d8:	6894      	ldr	r4, [r2, #8]
 80187da:	8aa3      	ldrh	r3, [r4, #20]
 80187dc:	428b      	cmp	r3, r1
 80187de:	d1f9      	bne.n	80187d4 <on_topic+0x20>
 80187e0:	7da3      	ldrb	r3, [r4, #22]
 80187e2:	4283      	cmp	r3, r0
 80187e4:	d1f6      	bne.n	80187d4 <on_topic+0x20>
 80187e6:	2248      	movs	r2, #72	; 0x48
 80187e8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80187ec:	4668      	mov	r0, sp
 80187ee:	f000 f983 	bl	8018af8 <memcpy>
 80187f2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80187f6:	cb0c      	ldmia	r3, {r2, r3}
 80187f8:	4620      	mov	r0, r4
 80187fa:	f7f6 fa2d 	bl	800ec58 <rmw_uxrce_get_static_input_buffer_for_entity>
 80187fe:	4607      	mov	r7, r0
 8018800:	b1e0      	cbz	r0, 801883c <on_topic+0x88>
 8018802:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018806:	4632      	mov	r2, r6
 8018808:	4628      	mov	r0, r5
 801880a:	f108 0110 	add.w	r1, r8, #16
 801880e:	f7fd ffc9 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8018812:	b930      	cbnz	r0, 8018822 <on_topic+0x6e>
 8018814:	480c      	ldr	r0, [pc, #48]	; (8018848 <on_topic+0x94>)
 8018816:	4639      	mov	r1, r7
 8018818:	b014      	add	sp, #80	; 0x50
 801881a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801881e:	f7fc bdb7 	b.w	8015390 <put_memory>
 8018822:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8018826:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 801882a:	f7fd fedf 	bl	80165ec <rmw_uros_epoch_nanos>
 801882e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8018832:	2305      	movs	r3, #5
 8018834:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018838:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801883c:	b014      	add	sp, #80	; 0x50
 801883e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018842:	bf00      	nop
 8018844:	2000dd84 	.word	0x2000dd84
 8018848:	2000dd74 	.word	0x2000dd74

0801884c <on_request>:
 801884c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018850:	4823      	ldr	r0, [pc, #140]	; (80188e0 <on_request+0x94>)
 8018852:	b094      	sub	sp, #80	; 0x50
 8018854:	6800      	ldr	r0, [r0, #0]
 8018856:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8018858:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801885c:	9113      	str	r1, [sp, #76]	; 0x4c
 801885e:	2800      	cmp	r0, #0
 8018860:	d03b      	beq.n	80188da <on_request+0x8e>
 8018862:	461d      	mov	r5, r3
 8018864:	e001      	b.n	801886a <on_request+0x1e>
 8018866:	6840      	ldr	r0, [r0, #4]
 8018868:	b3b8      	cbz	r0, 80188da <on_request+0x8e>
 801886a:	6884      	ldr	r4, [r0, #8]
 801886c:	8b21      	ldrh	r1, [r4, #24]
 801886e:	4291      	cmp	r1, r2
 8018870:	d1f9      	bne.n	8018866 <on_request+0x1a>
 8018872:	2248      	movs	r2, #72	; 0x48
 8018874:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018878:	4668      	mov	r0, sp
 801887a:	f000 f93d 	bl	8018af8 <memcpy>
 801887e:	f104 0320 	add.w	r3, r4, #32
 8018882:	cb0c      	ldmia	r3, {r2, r3}
 8018884:	4620      	mov	r0, r4
 8018886:	f7f6 f9e7 	bl	800ec58 <rmw_uxrce_get_static_input_buffer_for_entity>
 801888a:	4680      	mov	r8, r0
 801888c:	b328      	cbz	r0, 80188da <on_request+0x8e>
 801888e:	4638      	mov	r0, r7
 8018890:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018894:	4632      	mov	r2, r6
 8018896:	f107 0110 	add.w	r1, r7, #16
 801889a:	f7fd ff83 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 801889e:	b930      	cbnz	r0, 80188ae <on_request+0x62>
 80188a0:	4810      	ldr	r0, [pc, #64]	; (80188e4 <on_request+0x98>)
 80188a2:	4641      	mov	r1, r8
 80188a4:	b014      	add	sp, #80	; 0x50
 80188a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188aa:	f7fc bd71 	b.w	8015390 <put_memory>
 80188ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188b0:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 80188b4:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80188b8:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80188bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80188c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80188c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80188c8:	f7fd fe90 	bl	80165ec <rmw_uros_epoch_nanos>
 80188cc:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80188d0:	2303      	movs	r3, #3
 80188d2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80188d6:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80188da:	b014      	add	sp, #80	; 0x50
 80188dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188e0:	2000dd54 	.word	0x2000dd54
 80188e4:	2000dd74 	.word	0x2000dd74

080188e8 <on_reply>:
 80188e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188ec:	4821      	ldr	r0, [pc, #132]	; (8018974 <on_reply+0x8c>)
 80188ee:	b094      	sub	sp, #80	; 0x50
 80188f0:	6800      	ldr	r0, [r0, #0]
 80188f2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80188f4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80188f8:	9113      	str	r1, [sp, #76]	; 0x4c
 80188fa:	b3b8      	cbz	r0, 801896c <on_reply+0x84>
 80188fc:	461d      	mov	r5, r3
 80188fe:	e001      	b.n	8018904 <on_reply+0x1c>
 8018900:	6840      	ldr	r0, [r0, #4]
 8018902:	b398      	cbz	r0, 801896c <on_reply+0x84>
 8018904:	6884      	ldr	r4, [r0, #8]
 8018906:	8b21      	ldrh	r1, [r4, #24]
 8018908:	4291      	cmp	r1, r2
 801890a:	d1f9      	bne.n	8018900 <on_reply+0x18>
 801890c:	2248      	movs	r2, #72	; 0x48
 801890e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018912:	4668      	mov	r0, sp
 8018914:	f000 f8f0 	bl	8018af8 <memcpy>
 8018918:	f104 0320 	add.w	r3, r4, #32
 801891c:	cb0c      	ldmia	r3, {r2, r3}
 801891e:	4620      	mov	r0, r4
 8018920:	f7f6 f99a 	bl	800ec58 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018924:	4680      	mov	r8, r0
 8018926:	b308      	cbz	r0, 801896c <on_reply+0x84>
 8018928:	4638      	mov	r0, r7
 801892a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801892e:	4632      	mov	r2, r6
 8018930:	f107 0110 	add.w	r1, r7, #16
 8018934:	f7fd ff36 	bl	80167a4 <ucdr_deserialize_array_uint8_t>
 8018938:	b930      	cbnz	r0, 8018948 <on_reply+0x60>
 801893a:	480f      	ldr	r0, [pc, #60]	; (8018978 <on_reply+0x90>)
 801893c:	4641      	mov	r1, r8
 801893e:	b014      	add	sp, #80	; 0x50
 8018940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018944:	f7fc bd24 	b.w	8015390 <put_memory>
 8018948:	2200      	movs	r2, #0
 801894a:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801894e:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8018952:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8018956:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 801895a:	f7fd fe47 	bl	80165ec <rmw_uros_epoch_nanos>
 801895e:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8018962:	2304      	movs	r3, #4
 8018964:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018968:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801896c:	b014      	add	sp, #80	; 0x50
 801896e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018972:	bf00      	nop
 8018974:	20009468 	.word	0x20009468
 8018978:	2000dd74 	.word	0x2000dd74

0801897c <rmw_create_guard_condition>:
 801897c:	b538      	push	{r3, r4, r5, lr}
 801897e:	4605      	mov	r5, r0
 8018980:	4807      	ldr	r0, [pc, #28]	; (80189a0 <rmw_create_guard_condition+0x24>)
 8018982:	f7fc fcf5 	bl	8015370 <get_memory>
 8018986:	b148      	cbz	r0, 801899c <rmw_create_guard_condition+0x20>
 8018988:	6884      	ldr	r4, [r0, #8]
 801898a:	2300      	movs	r3, #0
 801898c:	7423      	strb	r3, [r4, #16]
 801898e:	61e5      	str	r5, [r4, #28]
 8018990:	f7fc fd56 	bl	8015440 <rmw_get_implementation_identifier>
 8018994:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018998:	f104 0014 	add.w	r0, r4, #20
 801899c:	bd38      	pop	{r3, r4, r5, pc}
 801899e:	bf00      	nop
 80189a0:	2000dd14 	.word	0x2000dd14

080189a4 <rmw_destroy_guard_condition>:
 80189a4:	b508      	push	{r3, lr}
 80189a6:	4b08      	ldr	r3, [pc, #32]	; (80189c8 <rmw_destroy_guard_condition+0x24>)
 80189a8:	6819      	ldr	r1, [r3, #0]
 80189aa:	b911      	cbnz	r1, 80189b2 <rmw_destroy_guard_condition+0xe>
 80189ac:	e00a      	b.n	80189c4 <rmw_destroy_guard_condition+0x20>
 80189ae:	6849      	ldr	r1, [r1, #4]
 80189b0:	b141      	cbz	r1, 80189c4 <rmw_destroy_guard_condition+0x20>
 80189b2:	688b      	ldr	r3, [r1, #8]
 80189b4:	3314      	adds	r3, #20
 80189b6:	4298      	cmp	r0, r3
 80189b8:	d1f9      	bne.n	80189ae <rmw_destroy_guard_condition+0xa>
 80189ba:	4803      	ldr	r0, [pc, #12]	; (80189c8 <rmw_destroy_guard_condition+0x24>)
 80189bc:	f7fc fce8 	bl	8015390 <put_memory>
 80189c0:	2000      	movs	r0, #0
 80189c2:	bd08      	pop	{r3, pc}
 80189c4:	2001      	movs	r0, #1
 80189c6:	bd08      	pop	{r3, pc}
 80189c8:	2000dd14 	.word	0x2000dd14

080189cc <calloc>:
 80189cc:	4b02      	ldr	r3, [pc, #8]	; (80189d8 <calloc+0xc>)
 80189ce:	460a      	mov	r2, r1
 80189d0:	4601      	mov	r1, r0
 80189d2:	6818      	ldr	r0, [r3, #0]
 80189d4:	f000 b8c0 	b.w	8018b58 <_calloc_r>
 80189d8:	200003d8 	.word	0x200003d8

080189dc <__errno>:
 80189dc:	4b01      	ldr	r3, [pc, #4]	; (80189e4 <__errno+0x8>)
 80189de:	6818      	ldr	r0, [r3, #0]
 80189e0:	4770      	bx	lr
 80189e2:	bf00      	nop
 80189e4:	200003d8 	.word	0x200003d8

080189e8 <getenv>:
 80189e8:	b507      	push	{r0, r1, r2, lr}
 80189ea:	4b04      	ldr	r3, [pc, #16]	; (80189fc <getenv+0x14>)
 80189ec:	4601      	mov	r1, r0
 80189ee:	aa01      	add	r2, sp, #4
 80189f0:	6818      	ldr	r0, [r3, #0]
 80189f2:	f000 f805 	bl	8018a00 <_findenv_r>
 80189f6:	b003      	add	sp, #12
 80189f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80189fc:	200003d8 	.word	0x200003d8

08018a00 <_findenv_r>:
 8018a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a04:	4607      	mov	r7, r0
 8018a06:	4689      	mov	r9, r1
 8018a08:	4616      	mov	r6, r2
 8018a0a:	f000 fb4d 	bl	80190a8 <__env_lock>
 8018a0e:	4b18      	ldr	r3, [pc, #96]	; (8018a70 <_findenv_r+0x70>)
 8018a10:	681c      	ldr	r4, [r3, #0]
 8018a12:	469a      	mov	sl, r3
 8018a14:	b134      	cbz	r4, 8018a24 <_findenv_r+0x24>
 8018a16:	464b      	mov	r3, r9
 8018a18:	4698      	mov	r8, r3
 8018a1a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8018a1e:	b139      	cbz	r1, 8018a30 <_findenv_r+0x30>
 8018a20:	293d      	cmp	r1, #61	; 0x3d
 8018a22:	d1f9      	bne.n	8018a18 <_findenv_r+0x18>
 8018a24:	4638      	mov	r0, r7
 8018a26:	f000 fb45 	bl	80190b4 <__env_unlock>
 8018a2a:	2000      	movs	r0, #0
 8018a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a30:	eba8 0809 	sub.w	r8, r8, r9
 8018a34:	46a3      	mov	fp, r4
 8018a36:	f854 0b04 	ldr.w	r0, [r4], #4
 8018a3a:	2800      	cmp	r0, #0
 8018a3c:	d0f2      	beq.n	8018a24 <_findenv_r+0x24>
 8018a3e:	4642      	mov	r2, r8
 8018a40:	4649      	mov	r1, r9
 8018a42:	f000 fa2a 	bl	8018e9a <strncmp>
 8018a46:	2800      	cmp	r0, #0
 8018a48:	d1f4      	bne.n	8018a34 <_findenv_r+0x34>
 8018a4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018a4e:	eb03 0508 	add.w	r5, r3, r8
 8018a52:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018a56:	2b3d      	cmp	r3, #61	; 0x3d
 8018a58:	d1ec      	bne.n	8018a34 <_findenv_r+0x34>
 8018a5a:	f8da 3000 	ldr.w	r3, [sl]
 8018a5e:	ebab 0303 	sub.w	r3, fp, r3
 8018a62:	109b      	asrs	r3, r3, #2
 8018a64:	4638      	mov	r0, r7
 8018a66:	6033      	str	r3, [r6, #0]
 8018a68:	f000 fb24 	bl	80190b4 <__env_unlock>
 8018a6c:	1c68      	adds	r0, r5, #1
 8018a6e:	e7dd      	b.n	8018a2c <_findenv_r+0x2c>
 8018a70:	20000000 	.word	0x20000000

08018a74 <__libc_init_array>:
 8018a74:	b570      	push	{r4, r5, r6, lr}
 8018a76:	4d0d      	ldr	r5, [pc, #52]	; (8018aac <__libc_init_array+0x38>)
 8018a78:	4c0d      	ldr	r4, [pc, #52]	; (8018ab0 <__libc_init_array+0x3c>)
 8018a7a:	1b64      	subs	r4, r4, r5
 8018a7c:	10a4      	asrs	r4, r4, #2
 8018a7e:	2600      	movs	r6, #0
 8018a80:	42a6      	cmp	r6, r4
 8018a82:	d109      	bne.n	8018a98 <__libc_init_array+0x24>
 8018a84:	4d0b      	ldr	r5, [pc, #44]	; (8018ab4 <__libc_init_array+0x40>)
 8018a86:	4c0c      	ldr	r4, [pc, #48]	; (8018ab8 <__libc_init_array+0x44>)
 8018a88:	f001 fb86 	bl	801a198 <_init>
 8018a8c:	1b64      	subs	r4, r4, r5
 8018a8e:	10a4      	asrs	r4, r4, #2
 8018a90:	2600      	movs	r6, #0
 8018a92:	42a6      	cmp	r6, r4
 8018a94:	d105      	bne.n	8018aa2 <__libc_init_array+0x2e>
 8018a96:	bd70      	pop	{r4, r5, r6, pc}
 8018a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a9c:	4798      	blx	r3
 8018a9e:	3601      	adds	r6, #1
 8018aa0:	e7ee      	b.n	8018a80 <__libc_init_array+0xc>
 8018aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8018aa6:	4798      	blx	r3
 8018aa8:	3601      	adds	r6, #1
 8018aaa:	e7f2      	b.n	8018a92 <__libc_init_array+0x1e>
 8018aac:	0801b1fc 	.word	0x0801b1fc
 8018ab0:	0801b1fc 	.word	0x0801b1fc
 8018ab4:	0801b1fc 	.word	0x0801b1fc
 8018ab8:	0801b208 	.word	0x0801b208

08018abc <malloc>:
 8018abc:	4b02      	ldr	r3, [pc, #8]	; (8018ac8 <malloc+0xc>)
 8018abe:	4601      	mov	r1, r0
 8018ac0:	6818      	ldr	r0, [r3, #0]
 8018ac2:	f000 b8a9 	b.w	8018c18 <_malloc_r>
 8018ac6:	bf00      	nop
 8018ac8:	200003d8 	.word	0x200003d8

08018acc <free>:
 8018acc:	4b02      	ldr	r3, [pc, #8]	; (8018ad8 <free+0xc>)
 8018ace:	4601      	mov	r1, r0
 8018ad0:	6818      	ldr	r0, [r3, #0]
 8018ad2:	f000 b851 	b.w	8018b78 <_free_r>
 8018ad6:	bf00      	nop
 8018ad8:	200003d8 	.word	0x200003d8

08018adc <memcmp>:
 8018adc:	b530      	push	{r4, r5, lr}
 8018ade:	3901      	subs	r1, #1
 8018ae0:	2400      	movs	r4, #0
 8018ae2:	42a2      	cmp	r2, r4
 8018ae4:	d101      	bne.n	8018aea <memcmp+0xe>
 8018ae6:	2000      	movs	r0, #0
 8018ae8:	e005      	b.n	8018af6 <memcmp+0x1a>
 8018aea:	5d03      	ldrb	r3, [r0, r4]
 8018aec:	3401      	adds	r4, #1
 8018aee:	5d0d      	ldrb	r5, [r1, r4]
 8018af0:	42ab      	cmp	r3, r5
 8018af2:	d0f6      	beq.n	8018ae2 <memcmp+0x6>
 8018af4:	1b58      	subs	r0, r3, r5
 8018af6:	bd30      	pop	{r4, r5, pc}

08018af8 <memcpy>:
 8018af8:	440a      	add	r2, r1
 8018afa:	4291      	cmp	r1, r2
 8018afc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018b00:	d100      	bne.n	8018b04 <memcpy+0xc>
 8018b02:	4770      	bx	lr
 8018b04:	b510      	push	{r4, lr}
 8018b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b0e:	4291      	cmp	r1, r2
 8018b10:	d1f9      	bne.n	8018b06 <memcpy+0xe>
 8018b12:	bd10      	pop	{r4, pc}

08018b14 <memmove>:
 8018b14:	4288      	cmp	r0, r1
 8018b16:	b510      	push	{r4, lr}
 8018b18:	eb01 0402 	add.w	r4, r1, r2
 8018b1c:	d902      	bls.n	8018b24 <memmove+0x10>
 8018b1e:	4284      	cmp	r4, r0
 8018b20:	4623      	mov	r3, r4
 8018b22:	d807      	bhi.n	8018b34 <memmove+0x20>
 8018b24:	1e43      	subs	r3, r0, #1
 8018b26:	42a1      	cmp	r1, r4
 8018b28:	d008      	beq.n	8018b3c <memmove+0x28>
 8018b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018b32:	e7f8      	b.n	8018b26 <memmove+0x12>
 8018b34:	4402      	add	r2, r0
 8018b36:	4601      	mov	r1, r0
 8018b38:	428a      	cmp	r2, r1
 8018b3a:	d100      	bne.n	8018b3e <memmove+0x2a>
 8018b3c:	bd10      	pop	{r4, pc}
 8018b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018b46:	e7f7      	b.n	8018b38 <memmove+0x24>

08018b48 <memset>:
 8018b48:	4402      	add	r2, r0
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	4293      	cmp	r3, r2
 8018b4e:	d100      	bne.n	8018b52 <memset+0xa>
 8018b50:	4770      	bx	lr
 8018b52:	f803 1b01 	strb.w	r1, [r3], #1
 8018b56:	e7f9      	b.n	8018b4c <memset+0x4>

08018b58 <_calloc_r>:
 8018b58:	b513      	push	{r0, r1, r4, lr}
 8018b5a:	434a      	muls	r2, r1
 8018b5c:	4611      	mov	r1, r2
 8018b5e:	9201      	str	r2, [sp, #4]
 8018b60:	f000 f85a 	bl	8018c18 <_malloc_r>
 8018b64:	4604      	mov	r4, r0
 8018b66:	b118      	cbz	r0, 8018b70 <_calloc_r+0x18>
 8018b68:	9a01      	ldr	r2, [sp, #4]
 8018b6a:	2100      	movs	r1, #0
 8018b6c:	f7ff ffec 	bl	8018b48 <memset>
 8018b70:	4620      	mov	r0, r4
 8018b72:	b002      	add	sp, #8
 8018b74:	bd10      	pop	{r4, pc}
	...

08018b78 <_free_r>:
 8018b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b7a:	2900      	cmp	r1, #0
 8018b7c:	d048      	beq.n	8018c10 <_free_r+0x98>
 8018b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b82:	9001      	str	r0, [sp, #4]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	f1a1 0404 	sub.w	r4, r1, #4
 8018b8a:	bfb8      	it	lt
 8018b8c:	18e4      	addlt	r4, r4, r3
 8018b8e:	f000 fba1 	bl	80192d4 <__malloc_lock>
 8018b92:	4a20      	ldr	r2, [pc, #128]	; (8018c14 <_free_r+0x9c>)
 8018b94:	9801      	ldr	r0, [sp, #4]
 8018b96:	6813      	ldr	r3, [r2, #0]
 8018b98:	4615      	mov	r5, r2
 8018b9a:	b933      	cbnz	r3, 8018baa <_free_r+0x32>
 8018b9c:	6063      	str	r3, [r4, #4]
 8018b9e:	6014      	str	r4, [r2, #0]
 8018ba0:	b003      	add	sp, #12
 8018ba2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ba6:	f000 bb9b 	b.w	80192e0 <__malloc_unlock>
 8018baa:	42a3      	cmp	r3, r4
 8018bac:	d90b      	bls.n	8018bc6 <_free_r+0x4e>
 8018bae:	6821      	ldr	r1, [r4, #0]
 8018bb0:	1862      	adds	r2, r4, r1
 8018bb2:	4293      	cmp	r3, r2
 8018bb4:	bf04      	itt	eq
 8018bb6:	681a      	ldreq	r2, [r3, #0]
 8018bb8:	685b      	ldreq	r3, [r3, #4]
 8018bba:	6063      	str	r3, [r4, #4]
 8018bbc:	bf04      	itt	eq
 8018bbe:	1852      	addeq	r2, r2, r1
 8018bc0:	6022      	streq	r2, [r4, #0]
 8018bc2:	602c      	str	r4, [r5, #0]
 8018bc4:	e7ec      	b.n	8018ba0 <_free_r+0x28>
 8018bc6:	461a      	mov	r2, r3
 8018bc8:	685b      	ldr	r3, [r3, #4]
 8018bca:	b10b      	cbz	r3, 8018bd0 <_free_r+0x58>
 8018bcc:	42a3      	cmp	r3, r4
 8018bce:	d9fa      	bls.n	8018bc6 <_free_r+0x4e>
 8018bd0:	6811      	ldr	r1, [r2, #0]
 8018bd2:	1855      	adds	r5, r2, r1
 8018bd4:	42a5      	cmp	r5, r4
 8018bd6:	d10b      	bne.n	8018bf0 <_free_r+0x78>
 8018bd8:	6824      	ldr	r4, [r4, #0]
 8018bda:	4421      	add	r1, r4
 8018bdc:	1854      	adds	r4, r2, r1
 8018bde:	42a3      	cmp	r3, r4
 8018be0:	6011      	str	r1, [r2, #0]
 8018be2:	d1dd      	bne.n	8018ba0 <_free_r+0x28>
 8018be4:	681c      	ldr	r4, [r3, #0]
 8018be6:	685b      	ldr	r3, [r3, #4]
 8018be8:	6053      	str	r3, [r2, #4]
 8018bea:	4421      	add	r1, r4
 8018bec:	6011      	str	r1, [r2, #0]
 8018bee:	e7d7      	b.n	8018ba0 <_free_r+0x28>
 8018bf0:	d902      	bls.n	8018bf8 <_free_r+0x80>
 8018bf2:	230c      	movs	r3, #12
 8018bf4:	6003      	str	r3, [r0, #0]
 8018bf6:	e7d3      	b.n	8018ba0 <_free_r+0x28>
 8018bf8:	6825      	ldr	r5, [r4, #0]
 8018bfa:	1961      	adds	r1, r4, r5
 8018bfc:	428b      	cmp	r3, r1
 8018bfe:	bf04      	itt	eq
 8018c00:	6819      	ldreq	r1, [r3, #0]
 8018c02:	685b      	ldreq	r3, [r3, #4]
 8018c04:	6063      	str	r3, [r4, #4]
 8018c06:	bf04      	itt	eq
 8018c08:	1949      	addeq	r1, r1, r5
 8018c0a:	6021      	streq	r1, [r4, #0]
 8018c0c:	6054      	str	r4, [r2, #4]
 8018c0e:	e7c7      	b.n	8018ba0 <_free_r+0x28>
 8018c10:	b003      	add	sp, #12
 8018c12:	bd30      	pop	{r4, r5, pc}
 8018c14:	2000df38 	.word	0x2000df38

08018c18 <_malloc_r>:
 8018c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c1a:	1ccd      	adds	r5, r1, #3
 8018c1c:	f025 0503 	bic.w	r5, r5, #3
 8018c20:	3508      	adds	r5, #8
 8018c22:	2d0c      	cmp	r5, #12
 8018c24:	bf38      	it	cc
 8018c26:	250c      	movcc	r5, #12
 8018c28:	2d00      	cmp	r5, #0
 8018c2a:	4606      	mov	r6, r0
 8018c2c:	db01      	blt.n	8018c32 <_malloc_r+0x1a>
 8018c2e:	42a9      	cmp	r1, r5
 8018c30:	d903      	bls.n	8018c3a <_malloc_r+0x22>
 8018c32:	230c      	movs	r3, #12
 8018c34:	6033      	str	r3, [r6, #0]
 8018c36:	2000      	movs	r0, #0
 8018c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c3a:	f000 fb4b 	bl	80192d4 <__malloc_lock>
 8018c3e:	4921      	ldr	r1, [pc, #132]	; (8018cc4 <_malloc_r+0xac>)
 8018c40:	680a      	ldr	r2, [r1, #0]
 8018c42:	4614      	mov	r4, r2
 8018c44:	b99c      	cbnz	r4, 8018c6e <_malloc_r+0x56>
 8018c46:	4f20      	ldr	r7, [pc, #128]	; (8018cc8 <_malloc_r+0xb0>)
 8018c48:	683b      	ldr	r3, [r7, #0]
 8018c4a:	b923      	cbnz	r3, 8018c56 <_malloc_r+0x3e>
 8018c4c:	4621      	mov	r1, r4
 8018c4e:	4630      	mov	r0, r6
 8018c50:	f000 f8ca 	bl	8018de8 <_sbrk_r>
 8018c54:	6038      	str	r0, [r7, #0]
 8018c56:	4629      	mov	r1, r5
 8018c58:	4630      	mov	r0, r6
 8018c5a:	f000 f8c5 	bl	8018de8 <_sbrk_r>
 8018c5e:	1c43      	adds	r3, r0, #1
 8018c60:	d123      	bne.n	8018caa <_malloc_r+0x92>
 8018c62:	230c      	movs	r3, #12
 8018c64:	6033      	str	r3, [r6, #0]
 8018c66:	4630      	mov	r0, r6
 8018c68:	f000 fb3a 	bl	80192e0 <__malloc_unlock>
 8018c6c:	e7e3      	b.n	8018c36 <_malloc_r+0x1e>
 8018c6e:	6823      	ldr	r3, [r4, #0]
 8018c70:	1b5b      	subs	r3, r3, r5
 8018c72:	d417      	bmi.n	8018ca4 <_malloc_r+0x8c>
 8018c74:	2b0b      	cmp	r3, #11
 8018c76:	d903      	bls.n	8018c80 <_malloc_r+0x68>
 8018c78:	6023      	str	r3, [r4, #0]
 8018c7a:	441c      	add	r4, r3
 8018c7c:	6025      	str	r5, [r4, #0]
 8018c7e:	e004      	b.n	8018c8a <_malloc_r+0x72>
 8018c80:	6863      	ldr	r3, [r4, #4]
 8018c82:	42a2      	cmp	r2, r4
 8018c84:	bf0c      	ite	eq
 8018c86:	600b      	streq	r3, [r1, #0]
 8018c88:	6053      	strne	r3, [r2, #4]
 8018c8a:	4630      	mov	r0, r6
 8018c8c:	f000 fb28 	bl	80192e0 <__malloc_unlock>
 8018c90:	f104 000b 	add.w	r0, r4, #11
 8018c94:	1d23      	adds	r3, r4, #4
 8018c96:	f020 0007 	bic.w	r0, r0, #7
 8018c9a:	1ac2      	subs	r2, r0, r3
 8018c9c:	d0cc      	beq.n	8018c38 <_malloc_r+0x20>
 8018c9e:	1a1b      	subs	r3, r3, r0
 8018ca0:	50a3      	str	r3, [r4, r2]
 8018ca2:	e7c9      	b.n	8018c38 <_malloc_r+0x20>
 8018ca4:	4622      	mov	r2, r4
 8018ca6:	6864      	ldr	r4, [r4, #4]
 8018ca8:	e7cc      	b.n	8018c44 <_malloc_r+0x2c>
 8018caa:	1cc4      	adds	r4, r0, #3
 8018cac:	f024 0403 	bic.w	r4, r4, #3
 8018cb0:	42a0      	cmp	r0, r4
 8018cb2:	d0e3      	beq.n	8018c7c <_malloc_r+0x64>
 8018cb4:	1a21      	subs	r1, r4, r0
 8018cb6:	4630      	mov	r0, r6
 8018cb8:	f000 f896 	bl	8018de8 <_sbrk_r>
 8018cbc:	3001      	adds	r0, #1
 8018cbe:	d1dd      	bne.n	8018c7c <_malloc_r+0x64>
 8018cc0:	e7cf      	b.n	8018c62 <_malloc_r+0x4a>
 8018cc2:	bf00      	nop
 8018cc4:	2000df38 	.word	0x2000df38
 8018cc8:	2000df3c 	.word	0x2000df3c

08018ccc <iprintf>:
 8018ccc:	b40f      	push	{r0, r1, r2, r3}
 8018cce:	4b0a      	ldr	r3, [pc, #40]	; (8018cf8 <iprintf+0x2c>)
 8018cd0:	b513      	push	{r0, r1, r4, lr}
 8018cd2:	681c      	ldr	r4, [r3, #0]
 8018cd4:	b124      	cbz	r4, 8018ce0 <iprintf+0x14>
 8018cd6:	69a3      	ldr	r3, [r4, #24]
 8018cd8:	b913      	cbnz	r3, 8018ce0 <iprintf+0x14>
 8018cda:	4620      	mov	r0, r4
 8018cdc:	f000 fa48 	bl	8019170 <__sinit>
 8018ce0:	ab05      	add	r3, sp, #20
 8018ce2:	9a04      	ldr	r2, [sp, #16]
 8018ce4:	68a1      	ldr	r1, [r4, #8]
 8018ce6:	9301      	str	r3, [sp, #4]
 8018ce8:	4620      	mov	r0, r4
 8018cea:	f000 fcab 	bl	8019644 <_vfiprintf_r>
 8018cee:	b002      	add	sp, #8
 8018cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cf4:	b004      	add	sp, #16
 8018cf6:	4770      	bx	lr
 8018cf8:	200003d8 	.word	0x200003d8

08018cfc <srand>:
 8018cfc:	b538      	push	{r3, r4, r5, lr}
 8018cfe:	4b10      	ldr	r3, [pc, #64]	; (8018d40 <srand+0x44>)
 8018d00:	681d      	ldr	r5, [r3, #0]
 8018d02:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018d04:	4604      	mov	r4, r0
 8018d06:	b9b3      	cbnz	r3, 8018d36 <srand+0x3a>
 8018d08:	2018      	movs	r0, #24
 8018d0a:	f7ff fed7 	bl	8018abc <malloc>
 8018d0e:	4602      	mov	r2, r0
 8018d10:	63a8      	str	r0, [r5, #56]	; 0x38
 8018d12:	b920      	cbnz	r0, 8018d1e <srand+0x22>
 8018d14:	4b0b      	ldr	r3, [pc, #44]	; (8018d44 <srand+0x48>)
 8018d16:	480c      	ldr	r0, [pc, #48]	; (8018d48 <srand+0x4c>)
 8018d18:	2142      	movs	r1, #66	; 0x42
 8018d1a:	f000 f9a7 	bl	801906c <__assert_func>
 8018d1e:	490b      	ldr	r1, [pc, #44]	; (8018d4c <srand+0x50>)
 8018d20:	4b0b      	ldr	r3, [pc, #44]	; (8018d50 <srand+0x54>)
 8018d22:	e9c0 1300 	strd	r1, r3, [r0]
 8018d26:	4b0b      	ldr	r3, [pc, #44]	; (8018d54 <srand+0x58>)
 8018d28:	6083      	str	r3, [r0, #8]
 8018d2a:	230b      	movs	r3, #11
 8018d2c:	8183      	strh	r3, [r0, #12]
 8018d2e:	2100      	movs	r1, #0
 8018d30:	2001      	movs	r0, #1
 8018d32:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018d36:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018d38:	2200      	movs	r2, #0
 8018d3a:	611c      	str	r4, [r3, #16]
 8018d3c:	615a      	str	r2, [r3, #20]
 8018d3e:	bd38      	pop	{r3, r4, r5, pc}
 8018d40:	200003d8 	.word	0x200003d8
 8018d44:	0801b0ac 	.word	0x0801b0ac
 8018d48:	0801b0c3 	.word	0x0801b0c3
 8018d4c:	abcd330e 	.word	0xabcd330e
 8018d50:	e66d1234 	.word	0xe66d1234
 8018d54:	0005deec 	.word	0x0005deec

08018d58 <rand>:
 8018d58:	4b17      	ldr	r3, [pc, #92]	; (8018db8 <rand+0x60>)
 8018d5a:	b510      	push	{r4, lr}
 8018d5c:	681c      	ldr	r4, [r3, #0]
 8018d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018d60:	b9b3      	cbnz	r3, 8018d90 <rand+0x38>
 8018d62:	2018      	movs	r0, #24
 8018d64:	f7ff feaa 	bl	8018abc <malloc>
 8018d68:	63a0      	str	r0, [r4, #56]	; 0x38
 8018d6a:	b928      	cbnz	r0, 8018d78 <rand+0x20>
 8018d6c:	4602      	mov	r2, r0
 8018d6e:	4b13      	ldr	r3, [pc, #76]	; (8018dbc <rand+0x64>)
 8018d70:	4813      	ldr	r0, [pc, #76]	; (8018dc0 <rand+0x68>)
 8018d72:	214e      	movs	r1, #78	; 0x4e
 8018d74:	f000 f97a 	bl	801906c <__assert_func>
 8018d78:	4a12      	ldr	r2, [pc, #72]	; (8018dc4 <rand+0x6c>)
 8018d7a:	4b13      	ldr	r3, [pc, #76]	; (8018dc8 <rand+0x70>)
 8018d7c:	e9c0 2300 	strd	r2, r3, [r0]
 8018d80:	4b12      	ldr	r3, [pc, #72]	; (8018dcc <rand+0x74>)
 8018d82:	6083      	str	r3, [r0, #8]
 8018d84:	230b      	movs	r3, #11
 8018d86:	8183      	strh	r3, [r0, #12]
 8018d88:	2201      	movs	r2, #1
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018d90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018d92:	480f      	ldr	r0, [pc, #60]	; (8018dd0 <rand+0x78>)
 8018d94:	690a      	ldr	r2, [r1, #16]
 8018d96:	694b      	ldr	r3, [r1, #20]
 8018d98:	4c0e      	ldr	r4, [pc, #56]	; (8018dd4 <rand+0x7c>)
 8018d9a:	4350      	muls	r0, r2
 8018d9c:	fb04 0003 	mla	r0, r4, r3, r0
 8018da0:	fba2 3404 	umull	r3, r4, r2, r4
 8018da4:	1c5a      	adds	r2, r3, #1
 8018da6:	4404      	add	r4, r0
 8018da8:	f144 0000 	adc.w	r0, r4, #0
 8018dac:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018db0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018db4:	bd10      	pop	{r4, pc}
 8018db6:	bf00      	nop
 8018db8:	200003d8 	.word	0x200003d8
 8018dbc:	0801b0ac 	.word	0x0801b0ac
 8018dc0:	0801b0c3 	.word	0x0801b0c3
 8018dc4:	abcd330e 	.word	0xabcd330e
 8018dc8:	e66d1234 	.word	0xe66d1234
 8018dcc:	0005deec 	.word	0x0005deec
 8018dd0:	5851f42d 	.word	0x5851f42d
 8018dd4:	4c957f2d 	.word	0x4c957f2d

08018dd8 <realloc>:
 8018dd8:	4b02      	ldr	r3, [pc, #8]	; (8018de4 <realloc+0xc>)
 8018dda:	460a      	mov	r2, r1
 8018ddc:	4601      	mov	r1, r0
 8018dde:	6818      	ldr	r0, [r3, #0]
 8018de0:	f000 ba84 	b.w	80192ec <_realloc_r>
 8018de4:	200003d8 	.word	0x200003d8

08018de8 <_sbrk_r>:
 8018de8:	b538      	push	{r3, r4, r5, lr}
 8018dea:	4d06      	ldr	r5, [pc, #24]	; (8018e04 <_sbrk_r+0x1c>)
 8018dec:	2300      	movs	r3, #0
 8018dee:	4604      	mov	r4, r0
 8018df0:	4608      	mov	r0, r1
 8018df2:	602b      	str	r3, [r5, #0]
 8018df4:	f7e8 fd04 	bl	8001800 <_sbrk>
 8018df8:	1c43      	adds	r3, r0, #1
 8018dfa:	d102      	bne.n	8018e02 <_sbrk_r+0x1a>
 8018dfc:	682b      	ldr	r3, [r5, #0]
 8018dfe:	b103      	cbz	r3, 8018e02 <_sbrk_r+0x1a>
 8018e00:	6023      	str	r3, [r4, #0]
 8018e02:	bd38      	pop	{r3, r4, r5, pc}
 8018e04:	2000f9b8 	.word	0x2000f9b8

08018e08 <sniprintf>:
 8018e08:	b40c      	push	{r2, r3}
 8018e0a:	b530      	push	{r4, r5, lr}
 8018e0c:	4b17      	ldr	r3, [pc, #92]	; (8018e6c <sniprintf+0x64>)
 8018e0e:	1e0c      	subs	r4, r1, #0
 8018e10:	681d      	ldr	r5, [r3, #0]
 8018e12:	b09d      	sub	sp, #116	; 0x74
 8018e14:	da08      	bge.n	8018e28 <sniprintf+0x20>
 8018e16:	238b      	movs	r3, #139	; 0x8b
 8018e18:	602b      	str	r3, [r5, #0]
 8018e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e1e:	b01d      	add	sp, #116	; 0x74
 8018e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e24:	b002      	add	sp, #8
 8018e26:	4770      	bx	lr
 8018e28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018e2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018e30:	bf14      	ite	ne
 8018e32:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018e36:	4623      	moveq	r3, r4
 8018e38:	9304      	str	r3, [sp, #16]
 8018e3a:	9307      	str	r3, [sp, #28]
 8018e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018e40:	9002      	str	r0, [sp, #8]
 8018e42:	9006      	str	r0, [sp, #24]
 8018e44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018e48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018e4a:	ab21      	add	r3, sp, #132	; 0x84
 8018e4c:	a902      	add	r1, sp, #8
 8018e4e:	4628      	mov	r0, r5
 8018e50:	9301      	str	r3, [sp, #4]
 8018e52:	f000 facd 	bl	80193f0 <_svfiprintf_r>
 8018e56:	1c43      	adds	r3, r0, #1
 8018e58:	bfbc      	itt	lt
 8018e5a:	238b      	movlt	r3, #139	; 0x8b
 8018e5c:	602b      	strlt	r3, [r5, #0]
 8018e5e:	2c00      	cmp	r4, #0
 8018e60:	d0dd      	beq.n	8018e1e <sniprintf+0x16>
 8018e62:	9b02      	ldr	r3, [sp, #8]
 8018e64:	2200      	movs	r2, #0
 8018e66:	701a      	strb	r2, [r3, #0]
 8018e68:	e7d9      	b.n	8018e1e <sniprintf+0x16>
 8018e6a:	bf00      	nop
 8018e6c:	200003d8 	.word	0x200003d8

08018e70 <strchr>:
 8018e70:	b2c9      	uxtb	r1, r1
 8018e72:	4603      	mov	r3, r0
 8018e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e78:	b11a      	cbz	r2, 8018e82 <strchr+0x12>
 8018e7a:	428a      	cmp	r2, r1
 8018e7c:	d1f9      	bne.n	8018e72 <strchr+0x2>
 8018e7e:	4618      	mov	r0, r3
 8018e80:	4770      	bx	lr
 8018e82:	2900      	cmp	r1, #0
 8018e84:	bf18      	it	ne
 8018e86:	2300      	movne	r3, #0
 8018e88:	e7f9      	b.n	8018e7e <strchr+0xe>

08018e8a <strcpy>:
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018e90:	f803 2b01 	strb.w	r2, [r3], #1
 8018e94:	2a00      	cmp	r2, #0
 8018e96:	d1f9      	bne.n	8018e8c <strcpy+0x2>
 8018e98:	4770      	bx	lr

08018e9a <strncmp>:
 8018e9a:	b510      	push	{r4, lr}
 8018e9c:	b16a      	cbz	r2, 8018eba <strncmp+0x20>
 8018e9e:	3901      	subs	r1, #1
 8018ea0:	1884      	adds	r4, r0, r2
 8018ea2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018ea6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018eaa:	4293      	cmp	r3, r2
 8018eac:	d103      	bne.n	8018eb6 <strncmp+0x1c>
 8018eae:	42a0      	cmp	r0, r4
 8018eb0:	d001      	beq.n	8018eb6 <strncmp+0x1c>
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d1f5      	bne.n	8018ea2 <strncmp+0x8>
 8018eb6:	1a98      	subs	r0, r3, r2
 8018eb8:	bd10      	pop	{r4, pc}
 8018eba:	4610      	mov	r0, r2
 8018ebc:	e7fc      	b.n	8018eb8 <strncmp+0x1e>

08018ebe <strstr>:
 8018ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ec0:	780c      	ldrb	r4, [r1, #0]
 8018ec2:	b164      	cbz	r4, 8018ede <strstr+0x20>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	781a      	ldrb	r2, [r3, #0]
 8018ec8:	4618      	mov	r0, r3
 8018eca:	1c5e      	adds	r6, r3, #1
 8018ecc:	b90a      	cbnz	r2, 8018ed2 <strstr+0x14>
 8018ece:	4610      	mov	r0, r2
 8018ed0:	e005      	b.n	8018ede <strstr+0x20>
 8018ed2:	4294      	cmp	r4, r2
 8018ed4:	d108      	bne.n	8018ee8 <strstr+0x2a>
 8018ed6:	460d      	mov	r5, r1
 8018ed8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8018edc:	b902      	cbnz	r2, 8018ee0 <strstr+0x22>
 8018ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ee0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8018ee4:	4297      	cmp	r7, r2
 8018ee6:	d0f7      	beq.n	8018ed8 <strstr+0x1a>
 8018ee8:	4633      	mov	r3, r6
 8018eea:	e7ec      	b.n	8018ec6 <strstr+0x8>

08018eec <_strtoul_l.isra.0>:
 8018eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ef0:	4e3b      	ldr	r6, [pc, #236]	; (8018fe0 <_strtoul_l.isra.0+0xf4>)
 8018ef2:	4686      	mov	lr, r0
 8018ef4:	468c      	mov	ip, r1
 8018ef6:	4660      	mov	r0, ip
 8018ef8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8018efc:	5da5      	ldrb	r5, [r4, r6]
 8018efe:	f015 0508 	ands.w	r5, r5, #8
 8018f02:	d1f8      	bne.n	8018ef6 <_strtoul_l.isra.0+0xa>
 8018f04:	2c2d      	cmp	r4, #45	; 0x2d
 8018f06:	d134      	bne.n	8018f72 <_strtoul_l.isra.0+0x86>
 8018f08:	f89c 4000 	ldrb.w	r4, [ip]
 8018f0c:	f04f 0801 	mov.w	r8, #1
 8018f10:	f100 0c02 	add.w	ip, r0, #2
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d05e      	beq.n	8018fd6 <_strtoul_l.isra.0+0xea>
 8018f18:	2b10      	cmp	r3, #16
 8018f1a:	d10c      	bne.n	8018f36 <_strtoul_l.isra.0+0x4a>
 8018f1c:	2c30      	cmp	r4, #48	; 0x30
 8018f1e:	d10a      	bne.n	8018f36 <_strtoul_l.isra.0+0x4a>
 8018f20:	f89c 0000 	ldrb.w	r0, [ip]
 8018f24:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018f28:	2858      	cmp	r0, #88	; 0x58
 8018f2a:	d14f      	bne.n	8018fcc <_strtoul_l.isra.0+0xe0>
 8018f2c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8018f30:	2310      	movs	r3, #16
 8018f32:	f10c 0c02 	add.w	ip, ip, #2
 8018f36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018f3a:	2500      	movs	r5, #0
 8018f3c:	fbb7 f7f3 	udiv	r7, r7, r3
 8018f40:	fb03 f907 	mul.w	r9, r3, r7
 8018f44:	ea6f 0909 	mvn.w	r9, r9
 8018f48:	4628      	mov	r0, r5
 8018f4a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8018f4e:	2e09      	cmp	r6, #9
 8018f50:	d818      	bhi.n	8018f84 <_strtoul_l.isra.0+0x98>
 8018f52:	4634      	mov	r4, r6
 8018f54:	42a3      	cmp	r3, r4
 8018f56:	dd24      	ble.n	8018fa2 <_strtoul_l.isra.0+0xb6>
 8018f58:	2d00      	cmp	r5, #0
 8018f5a:	db1f      	blt.n	8018f9c <_strtoul_l.isra.0+0xb0>
 8018f5c:	4287      	cmp	r7, r0
 8018f5e:	d31d      	bcc.n	8018f9c <_strtoul_l.isra.0+0xb0>
 8018f60:	d101      	bne.n	8018f66 <_strtoul_l.isra.0+0x7a>
 8018f62:	45a1      	cmp	r9, r4
 8018f64:	db1a      	blt.n	8018f9c <_strtoul_l.isra.0+0xb0>
 8018f66:	fb00 4003 	mla	r0, r0, r3, r4
 8018f6a:	2501      	movs	r5, #1
 8018f6c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8018f70:	e7eb      	b.n	8018f4a <_strtoul_l.isra.0+0x5e>
 8018f72:	2c2b      	cmp	r4, #43	; 0x2b
 8018f74:	bf08      	it	eq
 8018f76:	f89c 4000 	ldrbeq.w	r4, [ip]
 8018f7a:	46a8      	mov	r8, r5
 8018f7c:	bf08      	it	eq
 8018f7e:	f100 0c02 	addeq.w	ip, r0, #2
 8018f82:	e7c7      	b.n	8018f14 <_strtoul_l.isra.0+0x28>
 8018f84:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8018f88:	2e19      	cmp	r6, #25
 8018f8a:	d801      	bhi.n	8018f90 <_strtoul_l.isra.0+0xa4>
 8018f8c:	3c37      	subs	r4, #55	; 0x37
 8018f8e:	e7e1      	b.n	8018f54 <_strtoul_l.isra.0+0x68>
 8018f90:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8018f94:	2e19      	cmp	r6, #25
 8018f96:	d804      	bhi.n	8018fa2 <_strtoul_l.isra.0+0xb6>
 8018f98:	3c57      	subs	r4, #87	; 0x57
 8018f9a:	e7db      	b.n	8018f54 <_strtoul_l.isra.0+0x68>
 8018f9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018fa0:	e7e4      	b.n	8018f6c <_strtoul_l.isra.0+0x80>
 8018fa2:	2d00      	cmp	r5, #0
 8018fa4:	da07      	bge.n	8018fb6 <_strtoul_l.isra.0+0xca>
 8018fa6:	2322      	movs	r3, #34	; 0x22
 8018fa8:	f8ce 3000 	str.w	r3, [lr]
 8018fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018fb0:	b942      	cbnz	r2, 8018fc4 <_strtoul_l.isra.0+0xd8>
 8018fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fb6:	f1b8 0f00 	cmp.w	r8, #0
 8018fba:	d000      	beq.n	8018fbe <_strtoul_l.isra.0+0xd2>
 8018fbc:	4240      	negs	r0, r0
 8018fbe:	2a00      	cmp	r2, #0
 8018fc0:	d0f7      	beq.n	8018fb2 <_strtoul_l.isra.0+0xc6>
 8018fc2:	b10d      	cbz	r5, 8018fc8 <_strtoul_l.isra.0+0xdc>
 8018fc4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8018fc8:	6011      	str	r1, [r2, #0]
 8018fca:	e7f2      	b.n	8018fb2 <_strtoul_l.isra.0+0xc6>
 8018fcc:	2430      	movs	r4, #48	; 0x30
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d1b1      	bne.n	8018f36 <_strtoul_l.isra.0+0x4a>
 8018fd2:	2308      	movs	r3, #8
 8018fd4:	e7af      	b.n	8018f36 <_strtoul_l.isra.0+0x4a>
 8018fd6:	2c30      	cmp	r4, #48	; 0x30
 8018fd8:	d0a2      	beq.n	8018f20 <_strtoul_l.isra.0+0x34>
 8018fda:	230a      	movs	r3, #10
 8018fdc:	e7ab      	b.n	8018f36 <_strtoul_l.isra.0+0x4a>
 8018fde:	bf00      	nop
 8018fe0:	0801afa5 	.word	0x0801afa5

08018fe4 <strtoul>:
 8018fe4:	4613      	mov	r3, r2
 8018fe6:	460a      	mov	r2, r1
 8018fe8:	4601      	mov	r1, r0
 8018fea:	4802      	ldr	r0, [pc, #8]	; (8018ff4 <strtoul+0x10>)
 8018fec:	6800      	ldr	r0, [r0, #0]
 8018fee:	f7ff bf7d 	b.w	8018eec <_strtoul_l.isra.0>
 8018ff2:	bf00      	nop
 8018ff4:	200003d8 	.word	0x200003d8

08018ff8 <_vsniprintf_r>:
 8018ff8:	b530      	push	{r4, r5, lr}
 8018ffa:	1e14      	subs	r4, r2, #0
 8018ffc:	4605      	mov	r5, r0
 8018ffe:	b09b      	sub	sp, #108	; 0x6c
 8019000:	4618      	mov	r0, r3
 8019002:	da05      	bge.n	8019010 <_vsniprintf_r+0x18>
 8019004:	238b      	movs	r3, #139	; 0x8b
 8019006:	602b      	str	r3, [r5, #0]
 8019008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801900c:	b01b      	add	sp, #108	; 0x6c
 801900e:	bd30      	pop	{r4, r5, pc}
 8019010:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019014:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019018:	bf14      	ite	ne
 801901a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801901e:	4623      	moveq	r3, r4
 8019020:	9302      	str	r3, [sp, #8]
 8019022:	9305      	str	r3, [sp, #20]
 8019024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019028:	9100      	str	r1, [sp, #0]
 801902a:	9104      	str	r1, [sp, #16]
 801902c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019030:	4602      	mov	r2, r0
 8019032:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019034:	4669      	mov	r1, sp
 8019036:	4628      	mov	r0, r5
 8019038:	f000 f9da 	bl	80193f0 <_svfiprintf_r>
 801903c:	1c43      	adds	r3, r0, #1
 801903e:	bfbc      	itt	lt
 8019040:	238b      	movlt	r3, #139	; 0x8b
 8019042:	602b      	strlt	r3, [r5, #0]
 8019044:	2c00      	cmp	r4, #0
 8019046:	d0e1      	beq.n	801900c <_vsniprintf_r+0x14>
 8019048:	9b00      	ldr	r3, [sp, #0]
 801904a:	2200      	movs	r2, #0
 801904c:	701a      	strb	r2, [r3, #0]
 801904e:	e7dd      	b.n	801900c <_vsniprintf_r+0x14>

08019050 <vsniprintf>:
 8019050:	b507      	push	{r0, r1, r2, lr}
 8019052:	9300      	str	r3, [sp, #0]
 8019054:	4613      	mov	r3, r2
 8019056:	460a      	mov	r2, r1
 8019058:	4601      	mov	r1, r0
 801905a:	4803      	ldr	r0, [pc, #12]	; (8019068 <vsniprintf+0x18>)
 801905c:	6800      	ldr	r0, [r0, #0]
 801905e:	f7ff ffcb 	bl	8018ff8 <_vsniprintf_r>
 8019062:	b003      	add	sp, #12
 8019064:	f85d fb04 	ldr.w	pc, [sp], #4
 8019068:	200003d8 	.word	0x200003d8

0801906c <__assert_func>:
 801906c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801906e:	4614      	mov	r4, r2
 8019070:	461a      	mov	r2, r3
 8019072:	4b09      	ldr	r3, [pc, #36]	; (8019098 <__assert_func+0x2c>)
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	4605      	mov	r5, r0
 8019078:	68d8      	ldr	r0, [r3, #12]
 801907a:	b14c      	cbz	r4, 8019090 <__assert_func+0x24>
 801907c:	4b07      	ldr	r3, [pc, #28]	; (801909c <__assert_func+0x30>)
 801907e:	9100      	str	r1, [sp, #0]
 8019080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019084:	4906      	ldr	r1, [pc, #24]	; (80190a0 <__assert_func+0x34>)
 8019086:	462b      	mov	r3, r5
 8019088:	f000 f8f0 	bl	801926c <fiprintf>
 801908c:	f000 feb4 	bl	8019df8 <abort>
 8019090:	4b04      	ldr	r3, [pc, #16]	; (80190a4 <__assert_func+0x38>)
 8019092:	461c      	mov	r4, r3
 8019094:	e7f3      	b.n	801907e <__assert_func+0x12>
 8019096:	bf00      	nop
 8019098:	200003d8 	.word	0x200003d8
 801909c:	0801b122 	.word	0x0801b122
 80190a0:	0801b12f 	.word	0x0801b12f
 80190a4:	0801b15d 	.word	0x0801b15d

080190a8 <__env_lock>:
 80190a8:	4801      	ldr	r0, [pc, #4]	; (80190b0 <__env_lock+0x8>)
 80190aa:	f000 b911 	b.w	80192d0 <__retarget_lock_acquire_recursive>
 80190ae:	bf00      	nop
 80190b0:	2000f9ae 	.word	0x2000f9ae

080190b4 <__env_unlock>:
 80190b4:	4801      	ldr	r0, [pc, #4]	; (80190bc <__env_unlock+0x8>)
 80190b6:	f000 b90c 	b.w	80192d2 <__retarget_lock_release_recursive>
 80190ba:	bf00      	nop
 80190bc:	2000f9ae 	.word	0x2000f9ae

080190c0 <std>:
 80190c0:	2300      	movs	r3, #0
 80190c2:	b510      	push	{r4, lr}
 80190c4:	4604      	mov	r4, r0
 80190c6:	e9c0 3300 	strd	r3, r3, [r0]
 80190ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80190ce:	6083      	str	r3, [r0, #8]
 80190d0:	8181      	strh	r1, [r0, #12]
 80190d2:	6643      	str	r3, [r0, #100]	; 0x64
 80190d4:	81c2      	strh	r2, [r0, #14]
 80190d6:	6183      	str	r3, [r0, #24]
 80190d8:	4619      	mov	r1, r3
 80190da:	2208      	movs	r2, #8
 80190dc:	305c      	adds	r0, #92	; 0x5c
 80190de:	f7ff fd33 	bl	8018b48 <memset>
 80190e2:	4b05      	ldr	r3, [pc, #20]	; (80190f8 <std+0x38>)
 80190e4:	6263      	str	r3, [r4, #36]	; 0x24
 80190e6:	4b05      	ldr	r3, [pc, #20]	; (80190fc <std+0x3c>)
 80190e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80190ea:	4b05      	ldr	r3, [pc, #20]	; (8019100 <std+0x40>)
 80190ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80190ee:	4b05      	ldr	r3, [pc, #20]	; (8019104 <std+0x44>)
 80190f0:	6224      	str	r4, [r4, #32]
 80190f2:	6323      	str	r3, [r4, #48]	; 0x30
 80190f4:	bd10      	pop	{r4, pc}
 80190f6:	bf00      	nop
 80190f8:	08019bcd 	.word	0x08019bcd
 80190fc:	08019bef 	.word	0x08019bef
 8019100:	08019c27 	.word	0x08019c27
 8019104:	08019c4b 	.word	0x08019c4b

08019108 <_cleanup_r>:
 8019108:	4901      	ldr	r1, [pc, #4]	; (8019110 <_cleanup_r+0x8>)
 801910a:	f000 b8c1 	b.w	8019290 <_fwalk_reent>
 801910e:	bf00      	nop
 8019110:	08019f35 	.word	0x08019f35

08019114 <__sfmoreglue>:
 8019114:	b570      	push	{r4, r5, r6, lr}
 8019116:	1e4a      	subs	r2, r1, #1
 8019118:	2568      	movs	r5, #104	; 0x68
 801911a:	4355      	muls	r5, r2
 801911c:	460e      	mov	r6, r1
 801911e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019122:	f7ff fd79 	bl	8018c18 <_malloc_r>
 8019126:	4604      	mov	r4, r0
 8019128:	b140      	cbz	r0, 801913c <__sfmoreglue+0x28>
 801912a:	2100      	movs	r1, #0
 801912c:	e9c0 1600 	strd	r1, r6, [r0]
 8019130:	300c      	adds	r0, #12
 8019132:	60a0      	str	r0, [r4, #8]
 8019134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019138:	f7ff fd06 	bl	8018b48 <memset>
 801913c:	4620      	mov	r0, r4
 801913e:	bd70      	pop	{r4, r5, r6, pc}

08019140 <__sfp_lock_acquire>:
 8019140:	4801      	ldr	r0, [pc, #4]	; (8019148 <__sfp_lock_acquire+0x8>)
 8019142:	f000 b8c5 	b.w	80192d0 <__retarget_lock_acquire_recursive>
 8019146:	bf00      	nop
 8019148:	2000f9b4 	.word	0x2000f9b4

0801914c <__sfp_lock_release>:
 801914c:	4801      	ldr	r0, [pc, #4]	; (8019154 <__sfp_lock_release+0x8>)
 801914e:	f000 b8c0 	b.w	80192d2 <__retarget_lock_release_recursive>
 8019152:	bf00      	nop
 8019154:	2000f9b4 	.word	0x2000f9b4

08019158 <__sinit_lock_acquire>:
 8019158:	4801      	ldr	r0, [pc, #4]	; (8019160 <__sinit_lock_acquire+0x8>)
 801915a:	f000 b8b9 	b.w	80192d0 <__retarget_lock_acquire_recursive>
 801915e:	bf00      	nop
 8019160:	2000f9af 	.word	0x2000f9af

08019164 <__sinit_lock_release>:
 8019164:	4801      	ldr	r0, [pc, #4]	; (801916c <__sinit_lock_release+0x8>)
 8019166:	f000 b8b4 	b.w	80192d2 <__retarget_lock_release_recursive>
 801916a:	bf00      	nop
 801916c:	2000f9af 	.word	0x2000f9af

08019170 <__sinit>:
 8019170:	b510      	push	{r4, lr}
 8019172:	4604      	mov	r4, r0
 8019174:	f7ff fff0 	bl	8019158 <__sinit_lock_acquire>
 8019178:	69a3      	ldr	r3, [r4, #24]
 801917a:	b11b      	cbz	r3, 8019184 <__sinit+0x14>
 801917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019180:	f7ff bff0 	b.w	8019164 <__sinit_lock_release>
 8019184:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019188:	6523      	str	r3, [r4, #80]	; 0x50
 801918a:	4b13      	ldr	r3, [pc, #76]	; (80191d8 <__sinit+0x68>)
 801918c:	4a13      	ldr	r2, [pc, #76]	; (80191dc <__sinit+0x6c>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	62a2      	str	r2, [r4, #40]	; 0x28
 8019192:	42a3      	cmp	r3, r4
 8019194:	bf04      	itt	eq
 8019196:	2301      	moveq	r3, #1
 8019198:	61a3      	streq	r3, [r4, #24]
 801919a:	4620      	mov	r0, r4
 801919c:	f000 f820 	bl	80191e0 <__sfp>
 80191a0:	6060      	str	r0, [r4, #4]
 80191a2:	4620      	mov	r0, r4
 80191a4:	f000 f81c 	bl	80191e0 <__sfp>
 80191a8:	60a0      	str	r0, [r4, #8]
 80191aa:	4620      	mov	r0, r4
 80191ac:	f000 f818 	bl	80191e0 <__sfp>
 80191b0:	2200      	movs	r2, #0
 80191b2:	60e0      	str	r0, [r4, #12]
 80191b4:	2104      	movs	r1, #4
 80191b6:	6860      	ldr	r0, [r4, #4]
 80191b8:	f7ff ff82 	bl	80190c0 <std>
 80191bc:	68a0      	ldr	r0, [r4, #8]
 80191be:	2201      	movs	r2, #1
 80191c0:	2109      	movs	r1, #9
 80191c2:	f7ff ff7d 	bl	80190c0 <std>
 80191c6:	68e0      	ldr	r0, [r4, #12]
 80191c8:	2202      	movs	r2, #2
 80191ca:	2112      	movs	r1, #18
 80191cc:	f7ff ff78 	bl	80190c0 <std>
 80191d0:	2301      	movs	r3, #1
 80191d2:	61a3      	str	r3, [r4, #24]
 80191d4:	e7d2      	b.n	801917c <__sinit+0xc>
 80191d6:	bf00      	nop
 80191d8:	0801b0a8 	.word	0x0801b0a8
 80191dc:	08019109 	.word	0x08019109

080191e0 <__sfp>:
 80191e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191e2:	4607      	mov	r7, r0
 80191e4:	f7ff ffac 	bl	8019140 <__sfp_lock_acquire>
 80191e8:	4b1e      	ldr	r3, [pc, #120]	; (8019264 <__sfp+0x84>)
 80191ea:	681e      	ldr	r6, [r3, #0]
 80191ec:	69b3      	ldr	r3, [r6, #24]
 80191ee:	b913      	cbnz	r3, 80191f6 <__sfp+0x16>
 80191f0:	4630      	mov	r0, r6
 80191f2:	f7ff ffbd 	bl	8019170 <__sinit>
 80191f6:	3648      	adds	r6, #72	; 0x48
 80191f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80191fc:	3b01      	subs	r3, #1
 80191fe:	d503      	bpl.n	8019208 <__sfp+0x28>
 8019200:	6833      	ldr	r3, [r6, #0]
 8019202:	b30b      	cbz	r3, 8019248 <__sfp+0x68>
 8019204:	6836      	ldr	r6, [r6, #0]
 8019206:	e7f7      	b.n	80191f8 <__sfp+0x18>
 8019208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801920c:	b9d5      	cbnz	r5, 8019244 <__sfp+0x64>
 801920e:	4b16      	ldr	r3, [pc, #88]	; (8019268 <__sfp+0x88>)
 8019210:	60e3      	str	r3, [r4, #12]
 8019212:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019216:	6665      	str	r5, [r4, #100]	; 0x64
 8019218:	f000 f859 	bl	80192ce <__retarget_lock_init_recursive>
 801921c:	f7ff ff96 	bl	801914c <__sfp_lock_release>
 8019220:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019224:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019228:	6025      	str	r5, [r4, #0]
 801922a:	61a5      	str	r5, [r4, #24]
 801922c:	2208      	movs	r2, #8
 801922e:	4629      	mov	r1, r5
 8019230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019234:	f7ff fc88 	bl	8018b48 <memset>
 8019238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801923c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019240:	4620      	mov	r0, r4
 8019242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019244:	3468      	adds	r4, #104	; 0x68
 8019246:	e7d9      	b.n	80191fc <__sfp+0x1c>
 8019248:	2104      	movs	r1, #4
 801924a:	4638      	mov	r0, r7
 801924c:	f7ff ff62 	bl	8019114 <__sfmoreglue>
 8019250:	4604      	mov	r4, r0
 8019252:	6030      	str	r0, [r6, #0]
 8019254:	2800      	cmp	r0, #0
 8019256:	d1d5      	bne.n	8019204 <__sfp+0x24>
 8019258:	f7ff ff78 	bl	801914c <__sfp_lock_release>
 801925c:	230c      	movs	r3, #12
 801925e:	603b      	str	r3, [r7, #0]
 8019260:	e7ee      	b.n	8019240 <__sfp+0x60>
 8019262:	bf00      	nop
 8019264:	0801b0a8 	.word	0x0801b0a8
 8019268:	ffff0001 	.word	0xffff0001

0801926c <fiprintf>:
 801926c:	b40e      	push	{r1, r2, r3}
 801926e:	b503      	push	{r0, r1, lr}
 8019270:	4601      	mov	r1, r0
 8019272:	ab03      	add	r3, sp, #12
 8019274:	4805      	ldr	r0, [pc, #20]	; (801928c <fiprintf+0x20>)
 8019276:	f853 2b04 	ldr.w	r2, [r3], #4
 801927a:	6800      	ldr	r0, [r0, #0]
 801927c:	9301      	str	r3, [sp, #4]
 801927e:	f000 f9e1 	bl	8019644 <_vfiprintf_r>
 8019282:	b002      	add	sp, #8
 8019284:	f85d eb04 	ldr.w	lr, [sp], #4
 8019288:	b003      	add	sp, #12
 801928a:	4770      	bx	lr
 801928c:	200003d8 	.word	0x200003d8

08019290 <_fwalk_reent>:
 8019290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019294:	4606      	mov	r6, r0
 8019296:	4688      	mov	r8, r1
 8019298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801929c:	2700      	movs	r7, #0
 801929e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80192a2:	f1b9 0901 	subs.w	r9, r9, #1
 80192a6:	d505      	bpl.n	80192b4 <_fwalk_reent+0x24>
 80192a8:	6824      	ldr	r4, [r4, #0]
 80192aa:	2c00      	cmp	r4, #0
 80192ac:	d1f7      	bne.n	801929e <_fwalk_reent+0xe>
 80192ae:	4638      	mov	r0, r7
 80192b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192b4:	89ab      	ldrh	r3, [r5, #12]
 80192b6:	2b01      	cmp	r3, #1
 80192b8:	d907      	bls.n	80192ca <_fwalk_reent+0x3a>
 80192ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80192be:	3301      	adds	r3, #1
 80192c0:	d003      	beq.n	80192ca <_fwalk_reent+0x3a>
 80192c2:	4629      	mov	r1, r5
 80192c4:	4630      	mov	r0, r6
 80192c6:	47c0      	blx	r8
 80192c8:	4307      	orrs	r7, r0
 80192ca:	3568      	adds	r5, #104	; 0x68
 80192cc:	e7e9      	b.n	80192a2 <_fwalk_reent+0x12>

080192ce <__retarget_lock_init_recursive>:
 80192ce:	4770      	bx	lr

080192d0 <__retarget_lock_acquire_recursive>:
 80192d0:	4770      	bx	lr

080192d2 <__retarget_lock_release_recursive>:
 80192d2:	4770      	bx	lr

080192d4 <__malloc_lock>:
 80192d4:	4801      	ldr	r0, [pc, #4]	; (80192dc <__malloc_lock+0x8>)
 80192d6:	f7ff bffb 	b.w	80192d0 <__retarget_lock_acquire_recursive>
 80192da:	bf00      	nop
 80192dc:	2000f9b0 	.word	0x2000f9b0

080192e0 <__malloc_unlock>:
 80192e0:	4801      	ldr	r0, [pc, #4]	; (80192e8 <__malloc_unlock+0x8>)
 80192e2:	f7ff bff6 	b.w	80192d2 <__retarget_lock_release_recursive>
 80192e6:	bf00      	nop
 80192e8:	2000f9b0 	.word	0x2000f9b0

080192ec <_realloc_r>:
 80192ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ee:	4607      	mov	r7, r0
 80192f0:	4614      	mov	r4, r2
 80192f2:	460e      	mov	r6, r1
 80192f4:	b921      	cbnz	r1, 8019300 <_realloc_r+0x14>
 80192f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80192fa:	4611      	mov	r1, r2
 80192fc:	f7ff bc8c 	b.w	8018c18 <_malloc_r>
 8019300:	b922      	cbnz	r2, 801930c <_realloc_r+0x20>
 8019302:	f7ff fc39 	bl	8018b78 <_free_r>
 8019306:	4625      	mov	r5, r4
 8019308:	4628      	mov	r0, r5
 801930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801930c:	f000 fec4 	bl	801a098 <_malloc_usable_size_r>
 8019310:	42a0      	cmp	r0, r4
 8019312:	d20f      	bcs.n	8019334 <_realloc_r+0x48>
 8019314:	4621      	mov	r1, r4
 8019316:	4638      	mov	r0, r7
 8019318:	f7ff fc7e 	bl	8018c18 <_malloc_r>
 801931c:	4605      	mov	r5, r0
 801931e:	2800      	cmp	r0, #0
 8019320:	d0f2      	beq.n	8019308 <_realloc_r+0x1c>
 8019322:	4631      	mov	r1, r6
 8019324:	4622      	mov	r2, r4
 8019326:	f7ff fbe7 	bl	8018af8 <memcpy>
 801932a:	4631      	mov	r1, r6
 801932c:	4638      	mov	r0, r7
 801932e:	f7ff fc23 	bl	8018b78 <_free_r>
 8019332:	e7e9      	b.n	8019308 <_realloc_r+0x1c>
 8019334:	4635      	mov	r5, r6
 8019336:	e7e7      	b.n	8019308 <_realloc_r+0x1c>

08019338 <__ssputs_r>:
 8019338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801933c:	688e      	ldr	r6, [r1, #8]
 801933e:	429e      	cmp	r6, r3
 8019340:	4682      	mov	sl, r0
 8019342:	460c      	mov	r4, r1
 8019344:	4690      	mov	r8, r2
 8019346:	461f      	mov	r7, r3
 8019348:	d838      	bhi.n	80193bc <__ssputs_r+0x84>
 801934a:	898a      	ldrh	r2, [r1, #12]
 801934c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019350:	d032      	beq.n	80193b8 <__ssputs_r+0x80>
 8019352:	6825      	ldr	r5, [r4, #0]
 8019354:	6909      	ldr	r1, [r1, #16]
 8019356:	eba5 0901 	sub.w	r9, r5, r1
 801935a:	6965      	ldr	r5, [r4, #20]
 801935c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019364:	3301      	adds	r3, #1
 8019366:	444b      	add	r3, r9
 8019368:	106d      	asrs	r5, r5, #1
 801936a:	429d      	cmp	r5, r3
 801936c:	bf38      	it	cc
 801936e:	461d      	movcc	r5, r3
 8019370:	0553      	lsls	r3, r2, #21
 8019372:	d531      	bpl.n	80193d8 <__ssputs_r+0xa0>
 8019374:	4629      	mov	r1, r5
 8019376:	f7ff fc4f 	bl	8018c18 <_malloc_r>
 801937a:	4606      	mov	r6, r0
 801937c:	b950      	cbnz	r0, 8019394 <__ssputs_r+0x5c>
 801937e:	230c      	movs	r3, #12
 8019380:	f8ca 3000 	str.w	r3, [sl]
 8019384:	89a3      	ldrh	r3, [r4, #12]
 8019386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801938a:	81a3      	strh	r3, [r4, #12]
 801938c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019394:	6921      	ldr	r1, [r4, #16]
 8019396:	464a      	mov	r2, r9
 8019398:	f7ff fbae 	bl	8018af8 <memcpy>
 801939c:	89a3      	ldrh	r3, [r4, #12]
 801939e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80193a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193a6:	81a3      	strh	r3, [r4, #12]
 80193a8:	6126      	str	r6, [r4, #16]
 80193aa:	6165      	str	r5, [r4, #20]
 80193ac:	444e      	add	r6, r9
 80193ae:	eba5 0509 	sub.w	r5, r5, r9
 80193b2:	6026      	str	r6, [r4, #0]
 80193b4:	60a5      	str	r5, [r4, #8]
 80193b6:	463e      	mov	r6, r7
 80193b8:	42be      	cmp	r6, r7
 80193ba:	d900      	bls.n	80193be <__ssputs_r+0x86>
 80193bc:	463e      	mov	r6, r7
 80193be:	4632      	mov	r2, r6
 80193c0:	6820      	ldr	r0, [r4, #0]
 80193c2:	4641      	mov	r1, r8
 80193c4:	f7ff fba6 	bl	8018b14 <memmove>
 80193c8:	68a3      	ldr	r3, [r4, #8]
 80193ca:	6822      	ldr	r2, [r4, #0]
 80193cc:	1b9b      	subs	r3, r3, r6
 80193ce:	4432      	add	r2, r6
 80193d0:	60a3      	str	r3, [r4, #8]
 80193d2:	6022      	str	r2, [r4, #0]
 80193d4:	2000      	movs	r0, #0
 80193d6:	e7db      	b.n	8019390 <__ssputs_r+0x58>
 80193d8:	462a      	mov	r2, r5
 80193da:	f7ff ff87 	bl	80192ec <_realloc_r>
 80193de:	4606      	mov	r6, r0
 80193e0:	2800      	cmp	r0, #0
 80193e2:	d1e1      	bne.n	80193a8 <__ssputs_r+0x70>
 80193e4:	6921      	ldr	r1, [r4, #16]
 80193e6:	4650      	mov	r0, sl
 80193e8:	f7ff fbc6 	bl	8018b78 <_free_r>
 80193ec:	e7c7      	b.n	801937e <__ssputs_r+0x46>
	...

080193f0 <_svfiprintf_r>:
 80193f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f4:	4698      	mov	r8, r3
 80193f6:	898b      	ldrh	r3, [r1, #12]
 80193f8:	061b      	lsls	r3, r3, #24
 80193fa:	b09d      	sub	sp, #116	; 0x74
 80193fc:	4607      	mov	r7, r0
 80193fe:	460d      	mov	r5, r1
 8019400:	4614      	mov	r4, r2
 8019402:	d50e      	bpl.n	8019422 <_svfiprintf_r+0x32>
 8019404:	690b      	ldr	r3, [r1, #16]
 8019406:	b963      	cbnz	r3, 8019422 <_svfiprintf_r+0x32>
 8019408:	2140      	movs	r1, #64	; 0x40
 801940a:	f7ff fc05 	bl	8018c18 <_malloc_r>
 801940e:	6028      	str	r0, [r5, #0]
 8019410:	6128      	str	r0, [r5, #16]
 8019412:	b920      	cbnz	r0, 801941e <_svfiprintf_r+0x2e>
 8019414:	230c      	movs	r3, #12
 8019416:	603b      	str	r3, [r7, #0]
 8019418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801941c:	e0d1      	b.n	80195c2 <_svfiprintf_r+0x1d2>
 801941e:	2340      	movs	r3, #64	; 0x40
 8019420:	616b      	str	r3, [r5, #20]
 8019422:	2300      	movs	r3, #0
 8019424:	9309      	str	r3, [sp, #36]	; 0x24
 8019426:	2320      	movs	r3, #32
 8019428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801942c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019430:	2330      	movs	r3, #48	; 0x30
 8019432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80195dc <_svfiprintf_r+0x1ec>
 8019436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801943a:	f04f 0901 	mov.w	r9, #1
 801943e:	4623      	mov	r3, r4
 8019440:	469a      	mov	sl, r3
 8019442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019446:	b10a      	cbz	r2, 801944c <_svfiprintf_r+0x5c>
 8019448:	2a25      	cmp	r2, #37	; 0x25
 801944a:	d1f9      	bne.n	8019440 <_svfiprintf_r+0x50>
 801944c:	ebba 0b04 	subs.w	fp, sl, r4
 8019450:	d00b      	beq.n	801946a <_svfiprintf_r+0x7a>
 8019452:	465b      	mov	r3, fp
 8019454:	4622      	mov	r2, r4
 8019456:	4629      	mov	r1, r5
 8019458:	4638      	mov	r0, r7
 801945a:	f7ff ff6d 	bl	8019338 <__ssputs_r>
 801945e:	3001      	adds	r0, #1
 8019460:	f000 80aa 	beq.w	80195b8 <_svfiprintf_r+0x1c8>
 8019464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019466:	445a      	add	r2, fp
 8019468:	9209      	str	r2, [sp, #36]	; 0x24
 801946a:	f89a 3000 	ldrb.w	r3, [sl]
 801946e:	2b00      	cmp	r3, #0
 8019470:	f000 80a2 	beq.w	80195b8 <_svfiprintf_r+0x1c8>
 8019474:	2300      	movs	r3, #0
 8019476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801947a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801947e:	f10a 0a01 	add.w	sl, sl, #1
 8019482:	9304      	str	r3, [sp, #16]
 8019484:	9307      	str	r3, [sp, #28]
 8019486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801948a:	931a      	str	r3, [sp, #104]	; 0x68
 801948c:	4654      	mov	r4, sl
 801948e:	2205      	movs	r2, #5
 8019490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019494:	4851      	ldr	r0, [pc, #324]	; (80195dc <_svfiprintf_r+0x1ec>)
 8019496:	f7e6 feb3 	bl	8000200 <memchr>
 801949a:	9a04      	ldr	r2, [sp, #16]
 801949c:	b9d8      	cbnz	r0, 80194d6 <_svfiprintf_r+0xe6>
 801949e:	06d0      	lsls	r0, r2, #27
 80194a0:	bf44      	itt	mi
 80194a2:	2320      	movmi	r3, #32
 80194a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194a8:	0711      	lsls	r1, r2, #28
 80194aa:	bf44      	itt	mi
 80194ac:	232b      	movmi	r3, #43	; 0x2b
 80194ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194b2:	f89a 3000 	ldrb.w	r3, [sl]
 80194b6:	2b2a      	cmp	r3, #42	; 0x2a
 80194b8:	d015      	beq.n	80194e6 <_svfiprintf_r+0xf6>
 80194ba:	9a07      	ldr	r2, [sp, #28]
 80194bc:	4654      	mov	r4, sl
 80194be:	2000      	movs	r0, #0
 80194c0:	f04f 0c0a 	mov.w	ip, #10
 80194c4:	4621      	mov	r1, r4
 80194c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194ca:	3b30      	subs	r3, #48	; 0x30
 80194cc:	2b09      	cmp	r3, #9
 80194ce:	d94e      	bls.n	801956e <_svfiprintf_r+0x17e>
 80194d0:	b1b0      	cbz	r0, 8019500 <_svfiprintf_r+0x110>
 80194d2:	9207      	str	r2, [sp, #28]
 80194d4:	e014      	b.n	8019500 <_svfiprintf_r+0x110>
 80194d6:	eba0 0308 	sub.w	r3, r0, r8
 80194da:	fa09 f303 	lsl.w	r3, r9, r3
 80194de:	4313      	orrs	r3, r2
 80194e0:	9304      	str	r3, [sp, #16]
 80194e2:	46a2      	mov	sl, r4
 80194e4:	e7d2      	b.n	801948c <_svfiprintf_r+0x9c>
 80194e6:	9b03      	ldr	r3, [sp, #12]
 80194e8:	1d19      	adds	r1, r3, #4
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	9103      	str	r1, [sp, #12]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	bfbb      	ittet	lt
 80194f2:	425b      	neglt	r3, r3
 80194f4:	f042 0202 	orrlt.w	r2, r2, #2
 80194f8:	9307      	strge	r3, [sp, #28]
 80194fa:	9307      	strlt	r3, [sp, #28]
 80194fc:	bfb8      	it	lt
 80194fe:	9204      	strlt	r2, [sp, #16]
 8019500:	7823      	ldrb	r3, [r4, #0]
 8019502:	2b2e      	cmp	r3, #46	; 0x2e
 8019504:	d10c      	bne.n	8019520 <_svfiprintf_r+0x130>
 8019506:	7863      	ldrb	r3, [r4, #1]
 8019508:	2b2a      	cmp	r3, #42	; 0x2a
 801950a:	d135      	bne.n	8019578 <_svfiprintf_r+0x188>
 801950c:	9b03      	ldr	r3, [sp, #12]
 801950e:	1d1a      	adds	r2, r3, #4
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	9203      	str	r2, [sp, #12]
 8019514:	2b00      	cmp	r3, #0
 8019516:	bfb8      	it	lt
 8019518:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801951c:	3402      	adds	r4, #2
 801951e:	9305      	str	r3, [sp, #20]
 8019520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80195ec <_svfiprintf_r+0x1fc>
 8019524:	7821      	ldrb	r1, [r4, #0]
 8019526:	2203      	movs	r2, #3
 8019528:	4650      	mov	r0, sl
 801952a:	f7e6 fe69 	bl	8000200 <memchr>
 801952e:	b140      	cbz	r0, 8019542 <_svfiprintf_r+0x152>
 8019530:	2340      	movs	r3, #64	; 0x40
 8019532:	eba0 000a 	sub.w	r0, r0, sl
 8019536:	fa03 f000 	lsl.w	r0, r3, r0
 801953a:	9b04      	ldr	r3, [sp, #16]
 801953c:	4303      	orrs	r3, r0
 801953e:	3401      	adds	r4, #1
 8019540:	9304      	str	r3, [sp, #16]
 8019542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019546:	4826      	ldr	r0, [pc, #152]	; (80195e0 <_svfiprintf_r+0x1f0>)
 8019548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801954c:	2206      	movs	r2, #6
 801954e:	f7e6 fe57 	bl	8000200 <memchr>
 8019552:	2800      	cmp	r0, #0
 8019554:	d038      	beq.n	80195c8 <_svfiprintf_r+0x1d8>
 8019556:	4b23      	ldr	r3, [pc, #140]	; (80195e4 <_svfiprintf_r+0x1f4>)
 8019558:	bb1b      	cbnz	r3, 80195a2 <_svfiprintf_r+0x1b2>
 801955a:	9b03      	ldr	r3, [sp, #12]
 801955c:	3307      	adds	r3, #7
 801955e:	f023 0307 	bic.w	r3, r3, #7
 8019562:	3308      	adds	r3, #8
 8019564:	9303      	str	r3, [sp, #12]
 8019566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019568:	4433      	add	r3, r6
 801956a:	9309      	str	r3, [sp, #36]	; 0x24
 801956c:	e767      	b.n	801943e <_svfiprintf_r+0x4e>
 801956e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019572:	460c      	mov	r4, r1
 8019574:	2001      	movs	r0, #1
 8019576:	e7a5      	b.n	80194c4 <_svfiprintf_r+0xd4>
 8019578:	2300      	movs	r3, #0
 801957a:	3401      	adds	r4, #1
 801957c:	9305      	str	r3, [sp, #20]
 801957e:	4619      	mov	r1, r3
 8019580:	f04f 0c0a 	mov.w	ip, #10
 8019584:	4620      	mov	r0, r4
 8019586:	f810 2b01 	ldrb.w	r2, [r0], #1
 801958a:	3a30      	subs	r2, #48	; 0x30
 801958c:	2a09      	cmp	r2, #9
 801958e:	d903      	bls.n	8019598 <_svfiprintf_r+0x1a8>
 8019590:	2b00      	cmp	r3, #0
 8019592:	d0c5      	beq.n	8019520 <_svfiprintf_r+0x130>
 8019594:	9105      	str	r1, [sp, #20]
 8019596:	e7c3      	b.n	8019520 <_svfiprintf_r+0x130>
 8019598:	fb0c 2101 	mla	r1, ip, r1, r2
 801959c:	4604      	mov	r4, r0
 801959e:	2301      	movs	r3, #1
 80195a0:	e7f0      	b.n	8019584 <_svfiprintf_r+0x194>
 80195a2:	ab03      	add	r3, sp, #12
 80195a4:	9300      	str	r3, [sp, #0]
 80195a6:	462a      	mov	r2, r5
 80195a8:	4b0f      	ldr	r3, [pc, #60]	; (80195e8 <_svfiprintf_r+0x1f8>)
 80195aa:	a904      	add	r1, sp, #16
 80195ac:	4638      	mov	r0, r7
 80195ae:	f3af 8000 	nop.w
 80195b2:	1c42      	adds	r2, r0, #1
 80195b4:	4606      	mov	r6, r0
 80195b6:	d1d6      	bne.n	8019566 <_svfiprintf_r+0x176>
 80195b8:	89ab      	ldrh	r3, [r5, #12]
 80195ba:	065b      	lsls	r3, r3, #25
 80195bc:	f53f af2c 	bmi.w	8019418 <_svfiprintf_r+0x28>
 80195c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80195c2:	b01d      	add	sp, #116	; 0x74
 80195c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195c8:	ab03      	add	r3, sp, #12
 80195ca:	9300      	str	r3, [sp, #0]
 80195cc:	462a      	mov	r2, r5
 80195ce:	4b06      	ldr	r3, [pc, #24]	; (80195e8 <_svfiprintf_r+0x1f8>)
 80195d0:	a904      	add	r1, sp, #16
 80195d2:	4638      	mov	r0, r7
 80195d4:	f000 f9d4 	bl	8019980 <_printf_i>
 80195d8:	e7eb      	b.n	80195b2 <_svfiprintf_r+0x1c2>
 80195da:	bf00      	nop
 80195dc:	0801b1c0 	.word	0x0801b1c0
 80195e0:	0801b1ca 	.word	0x0801b1ca
 80195e4:	00000000 	.word	0x00000000
 80195e8:	08019339 	.word	0x08019339
 80195ec:	0801b1c6 	.word	0x0801b1c6

080195f0 <__sfputc_r>:
 80195f0:	6893      	ldr	r3, [r2, #8]
 80195f2:	3b01      	subs	r3, #1
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	b410      	push	{r4}
 80195f8:	6093      	str	r3, [r2, #8]
 80195fa:	da08      	bge.n	801960e <__sfputc_r+0x1e>
 80195fc:	6994      	ldr	r4, [r2, #24]
 80195fe:	42a3      	cmp	r3, r4
 8019600:	db01      	blt.n	8019606 <__sfputc_r+0x16>
 8019602:	290a      	cmp	r1, #10
 8019604:	d103      	bne.n	801960e <__sfputc_r+0x1e>
 8019606:	f85d 4b04 	ldr.w	r4, [sp], #4
 801960a:	f000 bb23 	b.w	8019c54 <__swbuf_r>
 801960e:	6813      	ldr	r3, [r2, #0]
 8019610:	1c58      	adds	r0, r3, #1
 8019612:	6010      	str	r0, [r2, #0]
 8019614:	7019      	strb	r1, [r3, #0]
 8019616:	4608      	mov	r0, r1
 8019618:	f85d 4b04 	ldr.w	r4, [sp], #4
 801961c:	4770      	bx	lr

0801961e <__sfputs_r>:
 801961e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019620:	4606      	mov	r6, r0
 8019622:	460f      	mov	r7, r1
 8019624:	4614      	mov	r4, r2
 8019626:	18d5      	adds	r5, r2, r3
 8019628:	42ac      	cmp	r4, r5
 801962a:	d101      	bne.n	8019630 <__sfputs_r+0x12>
 801962c:	2000      	movs	r0, #0
 801962e:	e007      	b.n	8019640 <__sfputs_r+0x22>
 8019630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019634:	463a      	mov	r2, r7
 8019636:	4630      	mov	r0, r6
 8019638:	f7ff ffda 	bl	80195f0 <__sfputc_r>
 801963c:	1c43      	adds	r3, r0, #1
 801963e:	d1f3      	bne.n	8019628 <__sfputs_r+0xa>
 8019640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019644 <_vfiprintf_r>:
 8019644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019648:	460d      	mov	r5, r1
 801964a:	b09d      	sub	sp, #116	; 0x74
 801964c:	4614      	mov	r4, r2
 801964e:	4698      	mov	r8, r3
 8019650:	4606      	mov	r6, r0
 8019652:	b118      	cbz	r0, 801965c <_vfiprintf_r+0x18>
 8019654:	6983      	ldr	r3, [r0, #24]
 8019656:	b90b      	cbnz	r3, 801965c <_vfiprintf_r+0x18>
 8019658:	f7ff fd8a 	bl	8019170 <__sinit>
 801965c:	4b89      	ldr	r3, [pc, #548]	; (8019884 <_vfiprintf_r+0x240>)
 801965e:	429d      	cmp	r5, r3
 8019660:	d11b      	bne.n	801969a <_vfiprintf_r+0x56>
 8019662:	6875      	ldr	r5, [r6, #4]
 8019664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019666:	07d9      	lsls	r1, r3, #31
 8019668:	d405      	bmi.n	8019676 <_vfiprintf_r+0x32>
 801966a:	89ab      	ldrh	r3, [r5, #12]
 801966c:	059a      	lsls	r2, r3, #22
 801966e:	d402      	bmi.n	8019676 <_vfiprintf_r+0x32>
 8019670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019672:	f7ff fe2d 	bl	80192d0 <__retarget_lock_acquire_recursive>
 8019676:	89ab      	ldrh	r3, [r5, #12]
 8019678:	071b      	lsls	r3, r3, #28
 801967a:	d501      	bpl.n	8019680 <_vfiprintf_r+0x3c>
 801967c:	692b      	ldr	r3, [r5, #16]
 801967e:	b9eb      	cbnz	r3, 80196bc <_vfiprintf_r+0x78>
 8019680:	4629      	mov	r1, r5
 8019682:	4630      	mov	r0, r6
 8019684:	f000 fb4a 	bl	8019d1c <__swsetup_r>
 8019688:	b1c0      	cbz	r0, 80196bc <_vfiprintf_r+0x78>
 801968a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801968c:	07dc      	lsls	r4, r3, #31
 801968e:	d50e      	bpl.n	80196ae <_vfiprintf_r+0x6a>
 8019690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019694:	b01d      	add	sp, #116	; 0x74
 8019696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801969a:	4b7b      	ldr	r3, [pc, #492]	; (8019888 <_vfiprintf_r+0x244>)
 801969c:	429d      	cmp	r5, r3
 801969e:	d101      	bne.n	80196a4 <_vfiprintf_r+0x60>
 80196a0:	68b5      	ldr	r5, [r6, #8]
 80196a2:	e7df      	b.n	8019664 <_vfiprintf_r+0x20>
 80196a4:	4b79      	ldr	r3, [pc, #484]	; (801988c <_vfiprintf_r+0x248>)
 80196a6:	429d      	cmp	r5, r3
 80196a8:	bf08      	it	eq
 80196aa:	68f5      	ldreq	r5, [r6, #12]
 80196ac:	e7da      	b.n	8019664 <_vfiprintf_r+0x20>
 80196ae:	89ab      	ldrh	r3, [r5, #12]
 80196b0:	0598      	lsls	r0, r3, #22
 80196b2:	d4ed      	bmi.n	8019690 <_vfiprintf_r+0x4c>
 80196b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80196b6:	f7ff fe0c 	bl	80192d2 <__retarget_lock_release_recursive>
 80196ba:	e7e9      	b.n	8019690 <_vfiprintf_r+0x4c>
 80196bc:	2300      	movs	r3, #0
 80196be:	9309      	str	r3, [sp, #36]	; 0x24
 80196c0:	2320      	movs	r3, #32
 80196c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80196c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80196ca:	2330      	movs	r3, #48	; 0x30
 80196cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019890 <_vfiprintf_r+0x24c>
 80196d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80196d4:	f04f 0901 	mov.w	r9, #1
 80196d8:	4623      	mov	r3, r4
 80196da:	469a      	mov	sl, r3
 80196dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196e0:	b10a      	cbz	r2, 80196e6 <_vfiprintf_r+0xa2>
 80196e2:	2a25      	cmp	r2, #37	; 0x25
 80196e4:	d1f9      	bne.n	80196da <_vfiprintf_r+0x96>
 80196e6:	ebba 0b04 	subs.w	fp, sl, r4
 80196ea:	d00b      	beq.n	8019704 <_vfiprintf_r+0xc0>
 80196ec:	465b      	mov	r3, fp
 80196ee:	4622      	mov	r2, r4
 80196f0:	4629      	mov	r1, r5
 80196f2:	4630      	mov	r0, r6
 80196f4:	f7ff ff93 	bl	801961e <__sfputs_r>
 80196f8:	3001      	adds	r0, #1
 80196fa:	f000 80aa 	beq.w	8019852 <_vfiprintf_r+0x20e>
 80196fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019700:	445a      	add	r2, fp
 8019702:	9209      	str	r2, [sp, #36]	; 0x24
 8019704:	f89a 3000 	ldrb.w	r3, [sl]
 8019708:	2b00      	cmp	r3, #0
 801970a:	f000 80a2 	beq.w	8019852 <_vfiprintf_r+0x20e>
 801970e:	2300      	movs	r3, #0
 8019710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019718:	f10a 0a01 	add.w	sl, sl, #1
 801971c:	9304      	str	r3, [sp, #16]
 801971e:	9307      	str	r3, [sp, #28]
 8019720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019724:	931a      	str	r3, [sp, #104]	; 0x68
 8019726:	4654      	mov	r4, sl
 8019728:	2205      	movs	r2, #5
 801972a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801972e:	4858      	ldr	r0, [pc, #352]	; (8019890 <_vfiprintf_r+0x24c>)
 8019730:	f7e6 fd66 	bl	8000200 <memchr>
 8019734:	9a04      	ldr	r2, [sp, #16]
 8019736:	b9d8      	cbnz	r0, 8019770 <_vfiprintf_r+0x12c>
 8019738:	06d1      	lsls	r1, r2, #27
 801973a:	bf44      	itt	mi
 801973c:	2320      	movmi	r3, #32
 801973e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019742:	0713      	lsls	r3, r2, #28
 8019744:	bf44      	itt	mi
 8019746:	232b      	movmi	r3, #43	; 0x2b
 8019748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801974c:	f89a 3000 	ldrb.w	r3, [sl]
 8019750:	2b2a      	cmp	r3, #42	; 0x2a
 8019752:	d015      	beq.n	8019780 <_vfiprintf_r+0x13c>
 8019754:	9a07      	ldr	r2, [sp, #28]
 8019756:	4654      	mov	r4, sl
 8019758:	2000      	movs	r0, #0
 801975a:	f04f 0c0a 	mov.w	ip, #10
 801975e:	4621      	mov	r1, r4
 8019760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019764:	3b30      	subs	r3, #48	; 0x30
 8019766:	2b09      	cmp	r3, #9
 8019768:	d94e      	bls.n	8019808 <_vfiprintf_r+0x1c4>
 801976a:	b1b0      	cbz	r0, 801979a <_vfiprintf_r+0x156>
 801976c:	9207      	str	r2, [sp, #28]
 801976e:	e014      	b.n	801979a <_vfiprintf_r+0x156>
 8019770:	eba0 0308 	sub.w	r3, r0, r8
 8019774:	fa09 f303 	lsl.w	r3, r9, r3
 8019778:	4313      	orrs	r3, r2
 801977a:	9304      	str	r3, [sp, #16]
 801977c:	46a2      	mov	sl, r4
 801977e:	e7d2      	b.n	8019726 <_vfiprintf_r+0xe2>
 8019780:	9b03      	ldr	r3, [sp, #12]
 8019782:	1d19      	adds	r1, r3, #4
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	9103      	str	r1, [sp, #12]
 8019788:	2b00      	cmp	r3, #0
 801978a:	bfbb      	ittet	lt
 801978c:	425b      	neglt	r3, r3
 801978e:	f042 0202 	orrlt.w	r2, r2, #2
 8019792:	9307      	strge	r3, [sp, #28]
 8019794:	9307      	strlt	r3, [sp, #28]
 8019796:	bfb8      	it	lt
 8019798:	9204      	strlt	r2, [sp, #16]
 801979a:	7823      	ldrb	r3, [r4, #0]
 801979c:	2b2e      	cmp	r3, #46	; 0x2e
 801979e:	d10c      	bne.n	80197ba <_vfiprintf_r+0x176>
 80197a0:	7863      	ldrb	r3, [r4, #1]
 80197a2:	2b2a      	cmp	r3, #42	; 0x2a
 80197a4:	d135      	bne.n	8019812 <_vfiprintf_r+0x1ce>
 80197a6:	9b03      	ldr	r3, [sp, #12]
 80197a8:	1d1a      	adds	r2, r3, #4
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	9203      	str	r2, [sp, #12]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	bfb8      	it	lt
 80197b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80197b6:	3402      	adds	r4, #2
 80197b8:	9305      	str	r3, [sp, #20]
 80197ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80198a0 <_vfiprintf_r+0x25c>
 80197be:	7821      	ldrb	r1, [r4, #0]
 80197c0:	2203      	movs	r2, #3
 80197c2:	4650      	mov	r0, sl
 80197c4:	f7e6 fd1c 	bl	8000200 <memchr>
 80197c8:	b140      	cbz	r0, 80197dc <_vfiprintf_r+0x198>
 80197ca:	2340      	movs	r3, #64	; 0x40
 80197cc:	eba0 000a 	sub.w	r0, r0, sl
 80197d0:	fa03 f000 	lsl.w	r0, r3, r0
 80197d4:	9b04      	ldr	r3, [sp, #16]
 80197d6:	4303      	orrs	r3, r0
 80197d8:	3401      	adds	r4, #1
 80197da:	9304      	str	r3, [sp, #16]
 80197dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197e0:	482c      	ldr	r0, [pc, #176]	; (8019894 <_vfiprintf_r+0x250>)
 80197e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80197e6:	2206      	movs	r2, #6
 80197e8:	f7e6 fd0a 	bl	8000200 <memchr>
 80197ec:	2800      	cmp	r0, #0
 80197ee:	d03f      	beq.n	8019870 <_vfiprintf_r+0x22c>
 80197f0:	4b29      	ldr	r3, [pc, #164]	; (8019898 <_vfiprintf_r+0x254>)
 80197f2:	bb1b      	cbnz	r3, 801983c <_vfiprintf_r+0x1f8>
 80197f4:	9b03      	ldr	r3, [sp, #12]
 80197f6:	3307      	adds	r3, #7
 80197f8:	f023 0307 	bic.w	r3, r3, #7
 80197fc:	3308      	adds	r3, #8
 80197fe:	9303      	str	r3, [sp, #12]
 8019800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019802:	443b      	add	r3, r7
 8019804:	9309      	str	r3, [sp, #36]	; 0x24
 8019806:	e767      	b.n	80196d8 <_vfiprintf_r+0x94>
 8019808:	fb0c 3202 	mla	r2, ip, r2, r3
 801980c:	460c      	mov	r4, r1
 801980e:	2001      	movs	r0, #1
 8019810:	e7a5      	b.n	801975e <_vfiprintf_r+0x11a>
 8019812:	2300      	movs	r3, #0
 8019814:	3401      	adds	r4, #1
 8019816:	9305      	str	r3, [sp, #20]
 8019818:	4619      	mov	r1, r3
 801981a:	f04f 0c0a 	mov.w	ip, #10
 801981e:	4620      	mov	r0, r4
 8019820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019824:	3a30      	subs	r2, #48	; 0x30
 8019826:	2a09      	cmp	r2, #9
 8019828:	d903      	bls.n	8019832 <_vfiprintf_r+0x1ee>
 801982a:	2b00      	cmp	r3, #0
 801982c:	d0c5      	beq.n	80197ba <_vfiprintf_r+0x176>
 801982e:	9105      	str	r1, [sp, #20]
 8019830:	e7c3      	b.n	80197ba <_vfiprintf_r+0x176>
 8019832:	fb0c 2101 	mla	r1, ip, r1, r2
 8019836:	4604      	mov	r4, r0
 8019838:	2301      	movs	r3, #1
 801983a:	e7f0      	b.n	801981e <_vfiprintf_r+0x1da>
 801983c:	ab03      	add	r3, sp, #12
 801983e:	9300      	str	r3, [sp, #0]
 8019840:	462a      	mov	r2, r5
 8019842:	4b16      	ldr	r3, [pc, #88]	; (801989c <_vfiprintf_r+0x258>)
 8019844:	a904      	add	r1, sp, #16
 8019846:	4630      	mov	r0, r6
 8019848:	f3af 8000 	nop.w
 801984c:	4607      	mov	r7, r0
 801984e:	1c78      	adds	r0, r7, #1
 8019850:	d1d6      	bne.n	8019800 <_vfiprintf_r+0x1bc>
 8019852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019854:	07d9      	lsls	r1, r3, #31
 8019856:	d405      	bmi.n	8019864 <_vfiprintf_r+0x220>
 8019858:	89ab      	ldrh	r3, [r5, #12]
 801985a:	059a      	lsls	r2, r3, #22
 801985c:	d402      	bmi.n	8019864 <_vfiprintf_r+0x220>
 801985e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019860:	f7ff fd37 	bl	80192d2 <__retarget_lock_release_recursive>
 8019864:	89ab      	ldrh	r3, [r5, #12]
 8019866:	065b      	lsls	r3, r3, #25
 8019868:	f53f af12 	bmi.w	8019690 <_vfiprintf_r+0x4c>
 801986c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801986e:	e711      	b.n	8019694 <_vfiprintf_r+0x50>
 8019870:	ab03      	add	r3, sp, #12
 8019872:	9300      	str	r3, [sp, #0]
 8019874:	462a      	mov	r2, r5
 8019876:	4b09      	ldr	r3, [pc, #36]	; (801989c <_vfiprintf_r+0x258>)
 8019878:	a904      	add	r1, sp, #16
 801987a:	4630      	mov	r0, r6
 801987c:	f000 f880 	bl	8019980 <_printf_i>
 8019880:	e7e4      	b.n	801984c <_vfiprintf_r+0x208>
 8019882:	bf00      	nop
 8019884:	0801b180 	.word	0x0801b180
 8019888:	0801b1a0 	.word	0x0801b1a0
 801988c:	0801b160 	.word	0x0801b160
 8019890:	0801b1c0 	.word	0x0801b1c0
 8019894:	0801b1ca 	.word	0x0801b1ca
 8019898:	00000000 	.word	0x00000000
 801989c:	0801961f 	.word	0x0801961f
 80198a0:	0801b1c6 	.word	0x0801b1c6

080198a4 <_printf_common>:
 80198a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198a8:	4616      	mov	r6, r2
 80198aa:	4699      	mov	r9, r3
 80198ac:	688a      	ldr	r2, [r1, #8]
 80198ae:	690b      	ldr	r3, [r1, #16]
 80198b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80198b4:	4293      	cmp	r3, r2
 80198b6:	bfb8      	it	lt
 80198b8:	4613      	movlt	r3, r2
 80198ba:	6033      	str	r3, [r6, #0]
 80198bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80198c0:	4607      	mov	r7, r0
 80198c2:	460c      	mov	r4, r1
 80198c4:	b10a      	cbz	r2, 80198ca <_printf_common+0x26>
 80198c6:	3301      	adds	r3, #1
 80198c8:	6033      	str	r3, [r6, #0]
 80198ca:	6823      	ldr	r3, [r4, #0]
 80198cc:	0699      	lsls	r1, r3, #26
 80198ce:	bf42      	ittt	mi
 80198d0:	6833      	ldrmi	r3, [r6, #0]
 80198d2:	3302      	addmi	r3, #2
 80198d4:	6033      	strmi	r3, [r6, #0]
 80198d6:	6825      	ldr	r5, [r4, #0]
 80198d8:	f015 0506 	ands.w	r5, r5, #6
 80198dc:	d106      	bne.n	80198ec <_printf_common+0x48>
 80198de:	f104 0a19 	add.w	sl, r4, #25
 80198e2:	68e3      	ldr	r3, [r4, #12]
 80198e4:	6832      	ldr	r2, [r6, #0]
 80198e6:	1a9b      	subs	r3, r3, r2
 80198e8:	42ab      	cmp	r3, r5
 80198ea:	dc26      	bgt.n	801993a <_printf_common+0x96>
 80198ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80198f0:	1e13      	subs	r3, r2, #0
 80198f2:	6822      	ldr	r2, [r4, #0]
 80198f4:	bf18      	it	ne
 80198f6:	2301      	movne	r3, #1
 80198f8:	0692      	lsls	r2, r2, #26
 80198fa:	d42b      	bmi.n	8019954 <_printf_common+0xb0>
 80198fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019900:	4649      	mov	r1, r9
 8019902:	4638      	mov	r0, r7
 8019904:	47c0      	blx	r8
 8019906:	3001      	adds	r0, #1
 8019908:	d01e      	beq.n	8019948 <_printf_common+0xa4>
 801990a:	6823      	ldr	r3, [r4, #0]
 801990c:	68e5      	ldr	r5, [r4, #12]
 801990e:	6832      	ldr	r2, [r6, #0]
 8019910:	f003 0306 	and.w	r3, r3, #6
 8019914:	2b04      	cmp	r3, #4
 8019916:	bf08      	it	eq
 8019918:	1aad      	subeq	r5, r5, r2
 801991a:	68a3      	ldr	r3, [r4, #8]
 801991c:	6922      	ldr	r2, [r4, #16]
 801991e:	bf0c      	ite	eq
 8019920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019924:	2500      	movne	r5, #0
 8019926:	4293      	cmp	r3, r2
 8019928:	bfc4      	itt	gt
 801992a:	1a9b      	subgt	r3, r3, r2
 801992c:	18ed      	addgt	r5, r5, r3
 801992e:	2600      	movs	r6, #0
 8019930:	341a      	adds	r4, #26
 8019932:	42b5      	cmp	r5, r6
 8019934:	d11a      	bne.n	801996c <_printf_common+0xc8>
 8019936:	2000      	movs	r0, #0
 8019938:	e008      	b.n	801994c <_printf_common+0xa8>
 801993a:	2301      	movs	r3, #1
 801993c:	4652      	mov	r2, sl
 801993e:	4649      	mov	r1, r9
 8019940:	4638      	mov	r0, r7
 8019942:	47c0      	blx	r8
 8019944:	3001      	adds	r0, #1
 8019946:	d103      	bne.n	8019950 <_printf_common+0xac>
 8019948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019950:	3501      	adds	r5, #1
 8019952:	e7c6      	b.n	80198e2 <_printf_common+0x3e>
 8019954:	18e1      	adds	r1, r4, r3
 8019956:	1c5a      	adds	r2, r3, #1
 8019958:	2030      	movs	r0, #48	; 0x30
 801995a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801995e:	4422      	add	r2, r4
 8019960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019968:	3302      	adds	r3, #2
 801996a:	e7c7      	b.n	80198fc <_printf_common+0x58>
 801996c:	2301      	movs	r3, #1
 801996e:	4622      	mov	r2, r4
 8019970:	4649      	mov	r1, r9
 8019972:	4638      	mov	r0, r7
 8019974:	47c0      	blx	r8
 8019976:	3001      	adds	r0, #1
 8019978:	d0e6      	beq.n	8019948 <_printf_common+0xa4>
 801997a:	3601      	adds	r6, #1
 801997c:	e7d9      	b.n	8019932 <_printf_common+0x8e>
	...

08019980 <_printf_i>:
 8019980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019984:	460c      	mov	r4, r1
 8019986:	4691      	mov	r9, r2
 8019988:	7e27      	ldrb	r7, [r4, #24]
 801998a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801998c:	2f78      	cmp	r7, #120	; 0x78
 801998e:	4680      	mov	r8, r0
 8019990:	469a      	mov	sl, r3
 8019992:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019996:	d807      	bhi.n	80199a8 <_printf_i+0x28>
 8019998:	2f62      	cmp	r7, #98	; 0x62
 801999a:	d80a      	bhi.n	80199b2 <_printf_i+0x32>
 801999c:	2f00      	cmp	r7, #0
 801999e:	f000 80d8 	beq.w	8019b52 <_printf_i+0x1d2>
 80199a2:	2f58      	cmp	r7, #88	; 0x58
 80199a4:	f000 80a3 	beq.w	8019aee <_printf_i+0x16e>
 80199a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80199ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80199b0:	e03a      	b.n	8019a28 <_printf_i+0xa8>
 80199b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80199b6:	2b15      	cmp	r3, #21
 80199b8:	d8f6      	bhi.n	80199a8 <_printf_i+0x28>
 80199ba:	a001      	add	r0, pc, #4	; (adr r0, 80199c0 <_printf_i+0x40>)
 80199bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80199c0:	08019a19 	.word	0x08019a19
 80199c4:	08019a2d 	.word	0x08019a2d
 80199c8:	080199a9 	.word	0x080199a9
 80199cc:	080199a9 	.word	0x080199a9
 80199d0:	080199a9 	.word	0x080199a9
 80199d4:	080199a9 	.word	0x080199a9
 80199d8:	08019a2d 	.word	0x08019a2d
 80199dc:	080199a9 	.word	0x080199a9
 80199e0:	080199a9 	.word	0x080199a9
 80199e4:	080199a9 	.word	0x080199a9
 80199e8:	080199a9 	.word	0x080199a9
 80199ec:	08019b39 	.word	0x08019b39
 80199f0:	08019a5d 	.word	0x08019a5d
 80199f4:	08019b1b 	.word	0x08019b1b
 80199f8:	080199a9 	.word	0x080199a9
 80199fc:	080199a9 	.word	0x080199a9
 8019a00:	08019b5b 	.word	0x08019b5b
 8019a04:	080199a9 	.word	0x080199a9
 8019a08:	08019a5d 	.word	0x08019a5d
 8019a0c:	080199a9 	.word	0x080199a9
 8019a10:	080199a9 	.word	0x080199a9
 8019a14:	08019b23 	.word	0x08019b23
 8019a18:	680b      	ldr	r3, [r1, #0]
 8019a1a:	1d1a      	adds	r2, r3, #4
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	600a      	str	r2, [r1, #0]
 8019a20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019a28:	2301      	movs	r3, #1
 8019a2a:	e0a3      	b.n	8019b74 <_printf_i+0x1f4>
 8019a2c:	6825      	ldr	r5, [r4, #0]
 8019a2e:	6808      	ldr	r0, [r1, #0]
 8019a30:	062e      	lsls	r6, r5, #24
 8019a32:	f100 0304 	add.w	r3, r0, #4
 8019a36:	d50a      	bpl.n	8019a4e <_printf_i+0xce>
 8019a38:	6805      	ldr	r5, [r0, #0]
 8019a3a:	600b      	str	r3, [r1, #0]
 8019a3c:	2d00      	cmp	r5, #0
 8019a3e:	da03      	bge.n	8019a48 <_printf_i+0xc8>
 8019a40:	232d      	movs	r3, #45	; 0x2d
 8019a42:	426d      	negs	r5, r5
 8019a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a48:	485e      	ldr	r0, [pc, #376]	; (8019bc4 <_printf_i+0x244>)
 8019a4a:	230a      	movs	r3, #10
 8019a4c:	e019      	b.n	8019a82 <_printf_i+0x102>
 8019a4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019a52:	6805      	ldr	r5, [r0, #0]
 8019a54:	600b      	str	r3, [r1, #0]
 8019a56:	bf18      	it	ne
 8019a58:	b22d      	sxthne	r5, r5
 8019a5a:	e7ef      	b.n	8019a3c <_printf_i+0xbc>
 8019a5c:	680b      	ldr	r3, [r1, #0]
 8019a5e:	6825      	ldr	r5, [r4, #0]
 8019a60:	1d18      	adds	r0, r3, #4
 8019a62:	6008      	str	r0, [r1, #0]
 8019a64:	0628      	lsls	r0, r5, #24
 8019a66:	d501      	bpl.n	8019a6c <_printf_i+0xec>
 8019a68:	681d      	ldr	r5, [r3, #0]
 8019a6a:	e002      	b.n	8019a72 <_printf_i+0xf2>
 8019a6c:	0669      	lsls	r1, r5, #25
 8019a6e:	d5fb      	bpl.n	8019a68 <_printf_i+0xe8>
 8019a70:	881d      	ldrh	r5, [r3, #0]
 8019a72:	4854      	ldr	r0, [pc, #336]	; (8019bc4 <_printf_i+0x244>)
 8019a74:	2f6f      	cmp	r7, #111	; 0x6f
 8019a76:	bf0c      	ite	eq
 8019a78:	2308      	moveq	r3, #8
 8019a7a:	230a      	movne	r3, #10
 8019a7c:	2100      	movs	r1, #0
 8019a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019a82:	6866      	ldr	r6, [r4, #4]
 8019a84:	60a6      	str	r6, [r4, #8]
 8019a86:	2e00      	cmp	r6, #0
 8019a88:	bfa2      	ittt	ge
 8019a8a:	6821      	ldrge	r1, [r4, #0]
 8019a8c:	f021 0104 	bicge.w	r1, r1, #4
 8019a90:	6021      	strge	r1, [r4, #0]
 8019a92:	b90d      	cbnz	r5, 8019a98 <_printf_i+0x118>
 8019a94:	2e00      	cmp	r6, #0
 8019a96:	d04d      	beq.n	8019b34 <_printf_i+0x1b4>
 8019a98:	4616      	mov	r6, r2
 8019a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8019a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8019aa2:	5dc7      	ldrb	r7, [r0, r7]
 8019aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019aa8:	462f      	mov	r7, r5
 8019aaa:	42bb      	cmp	r3, r7
 8019aac:	460d      	mov	r5, r1
 8019aae:	d9f4      	bls.n	8019a9a <_printf_i+0x11a>
 8019ab0:	2b08      	cmp	r3, #8
 8019ab2:	d10b      	bne.n	8019acc <_printf_i+0x14c>
 8019ab4:	6823      	ldr	r3, [r4, #0]
 8019ab6:	07df      	lsls	r7, r3, #31
 8019ab8:	d508      	bpl.n	8019acc <_printf_i+0x14c>
 8019aba:	6923      	ldr	r3, [r4, #16]
 8019abc:	6861      	ldr	r1, [r4, #4]
 8019abe:	4299      	cmp	r1, r3
 8019ac0:	bfde      	ittt	le
 8019ac2:	2330      	movle	r3, #48	; 0x30
 8019ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019ac8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8019acc:	1b92      	subs	r2, r2, r6
 8019ace:	6122      	str	r2, [r4, #16]
 8019ad0:	f8cd a000 	str.w	sl, [sp]
 8019ad4:	464b      	mov	r3, r9
 8019ad6:	aa03      	add	r2, sp, #12
 8019ad8:	4621      	mov	r1, r4
 8019ada:	4640      	mov	r0, r8
 8019adc:	f7ff fee2 	bl	80198a4 <_printf_common>
 8019ae0:	3001      	adds	r0, #1
 8019ae2:	d14c      	bne.n	8019b7e <_printf_i+0x1fe>
 8019ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ae8:	b004      	add	sp, #16
 8019aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019aee:	4835      	ldr	r0, [pc, #212]	; (8019bc4 <_printf_i+0x244>)
 8019af0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019af4:	6823      	ldr	r3, [r4, #0]
 8019af6:	680e      	ldr	r6, [r1, #0]
 8019af8:	061f      	lsls	r7, r3, #24
 8019afa:	f856 5b04 	ldr.w	r5, [r6], #4
 8019afe:	600e      	str	r6, [r1, #0]
 8019b00:	d514      	bpl.n	8019b2c <_printf_i+0x1ac>
 8019b02:	07d9      	lsls	r1, r3, #31
 8019b04:	bf44      	itt	mi
 8019b06:	f043 0320 	orrmi.w	r3, r3, #32
 8019b0a:	6023      	strmi	r3, [r4, #0]
 8019b0c:	b91d      	cbnz	r5, 8019b16 <_printf_i+0x196>
 8019b0e:	6823      	ldr	r3, [r4, #0]
 8019b10:	f023 0320 	bic.w	r3, r3, #32
 8019b14:	6023      	str	r3, [r4, #0]
 8019b16:	2310      	movs	r3, #16
 8019b18:	e7b0      	b.n	8019a7c <_printf_i+0xfc>
 8019b1a:	6823      	ldr	r3, [r4, #0]
 8019b1c:	f043 0320 	orr.w	r3, r3, #32
 8019b20:	6023      	str	r3, [r4, #0]
 8019b22:	2378      	movs	r3, #120	; 0x78
 8019b24:	4828      	ldr	r0, [pc, #160]	; (8019bc8 <_printf_i+0x248>)
 8019b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019b2a:	e7e3      	b.n	8019af4 <_printf_i+0x174>
 8019b2c:	065e      	lsls	r6, r3, #25
 8019b2e:	bf48      	it	mi
 8019b30:	b2ad      	uxthmi	r5, r5
 8019b32:	e7e6      	b.n	8019b02 <_printf_i+0x182>
 8019b34:	4616      	mov	r6, r2
 8019b36:	e7bb      	b.n	8019ab0 <_printf_i+0x130>
 8019b38:	680b      	ldr	r3, [r1, #0]
 8019b3a:	6826      	ldr	r6, [r4, #0]
 8019b3c:	6960      	ldr	r0, [r4, #20]
 8019b3e:	1d1d      	adds	r5, r3, #4
 8019b40:	600d      	str	r5, [r1, #0]
 8019b42:	0635      	lsls	r5, r6, #24
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	d501      	bpl.n	8019b4c <_printf_i+0x1cc>
 8019b48:	6018      	str	r0, [r3, #0]
 8019b4a:	e002      	b.n	8019b52 <_printf_i+0x1d2>
 8019b4c:	0671      	lsls	r1, r6, #25
 8019b4e:	d5fb      	bpl.n	8019b48 <_printf_i+0x1c8>
 8019b50:	8018      	strh	r0, [r3, #0]
 8019b52:	2300      	movs	r3, #0
 8019b54:	6123      	str	r3, [r4, #16]
 8019b56:	4616      	mov	r6, r2
 8019b58:	e7ba      	b.n	8019ad0 <_printf_i+0x150>
 8019b5a:	680b      	ldr	r3, [r1, #0]
 8019b5c:	1d1a      	adds	r2, r3, #4
 8019b5e:	600a      	str	r2, [r1, #0]
 8019b60:	681e      	ldr	r6, [r3, #0]
 8019b62:	6862      	ldr	r2, [r4, #4]
 8019b64:	2100      	movs	r1, #0
 8019b66:	4630      	mov	r0, r6
 8019b68:	f7e6 fb4a 	bl	8000200 <memchr>
 8019b6c:	b108      	cbz	r0, 8019b72 <_printf_i+0x1f2>
 8019b6e:	1b80      	subs	r0, r0, r6
 8019b70:	6060      	str	r0, [r4, #4]
 8019b72:	6863      	ldr	r3, [r4, #4]
 8019b74:	6123      	str	r3, [r4, #16]
 8019b76:	2300      	movs	r3, #0
 8019b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b7c:	e7a8      	b.n	8019ad0 <_printf_i+0x150>
 8019b7e:	6923      	ldr	r3, [r4, #16]
 8019b80:	4632      	mov	r2, r6
 8019b82:	4649      	mov	r1, r9
 8019b84:	4640      	mov	r0, r8
 8019b86:	47d0      	blx	sl
 8019b88:	3001      	adds	r0, #1
 8019b8a:	d0ab      	beq.n	8019ae4 <_printf_i+0x164>
 8019b8c:	6823      	ldr	r3, [r4, #0]
 8019b8e:	079b      	lsls	r3, r3, #30
 8019b90:	d413      	bmi.n	8019bba <_printf_i+0x23a>
 8019b92:	68e0      	ldr	r0, [r4, #12]
 8019b94:	9b03      	ldr	r3, [sp, #12]
 8019b96:	4298      	cmp	r0, r3
 8019b98:	bfb8      	it	lt
 8019b9a:	4618      	movlt	r0, r3
 8019b9c:	e7a4      	b.n	8019ae8 <_printf_i+0x168>
 8019b9e:	2301      	movs	r3, #1
 8019ba0:	4632      	mov	r2, r6
 8019ba2:	4649      	mov	r1, r9
 8019ba4:	4640      	mov	r0, r8
 8019ba6:	47d0      	blx	sl
 8019ba8:	3001      	adds	r0, #1
 8019baa:	d09b      	beq.n	8019ae4 <_printf_i+0x164>
 8019bac:	3501      	adds	r5, #1
 8019bae:	68e3      	ldr	r3, [r4, #12]
 8019bb0:	9903      	ldr	r1, [sp, #12]
 8019bb2:	1a5b      	subs	r3, r3, r1
 8019bb4:	42ab      	cmp	r3, r5
 8019bb6:	dcf2      	bgt.n	8019b9e <_printf_i+0x21e>
 8019bb8:	e7eb      	b.n	8019b92 <_printf_i+0x212>
 8019bba:	2500      	movs	r5, #0
 8019bbc:	f104 0619 	add.w	r6, r4, #25
 8019bc0:	e7f5      	b.n	8019bae <_printf_i+0x22e>
 8019bc2:	bf00      	nop
 8019bc4:	0801b1d1 	.word	0x0801b1d1
 8019bc8:	0801b1e2 	.word	0x0801b1e2

08019bcc <__sread>:
 8019bcc:	b510      	push	{r4, lr}
 8019bce:	460c      	mov	r4, r1
 8019bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bd4:	f000 fa68 	bl	801a0a8 <_read_r>
 8019bd8:	2800      	cmp	r0, #0
 8019bda:	bfab      	itete	ge
 8019bdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019bde:	89a3      	ldrhlt	r3, [r4, #12]
 8019be0:	181b      	addge	r3, r3, r0
 8019be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019be6:	bfac      	ite	ge
 8019be8:	6563      	strge	r3, [r4, #84]	; 0x54
 8019bea:	81a3      	strhlt	r3, [r4, #12]
 8019bec:	bd10      	pop	{r4, pc}

08019bee <__swrite>:
 8019bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bf2:	461f      	mov	r7, r3
 8019bf4:	898b      	ldrh	r3, [r1, #12]
 8019bf6:	05db      	lsls	r3, r3, #23
 8019bf8:	4605      	mov	r5, r0
 8019bfa:	460c      	mov	r4, r1
 8019bfc:	4616      	mov	r6, r2
 8019bfe:	d505      	bpl.n	8019c0c <__swrite+0x1e>
 8019c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c04:	2302      	movs	r3, #2
 8019c06:	2200      	movs	r2, #0
 8019c08:	f000 f9d0 	bl	8019fac <_lseek_r>
 8019c0c:	89a3      	ldrh	r3, [r4, #12]
 8019c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019c16:	81a3      	strh	r3, [r4, #12]
 8019c18:	4632      	mov	r2, r6
 8019c1a:	463b      	mov	r3, r7
 8019c1c:	4628      	mov	r0, r5
 8019c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c22:	f000 b869 	b.w	8019cf8 <_write_r>

08019c26 <__sseek>:
 8019c26:	b510      	push	{r4, lr}
 8019c28:	460c      	mov	r4, r1
 8019c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c2e:	f000 f9bd 	bl	8019fac <_lseek_r>
 8019c32:	1c43      	adds	r3, r0, #1
 8019c34:	89a3      	ldrh	r3, [r4, #12]
 8019c36:	bf15      	itete	ne
 8019c38:	6560      	strne	r0, [r4, #84]	; 0x54
 8019c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019c42:	81a3      	strheq	r3, [r4, #12]
 8019c44:	bf18      	it	ne
 8019c46:	81a3      	strhne	r3, [r4, #12]
 8019c48:	bd10      	pop	{r4, pc}

08019c4a <__sclose>:
 8019c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c4e:	f000 b8db 	b.w	8019e08 <_close_r>
	...

08019c54 <__swbuf_r>:
 8019c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c56:	460e      	mov	r6, r1
 8019c58:	4614      	mov	r4, r2
 8019c5a:	4605      	mov	r5, r0
 8019c5c:	b118      	cbz	r0, 8019c66 <__swbuf_r+0x12>
 8019c5e:	6983      	ldr	r3, [r0, #24]
 8019c60:	b90b      	cbnz	r3, 8019c66 <__swbuf_r+0x12>
 8019c62:	f7ff fa85 	bl	8019170 <__sinit>
 8019c66:	4b21      	ldr	r3, [pc, #132]	; (8019cec <__swbuf_r+0x98>)
 8019c68:	429c      	cmp	r4, r3
 8019c6a:	d12b      	bne.n	8019cc4 <__swbuf_r+0x70>
 8019c6c:	686c      	ldr	r4, [r5, #4]
 8019c6e:	69a3      	ldr	r3, [r4, #24]
 8019c70:	60a3      	str	r3, [r4, #8]
 8019c72:	89a3      	ldrh	r3, [r4, #12]
 8019c74:	071a      	lsls	r2, r3, #28
 8019c76:	d52f      	bpl.n	8019cd8 <__swbuf_r+0x84>
 8019c78:	6923      	ldr	r3, [r4, #16]
 8019c7a:	b36b      	cbz	r3, 8019cd8 <__swbuf_r+0x84>
 8019c7c:	6923      	ldr	r3, [r4, #16]
 8019c7e:	6820      	ldr	r0, [r4, #0]
 8019c80:	1ac0      	subs	r0, r0, r3
 8019c82:	6963      	ldr	r3, [r4, #20]
 8019c84:	b2f6      	uxtb	r6, r6
 8019c86:	4283      	cmp	r3, r0
 8019c88:	4637      	mov	r7, r6
 8019c8a:	dc04      	bgt.n	8019c96 <__swbuf_r+0x42>
 8019c8c:	4621      	mov	r1, r4
 8019c8e:	4628      	mov	r0, r5
 8019c90:	f000 f950 	bl	8019f34 <_fflush_r>
 8019c94:	bb30      	cbnz	r0, 8019ce4 <__swbuf_r+0x90>
 8019c96:	68a3      	ldr	r3, [r4, #8]
 8019c98:	3b01      	subs	r3, #1
 8019c9a:	60a3      	str	r3, [r4, #8]
 8019c9c:	6823      	ldr	r3, [r4, #0]
 8019c9e:	1c5a      	adds	r2, r3, #1
 8019ca0:	6022      	str	r2, [r4, #0]
 8019ca2:	701e      	strb	r6, [r3, #0]
 8019ca4:	6963      	ldr	r3, [r4, #20]
 8019ca6:	3001      	adds	r0, #1
 8019ca8:	4283      	cmp	r3, r0
 8019caa:	d004      	beq.n	8019cb6 <__swbuf_r+0x62>
 8019cac:	89a3      	ldrh	r3, [r4, #12]
 8019cae:	07db      	lsls	r3, r3, #31
 8019cb0:	d506      	bpl.n	8019cc0 <__swbuf_r+0x6c>
 8019cb2:	2e0a      	cmp	r6, #10
 8019cb4:	d104      	bne.n	8019cc0 <__swbuf_r+0x6c>
 8019cb6:	4621      	mov	r1, r4
 8019cb8:	4628      	mov	r0, r5
 8019cba:	f000 f93b 	bl	8019f34 <_fflush_r>
 8019cbe:	b988      	cbnz	r0, 8019ce4 <__swbuf_r+0x90>
 8019cc0:	4638      	mov	r0, r7
 8019cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cc4:	4b0a      	ldr	r3, [pc, #40]	; (8019cf0 <__swbuf_r+0x9c>)
 8019cc6:	429c      	cmp	r4, r3
 8019cc8:	d101      	bne.n	8019cce <__swbuf_r+0x7a>
 8019cca:	68ac      	ldr	r4, [r5, #8]
 8019ccc:	e7cf      	b.n	8019c6e <__swbuf_r+0x1a>
 8019cce:	4b09      	ldr	r3, [pc, #36]	; (8019cf4 <__swbuf_r+0xa0>)
 8019cd0:	429c      	cmp	r4, r3
 8019cd2:	bf08      	it	eq
 8019cd4:	68ec      	ldreq	r4, [r5, #12]
 8019cd6:	e7ca      	b.n	8019c6e <__swbuf_r+0x1a>
 8019cd8:	4621      	mov	r1, r4
 8019cda:	4628      	mov	r0, r5
 8019cdc:	f000 f81e 	bl	8019d1c <__swsetup_r>
 8019ce0:	2800      	cmp	r0, #0
 8019ce2:	d0cb      	beq.n	8019c7c <__swbuf_r+0x28>
 8019ce4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019ce8:	e7ea      	b.n	8019cc0 <__swbuf_r+0x6c>
 8019cea:	bf00      	nop
 8019cec:	0801b180 	.word	0x0801b180
 8019cf0:	0801b1a0 	.word	0x0801b1a0
 8019cf4:	0801b160 	.word	0x0801b160

08019cf8 <_write_r>:
 8019cf8:	b538      	push	{r3, r4, r5, lr}
 8019cfa:	4d07      	ldr	r5, [pc, #28]	; (8019d18 <_write_r+0x20>)
 8019cfc:	4604      	mov	r4, r0
 8019cfe:	4608      	mov	r0, r1
 8019d00:	4611      	mov	r1, r2
 8019d02:	2200      	movs	r2, #0
 8019d04:	602a      	str	r2, [r5, #0]
 8019d06:	461a      	mov	r2, r3
 8019d08:	f7e7 fd29 	bl	800175e <_write>
 8019d0c:	1c43      	adds	r3, r0, #1
 8019d0e:	d102      	bne.n	8019d16 <_write_r+0x1e>
 8019d10:	682b      	ldr	r3, [r5, #0]
 8019d12:	b103      	cbz	r3, 8019d16 <_write_r+0x1e>
 8019d14:	6023      	str	r3, [r4, #0]
 8019d16:	bd38      	pop	{r3, r4, r5, pc}
 8019d18:	2000f9b8 	.word	0x2000f9b8

08019d1c <__swsetup_r>:
 8019d1c:	4b32      	ldr	r3, [pc, #200]	; (8019de8 <__swsetup_r+0xcc>)
 8019d1e:	b570      	push	{r4, r5, r6, lr}
 8019d20:	681d      	ldr	r5, [r3, #0]
 8019d22:	4606      	mov	r6, r0
 8019d24:	460c      	mov	r4, r1
 8019d26:	b125      	cbz	r5, 8019d32 <__swsetup_r+0x16>
 8019d28:	69ab      	ldr	r3, [r5, #24]
 8019d2a:	b913      	cbnz	r3, 8019d32 <__swsetup_r+0x16>
 8019d2c:	4628      	mov	r0, r5
 8019d2e:	f7ff fa1f 	bl	8019170 <__sinit>
 8019d32:	4b2e      	ldr	r3, [pc, #184]	; (8019dec <__swsetup_r+0xd0>)
 8019d34:	429c      	cmp	r4, r3
 8019d36:	d10f      	bne.n	8019d58 <__swsetup_r+0x3c>
 8019d38:	686c      	ldr	r4, [r5, #4]
 8019d3a:	89a3      	ldrh	r3, [r4, #12]
 8019d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019d40:	0719      	lsls	r1, r3, #28
 8019d42:	d42c      	bmi.n	8019d9e <__swsetup_r+0x82>
 8019d44:	06dd      	lsls	r5, r3, #27
 8019d46:	d411      	bmi.n	8019d6c <__swsetup_r+0x50>
 8019d48:	2309      	movs	r3, #9
 8019d4a:	6033      	str	r3, [r6, #0]
 8019d4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019d50:	81a3      	strh	r3, [r4, #12]
 8019d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d56:	e03e      	b.n	8019dd6 <__swsetup_r+0xba>
 8019d58:	4b25      	ldr	r3, [pc, #148]	; (8019df0 <__swsetup_r+0xd4>)
 8019d5a:	429c      	cmp	r4, r3
 8019d5c:	d101      	bne.n	8019d62 <__swsetup_r+0x46>
 8019d5e:	68ac      	ldr	r4, [r5, #8]
 8019d60:	e7eb      	b.n	8019d3a <__swsetup_r+0x1e>
 8019d62:	4b24      	ldr	r3, [pc, #144]	; (8019df4 <__swsetup_r+0xd8>)
 8019d64:	429c      	cmp	r4, r3
 8019d66:	bf08      	it	eq
 8019d68:	68ec      	ldreq	r4, [r5, #12]
 8019d6a:	e7e6      	b.n	8019d3a <__swsetup_r+0x1e>
 8019d6c:	0758      	lsls	r0, r3, #29
 8019d6e:	d512      	bpl.n	8019d96 <__swsetup_r+0x7a>
 8019d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d72:	b141      	cbz	r1, 8019d86 <__swsetup_r+0x6a>
 8019d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d78:	4299      	cmp	r1, r3
 8019d7a:	d002      	beq.n	8019d82 <__swsetup_r+0x66>
 8019d7c:	4630      	mov	r0, r6
 8019d7e:	f7fe fefb 	bl	8018b78 <_free_r>
 8019d82:	2300      	movs	r3, #0
 8019d84:	6363      	str	r3, [r4, #52]	; 0x34
 8019d86:	89a3      	ldrh	r3, [r4, #12]
 8019d88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019d8c:	81a3      	strh	r3, [r4, #12]
 8019d8e:	2300      	movs	r3, #0
 8019d90:	6063      	str	r3, [r4, #4]
 8019d92:	6923      	ldr	r3, [r4, #16]
 8019d94:	6023      	str	r3, [r4, #0]
 8019d96:	89a3      	ldrh	r3, [r4, #12]
 8019d98:	f043 0308 	orr.w	r3, r3, #8
 8019d9c:	81a3      	strh	r3, [r4, #12]
 8019d9e:	6923      	ldr	r3, [r4, #16]
 8019da0:	b94b      	cbnz	r3, 8019db6 <__swsetup_r+0x9a>
 8019da2:	89a3      	ldrh	r3, [r4, #12]
 8019da4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019dac:	d003      	beq.n	8019db6 <__swsetup_r+0x9a>
 8019dae:	4621      	mov	r1, r4
 8019db0:	4630      	mov	r0, r6
 8019db2:	f000 f931 	bl	801a018 <__smakebuf_r>
 8019db6:	89a0      	ldrh	r0, [r4, #12]
 8019db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019dbc:	f010 0301 	ands.w	r3, r0, #1
 8019dc0:	d00a      	beq.n	8019dd8 <__swsetup_r+0xbc>
 8019dc2:	2300      	movs	r3, #0
 8019dc4:	60a3      	str	r3, [r4, #8]
 8019dc6:	6963      	ldr	r3, [r4, #20]
 8019dc8:	425b      	negs	r3, r3
 8019dca:	61a3      	str	r3, [r4, #24]
 8019dcc:	6923      	ldr	r3, [r4, #16]
 8019dce:	b943      	cbnz	r3, 8019de2 <__swsetup_r+0xc6>
 8019dd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019dd4:	d1ba      	bne.n	8019d4c <__swsetup_r+0x30>
 8019dd6:	bd70      	pop	{r4, r5, r6, pc}
 8019dd8:	0781      	lsls	r1, r0, #30
 8019dda:	bf58      	it	pl
 8019ddc:	6963      	ldrpl	r3, [r4, #20]
 8019dde:	60a3      	str	r3, [r4, #8]
 8019de0:	e7f4      	b.n	8019dcc <__swsetup_r+0xb0>
 8019de2:	2000      	movs	r0, #0
 8019de4:	e7f7      	b.n	8019dd6 <__swsetup_r+0xba>
 8019de6:	bf00      	nop
 8019de8:	200003d8 	.word	0x200003d8
 8019dec:	0801b180 	.word	0x0801b180
 8019df0:	0801b1a0 	.word	0x0801b1a0
 8019df4:	0801b160 	.word	0x0801b160

08019df8 <abort>:
 8019df8:	b508      	push	{r3, lr}
 8019dfa:	2006      	movs	r0, #6
 8019dfc:	f000 f98e 	bl	801a11c <raise>
 8019e00:	2001      	movs	r0, #1
 8019e02:	f7e7 fc85 	bl	8001710 <_exit>
	...

08019e08 <_close_r>:
 8019e08:	b538      	push	{r3, r4, r5, lr}
 8019e0a:	4d06      	ldr	r5, [pc, #24]	; (8019e24 <_close_r+0x1c>)
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	4604      	mov	r4, r0
 8019e10:	4608      	mov	r0, r1
 8019e12:	602b      	str	r3, [r5, #0]
 8019e14:	f7e7 fcbf 	bl	8001796 <_close>
 8019e18:	1c43      	adds	r3, r0, #1
 8019e1a:	d102      	bne.n	8019e22 <_close_r+0x1a>
 8019e1c:	682b      	ldr	r3, [r5, #0]
 8019e1e:	b103      	cbz	r3, 8019e22 <_close_r+0x1a>
 8019e20:	6023      	str	r3, [r4, #0]
 8019e22:	bd38      	pop	{r3, r4, r5, pc}
 8019e24:	2000f9b8 	.word	0x2000f9b8

08019e28 <__sflush_r>:
 8019e28:	898a      	ldrh	r2, [r1, #12]
 8019e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e2e:	4605      	mov	r5, r0
 8019e30:	0710      	lsls	r0, r2, #28
 8019e32:	460c      	mov	r4, r1
 8019e34:	d458      	bmi.n	8019ee8 <__sflush_r+0xc0>
 8019e36:	684b      	ldr	r3, [r1, #4]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	dc05      	bgt.n	8019e48 <__sflush_r+0x20>
 8019e3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	dc02      	bgt.n	8019e48 <__sflush_r+0x20>
 8019e42:	2000      	movs	r0, #0
 8019e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019e4a:	2e00      	cmp	r6, #0
 8019e4c:	d0f9      	beq.n	8019e42 <__sflush_r+0x1a>
 8019e4e:	2300      	movs	r3, #0
 8019e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019e54:	682f      	ldr	r7, [r5, #0]
 8019e56:	602b      	str	r3, [r5, #0]
 8019e58:	d032      	beq.n	8019ec0 <__sflush_r+0x98>
 8019e5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019e5c:	89a3      	ldrh	r3, [r4, #12]
 8019e5e:	075a      	lsls	r2, r3, #29
 8019e60:	d505      	bpl.n	8019e6e <__sflush_r+0x46>
 8019e62:	6863      	ldr	r3, [r4, #4]
 8019e64:	1ac0      	subs	r0, r0, r3
 8019e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019e68:	b10b      	cbz	r3, 8019e6e <__sflush_r+0x46>
 8019e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019e6c:	1ac0      	subs	r0, r0, r3
 8019e6e:	2300      	movs	r3, #0
 8019e70:	4602      	mov	r2, r0
 8019e72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019e74:	6a21      	ldr	r1, [r4, #32]
 8019e76:	4628      	mov	r0, r5
 8019e78:	47b0      	blx	r6
 8019e7a:	1c43      	adds	r3, r0, #1
 8019e7c:	89a3      	ldrh	r3, [r4, #12]
 8019e7e:	d106      	bne.n	8019e8e <__sflush_r+0x66>
 8019e80:	6829      	ldr	r1, [r5, #0]
 8019e82:	291d      	cmp	r1, #29
 8019e84:	d82c      	bhi.n	8019ee0 <__sflush_r+0xb8>
 8019e86:	4a2a      	ldr	r2, [pc, #168]	; (8019f30 <__sflush_r+0x108>)
 8019e88:	40ca      	lsrs	r2, r1
 8019e8a:	07d6      	lsls	r6, r2, #31
 8019e8c:	d528      	bpl.n	8019ee0 <__sflush_r+0xb8>
 8019e8e:	2200      	movs	r2, #0
 8019e90:	6062      	str	r2, [r4, #4]
 8019e92:	04d9      	lsls	r1, r3, #19
 8019e94:	6922      	ldr	r2, [r4, #16]
 8019e96:	6022      	str	r2, [r4, #0]
 8019e98:	d504      	bpl.n	8019ea4 <__sflush_r+0x7c>
 8019e9a:	1c42      	adds	r2, r0, #1
 8019e9c:	d101      	bne.n	8019ea2 <__sflush_r+0x7a>
 8019e9e:	682b      	ldr	r3, [r5, #0]
 8019ea0:	b903      	cbnz	r3, 8019ea4 <__sflush_r+0x7c>
 8019ea2:	6560      	str	r0, [r4, #84]	; 0x54
 8019ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ea6:	602f      	str	r7, [r5, #0]
 8019ea8:	2900      	cmp	r1, #0
 8019eaa:	d0ca      	beq.n	8019e42 <__sflush_r+0x1a>
 8019eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019eb0:	4299      	cmp	r1, r3
 8019eb2:	d002      	beq.n	8019eba <__sflush_r+0x92>
 8019eb4:	4628      	mov	r0, r5
 8019eb6:	f7fe fe5f 	bl	8018b78 <_free_r>
 8019eba:	2000      	movs	r0, #0
 8019ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8019ebe:	e7c1      	b.n	8019e44 <__sflush_r+0x1c>
 8019ec0:	6a21      	ldr	r1, [r4, #32]
 8019ec2:	2301      	movs	r3, #1
 8019ec4:	4628      	mov	r0, r5
 8019ec6:	47b0      	blx	r6
 8019ec8:	1c41      	adds	r1, r0, #1
 8019eca:	d1c7      	bne.n	8019e5c <__sflush_r+0x34>
 8019ecc:	682b      	ldr	r3, [r5, #0]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d0c4      	beq.n	8019e5c <__sflush_r+0x34>
 8019ed2:	2b1d      	cmp	r3, #29
 8019ed4:	d001      	beq.n	8019eda <__sflush_r+0xb2>
 8019ed6:	2b16      	cmp	r3, #22
 8019ed8:	d101      	bne.n	8019ede <__sflush_r+0xb6>
 8019eda:	602f      	str	r7, [r5, #0]
 8019edc:	e7b1      	b.n	8019e42 <__sflush_r+0x1a>
 8019ede:	89a3      	ldrh	r3, [r4, #12]
 8019ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ee4:	81a3      	strh	r3, [r4, #12]
 8019ee6:	e7ad      	b.n	8019e44 <__sflush_r+0x1c>
 8019ee8:	690f      	ldr	r7, [r1, #16]
 8019eea:	2f00      	cmp	r7, #0
 8019eec:	d0a9      	beq.n	8019e42 <__sflush_r+0x1a>
 8019eee:	0793      	lsls	r3, r2, #30
 8019ef0:	680e      	ldr	r6, [r1, #0]
 8019ef2:	bf08      	it	eq
 8019ef4:	694b      	ldreq	r3, [r1, #20]
 8019ef6:	600f      	str	r7, [r1, #0]
 8019ef8:	bf18      	it	ne
 8019efa:	2300      	movne	r3, #0
 8019efc:	eba6 0807 	sub.w	r8, r6, r7
 8019f00:	608b      	str	r3, [r1, #8]
 8019f02:	f1b8 0f00 	cmp.w	r8, #0
 8019f06:	dd9c      	ble.n	8019e42 <__sflush_r+0x1a>
 8019f08:	6a21      	ldr	r1, [r4, #32]
 8019f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019f0c:	4643      	mov	r3, r8
 8019f0e:	463a      	mov	r2, r7
 8019f10:	4628      	mov	r0, r5
 8019f12:	47b0      	blx	r6
 8019f14:	2800      	cmp	r0, #0
 8019f16:	dc06      	bgt.n	8019f26 <__sflush_r+0xfe>
 8019f18:	89a3      	ldrh	r3, [r4, #12]
 8019f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f1e:	81a3      	strh	r3, [r4, #12]
 8019f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f24:	e78e      	b.n	8019e44 <__sflush_r+0x1c>
 8019f26:	4407      	add	r7, r0
 8019f28:	eba8 0800 	sub.w	r8, r8, r0
 8019f2c:	e7e9      	b.n	8019f02 <__sflush_r+0xda>
 8019f2e:	bf00      	nop
 8019f30:	20400001 	.word	0x20400001

08019f34 <_fflush_r>:
 8019f34:	b538      	push	{r3, r4, r5, lr}
 8019f36:	690b      	ldr	r3, [r1, #16]
 8019f38:	4605      	mov	r5, r0
 8019f3a:	460c      	mov	r4, r1
 8019f3c:	b913      	cbnz	r3, 8019f44 <_fflush_r+0x10>
 8019f3e:	2500      	movs	r5, #0
 8019f40:	4628      	mov	r0, r5
 8019f42:	bd38      	pop	{r3, r4, r5, pc}
 8019f44:	b118      	cbz	r0, 8019f4e <_fflush_r+0x1a>
 8019f46:	6983      	ldr	r3, [r0, #24]
 8019f48:	b90b      	cbnz	r3, 8019f4e <_fflush_r+0x1a>
 8019f4a:	f7ff f911 	bl	8019170 <__sinit>
 8019f4e:	4b14      	ldr	r3, [pc, #80]	; (8019fa0 <_fflush_r+0x6c>)
 8019f50:	429c      	cmp	r4, r3
 8019f52:	d11b      	bne.n	8019f8c <_fflush_r+0x58>
 8019f54:	686c      	ldr	r4, [r5, #4]
 8019f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d0ef      	beq.n	8019f3e <_fflush_r+0xa>
 8019f5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019f60:	07d0      	lsls	r0, r2, #31
 8019f62:	d404      	bmi.n	8019f6e <_fflush_r+0x3a>
 8019f64:	0599      	lsls	r1, r3, #22
 8019f66:	d402      	bmi.n	8019f6e <_fflush_r+0x3a>
 8019f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f6a:	f7ff f9b1 	bl	80192d0 <__retarget_lock_acquire_recursive>
 8019f6e:	4628      	mov	r0, r5
 8019f70:	4621      	mov	r1, r4
 8019f72:	f7ff ff59 	bl	8019e28 <__sflush_r>
 8019f76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019f78:	07da      	lsls	r2, r3, #31
 8019f7a:	4605      	mov	r5, r0
 8019f7c:	d4e0      	bmi.n	8019f40 <_fflush_r+0xc>
 8019f7e:	89a3      	ldrh	r3, [r4, #12]
 8019f80:	059b      	lsls	r3, r3, #22
 8019f82:	d4dd      	bmi.n	8019f40 <_fflush_r+0xc>
 8019f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f86:	f7ff f9a4 	bl	80192d2 <__retarget_lock_release_recursive>
 8019f8a:	e7d9      	b.n	8019f40 <_fflush_r+0xc>
 8019f8c:	4b05      	ldr	r3, [pc, #20]	; (8019fa4 <_fflush_r+0x70>)
 8019f8e:	429c      	cmp	r4, r3
 8019f90:	d101      	bne.n	8019f96 <_fflush_r+0x62>
 8019f92:	68ac      	ldr	r4, [r5, #8]
 8019f94:	e7df      	b.n	8019f56 <_fflush_r+0x22>
 8019f96:	4b04      	ldr	r3, [pc, #16]	; (8019fa8 <_fflush_r+0x74>)
 8019f98:	429c      	cmp	r4, r3
 8019f9a:	bf08      	it	eq
 8019f9c:	68ec      	ldreq	r4, [r5, #12]
 8019f9e:	e7da      	b.n	8019f56 <_fflush_r+0x22>
 8019fa0:	0801b180 	.word	0x0801b180
 8019fa4:	0801b1a0 	.word	0x0801b1a0
 8019fa8:	0801b160 	.word	0x0801b160

08019fac <_lseek_r>:
 8019fac:	b538      	push	{r3, r4, r5, lr}
 8019fae:	4d07      	ldr	r5, [pc, #28]	; (8019fcc <_lseek_r+0x20>)
 8019fb0:	4604      	mov	r4, r0
 8019fb2:	4608      	mov	r0, r1
 8019fb4:	4611      	mov	r1, r2
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	602a      	str	r2, [r5, #0]
 8019fba:	461a      	mov	r2, r3
 8019fbc:	f7e7 fc12 	bl	80017e4 <_lseek>
 8019fc0:	1c43      	adds	r3, r0, #1
 8019fc2:	d102      	bne.n	8019fca <_lseek_r+0x1e>
 8019fc4:	682b      	ldr	r3, [r5, #0]
 8019fc6:	b103      	cbz	r3, 8019fca <_lseek_r+0x1e>
 8019fc8:	6023      	str	r3, [r4, #0]
 8019fca:	bd38      	pop	{r3, r4, r5, pc}
 8019fcc:	2000f9b8 	.word	0x2000f9b8

08019fd0 <__swhatbuf_r>:
 8019fd0:	b570      	push	{r4, r5, r6, lr}
 8019fd2:	460e      	mov	r6, r1
 8019fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fd8:	2900      	cmp	r1, #0
 8019fda:	b096      	sub	sp, #88	; 0x58
 8019fdc:	4614      	mov	r4, r2
 8019fde:	461d      	mov	r5, r3
 8019fe0:	da07      	bge.n	8019ff2 <__swhatbuf_r+0x22>
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	602b      	str	r3, [r5, #0]
 8019fe6:	89b3      	ldrh	r3, [r6, #12]
 8019fe8:	061a      	lsls	r2, r3, #24
 8019fea:	d410      	bmi.n	801a00e <__swhatbuf_r+0x3e>
 8019fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ff0:	e00e      	b.n	801a010 <__swhatbuf_r+0x40>
 8019ff2:	466a      	mov	r2, sp
 8019ff4:	f000 f8ae 	bl	801a154 <_fstat_r>
 8019ff8:	2800      	cmp	r0, #0
 8019ffa:	dbf2      	blt.n	8019fe2 <__swhatbuf_r+0x12>
 8019ffc:	9a01      	ldr	r2, [sp, #4]
 8019ffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a006:	425a      	negs	r2, r3
 801a008:	415a      	adcs	r2, r3
 801a00a:	602a      	str	r2, [r5, #0]
 801a00c:	e7ee      	b.n	8019fec <__swhatbuf_r+0x1c>
 801a00e:	2340      	movs	r3, #64	; 0x40
 801a010:	2000      	movs	r0, #0
 801a012:	6023      	str	r3, [r4, #0]
 801a014:	b016      	add	sp, #88	; 0x58
 801a016:	bd70      	pop	{r4, r5, r6, pc}

0801a018 <__smakebuf_r>:
 801a018:	898b      	ldrh	r3, [r1, #12]
 801a01a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a01c:	079d      	lsls	r5, r3, #30
 801a01e:	4606      	mov	r6, r0
 801a020:	460c      	mov	r4, r1
 801a022:	d507      	bpl.n	801a034 <__smakebuf_r+0x1c>
 801a024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a028:	6023      	str	r3, [r4, #0]
 801a02a:	6123      	str	r3, [r4, #16]
 801a02c:	2301      	movs	r3, #1
 801a02e:	6163      	str	r3, [r4, #20]
 801a030:	b002      	add	sp, #8
 801a032:	bd70      	pop	{r4, r5, r6, pc}
 801a034:	ab01      	add	r3, sp, #4
 801a036:	466a      	mov	r2, sp
 801a038:	f7ff ffca 	bl	8019fd0 <__swhatbuf_r>
 801a03c:	9900      	ldr	r1, [sp, #0]
 801a03e:	4605      	mov	r5, r0
 801a040:	4630      	mov	r0, r6
 801a042:	f7fe fde9 	bl	8018c18 <_malloc_r>
 801a046:	b948      	cbnz	r0, 801a05c <__smakebuf_r+0x44>
 801a048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a04c:	059a      	lsls	r2, r3, #22
 801a04e:	d4ef      	bmi.n	801a030 <__smakebuf_r+0x18>
 801a050:	f023 0303 	bic.w	r3, r3, #3
 801a054:	f043 0302 	orr.w	r3, r3, #2
 801a058:	81a3      	strh	r3, [r4, #12]
 801a05a:	e7e3      	b.n	801a024 <__smakebuf_r+0xc>
 801a05c:	4b0d      	ldr	r3, [pc, #52]	; (801a094 <__smakebuf_r+0x7c>)
 801a05e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a060:	89a3      	ldrh	r3, [r4, #12]
 801a062:	6020      	str	r0, [r4, #0]
 801a064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a068:	81a3      	strh	r3, [r4, #12]
 801a06a:	9b00      	ldr	r3, [sp, #0]
 801a06c:	6163      	str	r3, [r4, #20]
 801a06e:	9b01      	ldr	r3, [sp, #4]
 801a070:	6120      	str	r0, [r4, #16]
 801a072:	b15b      	cbz	r3, 801a08c <__smakebuf_r+0x74>
 801a074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a078:	4630      	mov	r0, r6
 801a07a:	f000 f87d 	bl	801a178 <_isatty_r>
 801a07e:	b128      	cbz	r0, 801a08c <__smakebuf_r+0x74>
 801a080:	89a3      	ldrh	r3, [r4, #12]
 801a082:	f023 0303 	bic.w	r3, r3, #3
 801a086:	f043 0301 	orr.w	r3, r3, #1
 801a08a:	81a3      	strh	r3, [r4, #12]
 801a08c:	89a0      	ldrh	r0, [r4, #12]
 801a08e:	4305      	orrs	r5, r0
 801a090:	81a5      	strh	r5, [r4, #12]
 801a092:	e7cd      	b.n	801a030 <__smakebuf_r+0x18>
 801a094:	08019109 	.word	0x08019109

0801a098 <_malloc_usable_size_r>:
 801a098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a09c:	1f18      	subs	r0, r3, #4
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	bfbc      	itt	lt
 801a0a2:	580b      	ldrlt	r3, [r1, r0]
 801a0a4:	18c0      	addlt	r0, r0, r3
 801a0a6:	4770      	bx	lr

0801a0a8 <_read_r>:
 801a0a8:	b538      	push	{r3, r4, r5, lr}
 801a0aa:	4d07      	ldr	r5, [pc, #28]	; (801a0c8 <_read_r+0x20>)
 801a0ac:	4604      	mov	r4, r0
 801a0ae:	4608      	mov	r0, r1
 801a0b0:	4611      	mov	r1, r2
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	602a      	str	r2, [r5, #0]
 801a0b6:	461a      	mov	r2, r3
 801a0b8:	f7e7 fb34 	bl	8001724 <_read>
 801a0bc:	1c43      	adds	r3, r0, #1
 801a0be:	d102      	bne.n	801a0c6 <_read_r+0x1e>
 801a0c0:	682b      	ldr	r3, [r5, #0]
 801a0c2:	b103      	cbz	r3, 801a0c6 <_read_r+0x1e>
 801a0c4:	6023      	str	r3, [r4, #0]
 801a0c6:	bd38      	pop	{r3, r4, r5, pc}
 801a0c8:	2000f9b8 	.word	0x2000f9b8

0801a0cc <_raise_r>:
 801a0cc:	291f      	cmp	r1, #31
 801a0ce:	b538      	push	{r3, r4, r5, lr}
 801a0d0:	4604      	mov	r4, r0
 801a0d2:	460d      	mov	r5, r1
 801a0d4:	d904      	bls.n	801a0e0 <_raise_r+0x14>
 801a0d6:	2316      	movs	r3, #22
 801a0d8:	6003      	str	r3, [r0, #0]
 801a0da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0de:	bd38      	pop	{r3, r4, r5, pc}
 801a0e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a0e2:	b112      	cbz	r2, 801a0ea <_raise_r+0x1e>
 801a0e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a0e8:	b94b      	cbnz	r3, 801a0fe <_raise_r+0x32>
 801a0ea:	4620      	mov	r0, r4
 801a0ec:	f000 f830 	bl	801a150 <_getpid_r>
 801a0f0:	462a      	mov	r2, r5
 801a0f2:	4601      	mov	r1, r0
 801a0f4:	4620      	mov	r0, r4
 801a0f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a0fa:	f000 b817 	b.w	801a12c <_kill_r>
 801a0fe:	2b01      	cmp	r3, #1
 801a100:	d00a      	beq.n	801a118 <_raise_r+0x4c>
 801a102:	1c59      	adds	r1, r3, #1
 801a104:	d103      	bne.n	801a10e <_raise_r+0x42>
 801a106:	2316      	movs	r3, #22
 801a108:	6003      	str	r3, [r0, #0]
 801a10a:	2001      	movs	r0, #1
 801a10c:	e7e7      	b.n	801a0de <_raise_r+0x12>
 801a10e:	2400      	movs	r4, #0
 801a110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a114:	4628      	mov	r0, r5
 801a116:	4798      	blx	r3
 801a118:	2000      	movs	r0, #0
 801a11a:	e7e0      	b.n	801a0de <_raise_r+0x12>

0801a11c <raise>:
 801a11c:	4b02      	ldr	r3, [pc, #8]	; (801a128 <raise+0xc>)
 801a11e:	4601      	mov	r1, r0
 801a120:	6818      	ldr	r0, [r3, #0]
 801a122:	f7ff bfd3 	b.w	801a0cc <_raise_r>
 801a126:	bf00      	nop
 801a128:	200003d8 	.word	0x200003d8

0801a12c <_kill_r>:
 801a12c:	b538      	push	{r3, r4, r5, lr}
 801a12e:	4d07      	ldr	r5, [pc, #28]	; (801a14c <_kill_r+0x20>)
 801a130:	2300      	movs	r3, #0
 801a132:	4604      	mov	r4, r0
 801a134:	4608      	mov	r0, r1
 801a136:	4611      	mov	r1, r2
 801a138:	602b      	str	r3, [r5, #0]
 801a13a:	f7e7 fad9 	bl	80016f0 <_kill>
 801a13e:	1c43      	adds	r3, r0, #1
 801a140:	d102      	bne.n	801a148 <_kill_r+0x1c>
 801a142:	682b      	ldr	r3, [r5, #0]
 801a144:	b103      	cbz	r3, 801a148 <_kill_r+0x1c>
 801a146:	6023      	str	r3, [r4, #0]
 801a148:	bd38      	pop	{r3, r4, r5, pc}
 801a14a:	bf00      	nop
 801a14c:	2000f9b8 	.word	0x2000f9b8

0801a150 <_getpid_r>:
 801a150:	f7e7 bac6 	b.w	80016e0 <_getpid>

0801a154 <_fstat_r>:
 801a154:	b538      	push	{r3, r4, r5, lr}
 801a156:	4d07      	ldr	r5, [pc, #28]	; (801a174 <_fstat_r+0x20>)
 801a158:	2300      	movs	r3, #0
 801a15a:	4604      	mov	r4, r0
 801a15c:	4608      	mov	r0, r1
 801a15e:	4611      	mov	r1, r2
 801a160:	602b      	str	r3, [r5, #0]
 801a162:	f7e7 fb24 	bl	80017ae <_fstat>
 801a166:	1c43      	adds	r3, r0, #1
 801a168:	d102      	bne.n	801a170 <_fstat_r+0x1c>
 801a16a:	682b      	ldr	r3, [r5, #0]
 801a16c:	b103      	cbz	r3, 801a170 <_fstat_r+0x1c>
 801a16e:	6023      	str	r3, [r4, #0]
 801a170:	bd38      	pop	{r3, r4, r5, pc}
 801a172:	bf00      	nop
 801a174:	2000f9b8 	.word	0x2000f9b8

0801a178 <_isatty_r>:
 801a178:	b538      	push	{r3, r4, r5, lr}
 801a17a:	4d06      	ldr	r5, [pc, #24]	; (801a194 <_isatty_r+0x1c>)
 801a17c:	2300      	movs	r3, #0
 801a17e:	4604      	mov	r4, r0
 801a180:	4608      	mov	r0, r1
 801a182:	602b      	str	r3, [r5, #0]
 801a184:	f7e7 fb23 	bl	80017ce <_isatty>
 801a188:	1c43      	adds	r3, r0, #1
 801a18a:	d102      	bne.n	801a192 <_isatty_r+0x1a>
 801a18c:	682b      	ldr	r3, [r5, #0]
 801a18e:	b103      	cbz	r3, 801a192 <_isatty_r+0x1a>
 801a190:	6023      	str	r3, [r4, #0]
 801a192:	bd38      	pop	{r3, r4, r5, pc}
 801a194:	2000f9b8 	.word	0x2000f9b8

0801a198 <_init>:
 801a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a19a:	bf00      	nop
 801a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a19e:	bc08      	pop	{r3}
 801a1a0:	469e      	mov	lr, r3
 801a1a2:	4770      	bx	lr

0801a1a4 <_fini>:
 801a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1a6:	bf00      	nop
 801a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1aa:	bc08      	pop	{r3}
 801a1ac:	469e      	mov	lr, r3
 801a1ae:	4770      	bx	lr
